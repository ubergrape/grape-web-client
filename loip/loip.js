/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";
	var style = __webpack_require__(1);
	exports.App = __webpack_require__(3);
	exports.UI = __webpack_require__(28);
	exports.broker = __webpack_require__(42);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(2)();
	// imports


	// module
	exports.push([module.id, "ul.alerts li,\n.popover li,\n.roompopover .room,\n.roomcreationpopover .room,\n.roompopover .room-info,\n.roomcreationpopover .room-info,\n.user-list li,\n.roommemberspopover .invite-to-room,\n.search-results,\n.search-results .result-info,\n.search-results .result-filters,\n.search-results .result-filters ul,\n.result-list > li .item-object,\n.result-list > li .item-footer,\n.welcome-message .welcome-tasks,\n.welcome-message .welcome-tasks .invite-to-room,\n.welcome-message .welcome-tasks .autocomplete-wrapper .autocomplete,\n.message-group,\n.room-header .room-header-wrap .room-info-wrap .options-wrap,\n.room-header .room-header-wrap .room-info-wrap .rename-options-wrap,\n.org-info,\n.nav-tabs,\n.nav-title-wrap,\n.nav-list .item,\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-option {\n  zoom: 1;\n}\nul.alerts li:after,\n.popover li:after,\n.roompopover .room:after,\n.roomcreationpopover .room:after,\n.roompopover .room-info:after,\n.roomcreationpopover .room-info:after,\n.user-list li:after,\n.roommemberspopover .invite-to-room:after,\n.search-results:after,\n.search-results .result-info:after,\n.search-results .result-filters:after,\n.search-results .result-filters ul:after,\n.result-list > li .item-object:after,\n.result-list > li .item-footer:after,\n.welcome-message .welcome-tasks:after,\n.welcome-message .welcome-tasks .invite-to-room:after,\n.welcome-message .welcome-tasks .autocomplete-wrapper .autocomplete:after,\n.message-group:after,\n.room-header .room-header-wrap .room-info-wrap .options-wrap:after,\n.room-header .room-header-wrap .room-info-wrap .rename-options-wrap:after,\n.org-info:after,\n.nav-tabs:after,\n.nav-title-wrap:after,\n.nav-list .item:after,\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-option:after,\nul.alerts li:before,\n.popover li:before,\n.roompopover .room:before,\n.roomcreationpopover .room:before,\n.roompopover .room-info:before,\n.roomcreationpopover .room-info:before,\n.user-list li:before,\n.roommemberspopover .invite-to-room:before,\n.search-results:before,\n.search-results .result-info:before,\n.search-results .result-filters:before,\n.search-results .result-filters ul:before,\n.result-list > li .item-object:before,\n.result-list > li .item-footer:before,\n.welcome-message .welcome-tasks:before,\n.welcome-message .welcome-tasks .invite-to-room:before,\n.welcome-message .welcome-tasks .autocomplete-wrapper .autocomplete:before,\n.message-group:before,\n.room-header .room-header-wrap .room-info-wrap .options-wrap:before,\n.room-header .room-header-wrap .room-info-wrap .rename-options-wrap:before,\n.org-info:before,\n.nav-tabs:before,\n.nav-title-wrap:before,\n.nav-list .item:before,\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-option:before {\n  content: \"\";\n  display: table;\n}\nul.alerts li:after,\n.popover li:after,\n.roompopover .room:after,\n.roomcreationpopover .room:after,\n.roompopover .room-info:after,\n.roomcreationpopover .room-info:after,\n.user-list li:after,\n.roommemberspopover .invite-to-room:after,\n.search-results:after,\n.search-results .result-info:after,\n.search-results .result-filters:after,\n.search-results .result-filters ul:after,\n.result-list > li .item-object:after,\n.result-list > li .item-footer:after,\n.welcome-message .welcome-tasks:after,\n.welcome-message .welcome-tasks .invite-to-room:after,\n.welcome-message .welcome-tasks .autocomplete-wrapper .autocomplete:after,\n.message-group:after,\n.room-header .room-header-wrap .room-info-wrap .options-wrap:after,\n.room-header .room-header-wrap .room-info-wrap .rename-options-wrap:after,\n.org-info:after,\n.nav-tabs:after,\n.nav-title-wrap:after,\n.nav-list .item:after,\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-option:after {\n  clear: both;\n}\n.centered {\n  text-align: center;\n}\n.userpopover .user-status-form .user-status-icon,\n.organizationpopover .user-status-form .user-status-icon,\nlabel.radio-label,\n.pmpopover li.item,\n.roommemberspopover li.item,\n.label,\n.search-form .close,\n#dialog a.creator-name,\n.dialog a.creator-name,\n.introjs-tooltip a.creator-name,\n.message-content .message .edit,\n.bigarrow,\n.room-header .room-header-wrap .room-info-wrap .options-wrap,\n.room-header .room-header-wrap .room-info-wrap .rename-options-wrap,\n.room-header .room-header-wrap .room-info-wrap .room-users-wrap,\n.room-header .room-header-wrap .user-menu-wrap,\n.nav-title-wrap,\n.footer .search-browser-button,\n.footer .controls-group .emoji-browser-button,\n.footer .controls-group .uploader,\n.footer .controls-group .info-markdown,\na {\n  cursor: pointer;\n}\n.search-results .result-filters ul a,\n.result-list > li .item-footer li a,\n.client-body a,\n.messageinfo .message-author,\n.messageinfo a.timelink,\n.message-content .message .outertime,\n.bigarrow {\n  color: inherit;\n  text-decoration: none;\n}\n.search-results .result-filters ul a:hover,\n.result-list > li .item-footer li a:hover,\n.client-body a:hover,\n.messageinfo .message-author:hover,\n.messageinfo a.timelink:hover,\n.message-content .message .outertime:hover,\n.bigarrow:hover {\n  color: #4fc1e9;\n  text-decoration: underline;\n}\n.roompopover .room-info li,\n.roomcreationpopover .room-info li,\n.search-results .result-filters ul li,\n.result-list > li .item-footer li {\n  float: left;\n  margin-right: 8px;\n}\n.roompopover .room-info li:last-of-type,\n.roomcreationpopover .room-info li:last-of-type,\n.search-results .result-filters ul li:last-of-type,\n.result-list > li .item-footer li:last-of-type {\n  margin-right: 0;\n}\n.activity.message .source-wrap,\n.result-list > li .item-type,\n.autocomplete-wrapper .Textcomplete-inner .option-wrap {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: block;\n}\n.popover li,\n.user-list li,\n.org-info,\n.nav-list .item {\n  padding: 0px;\n}\n.popover li > a,\n.user-list li > a,\n.org-info > a,\n.nav-list .item > a {\n  display: block;\n  text-decoration: none;\n}\n.popover li .icon,\n.user-list li .icon,\n.org-info .icon,\n.nav-list .item .icon,\n.popover li .avatar-wrap,\n.user-list li .avatar-wrap,\n.org-info .avatar-wrap,\n.nav-list .item .avatar-wrap,\n.popover li .unread,\n.user-list li .unread,\n.org-info .unread,\n.nav-list .item .unread {\n  text-align: center;\n}\n.popover li .icon,\n.user-list li .icon,\n.org-info .icon,\n.nav-list .item .icon,\n.popover li .avatar-wrap,\n.user-list li .avatar-wrap,\n.org-info .avatar-wrap,\n.nav-list .item .avatar-wrap {\n  float: left;\n  margin-right: 5px;\n  width: 20px;\n}\n.fl-notification,\n.fl-mention,\n.toggle {\n  float: right;\n  margin-left: 5px;\n  font-family: roboto;\n}\n.fl-notification,\n.fl-mention {\n  margin: -3px 0 0 5px;\n  font-size: 10px;\n  line-height: 16px;\n  min-width: 21px;\n  padding: 0px 3px;\n  border-radius: 2px;\n  text-align: center;\n  border: none;\n}\n.fl-notification {\n  border: 2px solid #9ccb77;\n  color: #9ccb77;\n}\n.fl-mention {\n  border: 2px solid #6d8f52;\n  color: #6d8f52;\n}\n.search-results {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999;\n  background: #fff;\n  background: rgba(255,255,255,0.98);\n  padding: 17px 30px;\n  overflow: hidden;\n  overflow-y: auto;\n}\n.avatar-wrap {\n  position: relative;\n  display: inline-block;\n  margin-top: -3px;\n}\n.avatar-wrap img {\n  float: left;\n  border-radius: 50%;\n  z-index: 2;\n}\n.avatar-wrap .online,\n.avatar-wrap .offline {\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 8px;\n  height: 8px;\n  z-index: 12;\n  border-radius: 50%;\n}\n.avatar-wrap div {\n  overflow: hidden;\n  margin-left: 4px;\n}\n.online {\n  background: #9ccb77;\n}\n.offline {\n  background: #fc6e51;\n}\n.invisible {\n  display: none;\n}\n.mar-t10 {\n  margin-top: 10px;\n}\n.mar-t20 {\n  margin-top: 20px;\n}\n.mar-t30 {\n  margin-top: 30px;\n}\n.mar-t40 {\n  margin-top: 40px;\n}\n.mar-b10 {\n  margin-bottom: 10px;\n}\n.mar-b20 {\n  margin-bottom: 20px;\n}\n.mar-b30 {\n  margin-bottom: 30px;\n}\n.mar-b40 {\n  margin-bottom: 40px;\n}\n@-moz-keyframes slidein {\n  0% {\n    opacity: 0.4;\n    transform: translateY(-30px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0px);\n  }\n}\n@-webkit-keyframes slidein {\n  0% {\n    opacity: 0.4;\n    transform: translateY(-30px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0px);\n  }\n}\n@-o-keyframes slidein {\n  0% {\n    opacity: 0.4;\n    transform: translateY(-30px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0px);\n  }\n}\n@keyframes slidein {\n  0% {\n    opacity: 0.4;\n    transform: translateY(-30px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0px);\n  }\n}\n@-moz-keyframes overlayFlowIn {\n  0% {\n    opacity: 0;\n    background: rgba(59,175,218,0.75);\n  }\n  0% {\n    opacity: 0.5;\n    background: rgba(84,47,89,0.75);\n  }\n  100% {\n    opacity: 1;\n    background: rgba(0,0,0,0.75);\n  }\n}\n@-webkit-keyframes overlayFlowIn {\n  0% {\n    opacity: 0;\n    background: rgba(59,175,218,0.75);\n  }\n  0% {\n    opacity: 0.5;\n    background: rgba(84,47,89,0.75);\n  }\n  100% {\n    opacity: 1;\n    background: rgba(0,0,0,0.75);\n  }\n}\n@-o-keyframes overlayFlowIn {\n  0% {\n    opacity: 0;\n    background: rgba(59,175,218,0.75);\n  }\n  0% {\n    opacity: 0.5;\n    background: rgba(84,47,89,0.75);\n  }\n  100% {\n    opacity: 1;\n    background: rgba(0,0,0,0.75);\n  }\n}\n@keyframes overlayFlowIn {\n  0% {\n    opacity: 0;\n    background: rgba(59,175,218,0.75);\n  }\n  0% {\n    opacity: 0.5;\n    background: rgba(84,47,89,0.75);\n  }\n  100% {\n    opacity: 1;\n    background: rgba(0,0,0,0.75);\n  }\n}\n@-moz-keyframes hifromthebottom {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(0, 20px, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes hifromthebottom {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(0, 20px, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-o-keyframes hifromthebottom {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(0, 20px, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@keyframes hifromthebottom {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(0, 20px, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-moz-keyframes hifromthetop {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(0, -20px, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes hifromthetop {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(0, -20px, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-o-keyframes hifromthetop {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(0, -20px, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@keyframes hifromthetop {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(0, -20px, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-moz-keyframes hifromthetopNoShadow {\n  0% {\n    transform: scaleX(0.96) translate3d(0, -20px, 0);\n    opacity: 0;\n  }\n  100% {\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 0.98;\n  }\n}\n@-webkit-keyframes hifromthetopNoShadow {\n  0% {\n    transform: scaleX(0.96) translate3d(0, -20px, 0);\n    opacity: 0;\n  }\n  100% {\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 0.98;\n  }\n}\n@-o-keyframes hifromthetopNoShadow {\n  0% {\n    transform: scaleX(0.96) translate3d(0, -20px, 0);\n    opacity: 0;\n  }\n  100% {\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 0.98;\n  }\n}\n@keyframes hifromthetopNoShadow {\n  0% {\n    transform: scaleX(0.96) translate3d(0, -20px, 0);\n    opacity: 0;\n  }\n  100% {\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 0.98;\n  }\n}\n@-moz-keyframes hifromthebottomNoShadow {\n  0% {\n    transform: scaleX(0.96) translate3d(0, 20px, 0);\n    opacity: 0;\n  }\n  100% {\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes hifromthebottomNoShadow {\n  0% {\n    transform: scaleX(0.96) translate3d(0, 20px, 0);\n    opacity: 0;\n  }\n  100% {\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-o-keyframes hifromthebottomNoShadow {\n  0% {\n    transform: scaleX(0.96) translate3d(0, 20px, 0);\n    opacity: 0;\n  }\n  100% {\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@keyframes hifromthebottomNoShadow {\n  0% {\n    transform: scaleX(0.96) translate3d(0, 20px, 0);\n    opacity: 0;\n  }\n  100% {\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-moz-keyframes hifromtheright {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(20px, 0, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes hifromtheright {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(20px, 0, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-o-keyframes hifromtheright {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(20px, 0, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@keyframes hifromtheright {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(20px, 0, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-moz-keyframes hifromtheleft {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(-20px, 0, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes hifromtheleft {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(-20px, 0, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@-o-keyframes hifromtheleft {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(-20px, 0, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n@keyframes hifromtheleft {\n  0% {\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12);\n    transform: scaleX(0.96) translate3d(-20px, 0, 0);\n    opacity: 0;\n  }\n  100% {\n    box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n    transform: scaleX(1) translate3d(0, 0, 0);\n    opacity: 1;\n  }\n}\n.button-small,\n.button-inset,\n.popover h4,\n.roompopover .room-info,\n.roomcreationpopover .room-info,\n.label,\n.result-list > li .item-footer,\n.message-content .message .outertime,\nspan.author-deleted,\n.typing-notification,\n.nav-title-wrap .nav-title,\n.nav-list .item.deleted span.user-deleted,\nspan.no-messages,\n.footer .edit-message,\n.footer .hint-box,\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-headline,\n.autocomplete-wrapper .Textcomplete-inner .group,\n.autocomplete-wrapper .Textcomplete-inner time,\n.autocomplete-wrapper .Textcomplete-inner.external .powered-by-facet,\n.autocomplete-wrapper .autocomplete-filter-menu a {\n  font-size: 11px;\n  font-size: 0.75rem;\n  line-height: 12px;\n  line-height: 0.875rem;\n}\n.activity.message .messageinfo,\n.result-list > li .item-content .item-text,\n.welcome-message,\n.message-group .message-inner-wrap,\n.org-info .logo .name,\n.nav-list .item .name,\n.footer grape-input [contenteditable=\"true\"] {\n  font-size: 15px;\n  font-size: 1.1rem;\n  line-height: 24px;\n  line-height: 1.7rem;\n}\n#dialog h2,\n.dialog h2,\n.introjs-tooltip h2,\n.welcome-message h2,\n.welcome-message h3,\n.bigarrow,\n.room-header .room-header-wrap .room-info-wrap .room-name {\n  font-size: 22px;\n  font-size: 1.6rem;\n  line-height: 25px;\n  line-height: 1.8rem;\n}\n#drop-anywhere .drop-inner-wrap p.main,\n.history .preloader h3 {\n  font-size: 28px;\n  font-size: 2rem;\n  line-height: 31px;\n  line-height: 2.2rem;\n}\nul.alerts li,\nul.alerts li .button,\n#dialog h3,\n.dialog h3,\n.introjs-tooltip h3,\n#dialog h4,\n.dialog h4,\n.introjs-tooltip h4,\n#dialog h5,\n.dialog h5,\n.introjs-tooltip h5,\n.introjs-button,\n.messageinfo,\n.navigation {\n  font-size: 14px;\n  font-size: 1rem;\n  line-height: 21px;\n  line-height: 1.5rem;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n  padding: 0;\n}\n.footer grape-input [contenteditable=\"true\"],\nhtml,\nbody {\n  font-family: 'Roboto', sans-serif;\n}\n@font-face {\n  font-family: 'FontAwesome';\n  src: url(" + __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../fonts/fontawesome-webfont.eot?v=4.1.0\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())) + ");\n  src: url(" + __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../fonts/fontawesome-webfont.eot\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())) + "?#iefix&v=4.1.0) format('embedded-opentype'), url(" + __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../fonts/fontawesome-webfont.woff?v=4.1.0\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())) + ") format('woff'), url(" + __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../fonts/fontawesome-webfont.ttf?v=4.1.0\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())) + ") format('truetype'), url(" + __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../fonts/fontawesome-webfont.svg?v=4.1.0\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())) + "#fontawesomeregular) format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n/*\n *  Font Awesome 4.1.0 by @davegandy - http://fontawesome.io - @fontawesome\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n */\n.fa {\n  display: inline-block;\n  font-family: FontAwesome;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.fa-lg {\n  font-size: 1.33333333em;\n  line-height: 0.75em;\n  vertical-align: -15%;\n}\n.fa-2x {\n  font-size: 2em;\n}\n.fa-3x {\n  font-size: 3em;\n}\n.fa-4x {\n  font-size: 4em;\n}\n.fa-5x {\n  font-size: 5em;\n}\n.fa-fw {\n  width: 1.28571429em;\n  text-align: center;\n}\n.fa-ul {\n  padding-left: 0;\n  margin-left: 2.14285714em;\n  list-style-type: none;\n}\n.fa-ul > li {\n  position: relative;\n}\n.fa-li {\n  position: absolute;\n  left: -2.14285714em;\n  width: 2.14285714em;\n  top: 0.14285714em;\n  text-align: center;\n}\n.fa-li.fa-lg {\n  left: -1.85714286em;\n}\n.fa-border {\n  padding: 0.2em 0.25em 0.15em;\n  border: solid 0.08em #eee;\n  border-radius: 0.1em;\n}\n.pull-right {\n  float: right;\n}\n.pull-left {\n  float: left;\n}\n.fa.pull-left {\n  margin-right: 0.3em;\n}\n.fa.pull-right {\n  margin-left: 0.3em;\n}\n.fa-spin {\n  -webkit-animation: spin 2s infinite linear;\n  -moz-animation: spin 2s infinite linear;\n  -o-animation: spin 2s infinite linear;\n  animation: spin 2s infinite linear;\n}\n@-moz-keyframes spin {\n  0% {\n    -moz-transform: rotate(0deg);\n  }\n  100% {\n    -moz-transform: rotate(359deg);\n  }\n}\n@-webkit-keyframes spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n  }\n}\n@-o-keyframes spin {\n  0% {\n    -o-transform: rotate(0deg);\n  }\n  100% {\n    -o-transform: rotate(359deg);\n  }\n}\n.fa-rotate-90 {\n  transform: rotate(90deg);\n}\n.fa-rotate-180 {\n  transform: rotate(180deg);\n}\n.fa-rotate-270 {\n  transform: rotate(270deg);\n}\n.fa-flip-horizontal {\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  transform: scale(1, -1);\n}\n.fa-stack {\n  position: relative;\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  line-height: 2em;\n  vertical-align: middle;\n}\n.fa-stack-1x,\n.fa-stack-2x {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n.fa-stack-1x {\n  line-height: inherit;\n}\n.fa-stack-2x {\n  font-size: 2em;\n}\n.fa-inverse {\n  color: #fff;\n}\n.fa-glass:before {\n  content: \"\\f000\";\n}\n.fa-music:before {\n  content: \"\\f001\";\n}\n.fa-search:before {\n  content: \"\\f002\";\n}\n.fa-envelope-o:before {\n  content: \"\\f003\";\n}\n.fa-heart:before {\n  content: \"\\f004\";\n}\n.fa-star:before {\n  content: \"\\f005\";\n}\n.fa-star-o:before {\n  content: \"\\f006\";\n}\n.fa-user:before {\n  content: \"\\f007\";\n}\n.fa-film:before {\n  content: \"\\f008\";\n}\n.fa-th-large:before {\n  content: \"\\f009\";\n}\n.fa-th:before {\n  content: \"\\f00a\";\n}\n.fa-th-list:before {\n  content: \"\\f00b\";\n}\n.fa-check:before {\n  content: \"\\f00c\";\n}\n.fa-times:before {\n  content: \"\\f00d\";\n}\n.fa-search-plus:before {\n  content: \"\\f00e\";\n}\n.fa-search-minus:before {\n  content: \"\\f010\";\n}\n.fa-power-off:before {\n  content: \"\\f011\";\n}\n.fa-signal:before {\n  content: \"\\f012\";\n}\n.fa-gear:before,\n.fa-cog:before {\n  content: \"\\f013\";\n}\n.fa-trash-o:before {\n  content: \"\\f014\";\n}\n.fa-home:before {\n  content: \"\\f015\";\n}\n.fa-file-o:before {\n  content: \"\\f016\";\n}\n.fa-clock-o:before {\n  content: \"\\f017\";\n}\n.fa-road:before {\n  content: \"\\f018\";\n}\n.fa-download:before {\n  content: \"\\f019\";\n}\n.fa-arrow-circle-o-down:before {\n  content: \"\\f01a\";\n}\n.fa-arrow-circle-o-up:before {\n  content: \"\\f01b\";\n}\n.fa-inbox:before {\n  content: \"\\f01c\";\n}\n.fa-play-circle-o:before {\n  content: \"\\f01d\";\n}\n.fa-rotate-right:before,\n.fa-repeat:before {\n  content: \"\\f01e\";\n}\n.fa-refresh:before {\n  content: \"\\f021\";\n}\n.fa-list-alt:before {\n  content: \"\\f022\";\n}\n.fa-lock:before {\n  content: \"\\f023\";\n}\n.fa-flag:before {\n  content: \"\\f024\";\n}\n.fa-headphones:before {\n  content: \"\\f025\";\n}\n.fa-volume-off:before {\n  content: \"\\f026\";\n}\n.fa-volume-down:before {\n  content: \"\\f027\";\n}\n.fa-volume-up:before {\n  content: \"\\f028\";\n}\n.fa-qrcode:before {\n  content: \"\\f029\";\n}\n.fa-barcode:before {\n  content: \"\\f02a\";\n}\n.fa-tag:before {\n  content: \"\\f02b\";\n}\n.fa-tags:before {\n  content: \"\\f02c\";\n}\n.fa-book:before {\n  content: \"\\f02d\";\n}\n.fa-bookmark:before {\n  content: \"\\f02e\";\n}\n.fa-print:before {\n  content: \"\\f02f\";\n}\n.fa-camera:before {\n  content: \"\\f030\";\n}\n.fa-font:before {\n  content: \"\\f031\";\n}\n.fa-bold:before {\n  content: \"\\f032\";\n}\n.fa-italic:before {\n  content: \"\\f033\";\n}\n.fa-text-height:before {\n  content: \"\\f034\";\n}\n.fa-text-width:before {\n  content: \"\\f035\";\n}\n.fa-align-left:before {\n  content: \"\\f036\";\n}\n.fa-align-center:before {\n  content: \"\\f037\";\n}\n.fa-align-right:before {\n  content: \"\\f038\";\n}\n.fa-align-justify:before {\n  content: \"\\f039\";\n}\n.fa-list:before {\n  content: \"\\f03a\";\n}\n.fa-dedent:before,\n.fa-outdent:before {\n  content: \"\\f03b\";\n}\n.fa-indent:before {\n  content: \"\\f03c\";\n}\n.fa-video-camera:before {\n  content: \"\\f03d\";\n}\n.fa-photo:before,\n.fa-image:before,\n.fa-picture-o:before {\n  content: \"\\f03e\";\n}\n.fa-pencil:before {\n  content: \"\\f040\";\n}\n.fa-map-marker:before {\n  content: \"\\f041\";\n}\n.fa-adjust:before {\n  content: \"\\f042\";\n}\n.fa-tint:before {\n  content: \"\\f043\";\n}\n.fa-edit:before,\n.fa-pencil-square-o:before {\n  content: \"\\f044\";\n}\n.fa-share-square-o:before {\n  content: \"\\f045\";\n}\n.fa-check-square-o:before {\n  content: \"\\f046\";\n}\n.fa-arrows:before {\n  content: \"\\f047\";\n}\n.fa-step-backward:before {\n  content: \"\\f048\";\n}\n.fa-fast-backward:before {\n  content: \"\\f049\";\n}\n.fa-backward:before {\n  content: \"\\f04a\";\n}\n.fa-play:before {\n  content: \"\\f04b\";\n}\n.fa-pause:before {\n  content: \"\\f04c\";\n}\n.fa-stop:before {\n  content: \"\\f04d\";\n}\n.fa-forward:before {\n  content: \"\\f04e\";\n}\n.fa-fast-forward:before {\n  content: \"\\f050\";\n}\n.fa-step-forward:before {\n  content: \"\\f051\";\n}\n.fa-eject:before {\n  content: \"\\f052\";\n}\n.fa-chevron-left:before {\n  content: \"\\f053\";\n}\n.fa-chevron-right:before {\n  content: \"\\f054\";\n}\n.fa-plus-circle:before {\n  content: \"\\f055\";\n}\n.fa-minus-circle:before {\n  content: \"\\f056\";\n}\n.fa-times-circle:before {\n  content: \"\\f057\";\n}\n.fa-check-circle:before {\n  content: \"\\f058\";\n}\n.fa-question-circle:before {\n  content: \"\\f059\";\n}\n.fa-info-circle:before {\n  content: \"\\f05a\";\n}\n.fa-crosshairs:before {\n  content: \"\\f05b\";\n}\n.fa-times-circle-o:before {\n  content: \"\\f05c\";\n}\n.fa-check-circle-o:before {\n  content: \"\\f05d\";\n}\n.fa-ban:before {\n  content: \"\\f05e\";\n}\n.fa-arrow-left:before {\n  content: \"\\f060\";\n}\n.fa-arrow-right:before {\n  content: \"\\f061\";\n}\n.fa-arrow-up:before {\n  content: \"\\f062\";\n}\n.fa-arrow-down:before {\n  content: \"\\f063\";\n}\n.fa-mail-forward:before,\n.fa-share:before {\n  content: \"\\f064\";\n}\n.fa-expand:before {\n  content: \"\\f065\";\n}\n.fa-compress:before {\n  content: \"\\f066\";\n}\n.fa-plus:before {\n  content: \"\\f067\";\n}\n.fa-minus:before {\n  content: \"\\f068\";\n}\n.fa-asterisk:before {\n  content: \"\\f069\";\n}\n.fa-exclamation-circle:before {\n  content: \"\\f06a\";\n}\n.fa-gift:before {\n  content: \"\\f06b\";\n}\n.fa-leaf:before {\n  content: \"\\f06c\";\n}\n.fa-fire:before {\n  content: \"\\f06d\";\n}\n.fa-eye:before {\n  content: \"\\f06e\";\n}\n.fa-eye-slash:before {\n  content: \"\\f070\";\n}\n.fa-warning:before,\n.fa-exclamation-triangle:before {\n  content: \"\\f071\";\n}\n.fa-plane:before {\n  content: \"\\f072\";\n}\n.fa-calendar:before {\n  content: \"\\f073\";\n}\n.fa-random:before {\n  content: \"\\f074\";\n}\n.fa-comment:before {\n  content: \"\\f075\";\n}\n.fa-magnet:before {\n  content: \"\\f076\";\n}\n.fa-chevron-up:before {\n  content: \"\\f077\";\n}\n.fa-chevron-down:before {\n  content: \"\\f078\";\n}\n.fa-retweet:before {\n  content: \"\\f079\";\n}\n.fa-shopping-cart:before {\n  content: \"\\f07a\";\n}\n.fa-folder:before {\n  content: \"\\f07b\";\n}\n.fa-folder-open:before {\n  content: \"\\f07c\";\n}\n.fa-arrows-v:before {\n  content: \"\\f07d\";\n}\n.fa-arrows-h:before {\n  content: \"\\f07e\";\n}\n.fa-bar-chart-o:before {\n  content: \"\\f080\";\n}\n.fa-twitter-square:before {\n  content: \"\\f081\";\n}\n.fa-facebook-square:before {\n  content: \"\\f082\";\n}\n.fa-camera-retro:before {\n  content: \"\\f083\";\n}\n.fa-key:before {\n  content: \"\\f084\";\n}\n.fa-gears:before,\n.fa-cogs:before {\n  content: \"\\f085\";\n}\n.fa-comments:before {\n  content: \"\\f086\";\n}\n.fa-thumbs-o-up:before {\n  content: \"\\f087\";\n}\n.fa-thumbs-o-down:before {\n  content: \"\\f088\";\n}\n.fa-star-half:before {\n  content: \"\\f089\";\n}\n.fa-heart-o:before {\n  content: \"\\f08a\";\n}\n.fa-sign-out:before {\n  content: \"\\f08b\";\n}\n.fa-linkedin-square:before {\n  content: \"\\f08c\";\n}\n.fa-thumb-tack:before {\n  content: \"\\f08d\";\n}\n.fa-external-link:before {\n  content: \"\\f08e\";\n}\n.fa-sign-in:before {\n  content: \"\\f090\";\n}\n.fa-trophy:before {\n  content: \"\\f091\";\n}\n.fa-github-square:before {\n  content: \"\\f092\";\n}\n.fa-upload:before {\n  content: \"\\f093\";\n}\n.fa-lemon-o:before {\n  content: \"\\f094\";\n}\n.fa-phone:before {\n  content: \"\\f095\";\n}\n.fa-square-o:before {\n  content: \"\\f096\";\n}\n.fa-bookmark-o:before {\n  content: \"\\f097\";\n}\n.fa-phone-square:before {\n  content: \"\\f098\";\n}\n.fa-twitter:before {\n  content: \"\\f099\";\n}\n.fa-facebook:before {\n  content: \"\\f09a\";\n}\n.fa-github:before {\n  content: \"\\f09b\";\n}\n.fa-unlock:before {\n  content: \"\\f09c\";\n}\n.fa-credit-card:before {\n  content: \"\\f09d\";\n}\n.fa-rss:before {\n  content: \"\\f09e\";\n}\n.fa-hdd-o:before {\n  content: \"\\f0a0\";\n}\n.fa-bullhorn:before {\n  content: \"\\f0a1\";\n}\n.fa-bell:before {\n  content: \"\\f0f3\";\n}\n.fa-certificate:before {\n  content: \"\\f0a3\";\n}\n.fa-hand-o-right:before {\n  content: \"\\f0a4\";\n}\n.fa-hand-o-left:before {\n  content: \"\\f0a5\";\n}\n.fa-hand-o-up:before {\n  content: \"\\f0a6\";\n}\n.fa-hand-o-down:before {\n  content: \"\\f0a7\";\n}\n.fa-arrow-circle-left:before {\n  content: \"\\f0a8\";\n}\n.fa-arrow-circle-right:before {\n  content: \"\\f0a9\";\n}\n.fa-arrow-circle-up:before {\n  content: \"\\f0aa\";\n}\n.fa-arrow-circle-down:before {\n  content: \"\\f0ab\";\n}\n.fa-globe:before {\n  content: \"\\f0ac\";\n}\n.fa-wrench:before {\n  content: \"\\f0ad\";\n}\n.fa-tasks:before {\n  content: \"\\f0ae\";\n}\n.fa-filter:before {\n  content: \"\\f0b0\";\n}\n.fa-briefcase:before {\n  content: \"\\f0b1\";\n}\n.fa-arrows-alt:before {\n  content: \"\\f0b2\";\n}\n.fa-group:before,\n.fa-users:before {\n  content: \"\\f0c0\";\n}\n.fa-chain:before,\n.fa-link:before {\n  content: \"\\f0c1\";\n}\n.fa-cloud:before {\n  content: \"\\f0c2\";\n}\n.fa-flask:before {\n  content: \"\\f0c3\";\n}\n.fa-cut:before,\n.fa-scissors:before {\n  content: \"\\f0c4\";\n}\n.fa-copy:before,\n.fa-files-o:before {\n  content: \"\\f0c5\";\n}\n.fa-paperclip:before {\n  content: \"\\f0c6\";\n}\n.fa-save:before,\n.fa-floppy-o:before {\n  content: \"\\f0c7\";\n}\n.fa-square:before {\n  content: \"\\f0c8\";\n}\n.fa-navicon:before,\n.fa-reorder:before,\n.fa-bars:before {\n  content: \"\\f0c9\";\n}\n.fa-list-ul:before {\n  content: \"\\f0ca\";\n}\n.fa-list-ol:before {\n  content: \"\\f0cb\";\n}\n.fa-strikethrough:before {\n  content: \"\\f0cc\";\n}\n.fa-underline:before {\n  content: \"\\f0cd\";\n}\n.fa-table:before {\n  content: \"\\f0ce\";\n}\n.fa-magic:before {\n  content: \"\\f0d0\";\n}\n.fa-truck:before {\n  content: \"\\f0d1\";\n}\n.fa-pinterest:before {\n  content: \"\\f0d2\";\n}\n.fa-pinterest-square:before {\n  content: \"\\f0d3\";\n}\n.fa-google-plus-square:before {\n  content: \"\\f0d4\";\n}\n.fa-google-plus:before {\n  content: \"\\f0d5\";\n}\n.fa-money:before {\n  content: \"\\f0d6\";\n}\n.fa-caret-down:before {\n  content: \"\\f0d7\";\n}\n.fa-caret-up:before {\n  content: \"\\f0d8\";\n}\n.fa-caret-left:before {\n  content: \"\\f0d9\";\n}\n.fa-caret-right:before {\n  content: \"\\f0da\";\n}\n.fa-columns:before {\n  content: \"\\f0db\";\n}\n.fa-unsorted:before,\n.fa-sort:before {\n  content: \"\\f0dc\";\n}\n.fa-sort-down:before,\n.fa-sort-desc:before {\n  content: \"\\f0dd\";\n}\n.fa-sort-up:before,\n.fa-sort-asc:before {\n  content: \"\\f0de\";\n}\n.fa-envelope:before {\n  content: \"\\f0e0\";\n}\n.fa-linkedin:before {\n  content: \"\\f0e1\";\n}\n.fa-rotate-left:before,\n.fa-undo:before {\n  content: \"\\f0e2\";\n}\n.fa-legal:before,\n.fa-gavel:before {\n  content: \"\\f0e3\";\n}\n.fa-dashboard:before,\n.fa-tachometer:before {\n  content: \"\\f0e4\";\n}\n.fa-comment-o:before {\n  content: \"\\f0e5\";\n}\n.fa-comments-o:before {\n  content: \"\\f0e6\";\n}\n.fa-flash:before,\n.fa-bolt:before {\n  content: \"\\f0e7\";\n}\n.fa-sitemap:before {\n  content: \"\\f0e8\";\n}\n.fa-umbrella:before {\n  content: \"\\f0e9\";\n}\n.fa-paste:before,\n.fa-clipboard:before {\n  content: \"\\f0ea\";\n}\n.fa-lightbulb-o:before {\n  content: \"\\f0eb\";\n}\n.fa-exchange:before {\n  content: \"\\f0ec\";\n}\n.fa-cloud-download:before {\n  content: \"\\f0ed\";\n}\n.fa-cloud-upload:before {\n  content: \"\\f0ee\";\n}\n.fa-user-md:before {\n  content: \"\\f0f0\";\n}\n.fa-stethoscope:before {\n  content: \"\\f0f1\";\n}\n.fa-suitcase:before {\n  content: \"\\f0f2\";\n}\n.fa-bell-o:before {\n  content: \"\\f0a2\";\n}\n.fa-coffee:before {\n  content: \"\\f0f4\";\n}\n.fa-cutlery:before {\n  content: \"\\f0f5\";\n}\n.fa-file-text-o:before {\n  content: \"\\f0f6\";\n}\n.fa-building-o:before {\n  content: \"\\f0f7\";\n}\n.fa-hospital-o:before {\n  content: \"\\f0f8\";\n}\n.fa-ambulance:before {\n  content: \"\\f0f9\";\n}\n.fa-medkit:before {\n  content: \"\\f0fa\";\n}\n.fa-fighter-jet:before {\n  content: \"\\f0fb\";\n}\n.fa-beer:before {\n  content: \"\\f0fc\";\n}\n.fa-h-square:before {\n  content: \"\\f0fd\";\n}\n.fa-plus-square:before {\n  content: \"\\f0fe\";\n}\n.fa-angle-double-left:before {\n  content: \"\\f100\";\n}\n.fa-angle-double-right:before {\n  content: \"\\f101\";\n}\n.fa-angle-double-up:before {\n  content: \"\\f102\";\n}\n.fa-angle-double-down:before {\n  content: \"\\f103\";\n}\n.fa-angle-left:before {\n  content: \"\\f104\";\n}\n.fa-angle-right:before {\n  content: \"\\f105\";\n}\n.fa-angle-up:before {\n  content: \"\\f106\";\n}\n.fa-angle-down:before {\n  content: \"\\f107\";\n}\n.fa-desktop:before {\n  content: \"\\f108\";\n}\n.fa-laptop:before {\n  content: \"\\f109\";\n}\n.fa-tablet:before {\n  content: \"\\f10a\";\n}\n.fa-mobile-phone:before,\n.fa-mobile:before {\n  content: \"\\f10b\";\n}\n.fa-circle-o:before {\n  content: \"\\f10c\";\n}\n.fa-quote-left:before {\n  content: \"\\f10d\";\n}\n.fa-quote-right:before {\n  content: \"\\f10e\";\n}\n.fa-spinner:before {\n  content: \"\\f110\";\n}\n.fa-circle:before {\n  content: \"\\f111\";\n}\n.fa-mail-reply:before,\n.fa-reply:before {\n  content: \"\\f112\";\n}\n.fa-github-alt:before {\n  content: \"\\f113\";\n}\n.fa-folder-o:before {\n  content: \"\\f114\";\n}\n.fa-folder-open-o:before {\n  content: \"\\f115\";\n}\n.fa-smile-o:before {\n  content: \"\\f118\";\n}\n.fa-frown-o:before {\n  content: \"\\f119\";\n}\n.fa-meh-o:before {\n  content: \"\\f11a\";\n}\n.fa-gamepad:before {\n  content: \"\\f11b\";\n}\n.fa-keyboard-o:before {\n  content: \"\\f11c\";\n}\n.fa-flag-o:before {\n  content: \"\\f11d\";\n}\n.fa-flag-checkered:before {\n  content: \"\\f11e\";\n}\n.fa-terminal:before {\n  content: \"\\f120\";\n}\n.fa-code:before {\n  content: \"\\f121\";\n}\n.fa-mail-reply-all:before,\n.fa-reply-all:before {\n  content: \"\\f122\";\n}\n.fa-star-half-empty:before,\n.fa-star-half-full:before,\n.fa-star-half-o:before {\n  content: \"\\f123\";\n}\n.fa-location-arrow:before {\n  content: \"\\f124\";\n}\n.fa-crop:before {\n  content: \"\\f125\";\n}\n.fa-code-fork:before {\n  content: \"\\f126\";\n}\n.fa-unlink:before,\n.fa-chain-broken:before {\n  content: \"\\f127\";\n}\n.fa-question:before {\n  content: \"\\f128\";\n}\n.fa-info:before {\n  content: \"\\f129\";\n}\n.fa-exclamation:before {\n  content: \"\\f12a\";\n}\n.fa-superscript:before {\n  content: \"\\f12b\";\n}\n.fa-subscript:before {\n  content: \"\\f12c\";\n}\n.fa-eraser:before {\n  content: \"\\f12d\";\n}\n.fa-puzzle-piece:before {\n  content: \"\\f12e\";\n}\n.fa-microphone:before {\n  content: \"\\f130\";\n}\n.fa-microphone-slash:before {\n  content: \"\\f131\";\n}\n.fa-shield:before {\n  content: \"\\f132\";\n}\n.fa-calendar-o:before {\n  content: \"\\f133\";\n}\n.fa-fire-extinguisher:before {\n  content: \"\\f134\";\n}\n.fa-rocket:before {\n  content: \"\\f135\";\n}\n.fa-maxcdn:before {\n  content: \"\\f136\";\n}\n.fa-chevron-circle-left:before {\n  content: \"\\f137\";\n}\n.fa-chevron-circle-right:before {\n  content: \"\\f138\";\n}\n.fa-chevron-circle-up:before {\n  content: \"\\f139\";\n}\n.fa-chevron-circle-down:before {\n  content: \"\\f13a\";\n}\n.fa-html5:before {\n  content: \"\\f13b\";\n}\n.fa-css3:before {\n  content: \"\\f13c\";\n}\n.fa-anchor:before {\n  content: \"\\f13d\";\n}\n.fa-unlock-alt:before {\n  content: \"\\f13e\";\n}\n.fa-bullseye:before {\n  content: \"\\f140\";\n}\n.fa-ellipsis-h:before {\n  content: \"\\f141\";\n}\n.fa-ellipsis-v:before {\n  content: \"\\f142\";\n}\n.fa-rss-square:before {\n  content: \"\\f143\";\n}\n.fa-play-circle:before {\n  content: \"\\f144\";\n}\n.fa-ticket:before {\n  content: \"\\f145\";\n}\n.fa-minus-square:before {\n  content: \"\\f146\";\n}\n.fa-minus-square-o:before {\n  content: \"\\f147\";\n}\n.fa-level-up:before {\n  content: \"\\f148\";\n}\n.fa-level-down:before {\n  content: \"\\f149\";\n}\n.fa-check-square:before {\n  content: \"\\f14a\";\n}\n.fa-pencil-square:before {\n  content: \"\\f14b\";\n}\n.fa-external-link-square:before {\n  content: \"\\f14c\";\n}\n.fa-share-square:before {\n  content: \"\\f14d\";\n}\n.fa-compass:before {\n  content: \"\\f14e\";\n}\n.fa-toggle-down:before,\n.fa-caret-square-o-down:before {\n  content: \"\\f150\";\n}\n.fa-toggle-up:before,\n.fa-caret-square-o-up:before {\n  content: \"\\f151\";\n}\n.fa-toggle-right:before,\n.fa-caret-square-o-right:before {\n  content: \"\\f152\";\n}\n.fa-euro:before,\n.fa-eur:before {\n  content: \"\\f153\";\n}\n.fa-gbp:before {\n  content: \"\\f154\";\n}\n.fa-dollar:before,\n.fa-usd:before {\n  content: \"\\f155\";\n}\n.fa-rupee:before,\n.fa-inr:before {\n  content: \"\\f156\";\n}\n.fa-cny:before,\n.fa-rmb:before,\n.fa-yen:before,\n.fa-jpy:before {\n  content: \"\\f157\";\n}\n.fa-ruble:before,\n.fa-rouble:before,\n.fa-rub:before {\n  content: \"\\f158\";\n}\n.fa-won:before,\n.fa-krw:before {\n  content: \"\\f159\";\n}\n.fa-bitcoin:before,\n.fa-btc:before {\n  content: \"\\f15a\";\n}\n.fa-file:before {\n  content: \"\\f15b\";\n}\n.fa-file-text:before {\n  content: \"\\f15c\";\n}\n.fa-sort-alpha-asc:before {\n  content: \"\\f15d\";\n}\n.fa-sort-alpha-desc:before {\n  content: \"\\f15e\";\n}\n.fa-sort-amount-asc:before {\n  content: \"\\f160\";\n}\n.fa-sort-amount-desc:before {\n  content: \"\\f161\";\n}\n.fa-sort-numeric-asc:before {\n  content: \"\\f162\";\n}\n.fa-sort-numeric-desc:before {\n  content: \"\\f163\";\n}\n.fa-thumbs-up:before {\n  content: \"\\f164\";\n}\n.fa-thumbs-down:before {\n  content: \"\\f165\";\n}\n.fa-youtube-square:before {\n  content: \"\\f166\";\n}\n.fa-youtube:before {\n  content: \"\\f167\";\n}\n.fa-xing:before {\n  content: \"\\f168\";\n}\n.fa-xing-square:before {\n  content: \"\\f169\";\n}\n.fa-youtube-play:before {\n  content: \"\\f16a\";\n}\n.fa-dropbox:before {\n  content: \"\\f16b\";\n}\n.fa-stack-overflow:before {\n  content: \"\\f16c\";\n}\n.fa-instagram:before {\n  content: \"\\f16d\";\n}\n.fa-flickr:before {\n  content: \"\\f16e\";\n}\n.fa-adn:before {\n  content: \"\\f170\";\n}\n.fa-bitbucket:before {\n  content: \"\\f171\";\n}\n.fa-bitbucket-square:before {\n  content: \"\\f172\";\n}\n.fa-tumblr:before {\n  content: \"\\f173\";\n}\n.fa-tumblr-square:before {\n  content: \"\\f174\";\n}\n.fa-long-arrow-down:before {\n  content: \"\\f175\";\n}\n.fa-long-arrow-up:before {\n  content: \"\\f176\";\n}\n.fa-long-arrow-left:before {\n  content: \"\\f177\";\n}\n.fa-long-arrow-right:before {\n  content: \"\\f178\";\n}\n.fa-apple:before {\n  content: \"\\f179\";\n}\n.fa-windows:before {\n  content: \"\\f17a\";\n}\n.fa-android:before {\n  content: \"\\f17b\";\n}\n.fa-linux:before {\n  content: \"\\f17c\";\n}\n.fa-dribbble:before {\n  content: \"\\f17d\";\n}\n.fa-skype:before {\n  content: \"\\f17e\";\n}\n.fa-foursquare:before {\n  content: \"\\f180\";\n}\n.fa-trello:before {\n  content: \"\\f181\";\n}\n.fa-female:before {\n  content: \"\\f182\";\n}\n.fa-male:before {\n  content: \"\\f183\";\n}\n.fa-gittip:before {\n  content: \"\\f184\";\n}\n.fa-sun-o:before {\n  content: \"\\f185\";\n}\n.fa-moon-o:before {\n  content: \"\\f186\";\n}\n.fa-archive:before {\n  content: \"\\f187\";\n}\n.fa-bug:before {\n  content: \"\\f188\";\n}\n.fa-vk:before {\n  content: \"\\f189\";\n}\n.fa-weibo:before {\n  content: \"\\f18a\";\n}\n.fa-renren:before {\n  content: \"\\f18b\";\n}\n.fa-pagelines:before {\n  content: \"\\f18c\";\n}\n.fa-stack-exchange:before {\n  content: \"\\f18d\";\n}\n.fa-arrow-circle-o-right:before {\n  content: \"\\f18e\";\n}\n.fa-arrow-circle-o-left:before {\n  content: \"\\f190\";\n}\n.fa-toggle-left:before,\n.fa-caret-square-o-left:before {\n  content: \"\\f191\";\n}\n.fa-dot-circle-o:before {\n  content: \"\\f192\";\n}\n.fa-wheelchair:before {\n  content: \"\\f193\";\n}\n.fa-vimeo-square:before {\n  content: \"\\f194\";\n}\n.fa-turkish-lira:before,\n.fa-try:before {\n  content: \"\\f195\";\n}\n.fa-plus-square-o:before {\n  content: \"\\f196\";\n}\n.fa-space-shuttle:before {\n  content: \"\\f197\";\n}\n.fa-slack:before {\n  content: \"\\f198\";\n}\n.fa-envelope-square:before {\n  content: \"\\f199\";\n}\n.fa-wordpress:before {\n  content: \"\\f19a\";\n}\n.fa-openid:before {\n  content: \"\\f19b\";\n}\n.fa-institution:before,\n.fa-bank:before,\n.fa-university:before {\n  content: \"\\f19c\";\n}\n.fa-mortar-board:before,\n.fa-graduation-cap:before {\n  content: \"\\f19d\";\n}\n.fa-yahoo:before {\n  content: \"\\f19e\";\n}\n.fa-google:before {\n  content: \"\\f1a0\";\n}\n.fa-reddit:before {\n  content: \"\\f1a1\";\n}\n.fa-reddit-square:before {\n  content: \"\\f1a2\";\n}\n.fa-stumbleupon-circle:before {\n  content: \"\\f1a3\";\n}\n.fa-stumbleupon:before {\n  content: \"\\f1a4\";\n}\n.fa-delicious:before {\n  content: \"\\f1a5\";\n}\n.fa-digg:before {\n  content: \"\\f1a6\";\n}\n.fa-pied-piper-square:before,\n.fa-pied-piper:before {\n  content: \"\\f1a7\";\n}\n.fa-pied-piper-alt:before {\n  content: \"\\f1a8\";\n}\n.fa-drupal:before {\n  content: \"\\f1a9\";\n}\n.fa-joomla:before {\n  content: \"\\f1aa\";\n}\n.fa-language:before {\n  content: \"\\f1ab\";\n}\n.fa-fax:before {\n  content: \"\\f1ac\";\n}\n.fa-building:before {\n  content: \"\\f1ad\";\n}\n.fa-child:before {\n  content: \"\\f1ae\";\n}\n.fa-paw:before {\n  content: \"\\f1b0\";\n}\n.fa-spoon:before {\n  content: \"\\f1b1\";\n}\n.fa-cube:before {\n  content: \"\\f1b2\";\n}\n.fa-cubes:before {\n  content: \"\\f1b3\";\n}\n.fa-behance:before {\n  content: \"\\f1b4\";\n}\n.fa-behance-square:before {\n  content: \"\\f1b5\";\n}\n.fa-steam:before {\n  content: \"\\f1b6\";\n}\n.fa-steam-square:before {\n  content: \"\\f1b7\";\n}\n.fa-recycle:before {\n  content: \"\\f1b8\";\n}\n.fa-automobile:before,\n.fa-car:before {\n  content: \"\\f1b9\";\n}\n.fa-cab:before,\n.fa-taxi:before {\n  content: \"\\f1ba\";\n}\n.fa-tree:before {\n  content: \"\\f1bb\";\n}\n.fa-spotify:before {\n  content: \"\\f1bc\";\n}\n.fa-deviantart:before {\n  content: \"\\f1bd\";\n}\n.fa-soundcloud:before {\n  content: \"\\f1be\";\n}\n.fa-database:before {\n  content: \"\\f1c0\";\n}\n.fa-file-pdf-o:before {\n  content: \"\\f1c1\";\n}\n.fa-file-word-o:before {\n  content: \"\\f1c2\";\n}\n.fa-file-excel-o:before {\n  content: \"\\f1c3\";\n}\n.fa-file-powerpoint-o:before {\n  content: \"\\f1c4\";\n}\n.fa-file-photo-o:before,\n.fa-file-picture-o:before,\n.fa-file-image-o:before {\n  content: \"\\f1c5\";\n}\n.fa-file-zip-o:before,\n.fa-file-archive-o:before {\n  content: \"\\f1c6\";\n}\n.fa-file-sound-o:before,\n.fa-file-audio-o:before {\n  content: \"\\f1c7\";\n}\n.fa-file-movie-o:before,\n.fa-file-video-o:before {\n  content: \"\\f1c8\";\n}\n.fa-file-code-o:before {\n  content: \"\\f1c9\";\n}\n.fa-vine:before {\n  content: \"\\f1ca\";\n}\n.fa-codepen:before {\n  content: \"\\f1cb\";\n}\n.fa-jsfiddle:before {\n  content: \"\\f1cc\";\n}\n.fa-life-bouy:before,\n.fa-life-saver:before,\n.fa-support:before,\n.fa-life-ring:before {\n  content: \"\\f1cd\";\n}\n.fa-circle-o-notch:before {\n  content: \"\\f1ce\";\n}\n.fa-ra:before,\n.fa-rebel:before {\n  content: \"\\f1d0\";\n}\n.fa-ge:before,\n.fa-empire:before {\n  content: \"\\f1d1\";\n}\n.fa-git-square:before {\n  content: \"\\f1d2\";\n}\n.fa-git:before {\n  content: \"\\f1d3\";\n}\n.fa-hacker-news:before {\n  content: \"\\f1d4\";\n}\n.fa-tencent-weibo:before {\n  content: \"\\f1d5\";\n}\n.fa-qq:before {\n  content: \"\\f1d6\";\n}\n.fa-wechat:before,\n.fa-weixin:before {\n  content: \"\\f1d7\";\n}\n.fa-send:before,\n.fa-paper-plane:before {\n  content: \"\\f1d8\";\n}\n.fa-send-o:before,\n.fa-paper-plane-o:before {\n  content: \"\\f1d9\";\n}\n.fa-history:before {\n  content: \"\\f1da\";\n}\n.fa-circle-thin:before {\n  content: \"\\f1db\";\n}\n.fa-header:before {\n  content: \"\\f1dc\";\n}\n.fa-paragraph:before {\n  content: \"\\f1dd\";\n}\n.fa-sliders:before {\n  content: \"\\f1de\";\n}\n.fa-share-alt:before {\n  content: \"\\f1e0\";\n}\n.fa-share-alt-square:before {\n  content: \"\\f1e1\";\n}\n.fa-bomb:before {\n  content: \"\\f1e2\";\n}\n@-moz-keyframes spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n@-webkit-keyframes spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n@-o-keyframes spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n@keyframes spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n.alert-inline {\n  padding: 8px 10px 10px;\n  border: 1px solid transparent;\n  border-radius: 2px;\n}\nul.alerts {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  z-index: 100;\n}\nul.alerts li {\n  position: relative;\n  overflow: auto;\n  text-align: left;\n  background-color: #ebf7fb;\n  padding: 1px 56px 1px 20px;\n  border-bottom: 1px solid #b1dff0;\n  opacity: 0.98;\n  font-weight: bold;\n  transform: scaleX(1) translate3d(0, 0, 0);\n  animation: hifromthetopNoShadow 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\nul.alerts li .button {\n  font-weight: normal;\n  float: right;\n  padding: 0;\n  padding: 5px 15px;\n  background: rgba(255,255,255,0.2);\n  margin-top: 6px;\n}\nul.alerts li .button:hover {\n  background: rgba(255,255,255,0.5);\n}\nul.alerts li p {\n  overflow: hidden;\n  padding: 10px 10px 10px 0;\n}\nul.alerts li::after {\n  font-size: 20px;\n  position: absolute;\n  right: 30px;\n  top: 12px;\n  font-family: FontAwesome;\n}\n.alerts i,\n.alert-inline i {\n  margin-right: 4px;\n}\n.alerts li a,\n.alert-inline a {\n  color: inherit;\n  opacity: 0.8;\n}\n.alerts li a:hover,\n.alert-inline a:hover {\n  opacity: 1;\n}\n.alerts li.info,\n.alert-inline.info {\n  background-color: #c4e7f4;\n  border-color: #b1dff0;\n  color: #1f7fa3;\n}\n.alerts li.info a:hover,\n.alert-inline.info a:hover {\n  color: #62bfe1;\n}\n.alerts li.info .button,\n.alert-inline.info .button {\n  color: #1f7fa3;\n}\n.alerts li.info::after,\n.alert-inline.info::after {\n  content: \"\\f05a\";\n}\n.alerts li.success,\n.alert-inline.success {\n  background-color: #f0f5ed;\n  border-color: #e2eadb;\n  color: #6d8f52;\n}\n.alerts li.success a:hover,\n.alert-inline.success a:hover {\n  color: #89ac6e;\n}\n.alerts li.success .button,\n.alert-inline.success .button {\n  color: #6d8f52;\n}\n.alerts li.success::after,\n.alert-inline.success::after {\n  content: \"\\f058\";\n}\n.alerts li.warning,\n.alert-inline.warning {\n  background-color: #fdf9ed;\n  border-color: #faf4da;\n  color: #e6c647;\n}\n.alerts li.warning a:hover,\n.alert-inline.warning a:hover {\n  color: #ebd16c;\n}\n.alerts li.warning .button,\n.alert-inline.warning .button {\n  color: #e6c647;\n}\n.alerts li.warning::after,\n.alert-inline.warning::after {\n  content: \"\\f06a\";\n}\n.alerts li.danger,\n.alert-inline.danger {\n  background-color: #fdeeec;\n  border-color: #fbddd9;\n  color: #df715e;\n}\n.alerts li.danger a:hover,\n.alert-inline.danger a:hover {\n  color: #ed7965;\n}\n.alerts li.danger .button,\n.alert-inline.danger .button {\n  color: #ba2d15;\n}\n.alerts li.danger::after,\n.alert-inline.danger::after {\n  content: \"\\f057\";\n}\n.service.message-group .avatar {\n  margin-left: 14px;\n}\n.service.message-group .avatar .image {\n  width: 28px;\n  height: 28px;\n}\n.service.message-group .message-inner-wrap {\n  width: 100%;\n}\n.activity.message {\n  margin: 1px -10px 3px !important;\n/* GITHUB and BITBUCKET SPECIFIC */\n/* TRELLO SPECIFIC */\n}\n.activity.message.first {\n  padding-top: 2px !important;\n}\n.activity.message .message-inner-wrap {\n  padding: 0 16px 0 5px;\n  display: block;\n  min-width: 390px;\n}\n.activity.message .main {\n  font-weight: bold;\n}\n.activity.message .actor {\n  margin-right: 3px;\n  margin-top: 1px;\n  float: left;\n}\n.activity.message .source-wrap {\n  float: right;\n  padding: 0 5px;\n  border-bottom: 2px solid #888291;\n  color: #888291;\n  margin-left: 5px;\n  max-width: 190px;\n  display: block;\n}\n.activity.message .source-wrap a {\n  color: #888291;\n}\n@media (max-width: 800px) {\n  .activity.message .source-wrap {\n    max-width: 70px;\n  }\n}\n.activity.message .source-wrap span {\n  color: #888291;\n}\n.activity.message .short-list {\n  clear: both;\n}\n.activity.message.commits ul,\n.activity.message.push ul,\n.activity.message.pull_request ul,\n.activity.message.create ul,\n.activity.message.gollum ul {\n  border-left: 2px dotted #dad6e0;\n  margin-left: 8px;\n}\n.activity.message.commits ul > li,\n.activity.message.push ul > li,\n.activity.message.pull_request ul > li,\n.activity.message.create ul > li,\n.activity.message.gollum ul > li {\n  padding-left: 13px;\n  position: relative;\n  padding-top: 1px;\n}\n.activity.message.commits ul > li:after,\n.activity.message.push ul > li:after,\n.activity.message.pull_request ul > li:after,\n.activity.message.create ul > li:after,\n.activity.message.gollum ul > li:after {\n  content: \"\";\n  position: absolute;\n  left: 0px;\n  top: 10px;\n  height: 1px;\n  width: 10px;\n  border-top: 2px dotted #dad6e0;\n}\n.activity.message.commits ul .show-more,\n.activity.message.push ul .show-more,\n.activity.message.pull_request ul .show-more,\n.activity.message.create ul .show-more,\n.activity.message.gollum ul .show-more {\n  display: none;\n}\n.activity.message.commits ul .show-less,\n.activity.message.push ul .show-less,\n.activity.message.pull_request ul .show-less,\n.activity.message.create ul .show-less,\n.activity.message.gollum ul .show-less {\n  display: block;\n  z-index: 12;\n  padding-left: 13px;\n  margin-top: 7px;\n}\n.activity.message.commits ul.list-previewed,\n.activity.message.push ul.list-previewed,\n.activity.message.pull_request ul.list-previewed,\n.activity.message.create ul.list-previewed,\n.activity.message.gollum ul.list-previewed {\n  max-height: 99px;\n  position: relative;\n  overflow: hidden;\n}\n.activity.message.commits ul.list-previewed:after,\n.activity.message.push ul.list-previewed:after,\n.activity.message.pull_request ul.list-previewed:after,\n.activity.message.create ul.list-previewed:after,\n.activity.message.gollum ul.list-previewed:after {\n  content: \"\";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 70px;\n  background: linear-gradient(to bottom, rgba(248,248,248,0) 0%, #f8f8f8 70%);\n  z-index: 10;\n}\n.activity.message.commits ul.list-previewed .show-more,\n.activity.message.push ul.list-previewed .show-more,\n.activity.message.pull_request ul.list-previewed .show-more,\n.activity.message.create ul.list-previewed .show-more,\n.activity.message.gollum ul.list-previewed .show-more {\n  display: block;\n  z-index: 12;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding-left: 13px;\n}\n.activity.message.commits ul.list-previewed .show-less,\n.activity.message.push ul.list-previewed .show-less,\n.activity.message.pull_request ul.list-previewed .show-less,\n.activity.message.create ul.list-previewed .show-less,\n.activity.message.gollum ul.list-previewed .show-less {\n  display: none;\n}\n.activity.message .comment > li,\n.activity.message.commentCard .short-list > li {\n  padding: 0 10px;\n  margin: 4px -10px;\n  overflow: hidden;\n  position: relative;\n}\n.activity.message .comment > li img,\n.activity.message.commentCard .short-list > li img {\n  max-height: 170px;\n}\n.activity.message .comment > li:before,\n.activity.message.commentCard .short-list > li:before {\n  float: left;\n  font-family: FontAwesome;\n  color: #888291;\n  content: \"\\f10d\";\n  margin-right: 5px;\n  margin-left: 5px;\n}\n.activity.message .comment .text ol {\n  padding-left: 22px;\n}\n.activity.message .comment .text ol li {\n  list-style-type: decimal;\n}\n.activity.message.issue_comment li.issue,\n.activity.message.__label_changed li.issue,\n.activity.message.__asignment_changed li.issue,\n.activity.message.issues li.issue,\n.activity.message.issue_comment li.user,\n.activity.message.__label_changed li.user,\n.activity.message.__asignment_changed li.user,\n.activity.message.issues li.user,\n.activity.message.issue_comment li.label,\n.activity.message.__label_changed li.label,\n.activity.message.__asignment_changed li.label,\n.activity.message.issues li.label {\n  display: none;\n}\n.activity.message.gollum ul li:only-child {\n  display: none;\n}\n.activity.message.deleteAttachmentFromCard .short-list {\n  display: none;\n}\n.activity.message .times {\n  margin-left: 5px;\n  padding: 0 5px;\n  border-radius: 4px;\n  color: #e6c647;\n  float: right;\n  border: 2px solid #e6c647;\n}\n.nav-button,\n.new,\n.toggle,\nbutton {\n  outline: none;\n  background: none;\n}\n.button,\n.button-small,\n.button-inset,\n.introjs-button,\n.autocomplete-wrapper .autocomplete-filter-menu a {\n  color: #4fc1e9;\n  padding: 10px 15px;\n  outline: none;\n  text-decoration: none !important;\n  text-transform: uppercase;\n  border: none;\n  border-radius: 2px;\n  background: none;\n  font-weight: bold;\n  display: inline-block;\n  overflow: hidden;\n  word-break: break-word;\n}\n.button .icon,\n.button-small .icon,\n.button-inset .icon,\n.introjs-button .icon,\n.autocomplete-wrapper .autocomplete-filter-menu a .icon {\n  color: #fff;\n  width: 20px;\n  text-align: right;\n}\n.button:hover,\n.button-small:hover,\n.button-inset:hover,\n.introjs-button:hover,\n.autocomplete-wrapper .autocomplete-filter-menu a:hover {\n  background: rgba(230,230,230,0.7);\n}\n.button:active,\n.button-small:active,\n.button-inset:active,\n.introjs-button:active,\n.autocomplete-wrapper .autocomplete-filter-menu a:active {\n  background: #e6e6e6;\n}\n.button:disabled,\n.button-small:disabled,\n.button-inset:disabled,\n.introjs-button:disabled,\n.autocomplete-wrapper .autocomplete-filter-menu a:disabled {\n  color: #dad6e0 !important;\n}\n.button.raised,\n.button-small.raised,\n.button-inset.raised,\n.introjs-button.raised,\n.autocomplete-wrapper .autocomplete-filter-menu a.raised {\n  box-shadow: 0px 2px 5px 0px rgba(136,130,145,0.75);\n  background: #e6e6e6;\n  color: #4d4d4d;\n}\n.button.raised i,\n.button-small.raised i,\n.button-inset.raised i,\n.introjs-button.raised i,\n.autocomplete-wrapper .autocomplete-filter-menu a.raised i {\n  color: #9b6a94;\n}\n.button.raised:hover,\n.button-small.raised:hover,\n.button-inset.raised:hover,\n.introjs-button.raised:hover,\n.autocomplete-wrapper .autocomplete-filter-menu a.raised:hover {\n  color: #4d4d4d;\n  background: #dbdbdb;\n}\n.button.raised:active,\n.button-small.raised:active,\n.button-inset.raised:active,\n.introjs-button.raised:active,\n.autocomplete-wrapper .autocomplete-filter-menu a.raised:active {\n  box-shadow: 0px 5px 10px 0px rgba(136,130,145,0.75);\n}\n.button-delete,\n#dialog .delete-room-form .delete,\n.dialog .delete-room-form .delete,\n.introjs-tooltip .delete-room-form .delete {\n  color: #e9573f;\n}\n.button-small,\n.button-inset {\n  padding: 3px 7px;\n}\n.button-inset {\n  box-shadow: none;\n  border: none;\n  background: #9b6a94;\n  margin-top: -3px;\n  color: #fff;\n  word-break: normal;\n}\n.button-inset:hover,\na:hover .button-inset {\n  background: #7d5477;\n}\n.button-inset:active {\n  background: #7d5477;\n}\n.btn-icon {\n  padding-left: 7px;\n  padding-right: 7px;\n}\n.btn-icon .icon {\n  text-align: center;\n}\n.waves-effect {\n  position: relative;\n  cursor: pointer;\n  display: inline-block;\n  overflow: hidden;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n}\n.waves-effect .waves-ripple {\n  position: absolute;\n  border-radius: 50%;\n  width: 100px;\n  height: 100px;\n  opacity: 0;\n  background-color: rgba(0,0,0,0.2);\n}\n.waves-effect.waves-light .waves-ripple {\n  background-color: rgba(255,255,255,0.4);\n}\n.waves-notransition {\n  -webkit-transition: none !important;\n  -moz-transition: none !important;\n  -o-transition: none !important;\n  transition: none !important;\n}\n.waves-button,\n.waves-circle {\n  -webkit-transform: translateZ(0);\n  -webkit-image-mask: -webkit-radial-gradient(circle, rgba(0,0,0,0), rgba(0,0,0,0));\n}\n.waves-button,\n.waves-button:hover,\n.waves-button:visited,\n.waves-button:link,\n.waves-button-input {\n  white-space: nowrap;\n  vertical-align: middle;\n  cursor: pointer;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: inherit;\n  font-size: 14px;\n  text-align: center;\n  text-decoration: none;\n  z-index: 1;\n}\n.waves-button {\n  padding: 10px 15px;\n  border-radius: 2px;\n}\n.waves-button-input {\n  margin: 0;\n  padding: 10px 15px;\n}\n.waves-input-wrapper {\n  border-radius: 2px;\n  vertical-align: bottom;\n}\n.waves-input-wrapper.waves-button {\n  padding: 0;\n}\n.waves-input-wrapper .waves-button-input {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n}\n.waves-circle {\n  text-align: center;\n  width: 2.5em;\n  height: 2.5em;\n  line-height: 2.5em;\n  border-radius: 50%;\n}\n.waves-float {\n  -webkit-mask-image: none;\n  box-shadow: 0px 1px 1.5px 1px rgba(0,0,0,0.12);\n}\n.waves-float:active {\n  box-shadow: 0px 8px 20px 1px rgba(0,0,0,0.3);\n}\n.waves-block {\n  display: block;\n}\na.waves-effect .waves-ripple {\n  z-index: -1;\n}\ninput[type=\"text\"],\ninput[type=\"password\"],\ntextarea,\n.roommemberspopover .input-invite {\n  background: #fff;\n  padding: 8px 10px;\n  color: #4d4d4d;\n  border: none;\n  border-bottom: 1px solid #dad6e0;\n  outline: none;\n  min-height: 34px;\n  width: 100%;\n}\ninput[type=\"text\"]:focus,\ninput[type=\"password\"]:focus,\ntextarea:focus,\n.roommemberspopover .input-invite:focus {\n  outline: none;\n  border-bottom: 1px solid #9b6a94;\n}\n.avatar {\n  position: relative;\n  display: inline-block;\n}\n.avatar:hover img {\n  opacity: 0.8;\n}\n.avatar-img-small {\n  width: 12px;\n  height: 12px;\n  border-radius: 12px;\n  overflow: hidden;\n}\n.avatar-status {\n  position: absolute;\n  top: -2px;\n  right: -3px;\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n}\n.popover {\n  position: absolute;\n  z-index: 200;\n  background: #fff;\n  padding: 11px 15px 15px 15px;\n  border-radius: 2px;\n  border: 1px solid #dad6e0;\n  opacity: 1;\n  box-shadow: 0px 4px 10px -1px rgba(33,32,34,0.5);\n  transition: opacity 0.2s;\n  margin: -10px 0 0 -4px;\n  max-width: 450px;\n  white-space: normal;\n  transform: scaleX(1) translate3d(0, 0, 0);\n  animation: hifromthetop 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  box-shadow: 0 5px 11px 0 rgba(0,0,0,0.18), 0 4px 15px 0 rgba(0,0,0,0.15);\n}\n.popover .po-scroll-wrap {\n  padding: 5px 5px 0 0;\n  max-height: 250px;\n  display: block;\n  overflow: auto;\n}\n.popover .po-scroll-wrap > li:hover .icon-wrap {\n  color: #9b6a94;\n}\n.popover .po-scroll-wrap > li:hover .toggle.leave {\n  color: #fc6e51;\n}\n.popover .po-scroll-wrap > li:hover .toggle.leave .fa-check-circle-o,\n.popover .po-scroll-wrap > li:hover .toggle.leave .j-info {\n  display: none;\n}\n.popover .po-scroll-wrap > li:hover .toggle.leave .fa.fa-times-circle-o,\n.popover .po-scroll-wrap > li:hover .toggle.leave .l-info {\n  display: inline-block;\n}\n.popover .po-scroll-wrap > li:hover .toggle.join {\n  color: #9ccb77;\n}\n.popover li {\n  padding: 6px 0;\n}\n.popover li.item {\n  padding: 7px 0 5px 4px;\n  cursor: pointer;\n}\n.popover li.item a {\n  color: #4d4d4d;\n}\n.popover li.item a:hover {\n  color: #4d4d4d;\n}\n.popover li.item:hover {\n  background: #f8f8f8;\n}\n.popover .name,\n.popover author {\n  height: 1.3em;\n  line-height: 1em;\n  overflow: hidden;\n  white-space: nowrap;\n  max-width: 180px;\n  text-overflow: ellipsis;\n}\n.popover.left {\n  animation: hifromtheleft 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n.popover.left::before {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: 10px;\n  left: -10px;\n  border-right: 10px solid #dad6e0;\n  border-top: 10px solid transparent;\n  border-bottom: 10px solid transparent;\n}\n.popover.left::after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: 12px;\n  left: -8px;\n  border-right: 8px solid #fff;\n  border-top: 8px solid transparent;\n  border-bottom: 8px solid transparent;\n}\n.popover.top::before {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -10px;\n  left: 89%;\n  border-style: solid;\n  border-width: 0 10px 10px;\n  border-color: #dad6e0 transparent;\n}\n.popover.top::after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -8px;\n  left: 90%;\n  border-style: solid;\n  border-width: 0 8px 8px;\n  border-color: #fff transparent;\n}\n.popover.hide {\n  opacity: 0;\n  transition: opacity 0.2s;\n}\n.popover .close {\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  color: #888291;\n  font-size: 30px;\n  line-height: 20px;\n}\n.popover h3 {\n  color: #888291;\n  font-size: 14px;\n  font-weight: normal;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n}\n.popover h4 {\n  color: #888291;\n  font-weight: bold;\n  text-transform: uppercase;\n  margin-bottom: 4px;\n  margin-right: 12px;\n}\n.popover.user-po {\n  margin: 34px 0 0 -213px;\n  right: 20px !important;\n  left: auto !important;\n}\n.popover.item-po {\n  margin-top: -90px;\n}\n.popover.item-po:before,\n.popover.item-po:after {\n  margin-top: 85px;\n}\n.popover.orga-po {\n  margin: 9px 0 0 -4px;\n}\n.popover.members-po {\n  margin: 42px 0 0 -76px;\n}\n.popover.members-po::before {\n  left: 15%;\n}\n.popover.members-po::after {\n  left: 15%;\n}\n.popover .toggle {\n  padding-left: 4px;\n  border: none;\n  float: right;\n  line-height: 1em;\n  background: transparent;\n}\n.popover .toggle:hover {\n  background: transparent;\n}\n.popover .toggle.join {\n  color: #4d4d4d;\n}\n.popover .toggle.join:active {\n  color: #6d8f52;\n}\n.popover .toggle.leave {\n  color: #9ccb77;\n}\n.popover .toggle.leave .fa.fa-times-circle-o,\n.popover .toggle.leave .l-info {\n  display: none;\n}\n.popover .toggle.leave:active {\n  color: #e9573f;\n}\n.userpopover,\n.organizationpopover {\n  width: 210px;\n}\n.userpopover .user-status-form,\n.organizationpopover .user-status-form {\n  height: 30px;\n}\n.userpopover .user-status-form input[type=\"text\"].user-status,\n.organizationpopover .user-status-form input[type=\"text\"].user-status {\n  width: 100%;\n  padding-left: 28px;\n}\n.userpopover .user-status-form input[type=\"text\"].user-status::selection,\n.organizationpopover .user-status-form input[type=\"text\"].user-status::selection {\n  background: #9b6a94;\n  color: #fff;\n}\n.userpopover .user-status-form .user-status-icon,\n.organizationpopover .user-status-form .user-status-icon {\n  display: block;\n  position: relative;\n  left: 8px;\n  top: -25px;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n}\n.userpopover .user-status-form .user-status-submit,\n.organizationpopover .user-status-form .user-status-submit {\n  display: none;\n}\n.userpopover ul,\n.organizationpopover ul {\n  margin: 10px -20px -15px -15px;\n}\n.userpopover li,\n.organizationpopover li {\n  border-top: 1px solid #e6e6e6;\n  margin: 0;\n  padding: 0;\n}\n.userpopover li:last-child a,\n.organizationpopover li:last-child a {\n  border-bottom-right-radius: 2px;\n  border-bottom-left-radius: 2px;\n}\n.userpopover li a,\n.organizationpopover li a {\n  padding: 8px 16px;\n  color: #4d4d4d;\n  font-weight: bold;\n}\n.userpopover li a .fa,\n.organizationpopover li a .fa {\n  color: #dad6e0;\n  margin-right: 8px;\n}\n.userpopover li a:hover,\n.organizationpopover li a:hover {\n  background: #f8f8f8;\n}\n.roompopover,\n.roomcreationpopover {\n  width: 360px;\n  height: 340px;\n}\n.roompopover .po-scroll-wrap,\n.roomcreationpopover .po-scroll-wrap {\n  padding-top: 0;\n}\n.roompopover .list-hl,\n.roomcreationpopover .list-hl {\n  padding-top: 0;\n}\n.roompopover .main,\n.roomcreationpopover .main {\n  margin: 0px;\n  overflow: hidden;\n}\n.roompopover .icon-wrap,\n.roomcreationpopover .icon-wrap {\n  font-size: 1.5em;\n  padding: 0;\n  float: left;\n  margin-right: 3px;\n  color: #dad6e0;\n  padding-top: 2px;\n}\n.roompopover .room-info,\n.roomcreationpopover .room-info {\n  margin: 0;\n  color: #888291;\n}\n.roompopover .room-info li,\n.roomcreationpopover .room-info li {\n  padding: 0;\n}\n.formrow {\n  margin-bottom: 10px;\n}\n.visibility-headline {\n  float: left;\n}\nlabel.text {\n  display: inline-block;\n  width: 120px;\n  margin-top: 4px;\n  padding-left: 3px;\n}\n.radio-wrapper {\n  display: inline-block;\n  width: 200px;\n  margin-top: 4px;\n}\ninput[type=\"radio\"] {\n  display: none;\n}\ninput[type=\"radio\"]:checked + label:before {\n  content: \"\\2022\";\n  color: #9b6a94;\n}\nlabel.radio-label {\n  display: block;\n  position: relative;\n  margin: 0 0 10px 20px;\n  padding-left: 2px;\n}\nlabel.radio-label:before {\n  content: \"\";\n  display: inline-block;\n  width: 17px;\n  height: 17px;\n  position: absolute;\n  padding-top: 1px;\n  left: -20px;\n  background-color: #f8f8f8;\n  box-shadow: inset 0px 2px 3px 0px rgba(0,0,0,0.1), 0px 1px 0px 0px rgba(255,255,255,0.6);\n  border-radius: 8px;\n  font-family: sans-serif;\n  font-size: 38px;\n  text-align: center;\n}\nlabel.radio-label:hover:before {\n  content: \"\\2022\";\n  color: #dad6e0;\n}\nlabel.radio-label span.radio-label-subline {\n  color: #888291;\n  display: block;\n  padding: 3px 4px 3px 0;\n}\n.button.create,\n.button.new,\n.button.delete {\n  float: right;\n}\n.pmpopover li.item,\n.roommemberspopover li.item {\n  padding: 6px 4px;\n}\n.pmpopover li.item .avatar-wrap,\n.roommemberspopover li.item .avatar-wrap {\n  margin-top: 1px;\n}\n.pmpopover li.item:hover,\n.roommemberspopover li.item:hover {\n  background: #e6e6e6;\n}\n.pmpopover .manage-users,\n.roommemberspopover .manage-users {\n  float: left;\n}\n.pmpopover .manage-users:hover,\n.roommemberspopover .manage-users:hover {\n  color: #fff;\n  text-decoration: none;\n}\n.pmpopover .manage-users i,\n.roommemberspopover .manage-users i {\n  margin-left: 6px;\n}\n.pmpopover {\n  width: 320px;\n}\n.user-list li .avatar-wrap {\n  margin-right: 5px;\n}\n.user-list li a {\n  float: left;\n}\n.user-list li span.btn-delete {\n  display: none;\n  color: #888291;\n  float: right;\n  margin: 4px 5px 0 0;\n}\n.user-list li:hover span.btn-delete {\n  display: inline-block;\n}\n.empty-message {\n  padding: 14px 0;\n}\n.roommemberspopover {\n  width: 320px;\n}\n.roommemberspopover .input-invite {\n  width: 100%;\n  height: 38px;\n  overflow: hidden;\n  margin: 5px 0;\n  resize: vertical;\n}\n.roommemberspopover .btn-invite {\n  display: block;\n  float: right;\n}\n.roommemberspopover .invite-to-room .Textcomplete-hidden {\n  display: none;\n}\n.roommemberspopover .invite-to-room .autocomplete-wrapper {\n  margin: 0;\n  top: -42px;\n}\n.roommemberspopover .invite-to-room .autocomplete-wrapper .autocomplete {\n  position: relative;\n  max-height: 150px;\n}\n.roommemberspopover .invite-to-room button {\n  float: right;\n  margin-left: 5px;\n}\n.roommemberspopover .invite-to-room button .icon {\n  color: #4fc1e9;\n}\n.labels,\n.addlabel,\n.btn-label {\n  display: none !important;\n}\n.label {\n  display: inline-block;\n  padding: 3px 7px;\n  font-weight: bold;\n  text-transform: uppercase;\n  color: #9956a2;\n  background: rgba(84,47,89,0.2);\n  border: 1px solid #542f59;\n  border-radius: 2px;\n}\n.label:hover {\n  color: #b885be;\n  background: rgba(84,47,89,0.35);\n}\n.label .fa {\n  margin-left: 6px;\n  text-transform: none;\n}\n.message-content .btn-label,\n.message-content .labels {\n  float: right;\n}\n.message-content .btn-label {\n  margin-right: 4px;\n}\n.message-content .label {\n  background: #f8f3f9;\n  border-color: #c69dcb;\n  opacity: 0.8;\n  color: #542f59;\n  text-decoration: none;\n  margin-left: 4px;\n}\n.message-content .label:hover {\n  opacity: 1;\n}\n.search-form {\n  position: relative;\n  transition: width 0.2s ease-out;\n  width: 192px;\n}\n@media (max-width: 800px) {\n  .search-form {\n    width: 128px;\n  }\n}\n.search-form .search {\n  height: 28px;\n  width: 100%;\n  padding: 4px 15px 4px 27px;\n  box-sizing: border-box;\n  background: none;\n  border: none;\n  border: 1px solid #9b6a94;\n  border-radius: 3px;\n  color: #fff;\n  outline: none;\n}\n.search-form .search:-moz-placeholder {\n  color: #9b6a94;\n}\n.search-form .search::-moz-placeholder {\n  color: #9b6a94;\n}\n.search-form .search:-ms-input-placeholder {\n  color: #9b6a94;\n}\n.search-form .search::-webkit-input-placeholder {\n  color: #9b6a94;\n}\n.search-form .search-icon,\n.search-form .close {\n  position: absolute;\n  top: 0;\n  color: #9b6a94;\n  width: 20px;\n  line-height: 28px;\n  font-size: 14px;\n  text-align: center;\n}\n.search-form .search-icon {\n  left: 4px;\n}\n.search-form .close {\n  right: 4px;\n  display: none;\n}\n.search-form .close:hover {\n  color: #fff;\n}\n.search-form .search-submit {\n  display: none;\n}\n.search-results {\n  padding-left: 0;\n  padding-right: 0;\n}\n.searching .search-results {\n  display: block;\n}\n.search-results .result-info,\n.search-results .result-filters {\n  padding-left: 30px;\n  padding-right: 30px;\n}\n.search-results .result-nr {\n  overflow: hidden;\n}\n.search-results .result-filters {\n  margin: 5px 0 0 0;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #e6e6e6;\n}\n.search-results .result-filters h2 {\n  font-weight: bold;\n  float: left;\n  margin-right: 12px;\n}\n.search-results .result-filters ul {\n  overflow: hidden;\n}\n.search-results .result-filters .filter-room {\n  float: right;\n}\n.search-results .result-filters .filter-list {\n  overflow: hidden;\n}\n.search-results .result-filters .filter-list li {\n  margin-right: 10px;\n}\n.search-results .result-filters .filter-list li i.fa {\n  margin-right: 6px;\n}\n.result-list {\n  margin-top: 18px;\n  border-top: 1px solid #e6e6e6;\n}\n.result-list > li {\n  position: relative;\n  border-bottom: 1px dashed #e6e6e6;\n}\n.result-list > li .message-link {\n  display: block;\n}\n.result-list > li .item-object {\n  margin: 0 -3px;\n}\n.result-list > li .item-object.minor,\n.result-list > li .item-object.minor i,\n.result-list > li .item-object.minor time,\n.result-list > li .item-object.minor span {\n  color: #dad6e0;\n}\n.result-list > li .item-object.minor .item-content {\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.result-list > li .item-type {\n  float: left;\n  width: 120px;\n  padding-left: 27px;\n  padding: 11px 10px 11px 27px;\n  text-transform: uppercase;\n  text-align: right;\n  font-size: 0.8em;\n  color: #888291;\n  font-weight: bold;\n}\n.result-list > li .item-content {\n  padding: 11px 20px 11px 10px;\n  overflow: hidden;\n  border-left: 1px solid #e6e6e6;\n  background: #fff;\n  color: #4d4d4d;\n}\n.result-list > li .item-content span {\n  margin-right: 8px;\n}\n.result-list > li .item-content strong {\n  background: #ffeead;\n  font-weight: normal;\n}\n.result-list > li .item-content p {\n  display: inline;\n}\n.result-list > li .item-content em {\n  background: #e6c647;\n  padding: 0px 3px;\n  margin: 0 -3px;\n  border-radius: 4px;\n}\n.result-list > li.objects:hover .item-content {\n  color: #4fc1e9;\n}\n.result-list > li .item-footer {\n  margin-top: 7px;\n  text-transform: uppercase;\n  font-weight: bold;\n}\n.result-list > li .item-footer li {\n  color: #888291;\n}\n.result-list > li .item-footer li i {\n  margin-right: 4px;\n}\n.result-list > li .item-footer li a {\n  color: #9b6a94;\n}\n.result-list > li .item-footer .option {\n  margin-right: 22px;\n}\n.result-list > li.selected {\n  border-left-color: #9b6a94;\n  background: #fff;\n}\n.result-list > li.selected::before {\n  content: u 25 B6;\n  position: absolute;\n  left: -16px;\n  top: 50%;\n  margin-top: -3px;\n  border-left: 8px solid #212022;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n}\n.result-list > li .direct-link {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n.result-list > li a {\n  text-decoration: none;\n}\n.result-list > li a:hover {\n  text-decoration: none;\n}\nbody .searching .client-body {\n  padding-bottom: 0;\n}\nbody .searching .footer {\n  transform: translateY(100%);\n  transition: transform ease 400ms;\n}\nbody .searching .room-header .room-info-wrap {\n  display: none;\n}\nbody .searching .room-header .search-form {\n  width: 100% !important;\n}\nbody .searching .room-header .close {\n  display: block;\n}\n.zoom-image {\n  cursor: pointer;\n}\n.zoom-image-clone {\n  position: fixed;\n  transition: transform 0.2s linear;\n  z-index: 999;\n  cursor: zoom-out;\n}\n#overlay {\n  z-index: 998;\n  cursor: zoom-out;\n  background-color: #4d4d4d;\n  background-color: rgba(77,77,77,0.8);\n}\n.loading {\n  transition: transform 0.2s linear;\n  opacity: 0.75;\n  cursor: progress;\n}\n#dialog,\n.dialog {\n  background: none;\n  border: none;\n  top: 72px;\n  bottom: 72px;\n  margin-left: -300px;\n  overflow: auto;\n  width: 600px;\n}\n.dialog .content {\n  background: #fff;\n  padding: 15px;\n  border-radius: 2px;\n  border: 1px solid #dad6e0;\n  opacity: 1;\n  box-shadow: 0px 4px 10px -1px rgba(33,32,34,0.5);\n  transition: opacity 500ms;\n  max-width: 100%;\n  white-space: normal;\n  overflow: auto;\n  animation: hifromthebottom 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n.dialog .content .body {\n  position: relative;\n  height: 100%;\n}\n.dialog .content .body img {\n  max-width: 100%;\n}\n#dialog .close,\n.dialog .close,\n.introjs-tooltip .close {\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  color: #888291;\n  font-size: 30px;\n  line-height: 20px;\n  z-index: 20;\n  background: #fff;\n}\n#dialog h2,\n.dialog h2,\n.introjs-tooltip h2 {\n  margin-bottom: 6px;\n}\n#dialog h3,\n.dialog h3,\n.introjs-tooltip h3,\n#dialog h4,\n.dialog h4,\n.introjs-tooltip h4,\n#dialog h5,\n.dialog h5,\n.introjs-tooltip h5 {\n  color: #888291;\n  font-weight: normal;\n}\n#dialog h3,\n.dialog h3,\n.introjs-tooltip h3 {\n  text-transform: uppercase;\n  margin-bottom: 6px;\n}\n#dialog h4,\n.dialog h4,\n.introjs-tooltip h4,\n#dialog h5,\n.dialog h5,\n.introjs-tooltip h5 {\n  margin-bottom: 6px;\n}\n#dialog h4,\n.dialog h4,\n.introjs-tooltip h4 {\n  font-weight: bold;\n}\n#dialog p,\n.dialog p,\n.introjs-tooltip p {\n  margin-bottom: 8px;\n  line-height: 17px;\n}\n#dialog ul.ver-list,\n.dialog ul.ver-list,\n.introjs-tooltip ul.ver-list {\n  padding-left: 20px;\n  list-style-type: disc;\n}\n#dialog .delete-room-form,\n.dialog .delete-room-form,\n.introjs-tooltip .delete-room-form {\n  margin-top: 12px;\n}\n#dialog a.creator-name,\n.dialog a.creator-name,\n.introjs-tooltip a.creator-name {\n  color: #4fc1e9;\n  text-decoration: none;\n  border-bottom: 1px solid #4fc1e9;\n  margin: 1px;\n  padding: 1px 0;\n}\n#dialog table,\n.dialog table,\n.introjs-tooltip table,\n#dialog td,\n.dialog td,\n.introjs-tooltip td {\n  vertical-align: top;\n}\n#dialog table,\n.dialog table,\n.introjs-tooltip table {\n  margin: 0 0 5px 0;\n  width: 100%;\n  display: table;\n  max-width: 100%;\n}\n#dialog td,\n.dialog td,\n.introjs-tooltip td {\n  width: 50%;\n}\n#dialog td > em,\n.dialog td > em,\n.introjs-tooltip td > em {\n  margin-bottom: 5px;\n}\n#dialog td:first-of-type,\n.dialog td:first-of-type,\n.introjs-tooltip td:first-of-type {\n  padding-right: 22px;\n}\n#dialog pre,\n.dialog pre,\n.introjs-tooltip pre {\n  padding-bottom: 3px;\n}\n#dialog code,\n.dialog code,\n.introjs-tooltip code {\n  width: 100%;\n}\n#dialog .example-text,\n.dialog .example-text,\n.introjs-tooltip .example-text {\n  background: #f8f8f8;\n  border-radius: 3px;\n  border: 1px solid #dad6e0;\n  padding: 0 2px;\n}\n#IModalOverlay,\n.overlay {\n  background: rgba(0,0,0,0.75);\n  opacity: 1;\n  animation: overlayFlowIn 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n.introjs-helperNumberLayerelperLayer {\n  background-color: rgba(255,255,255,0.1);\n  border-radius: 2px;\n  border: 1px solid rgba(255,255,255,0.7);\n}\n.introjs-tooltip {\n  min-width: 280px;\n  max-width: 450px;\n}\n.introjs-tooltip h2 {\n  margin-bottom: 6px;\n}\n.introjs-tooltip .introjs-tooltiptext {\n  padding: 10px;\n}\n.intro-welcome {\n  width: 550px;\n  max-width: 550px;\n}\n.introjs-helperNumberLayer {\n  width: 18px;\n  height: 22px;\n  background: #9b6a94;\n  border: 1px solid rgba(255,255,255,0.7);\n  border-top-width: 0;\n  border-left-width: 0;\n  border-radius: 2px 0 2px 0;\n  top: 0;\n  left: 0;\n  text-shadow: none;\n  padding: 0;\n  font-family: \"Roboto\", Arial, Helvetica, Geneva, sans-serif !important;\n}\n.introjs-bullets ul li a {\n  width: 12px;\n  height: 12px;\n  color: #dad6e0;\n}\n.introjs-bullets ul li a.active {\n  color: #9b6a94;\n}\n.introjs-button {\n  font-family: \"Roboto\", Arial, Helvetica, Geneva, sans-serif !important;\n  text-shadow: none;\n  color: #4d4d4d;\n  background: none;\n}\n.introjs-button:hover {\n  box-shadow: none;\n  color: #4d4d4d;\n}\n.introjs-button.introjs-disabled {\n  display: none;\n}\n.introjs-button.introjs-nextbutton {\n  background: none;\n  color: #4fc1e9;\n  border-radius: 0;\n}\n.introjs-button.introjs-nextbutton:hover {\n  background: #f8f8f8;\n}\n.introjs-button.introjs-nextbutton:active {\n  background: #e6e6e6;\n}\n.introjs-button.introjs-prevbutton {\n  display: none;\n}\n.introjs-center {\n  margin: 0 auto;\n  text-align: center;\n}\n.introjs-image {\n  width: 100px;\n  height: auto;\n}\n.introjs-push-arrow-bottom .introjs-arrow {\n  top: auto !important;\n  bottom: 20px !important;\n}\n.emoji-sizer,\nimg.emoji {\n  font-size: 21px !important;\n  line-height: 21px !important;\n}\n.emoji-inner,\nimg.emoji {\n  vertical-align: middle !important;\n}\n.ac.emoji {\n  height: 21px !important;\n  vertical-align: middle !important;\n}\n.message img.emoji,\n.ac.emoji img.emoji {\n  margin-top: -4px;\n}\n#drop-anywhere {\n  background: rgba(0,0,0,0.85);\n  z-index: 9998;\n}\n#drop-anywhere:after {\n  content: \" \";\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  right: 10px;\n  bottom: 10px;\n  border: 2px dashed #4fc1e9;\n  border-radius: 15px;\n}\n#drop-anywhere .drop-inner-wrap {\n  position: absolute;\n  top: 45%;\n  left: 30px;\n  right: 30px;\n  text-align: center;\n  color: #4fc1e9;\n  padding-top: 92px;\n}\n#drop-anywhere .drop-inner-wrap .image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  animation: glide 600ms linear infinite;\n}\n#drop-anywhere .drop-inner-wrap .image img {\n  position: relative;\n}\n#drop-anywhere .drop-inner-wrap p.main {\n  margin-bottom: 5px;\n}\n#drop-anywhere .drop-inner-wrap p.description {\n  color: #dad6e0;\n}\n.tooltip {\n  position: absolute;\n  padding: 0.8em 1em;\n  top: 15px;\n  max-width: 200px;\n  color: #fff;\n  background: #212022;\n}\n.client-body {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  margin-left: 240px;\n  min-width: 500px;\n  position: relative;\n  overflow: hidden;\n  transition: width 400ms ease;\n}\n.client-body .chat-wrapper {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  background: #f8f8f8;\n  overflow: auto;\n  padding: 0;\n  z-index: 10;\n}\n.client-body .chat {\n  flex: 1;\n  position: relative;\n  padding: 20px 0;\n}\n.client-body a {\n  color: #4fc1e9;\n}\n.client-body a:hover {\n  color: #69caec;\n}\n.welcome-message {\n  margin: 0;\n  padding: 30px 40px 42px 20px;\n}\n@media (max-width: 720px) {\n  .welcome-message {\n    text-align: center;\n  }\n}\nbody.notifications-disabled .welcome-message {\n  padding-top: 62px !important;\n}\n.welcome-message .image {\n  float: left;\n}\n@media (max-width: 720px) {\n  .welcome-message .image {\n    float: none;\n  }\n}\n.welcome-message > div {\n  overflow: hidden;\n  padding-left: 20px;\n}\n@media (max-width: 720px) {\n  .welcome-message > div {\n    padding-left: 0;\n  }\n}\n.welcome-message h2,\n.welcome-message h3,\n.welcome-message p,\n.welcome-message ul {\n  max-width: 720px;\n  margin-bottom: 2px;\n}\n.welcome-message h2 {\n  color: #888291;\n  margin-bottom: 4px;\n}\n.welcome-message h3 {\n  font-weight: bold;\n  color: #6d6775;\n  margin-bottom: 3px;\n}\n.welcome-message .alert-inline.warning::after {\n  content: \"\";\n}\n.welcome-message .welcome-tasks {\n  margin-top: 20px;\n}\n.welcome-message .welcome-tasks .task-description {\n  font-weight: bold;\n  color: #888291;\n  margin-bottom: 2px;\n}\n.welcome-message .welcome-tasks li i {\n  margin-right: 4px;\n}\n.welcome-message .welcome-tasks .option {\n  padding-top: 5px;\n}\n@media (min-width: 721px) {\n  .welcome-message .welcome-tasks .option {\n    float: left;\n    margin: 0 22px 10px 0;\n  }\n}\n.welcome-message .welcome-tasks .invite-to-room .input-invite {\n  width: 70%;\n  height: 38px;\n  padding: 9px 12px 8px 12px;\n  outline: none;\n  box-sizing: border-box;\n  float: left;\n  margin-right: 8px;\n}\n.welcome-message .welcome-tasks .invite-to-room .btn-invite {\n  max-width: 200px;\n  text-overflow: ellipsis;\n  height: 34px;\n}\n.welcome-message .welcome-tasks .autocomplete-wrapper {\n  margin: 0;\n  top: 4px;\n  width: 70%;\n}\n.welcome-message .welcome-tasks .autocomplete-wrapper .autocomplete {\n  top: 0px;\n}\n.message-group {\n  margin: 10px 30px 20px 20px;\n  position: relative;\n}\n.message-group .avatar {\n  float: left;\n  position: relative;\n  font-weight: bold;\n}\n.message-group .avatar .image {\n  width: 42px;\n  height: 42px;\n  float: left;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n.message-group .message-inner-wrap {\n  display: inline-block;\n  padding: 0;\n  border-radius: 3px;\n  position: relative;\n  max-width: 100%;\n}\n.message-group.user .avatar::after,\n.message-group.user .avatar::before {\n  content: \"\";\n  position: absolute;\n}\n.message-group.user .avatar::after {\n  z-index: 9;\n  right: -2px;\n  top: 1px;\n  border-right: 9px solid #fff;\n  border-bottom: 13px solid transparent;\n}\n.message-group.user .avatar::before {\n  border-right: 10px solid #e0dfdf;\n  border-bottom: 14px solid transparent;\n  right: -1px;\n  top: 0px;\n}\n.message-group.user .message-inner-wrap {\n  border: 1px solid #e0dfdf;\n  background-color: #fff;\n}\n.message-group.user .text.main {\n  max-width: 600px;\n}\n.message-group.service .message-content {\n  border-left: 2px solid #4fc1e9;\n  max-width: 740px;\n}\n.message-group.service .message {\n  padding: 10px 16px 9px 26px;\n}\n.message-group.deleted {\n  color: #888291;\n}\n.message-group.deleted .message-author {\n  color: #888291;\n}\n.message-group.deleted .time {\n  color: #888291;\n}\n.message-group:last-child {\n  margin-bottom: 10px;\n}\n.message-group.requested.user .avatar::after {\n  border-right-color: #cfffcb !important;\n}\n.message-group.creator.user .avatar::after {\n  border-right-color: #f0faff;\n}\n.message-group.creator.user .avatar::before {\n  border-right-color: #d2e1e6;\n}\n.message-group.creator.user .message-inner-wrap {\n  border-color: #d2e1e6;\n  background: #f0faff;\n}\n.message-group.creator.user .message:after {\n  border-color: #dbe7ed;\n}\n.message-group.creator.user .message-author,\n.message-group.creator.user .message-author:hover {\n  color: #4e4d4f;\n  text-decoration: none;\n}\n@media (max-width: 950px) {\n  .message-group.creator.user .avatar {\n    float: right;\n  }\n  .message-group.creator.user .avatar .image {\n    margin-left: 10px;\n    margin-right: 0;\n    display: none;\n  }\n  .message-group.creator.user .avatar::after {\n    left: -2px;\n    right: auto;\n    top: 1px;\n    border-left: 9px solid #f0faff;\n    border-right: none;\n    border-bottom: 13px solid transparent;\n  }\n  .message-group.creator.user .avatar::before {\n    border-left: 10px solid #d2e1e6;\n    border-right: none;\n    border-bottom: 14px solid transparent;\n    left: -1px;\n    right: auto;\n    top: 0px;\n  }\n  .message-group.creator.user .message-content {\n    text-align: right;\n    padding-right: 0;\n    padding-left: 68px;\n  }\n  .message-group.creator.user .message-inner-wrap {\n    text-align: left;\n    max-width: 100%;\n  }\n  .message-group.creator.user .edit {\n    width: 20px;\n    padding-top: 0;\n  }\n}\n.messageinfo {\n  color: #b3b3b3;\n  text-align: left;\n  margin-bottom: 8px;\n}\n.messageinfo span {\n  color: #b3b3b3;\n}\n.messageinfo .message-author {\n  display: inline;\n  color: #4e4d4f;\n  font-weight: bold;\n}\n.messageinfo a.timelink {\n  color: #b3b3b3;\n}\n.messageinfo a.timelink:hover {\n  text-decoration: none !important;\n}\n.messageinfo a.timelink .time {\n  display: inline;\n}\n.messageinfo a.timelink .time .dif-tz,\n.messageinfo a.timelink .time .user-tz {\n  opacity: 0;\n}\n.messageinfo a.timelink:hover .dif-tz,\n.messageinfo a.timelink:hover .user-tz {\n  opacity: 1;\n  text-decoration: none !important;\n}\n.message-content {\n  margin-left: 52px;\n}\n.message-content .message {\n  clear: both;\n  padding: 9px 16px 10px 16px;\n  position: relative;\n}\n.message-content .message:after {\n  content: \"\";\n  position: absolute;\n  top: -1px;\n  left: 16px;\n  right: 16px;\n  height: 1px;\n  border-top: 1px solid #f2f2f2;\n}\n.message-content .message.freshmessage {\n  animation: hifromthebottomNoShadow 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n.message-content .message.first {\n  margin-top: 0;\n  border-top: 1px;\n}\n.message-content .message.first:after {\n  border: none;\n}\n.message-content .message:hover > .edit {\n  opacity: 1;\n}\n.message-content .message .edit {\n  opacity: 0;\n}\n.message-content .message .edit {\n  display: inline-block;\n  vertical-align: top;\n  color: #d2e1e6;\n  position: absolute;\n  left: 100%;\n  top: 0;\n  width: 38px;\n  padding-left: 5px;\n  bottom: 0;\n  padding-top: 10px;\n}\n.message-content .message .edit i {\n  margin-right: 4px;\n}\n.message-content .message .edit i:hover {\n  color: #888291;\n}\n.message-content .message .edit i:active {\n  color: #66616e;\n}\n.message-content .message .edit .btn-delete:hover {\n  color: #e9573f;\n}\n.message-content .message .edit .btn-delete:active {\n  color: #c73017;\n}\n.message-content .message .outertime {\n  position: absolute;\n  right: 100%;\n  color: #dad6e0;\n  padding-right: 5px;\n  visibility: hidden;\n  text-align: right;\n  width: 60px;\n  top: 0;\n  bottom: 0;\n  padding-top: 16px;\n}\n.message-content .message:hover .outertime {\n  visibility: visible;\n}\n.message-content .message .status-control {\n  float: right;\n  margin-left: 8px;\n  min-width: 80px;\n  text-align: right;\n}\n.message-content .message .status-control .unsent {\n  color: #e9573f;\n}\n.message-content .message .status-control .unsent .status-label {\n  color: #fc6e51;\n}\n.message-content .message .status-control .resend {\n  display: none;\n  color: #3bafda;\n  cursor: pointer;\n}\n.message-content .message .status-control .pending {\n  color: #dad6e0;\n}\n.message-content .message .status-control i {\n  margin-left: 6px;\n  pointer-events: none;\n}\n.message-content .message .status-control .status-label {\n  font-weight: bold;\n  pointer-events: none;\n}\n.message-content .message.pending .text,\n.message-content .message.unsent .text {\n  color: #b7bcbf;\n  overflow: hidden;\n}\n.message-content .message.unsent .status-control:hover .resend {\n  display: block;\n}\n.message-content .message.unsent .status-control:hover .unsent {\n  display: none;\n}\n.message-content .message.editing {\n  background: #faf4da !important;\n  color: #4d4d4d !important;\n  z-index: 10;\n  position: relative;\n}\n.message-content .message.editing .message-author {\n  color: #888291;\n}\n.message-content .message.editing ~ .avatar::after {\n  border-color: #faf4da;\n}\n.message-content .message.requested {\n  background: rgba(201,255,174,0.53);\n  color: #4d4d4d;\n}\n.message-content .message.requested:after {\n  top: 0;\n}\n.message-content .message.requested .message-author {\n  color: #888291;\n}\n.message-content .message.removing {\n  background: #f5e8b5;\n  color: #4d4d4d;\n  z-index: 10;\n  position: relative;\n}\n.message-content .message.removing ~ .avatar::after {\n  border-color: #faf4da;\n}\n.message-content .message.removed {\n  background: #fec5b9;\n  color: #4d4d4d;\n  z-index: 10;\n  position: relative;\n}\n.message-content .message.removed ~ .avatar::after {\n  border-color: #fec5b9;\n}\n.message-content .message a.attachment {\n  display: inline;\n  border-bottom: 1px solid #4fc1e9;\n  margin: 1px;\n  padding: 1px 0;\n  vertical-align: baseline;\n}\n.message-content .message a.attachment:hover {\n  color: #7bd1ee;\n  text-decoration: none;\n  border-color: #3bafda !important;\n}\n.message-content .message a.attachment:before {\n  font-weight: normal;\n  content: \"\\f016\";\n  font-family: FontAwesome;\n  margin-right: 6px;\n}\n.message-content .message a.attachment[href$=\".pdf\"]:before {\n  content: \"\\f1c1\";\n}\n.message-content .message a.attachment[href$=\".zip\"]:before,\n.message-content .message a.attachment[href$=\".rar\"]:before,\n.message-content .message a.attachment[href$=\".7z\"]:before,\n.message-content .message a.attachment[href$=\".gzip\"]:before {\n  content: \"\\f1c6\";\n}\n.message-content .message a.attachment[href$=\".mp3\"]:before,\n.message-content .message a.attachment[href$=\".wav\"]:before,\n.message-content .message a.attachment[href$=\".wma\"]:before {\n  content: \"\\f1c7\";\n}\n.message-content .message a.attachment[href$=\".xls\"]:before,\n.message-content .message a.attachment[href$=\".xlsx\"]:before,\n.message-content .message a.attachment[href$=\".csv\"]:before {\n  content: \"\\f1c3\";\n}\n.message-content .message a.attachment[href$=\".doc\"]:before,\n.message-content .message a.attachment[href$=\".docx\"]:before,\n.message-content .message a.attachment[href$=\".rtf\"]:before {\n  content: \"\\f1c2\";\n}\n.message-content .message a.attachment[href$=\".ppt\"]:before,\n.message-content .message a.attachment[href$=\".pptx\"]:before {\n  content: \"\\f1c4\";\n}\n.message-content .message a.attachment[href$=\".png\"]:before,\n.message-content .message a.attachment[href$=\".jpg\"]:before,\n.message-content .message a.attachment[href$=\".jpeg\"]:before,\n.message-content .message a.attachment[href$=\".bmp\"]:before,\n.message-content .message a.attachment[href$=\".tif\"]:before,\n.message-content .message a.attachment[href$=\".tiff\"]:before {\n  content: \"\\f1c5\";\n}\n.message-content .message a.attachment[href$=\".wmv\"]:before,\n.message-content .message a.attachment[href$=\".avi\"]:before,\n.message-content .message a.attachment[href$=\".mpg\"]:before,\n.message-content .message a.attachment[href$=\".mpeg\"]:before,\n.message-content .message a.attachment[href$=\".mov\"]:before,\n.message-content .message a.attachment[href$=\".mp4\"]:before {\n  content: \"\\f1c8\";\n}\n.message-content .message .img-atm {\n  display: inline-block;\n}\n.message-content .message .image-wrap {\n  display: inline-block;\n  line-height: 1px;\n  max-height: 480px;\n  overflow: hidden;\n}\n.message-content .message .image-wrap img {\n  max-width: 100%;\n}\nspan.author-deleted {\n  font-weight: bold;\n  text-transform: uppercase;\n  margin-left: 4px;\n}\n.typing-notification {\n  margin: 0 30px 0px 66px;\n  color: #888291;\n  min-height: 11px;\n  text-align: center;\n}\n.typing-notification i.fa {\n  margin-left: 1px;\n}\n.typing-notification .dotOne {\n  opacity: 0;\n  -webkit-animation: dot 1.3s infinite;\n  -webkit-animation-delay: 0s;\n  animation: dot 1.3s infinite;\n  animation-delay: 0s;\n}\n.typing-notification .dotTwo {\n  opacity: 0;\n  -webkit-animation: dot 1.3s infinite;\n  -webkit-animation-delay: 0.2s;\n  animation: dot 1.3s infinite;\n  animation-delay: 0.2s;\n}\n.typing-notification .dotThree {\n  opacity: 0;\n  -webkit-animation: dot 1.3s infinite;\n  -webkit-animation-delay: 0.3s;\n  animation: dot 1.3s infinite;\n  animation-delay: 0.3s;\n}\n@-webkit-keyframes dot {\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.text {\n  padding: 0;\n  margin-bottom: 1px;\n  max-width: 85%;\n  word-wrap: break-word;\n  transition: opacity 0.2s linear;\n}\n.text em {\n  font-style: italic;\n}\n.text ul,\n.text ol {\n  padding-left: 18px;\n}\n.text ul {\n  list-style: disc outside none;\n}\n.text ol {\n  list-style: decimal outside none;\n}\n.text blockquote {\n  border-left: 3px solid #dad6e0;\n  margin: 4px 0;\n  padding: 0.5em 10px;\n  font-style: italic;\n  color: #888291;\n}\n.text pre {\n  overflow: hidden;\n  color: #4d4d4d;\n}\n.text code {\n  border: 1px solid #dad6e0;\n  border-radius: 2px;\n  background: #fff;\n  padding: 0 4px;\n  display: inline-block;\n  margin-bottom: -1px;\n  white-space: pre-wrap; /* CSS3 */\n  white-space: -moz-pre-wrap; /* Mozilla, post millennium */\n  white-space: -pre-wrap; /* Opera 4-6 */\n  white-space: -o-pre-wrap; /* Opera 7 */\n  word-wrap: break-word; /* Internet Explorer 5.5+ */\n  color: #4d4d4d;\n}\n.text .warning-unsent {\n  color: #dad6e0;\n}\n.text .warning-unsent:before {\n  content: \"\\f071\";\n  font-family: FontAwesome;\n  color: #e6c647;\n  margin-right: 6px;\n}\n.text p {\n  margin-bottom: 8px;\n}\n.text p:last-of-type {\n  margin-bottom: 0;\n}\n.text p .markdown-img-wrapper {\n  text-align: center;\n  vertical-align: middle;\n  display: table-cell;\n  height: 250px;\n  width: 400px;\n  border: 1px solid #eeecef;\n  border-radius: 2px;\n}\n.text p .markdown-img-wrapper img {\n  max-width: 350px;\n  max-height: 200px;\n}\n.googledrive .text p .markdown-img-wrapper {\n  text-align: inherit;\n  vertical-align: inherit;\n  display: inherit;\n  height: inherit;\n  width: inherit;\n  border: inherit;\n  border-radius: inherit;\n}\n.googledrive .text p .markdown-img-wrapper img {\n  max-width: inherit;\n  max-height: inherit;\n}\n.date-separator,\n.newmessage-separator {\n  text-align: center;\n  color: #888291;\n  position: relative;\n  height: 30px;\n  padding: 5px 0 0 0;\n  margin: 0 30px 20px 20px;\n}\n.date-separator span,\n.newmessage-separator span {\n  color: #542f59;\n  background: #f8f8f8;\n  padding: 4px 16px;\n  position: relative;\n  z-index: 5;\n  border: 2px solid #9ccb77;\n  border-radius: 3px;\n}\n.date-separator::before,\n.newmessage-separator::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  background-color: #d9d9d9;\n  height: 1px;\n  margin-top: 1px;\n}\n.date-separator span {\n  color: #9ccb77;\n}\n.date-separator::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  background-color: #d9d9d9;\n  height: 1px;\n  margin-top: 1px;\n}\n.newmessage-separator span {\n  border-color: #4fc1e9;\n  color: #4fc1e9;\n}\n.content-break {\n  height: 1px;\n  margin: 5px 0;\n}\n.load-button {\n  text-align: center;\n}\n.load-button a {\n  padding: 12px 20px;\n  display: block;\n  text-transform: uppercase;\n  font-weight: bold;\n}\n.load-button a i {\n  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n.load-button a:hover i {\n  transform: scale(1.3, 1.3);\n}\n.bigarrow {\n  border: 2px solid #888291;\n  background: #fff;\n  border-radius: 50%;\n  position: fixed;\n  bottom: 88px;\n  right: 20px;\n  color: #888291;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  overflow: hidden;\n}\n.bigarrow i {\n  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n.bigarrow:hover {\n  border-color: #3bafda;\n}\n.bigarrow:hover i {\n  transform: scale(1.3, 1.3);\n}\n.breakpointmessage {\n  border-top: 1px solid #dbdbdb;\n  box-shadow: 0 1px 2px #dad6e0 inset;\n  color: #888291;\n}\n@-moz-keyframes dot {\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@-webkit-keyframes dot {\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@-o-keyframes dot {\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes dot {\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.room-header {\n  display: flex;\n  align-items: center;\n  height: 54px;\n  z-index: 30;\n  background: #81487a;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.room-header .room-header-wrap {\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 0 10px 0 20px;\n}\n.room-header .room-header-wrap .room-info-wrap {\n  flex: 1;\n  display: flex;\n  align-items: center;\n}\n.room-header .room-header-wrap .room-info-wrap input.room-name {\n  background: transparent;\n  border: none;\n  outline: none;\n  padding: 0;\n  border-bottom: 1px solid #af88a9;\n}\n.room-header .room-header-wrap .room-info-wrap input.submit-rename {\n  display: none;\n}\n.room-header .room-header-wrap .room-info-wrap .room-name {\n  margin: 0;\n  color: #fff;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 220px;\n  border-bottom: 1px solid #81487a;\n}\n@media (max-width: 1024px) {\n  .room-header .room-header-wrap .room-info-wrap .room-name {\n    max-width: 200px;\n  }\n}\n@media (max-width: 768px) {\n  .room-header .room-header-wrap .room-info-wrap .room-name {\n    max-width: 180px;\n  }\n}\n.room-header .room-header-wrap .room-info-wrap .room-name.editable:hover {\n  border-color: #9b6a94;\n}\n.room-header .room-header-wrap .room-info-wrap .room-name.editable:hover+.options-wrap .option-rename-room {\n  color: #fff;\n}\n.room-header .room-header-wrap .room-info-wrap .options-wrap,\n.room-header .room-header-wrap .room-info-wrap .rename-options-wrap {\n  display: inline-block;\n  margin-left: 5px;\n}\n@media (max-width: 800px) {\n  .room-header .room-header-wrap .room-info-wrap .options-wrap,\n  .room-header .room-header-wrap .room-info-wrap .rename-options-wrap {\n    display: none;\n  }\n}\n.room-header .room-header-wrap .room-info-wrap .header-option {\n  display: inline-block;\n  color: #9b6a94;\n  padding: 0 6px;\n  font-size: 14px;\n}\n.room-header .room-header-wrap .room-info-wrap .header-option:hover {\n  color: #fff;\n}\n.room-header .room-header-wrap .room-info-wrap .room-users-wrap {\n  margin-left: 20px;\n}\n.room-header .room-header-wrap .room-info-wrap .room-users-wrap:hover .user-count {\n  color: #fff;\n}\n.room-header .room-header-wrap .room-info-wrap .room-users-wrap:hover .user-count .fa {\n  color: #fff;\n}\n.room-header .room-header-wrap .room-info-wrap .room-users-wrap span.user-count {\n  font-weight: bold;\n  color: #9b6a94;\n}\n.room-header .room-header-wrap .room-info-wrap .room-users-wrap span.user-count .fa.fa-user {\n  font-size: 14px;\n}\n.room-header .room-header-wrap .room-info-wrap .room-users-wrap span.user-count .fa.fa-caret-down {\n  margin-left: 5px;\n  color: #9b6a94;\n}\n.room-header .room-header-wrap .user-menu-wrap {\n  margin-left: 10px;\n  display: flex;\n  align-items: center;\n}\n@media (max-width: 600px) {\n  .room-header .room-header-wrap .user-menu-wrap {\n    display: none;\n  }\n}\n.room-header .room-header-wrap .user-menu-wrap:hover .fa {\n  color: #fff;\n}\n.room-header .room-header-wrap .user-menu-wrap .fa {\n  margin-left: 5px;\n  color: #9b6a94;\n}\n.room-header .room-header-wrap .user-menu-wrap .avatar-wrap {\n  margin: 0;\n}\n.room-header .room-header-wrap .user-menu-wrap .avatar-wrap img {\n  float: none;\n  vertical-align: bottom;\n}\n.room-header .room-header-wrap .user-menu-wrap .online,\n.room-header .room-header-wrap .user-menu-wrap .offline {\n  width: 10px;\n  height: 10px;\n}\n.navigation {\n  height: 100vh;\n  overflow: auto;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 240px;\n  color: #888291;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.navigation .navigation {\n  padding: 0px;\n  background: #f2f2f2;\n}\n.org-info {\n  height: 54px;\n  background: #673960;\n}\n.org-info a {\n  padding: 0 16px;\n  display: block;\n}\n.org-info .logo {\n  height: 54px;\n  display: flex;\n  align-items: center;\n}\n.org-info .logo .avatar-wrap {\n  margin: 0;\n  float: none;\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n}\n.org-info .logo .name {\n  margin-left: 5px;\n  max-width: 172px;\n  overflow: hidden;\n  color: #fff;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.org-info .logo .fa {\n  color: #9b6a94;\n  margin-left: 5px;\n}\n.org-info .logo:hover {\n  background: #693a62;\n  text-decoration: none;\n}\n.org-info .logo:hover i,\n.org-info .logo:hover .name {\n  color: #fff;\n  text-decoration: none;\n}\n.nav-tabs {\n  background: #f8f8f8;\n  border-bottom: 1px solid #e6e6e6;\n  border-right: 1px solid #e6e6e6;\n  width: 100%;\n}\n.nav-tabs > div {\n  float: left;\n  width: 44%;\n}\n.nav-tabs > div a {\n  display: block;\n  width: 100%;\n  height: 42px;\n  text-align: center;\n  line-height: 45px;\n  color: #888291;\n  text-decoration: none;\n}\n.nav-tabs > div a:hover {\n  background: #f2f2f2;\n  color: #6f6977;\n}\n.nav-tabs > div .fl-notification {\n  margin: 12px 5px 5px;\n}\n.nav-tabs .nav-tab-search {\n  width: 12%;\n}\n.nav-tabs .nav-tab-search a {\n  color: #888291;\n  border-left: 1px dashed #e6e6e6;\n}\n.nav-tabs .selected a {\n  border-bottom: 3px solid #dc2e5f;\n  color: #dc2e5f !important;\n}\n.nav-tabs .selected a:hover {\n  background: inherit;\n}\n.room-list {\n  padding: 14px 0 12px 0;\n  height: 61%;\n  border-right: 1px solid #e6e6e6;\n  background: #f2f2f2;\n}\n.room-list .rooms {\n  height: 100%;\n}\n.nav-title-wrap {\n  display: block;\n  padding-bottom: 6px;\n  padding-top: 6px;\n}\n.nav-title-wrap .nav-title {\n  text-transform: uppercase;\n  padding-left: 20px;\n  overflow: hidden;\n}\n.nav-title-wrap .nav-title:hover {\n  text-decoration: none;\n}\n.nav-title-wrap .nav-title:hover a {\n  background: #f2f2f2;\n}\n.nav-title-wrap .nav-button {\n  float: right;\n  margin-right: 10px;\n  margin-top: -3px;\n}\n.nav-title-wrap .nav-button .fa {\n  color: #dad6e0;\n}\n.nav-title-wrap:hover .fa {\n  color: #888291;\n}\na.nav-title-wrap {\n  text-decoration: none !important;\n  color: #888291;\n}\na.nav-title-wrap:hover {\n  color: #888291;\n}\n.nav-list a {\n  color: #4d4d4d;\n  text-decoration: none !important;\n}\n.nav-list a:hover div.item-inner-wrp {\n  color: #717171;\n  background: #ededed;\n}\n.nav-list .item a {\n  display: block;\n  padding: 1px 10px;\n  text-decoration: none;\n  color: #666;\n}\n.nav-list .item a div.item-inner-wrp {\n  padding: 10px 10px 7px;\n  border-radius: 4px;\n}\n.nav-list .item .name {\n  height: 1.25em;\n  line-height: 1em;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: block;\n}\n.nav-list .item.deleted .name {\n  color: #888291;\n}\n.nav-list .item.deleted .avatar-status {\n  background: #888291;\n}\n.nav-list .item.deleted span.user-deleted {\n  color: #dad6e0;\n  text-transform: uppercase;\n  margin-left: 4px;\n}\n.nav-list .item.selected a .item-inner-wrp {\n  background: #dc2e5f;\n  color: #f8f8f8;\n}\n.nav-list .item.selected .icon {\n  color: #fff;\n}\n.nav-list .item.selected span.user-deleted {\n  color: #888291;\n}\n.nav-list .nav-list {\n  padding: 0 0 12px 0;\n}\n.pm-list {\n  padding: 12px 0 58px;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  max-height: 75%;\n  min-height: 20%;\n  top: auto !important;\n  width: 240px;\n  height: 25%;\n  border-right: 1px solid #dbdbdb;\n  background: #f2f2f2;\n}\n.pm-list .pms {\n  height: 100%;\n}\n.pm-list::after {\n  content: \"b7b7b7\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 8px;\n  border-top: 1px solid #dadada;\n  text-align: center;\n  line-height: 6px;\n  color: #dad6e0;\n  background: #ededed;\n}\n.pm-list:hover::after {\n  color: #888291;\n  background: #ebebeb;\n}\n.pm-list .rsize-d {\n  top: 0;\n  z-index: 15;\n}\nspan.no-messages {\n  padding-left: 20px;\n  display: block;\n  color: #7a7484;\n}\n.filter-pms {\n  position: absolute;\n  bottom: 0;\n  background: #f2f2f2;\n  border: none;\n  border-top: 1px solid #e5e5e5;\n  border-right: 1px solid #dbdbdb;\n  width: 240px;\n  padding: 8px 12px 8px 20px;\n  z-index: 14;\n}\n.filter-pms:-moz-placeholder {\n  color: #888291;\n}\n.filter-pms::-moz-placeholder {\n  color: #888291;\n}\n.filter-pms:-ms-input-placeholder {\n  color: #888291;\n}\n.filter-pms::-webkit-input-placeholder {\n  color: #888291;\n}\n.filter-pms:focus {\n  outline: none;\n  color: #4d4d4d;\n}\n.footer {\n  z-index: 30;\n  padding: 25px 20px 15px;\n  background: #f8f8f8;\n  transform: translate3d(0, 0, 0);\n  will-change: transform;\n}\n.footer .grape-input-wrapper {\n  display: flex;\n  position: relative;\n}\n.footer .grape-input-wrapper.disabled .hint-box,\n.footer .grape-input-wrapper.disabled .info-markdown,\n.footer .grape-input-wrapper.disabled .uploader {\n  display: none;\n}\n.footer .grape-input-wrapper .avatar {\n  padding-left: 10px;\n  position: relative;\n}\n.footer .grape-input-wrapper .avatar::after,\n.footer .grape-input-wrapper .avatar::before {\n  content: \"\";\n  position: absolute;\n  z-index: 5;\n}\n.footer .grape-input-wrapper .avatar::after {\n  left: -2px;\n  right: auto;\n  top: 1px;\n  border-left: 9px solid #fff;\n  border-right: none;\n  border-bottom: 13px solid transparent;\n}\n.footer .grape-input-wrapper .avatar::before {\n  border-left: 10px solid #dad6e0;\n  border-right: none;\n  border-bottom: 14px solid transparent;\n  left: -1px;\n  right: auto;\n  top: 0px;\n}\n.footer .grape-input-wrapper .avatar .image {\n  width: 42px;\n  height: 42px;\n  border-radius: 50%;\n  position: relative;\n  vertical-align: bottom;\n}\n.footer .controls-wrapper {\n  flex: 1;\n  position: relative;\n  display: flex;\n  border: 1px solid #dad6e0;\n  border-radius: 3px;\n  background-color: #fff;\n}\n.footer grape-input {\n  flex: 1;\n}\n.footer grape-input [contenteditable=\"true\"] {\n  position: relative;\n  padding: 9px 92px 7px 15px;\n}\n.footer grape-input [contenteditable=\"true\"]::before {\n  position: absolute;\n  pointer-events: none;\n}\n.footer .search-browser-button,\n.footer .controls-group {\n  padding: 9px;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n}\n.footer .search-browser-button {\n  border-right: 1px solid #dad6e0;\n  font-size: 17.875px;\n  color: #888291;\n  width: 52px;\n  cursor: pointer;\n  opacity: 0.7;\n}\n.footer .search-browser-button:hover {\n  opacity: 1;\n  background-color: #f8f8f8;\n}\n.footer .controls-group {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n}\n.footer .controls-group .emoji-browser-button,\n.footer .controls-group .uploader,\n.footer .controls-group .info-markdown {\n  padding: 0 6px;\n  color: #888291;\n  font-size: 20px;\n  opacity: 0.5;\n  transition: transform 0.2s ease-in-out, opacity 0.1s ease-out;\n}\n.footer .controls-group .emoji-browser-button:hover,\n.footer .controls-group .uploader:hover,\n.footer .controls-group .info-markdown:hover {\n  opacity: 0.8;\n  transition: none;\n}\n.footer .edit-message,\n.footer .hint-box {\n  position: absolute;\n  top: -18px;\n  left: 68px;\n  color: #888291;\n}\n.footer .edit-message span,\n.footer .hint-box span {\n  border-radius: 3px;\n  border: 1px solid #dad6e0;\n  padding: 0 2px;\n}\n.footer .uploader {\n  position: relative;\n}\n.footer .uploader input {\n  display: none;\n}\n.footer .upload-progress {\n  display: none;\n  position: absolute;\n  text-align: center;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background: #fff;\n  border-radius: 2px;\n  overflow: hidden;\n}\n.footer .upload-progress img.preview {\n  display: none;\n  max-width: 240px;\n  max-height: 240px;\n  vertical-align: middle;\n}\n.footer .upload-progress .progress {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background: rgba(255,255,255,0.6);\n}\n.footer .upload-progress .progress canvas {\n  display: inline-block;\n  vertical-align: bottom;\n}\n.footer .uploader.open .upload-progress {\n  display: block;\n}\n.footer .editing-previous .controls-wrapper {\n  background: #faf4da;\n}\n.footer .editing-previous .controls-group-item {\n  cursor: default;\n}\n.footer .editing-previous .uploader,\n.footer .editing-previous .emoji-browser-button {\n  transform: scale(0);\n  opacity: 0;\n  pointer-events: none;\n}\n.footer .editing-previous .hint-box {\n  display: none;\n}\n.footer .editing-previous .avatar::after {\n  border-left-color: #faf4da;\n}\n.footer .grape-input-wrapper .edit-message {\n  display: none;\n}\n.footer .grape-input-wrapper.editing-previous .edit-message {\n  display: block;\n}\ngrape-input {\n  display: block;\n  position: relative;\n}\nbody .ac {\n  white-space: normal;\n  border-bottom: 1px solid #4fc1e9;\n  display: inline;\n  margin: 1px;\n  padding: 1px 0;\n  vertical-align: baseline;\n}\nbody a.ac:hover {\n  text-decoration: none;\n  border-color: #4fc1e9 !important;\n}\nbody:hover {\n  text-decoration: none;\n}\n.entry-type-icon,\n.ac:before {\n  display: inline;\n  font-family: FontAwesome;\n  margin-right: 6px;\n  font-weight: normal;\n}\n.type-label:before {\n  content: \"\\f02b\";\n}\n.type-githubissue:before {\n  content: \"\\f09b\";\n}\n.type-trellocard:before {\n  content: \"\\f181\";\n}\n.type-calendar:before,\n.type-gcalevent:before {\n  content: \"\\f073\";\n}\n.type-googledrivefile:before {\n  content: \"\\f15b\";\n}\n.type-youtubevideo:before {\n  content: \"\\f16a\";\n}\n.ac.service-giphy:before {\n  content: \"\\f1c5\";\n}\n.type-dropboxfile:before {\n  content: \"\\f16b\";\n}\n.type-boxfile:before,\n:before:before,\ncontent: \"f15b\":before,\n.type-chatgrapeuser:before {\n  content: \"\\f007\";\n}\n.type-chatgraperoom:before {\n  content: \"\\f086\";\n}\n.type-chatgrapeprivateroom:before {\n  content: \"\\f023\";\n}\n.type-query:before {\n  content: \"\\f002\";\n}\n.type-emojiemoji {\n  display: none;\n}\n.message .type-chatgraperoom:before,\n.message .type-chatgrapeuser:before {\n  content: \"@\";\n  font-family: \"Roboto\", Arial, Helvetica, Geneva, sans-serif !important;\n  margin-right: 0;\n  font-weight: bold;\n}\ngrape-input .ac {\n  padding: 0 1px;\n  background: #fff;\n  border-radius: 0;\n  color: #4fc1e9;\n  height: 20px;\n  margin-top: -1px;\n  margin-bottom: -1px;\n  margin-right: 0;\n  margin-left: 0;\n  position: relative;\n  overflow: hidden;\n  vertical-align: bottom;\n}\ngrape-input .ac span {\n  float: left;\n  margin-right: 0;\n}\ngrape-input .ac.emoji {\n  border: none;\n  padding: 0;\n  margin: 0;\n  height: 19px !important;\n  margin-top: -2px;\n}\ngrape-input span.type-chatgraperoom,\ngrape-input span.type-chatgrapeuser {\n  display: none;\n}\n.autocomplete-wrapper {\n  position: relative;\n  margin-left: 46px;\n  margin-right: 30px;\n  transition: opacity 0.2s ease-out, bottom 0.2s ease-out, height 0.2s ease-out;\n  -webkit-transition: opacity 0.2s ease-out, bottom 0.2s ease-out, height 0.2s ease-out;\n}\n.autocomplete-wrapper.Textcomplete-hidden {\n  bottom: -10px;\n  opacity: 0;\n}\n.autocomplete-wrapper .autocomplete {\n  position: relative;\n  overflow: auto;\n  overflow-x: hidden;\n  max-height: 392px;\n}\n.autocomplete-wrapper .Textcomplete-inner {\n  position: absolute;\n  bottom: 0px;\n  width: 100%;\n  background: #fff;\n  padding: 0;\n  border: 1px solid #dad6e0;\n  border-radius: 0;\n  box-shadow: 0px 3px 4px 0 rgba(77,77,77,0.5);\n  z-index: 200;\n}\n.autocomplete-wrapper .Textcomplete-inner .entry-type-description {\n  display: none;\n}\n.autocomplete-wrapper .Textcomplete-inner .option-wrap {\n  overflow: hidden;\n  padding: 5px 10px 10px;\n  height: 30px;\n  color: #4d4d4d;\n}\n.autocomplete-wrapper .Textcomplete-inner .option-wrap.full_name_true em {\n  display: none;\n}\n.autocomplete-wrapper .Textcomplete-inner .option-wrap.full_name_false em {\n  margin-left: -3px;\n}\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-headline,\n.autocomplete-wrapper .Textcomplete-inner .group {\n  background: #e6e6e6;\n  padding: 4px 8px;\n  text-transform: uppercase;\n  color: #888291;\n  padding-top: 10px;\n}\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-option {\n  padding: 0;\n}\n.autocomplete-wrapper .Textcomplete-inner .entry-additional-info {\n  color: #dad6e0;\n  font-size: 10px;\n  margin-left: 7px;\n}\n.autocomplete-wrapper .Textcomplete-inner time {\n  text-transform: uppercase;\n  padding: 0 8px;\n}\n.autocomplete-wrapper .Textcomplete-inner .entry-type-icon {\n  color: #b9b7bb;\n}\n.autocomplete-wrapper .Textcomplete-inner .entry-type-icon:after {\n  margin-left: 0;\n}\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-highlighted {\n  background: #9b6a94;\n  color: #fff;\n}\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-highlighted .option-wrap {\n  color: #fff;\n}\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-highlighted .full_name_true em,\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-highlighted .entry-additional-info {\n  color: #d8c6d6;\n}\n.autocomplete-wrapper .Textcomplete-inner .Textcomplete-highlighted .entry-type-description {\n  background: #542f59;\n  border-color: #442648;\n  color: #ba98b5;\n}\n.autocomplete-wrapper .Textcomplete-inner.external .autocomplete-filter-menu {\n  background: #3a4160;\n}\n.autocomplete-wrapper .Textcomplete-inner.external .powered-by-facet {\n  float: right;\n  color: #7a7586;\n}\n.autocomplete-wrapper .Textcomplete-inner.external .powered-by-facet .powered-by-link {\n  padding: 8px 16px 8px 0;\n}\n.autocomplete-wrapper .autocomplete-filter-menu {\n  border-radius: 0;\n  margin: 0;\n  padding: 0;\n  overflow-x: visible;\n  white-space: nowrap;\n  background: #81487a;\n  z-index: 4;\n  position: relative;\n}\n.autocomplete-wrapper .autocomplete-filter-menu li {\n  display: inline-block;\n  list-style-type: none;\n  transition: all 0.3s;\n}\n.autocomplete-wrapper .autocomplete-filter-menu a {\n  text-decoration: none;\n  color: rgba(255,255,255,0.5);\n  display: inline-block;\n  position: relative;\n  padding: 8px 16px 8px;\n  text-transform: uppercase;\n  font-weight: bold;\n}\n.autocomplete-wrapper .autocomplete-filter-menu a:hover {\n  background: #95538d;\n}\n.autocomplete-wrapper .autocomplete-filter-menu a i {\n  margin-right: 5px;\n  transition: all 400ms;\n  margin-left: 0;\n  opacity: 1;\n}\n.autocomplete-wrapper .autocomplete-filter-menu a.active {\n  background: #9b6a94;\n  color: #fff;\n}\n.autocomplete-wrapper .autocomplete-filter-menu a.active i {\n  margin-left: -14px;\n  opacity: 0;\n}\n.autocomplete-wrapper .autocomplete-filter-menu a.active:after {\n  top: 100%;\n  left: 50%;\n  border: solid transparent;\n  content: \" \";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n  border-color: transparent;\n  border-top-color: #9b6a94;\n  border-width: 6px;\n  margin-left: -6px;\n}\n.autocomplete-wrapper .Textcomplete-message {\n  padding: 15px 12px;\n  background: #e6e6e6;\n  text-align: center;\n  border-bottom: 2px solid #5f5f5f;\n}\n.autocomplete-wrapper .Textcomplete-message em {\n  font-style: italic;\n}\n.autocomplete-wrapper .Textcomplete-message h3 {\n  color: #888291;\n  font-weight: bold;\n}\n.autocomplete-wrapper .Textcomplete-message.info,\n.autocomplete-wrapper .Textcomplete-message.info h3 {\n  background-color: #c4e7f4;\n  color: #1f7fa3;\n}\n.autocomplete-wrapper .Textcomplete-message.info a,\n.autocomplete-wrapper .Textcomplete-message.info h3 a {\n  color: #9b6a94;\n}\n.autocomplete-wrapper .Textcomplete-message.loading {\n  padding: 100px 12px;\n  background: #fff;\n  border: none;\n}\n.invite-to-room .Textcomplete-option {\n  padding: 2px 3px !important;\n}\n/*______ GENERAL ______*/\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  height: 100vh;\n  overflow: hidden;\n  text-rendering: optimizelegibility;\n  font-size: 13px;\n  line-height: 22px;\n  color: #4d4d4d;\n  background: #f8f8f8;\n}\n*,\n*:before,\n*:after {\n  box-sizing: border-box;\n}\na {\n  color: #9b6a94;\n  text-decoration: underline;\n}\na:hover {\n  color: #ceb6cb;\n  text-decoration: underline;\n}\n::-webkit-scrollbar {\n  width: 6px;\n}\n::-webkit-scrollbar-track {\n  background-color: #e6e6e6;\n  border-radius: 3px;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 3px;\n  background-color: #dad6e0;\n}\n::-webkit-scrollbar-thumb:hover {\n  background-color: #888291;\n}\n/*______ HIDE CLASS ______*/\n.hide {\n  display: none !important;\n}\n/*______ FRAMEWORK ______*/\n.client {\n  position: relative;\n  background: #fff;\n  height: 100vh;\n  overflow: hidden;\n}\n.client::before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  z-index: 99999;\n  background: #fafafa url(" + __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../images/mascot_loader.gif\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())) + ") 50% 50% no-repeat;\n  display: none;\n}\n/*______ LOADING ______*/\n.client-loading .preloader {\n  display: block;\n}\n.preloader {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 99999;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  display: none;\n  text-align: center;\n}\n.history .preloader {\n  background: #f8f8f8;\n}\n.history .preloader div {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  height: 70px;\n  width: 50%;\n  margin: -35px 0 0 -25%;\n}\n.history .preloader h3 {\n  font-weight: bold;\n}\n.history .preloader p {\n  margin-top: 8px;\n  color: #888291;\n}\n/*______ FEEDBACK BUTTON ______*/\nbody .gsfn-bottom {\n  left: 6px !important;\n  margin-left: 0 !important;\n  font-family: inherit !important;\n}\n/*______ Some common things who need to be distributed properly ______*/\nhr {\n  margin: 4px 0;\n  height: 1px;\n  border: none;\n  background: #dad6e0;\n}\n/* _____ COMPONENT FIXES ________ */\n.scrollbars-override {\n  overflow-x: hidden !important;\n  bottom: 0 !important;\n}\n/* _____ DISCONNECTED CHAT ________ */\n/*.disconnected\n\t.alerts\n\t\tposition: fixed\n\t\ttop: 0\n\t\tleft: 0\n\t\tz-index: 9999\n\t\tright: 0\n\t.client\n\t\t&::before\n\t\t\tdisplay: block\n\t\t\topacity: .9\n/*---------------------------------------\n   SECTION:  INTERCOM\n-----------------------------------------*/\n#intercom-container .intercom-launcher-button {\n  background-image: url(" + __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../images/head.png\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())) + ") !important;\n  background-size: 42px 42px !important;\n  background-color: #6d3d74 !important;\n  border-color: #212022 !important;\n}\n#intercom-container .intercom-launcher-button:hover {\n  background-color: #804888 !important;\n  border-color: #212022 !important;\n}\n#intercom-container .intercom-sheet-header {\n  height: 60px !important;\n  background-color: rgba(255,255,255,0.95) !important;\n  border-bottom: 1px solid #dad6e0 !important;\n}\n#intercom-container .intercom-sheet-content {\n  top: 60px !important;\n  background: #fff !important;\n}\n/* _____ HIDE INTERCOM BUTTON ________ */\n#intercom-container .intercom-launcher {\n  display: none !important;\n}\n/* _____ MACGAP Adaptions ________ */\nbody.macgap {\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif !important;\n  background: #fff url(" + __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../images/preloader-onwhite.gif\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())) + ") 50% 50% no-repeat;\n  padding: 0;\n}\nbody.macgap .chat-wrapper h1,\nbody.macgap .chat-wrapper h2,\nbody.macgap .chat-wrapper h3,\nbody.macgap .chat-wrapper h4 {\n  text-shadow: #fff -1px 1px;\n  filter: Shadow(#fff f, 0, 1);\n}\nbody.macgap .client {\n  animation: slidein 2.5s ease;\n}\n@-moz-keyframes slidein {\n  0%, 80% {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n@-webkit-keyframes slidein {\n  0%, 80% {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n@-o-keyframes slidein {\n  0%, 80% {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n@keyframes slidein {\n  0%, 80% {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n", ""]);

	// exports


/***/ },
/* 2 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	'use strict';

	var Wamp = __webpack_require__(4);
	var WebSocket = __webpack_require__(5);
	var array = __webpack_require__(7);
	var Emitter = __webpack_require__(6);

	var exports = module.exports = App;

	var models = exports.models = {
		Room: __webpack_require__(13),
		User: __webpack_require__(23),
		Line: __webpack_require__(25),
		Organization: __webpack_require__(26),
	};

	exports.constants = __webpack_require__(27);

	var PREFIX = 'http://domain/';

	// Time we wait until we destroy connection and reconect.
	var PONG_MAX_WAIT = 15000;

	// Time we wait after we got a pong before we send another ping.
	var PING_DELAY = 5000;

	function App() {
		Emitter.call(this);

		var self = this;
		// Will be defined from .connect()
		this.uri = undefined;
		// the currently signed in user
		this.user = undefined;
		// user settings
		this.settings = undefined;
		// list of all the organizations the user belongs to
		this.organizations = undefined;
		// the currently active organization
		this.organization = undefined;

		// Connected here includes that user data is loaded.
		this.connected = false;
		this.connecting = false;

		this._typingTimeouts = [];
	}

	App.prototype = Object.create(Emitter.prototype);

	App.prototype.logTraffic = function App_logTraffic() {
		var socket = this.wamp.socket;
		var send = socket.send;
		socket.send = function (msg) {
			console.log('sending', tryJSON(msg));
			send.call(socket, msg);
		};
		socket.on('message', function (msg) {
			console.log('received', tryJSON(msg));
		});
		function tryJSON(msg) {
			try {
				return JSON.parse(msg);
			} catch(e) {}
			return msg;
		}
	};

	App.prototype.heartbeat = function App_heartbeat() {
		if (!this.connected) return;
		var timedout = false;

		var timeoutId = setTimeout(function() {
			console.log('NO PONG');
			timedout = true;
			this.onDisconnect();
		}.bind(this), PONG_MAX_WAIT);

		this.wamp.call(PREFIX + 'ping', function(err, res) {
			// In case we get this callback after we timed out.
			// Reconnect is already started, which will call .heartbeat.
			if (timedout) return;

			if (res === 'pong') clearTimeout(timeoutId);

			setTimeout(this.heartbeat.bind(this), PING_DELAY);
		}.bind(this));
	};

	App.prototype.onDisconnect = function App_onDisconnect() {
		this.disconnect();
		this.emit('disconnected', this._ws);
		this.reconnect();
	};

	App.prototype.onConnect = function App_onConnect(data) {
	    this.user = new models.User(data);
	    this.settings = this.user.settings;
	    this.organizations = array(data.organizations.map(function (org) {
	        return new models.Organization(org);
	    }));
	    this.connected = true;
	    this.connecting = false;
	    this.emit('change user', this.user);
	    this.emit('change settings', this.settings);
	    this.emit('change organizations', this.organizations);
	    this.emit('connected');
	    console.log('Connected!');
	};

	/**
	 * Initializes the connection and gets all the user profile and organization
	 * details and joins the first one.
	 *
	 * @param {WebSocket|String} WebSocket is used for testing only, uri is provided
	 * only when first time.
	 * @param {Function} [callback]
	 */
	App.prototype.connect = function App_connect(ws, callback) {
		if (this.connected) return;

		// Legacy callback, used in mobile_history.html
		if (callback) this.once('connected', callback);

		if (this.connecting) return;

		this.connecting = true;

		// Its an URI string passed first time when connecting.
		if (typeof ws === 'string') {
			this.uri = ws;
			ws = null;
		}

		if (!ws) ws = new WebSocket(this.uri);

		this._ws = ws;

		ws.on('open', function() {
			console.log('Websocket Connection opened!');
			this.wamp = new Wamp(ws, {omitSubscribe: true});
			this.bindEvents();
			this.wamp.call(PREFIX + 'users/get_profile', function (err, data) {
	            if (err) {
	            	this.emit('error', err);
	            	this.onDisconnect();
	            	return;
	            }
	            this.onConnect(data);
	            this.heartbeat();
			}.bind(this));
		}.bind(this));

		ws.on('close', function(e) {
			console.log('Websocket closed, disconnecting!', e);
			this.onDisconnect();
		}.bind(this));

		ws.on('error', function(err) {
			console.log('Websocket error, disconnecting!', err);
			this.onDisconnect();
		}.bind(this));
	};

	App.prototype.disconnect = function App_disconnect() {
		// our wamp implementation has no off() right now
		// so we do some hacking
		if (this.wamp) this.wamp._listeners = {};

		if (this._ws) {
			this._ws.off();
			this._ws.close(3001);
		}

		this.connected = false;
		this.connecting = false;
	};

	App.prototype.reconnect = function App_reconnect() {
		var self = this;
		var timeout = Math.floor((Math.random() * 5000) + 1);
		console.log('Attempting reconnect in ms:', timeout);
		setTimeout(function() {
			this.connect();
		}.bind(this), timeout);
	};

	App.prototype.bindEvents = function App_bindEvents() {
		var self = this;
		var wamp = this.wamp;
		function dump(name) {
			return function (data) {console.log('FIXME: '+ name, data);};
		}
		// channel events
		wamp.subscribe(PREFIX + 'channel#new', function (data) {
			self._tryAddRoom(data.channel);
			self.emit('newRoom', data.channel);
		});
		wamp.subscribe(PREFIX + 'channel#updated', function (data) {
			var room = models.Room.get(data.channel.id);
			room.name = data.channel.name;
			room.slug = data.channel.slug;
			self.emit('channelupdate', room);
		});
		wamp.subscribe(PREFIX + 'channel#removed', function(data) {
			var room = models.Room.get(data.channel);
			var index = self.organization.rooms.indexOf(room);
			if (~index)
				self.organization.rooms.splice(index, 1);
			self.emit('roomdeleted', room);
		});
		wamp.subscribe(PREFIX + 'channel#typing', function (data) {
			var user = models.User.get(data.user);
			if (user === self.user) {
				return
			}
			var room = models.Room.get(data.channel);
			var index = room.typing.indexOf(user);

			// there might still be a timeout for this user if the user stops
			// typing and starts typing within one second.
			// there can also be a 10 second safety timeout.
			// we can safely clear a timeout that doesn't exist, so no checks here
			clearTimeout(self._typingTimeouts[room.id + '_' + user.id]);

			if (data.typing && !~index) {
				room.typing.push(user);
				trigger();
				// the typing notification should be removed after 10 seconds
				// automatically because the user might kill the connection and we
				// would never receive a `typing: false` event
				self._typingTimeouts[room.id + '_' + user.id] = setTimeout(function(){
					room.typing.splice(index, 1);
					trigger();
				}, 10000);
			} else if (!data.typing && ~index) {
				// we want the typing notification to be displayed at least five
				// seconds
				self._typingTimeouts[room.id + '_' + user.id] = setTimeout(function(){
					room.typing.splice(index, 1);
					trigger();
				}, 5000);
			}
			function trigger() {
				// FIXME: model needs an api to do this:
				var name = 'typing';
				room._model.emit('change', room, name);
				room._model.emit('change ' + name, room);
				room.emit('change', name);
				room.emit('change ' + name);
			}
		});
		wamp.subscribe(PREFIX + 'channel#read', function (data) {
			var user = models.User.get(data.user);
			var line = models.Line.get(data.message);
			if (!line) return; // ignore read notifications for messages we don’t have
			var room = line.channel;
			// ignore this for the current user, we track somewhere else
			if (user === self.user) return self.emit('channelRead', line);
			var last = room._readingStatus[data.user];
			// remove the user from the last lines readers
			if (last) {
				var i = last.readers.indexOf(user);
				last.readers.splice(i, 1);
			}
			// and add it to the new line
			room._readingStatus[data.user] = line;
			line.readers.push(user);
		});
		wamp.subscribe(PREFIX + 'channel#joined', function (data) {
			var user = models.User.get(data.user);
			var room = models.Room.get(data.channel);
			if (~room.users.indexOf(user)) return;
			// if the user joining the room is the visitor,
			// we need to emit the leftChannel event as well
			// to ensure consistent behaviour across clients
			if (user === self.user) {
				room.joined = true;
				self.emit('joinedChannel');
			}
			room.users.push(user);
			self.emit('newRoomMember', room);
		});
		wamp.subscribe(PREFIX + 'channel#left', function (data) {
			var user = models.User.get(data.user);
			var room = models.Room.get(data.channel);
			var index = room.users.indexOf(user);
			if (!~index) return;
			// if the user leaving the room is the visitor,
			// we need to emit the leftChannel event as well
			// to ensure consistent behaviour across clients
			if (user === self.user) {
				room.joined = false;
				self.emit('leftChannel', room);
			}
			room.users.splice(index, 1);
			self.emit('memberLeftChannel', room);
		});

		// organization events
		wamp.subscribe(PREFIX + 'organization#joined', function (data) {
			// make sure the user doesnt exist yet in the client
			var user = models.User.get(data.user.id);
			if (!user) user = new models.User(data.user);
			// make sure we're joining the right organization
			// and the user isnt in there yet
			if (data.organization===self.organization.id &&
				  !~self.organization.users.indexOf(user)) {
				user.active = true;
				user.status = 0;
				user.pm = null;
				self.organization.users.push(user);
				self.emit('new org member', user);
			}
		});
		wamp.subscribe(PREFIX + 'organization#left', function (data) {
			var user = models.User.get(data.user);
			var index = self.organization.users.indexOf(user);
			if (user && ~index && data.organization===self.organization.id) {
				var inactivePm = false;
				self.organization.users.forEach(function(user) {
					if (user.id === data.user
					&& (!user.pm || user.pm && user.pm.history.length === 0)) {
						inactivePm = user;
					}
				});
				if (inactivePm) {
					var inactivePmIndex = self.organization.pms.indexOf(inactivePm);
					self.organization.pms.splice(inactivePmIndex, 1);
					self.emit('userDeleted', user);
				}
				user.active = false;
			}
		});

		// message events
		wamp.subscribe(PREFIX + 'message#new', function (data) {
			data.read = false;
			var line = models.Line.get(data['id']);
			var room = models.Room.get(data.channel);
			if (~room.history.indexOf(line)) return;
			line = new models.Line(data);
			room.unread++;
			room.history.push(line);
			room.latest_message_time = new Date(line.time).getTime();
			// users message and everything before that is read
			if (line.author === self.user) self.setRead(room, line);
			self.emit('newMessage', line);
		});
		wamp.subscribe(PREFIX + 'message#updated', function(data) {
			var msg = models.Line.get(data['id']);
			// right now only text can be updated
			msg.text = data.text;
			var ch = models.Room.get(data['channel']);
			var idx = ch.history.indexOf(msg);
			if (~idx) ch.history.splice(idx, 1, msg);
		});
		wamp.subscribe(PREFIX + 'message#removed', function(data) {
			var msg = models.Line.get(data['id']);
			var ch = models.Room.get(data['channel']);
			var idx = ch.history.indexOf(msg);
			if (~idx) ch.history.splice(idx, 1);
		});

		// user events
		wamp.subscribe(PREFIX + 'user#status', function (data) {
			var user = models.User.get(data.user);
			user.status = data.status;
			self.emit('change user', user);
		});
		wamp.subscribe(PREFIX + 'user#mentioned', function (data) {
			if (data.message.organization !== self.organization.id) return;
			var line = models.Line.get(data.message.id);
			if (!line) line = new models.Line(data.message.id);
			line.channel.mentioned++;
			self.emit('userMention');
		});
		wamp.subscribe(PREFIX + 'user#updated', function (data) {
			var user = models.User.get(data.user.id);
			user.username = data.user.username;
			user.firstName = data.user.firstName;
			user.lastName = data.user.lastName;
			user.displayName = data.user.displayName;
			user.is_only_invited = data.user.is_only_invited;
			if (data.user.avatar !== null) user.avatar = data.user.avatar;
			self.emit('change user', user);
		});

		wamp.subscribe(PREFIX + 'notification#new', function (notification) {
			var dispatcher = notification.dispatcher;
			if (dispatcher === 'message' || dispatcher === 'pm') {
				var notificationItem = models.Line.get(notification.message_id);
				if (notificationItem) self.emit('newMsgNotification', notificationItem);
			} else {
				var inviter = models.User.get(notification.inviter_id);
				var room = models.Room.get(notification.channel_id);
				if (!(inviter && room)) return;
				var notificationItem = {
					inviter: inviter,
					room: room
				};
				self.emit('newInviteNotification', notificationItem)
			}
		});
	};

	var unknownUser = {
		username: 'unknown',
		firstName: 'unknown',
		lastName: 'User'
	};

	App.prototype._newRoom = function App__newRoom(room) {
		room.users = room.users.map(function (u) {
			// if the user was not in the models array for some reason
			// create an unknown user so the room loads correctly
			return models.User.get(u) || new models.User(unknownUser);
		});
		var selfindex = room.users.indexOf(this.user);
		room.joined = !!~selfindex;
		// the user MUST NOT be the first in the list
		if (selfindex === 0)
			room.users.push(room.users.shift());
		room = new models.Room(room);

		// defaults
		if (typeof room.unread === 'undefined') {
			room.unread = 0;
		}
		room.typing = [];

		return room;
	};

	App.prototype._tryAddRoom = function App__tryAddRoom(room) {
		var gotroom = models.Room.get(room.id);
		if (gotroom) return gotroom;
		room = this._newRoom(room);
		if (room.type === 'room') {
			this.organization.rooms.push(room);
		} else {
			this.organization.pms.push(room);
		}
		// TODO: this should maybe be handled in the pm model
		if (room.type === 'pm') {
			room.users[0].pm = room;
		}
		return room;
	};

	/**
	 * This sets the current active organization. It also joins it and loads the
	 * organization details such as the users and rooms.
	 */
	App.prototype.setOrganization = function App_setOrganization(org, callback) {
		callback = callback || function() {};
		var self = this;
		// TODO: this should also leave any old organization

		// first get the details
		self.wamp.call(PREFIX + 'organizations/get_organization', org.id, function (err, res) {
			if (err) return self.emit('error', err);
			org.users = res.users.map(function (u) {
				var user = models.User.get(u.id) || new models.User(u);
				user.status = u.status;
				return user;
			});

			var rooms = res.channels.map(self._newRoom.bind(self));
			org.rooms = rooms.filter(function (r) { return r.type === 'room'; });
			org.pms = rooms.filter(function (r) { return r.type === 'pm'; });
			if (res.logo !== null) org.logo = res.logo;
			if (res.custom_emojis !== null) org.custom_emojis = res.custom_emojis;
			if (res.has_integrations !== null) org.has_integrations = res.has_integrations;

			// connect users and pms
			org.pms.forEach( function(pm) { pm.users[0].pm = pm; });

			// then join
			self.wamp.call(PREFIX + 'organizations/join', org.id, function (err) {
				if (err) return self.emit('error', err);
				self.organization = org;
				// put role in user object for consistency with other user objects
				self.user.role = self.organization.role;
				self.emit('change organization', org);
				callback();
			});
		});
	};

	App.prototype.endedIntro = function App_endedIntro() {
		this.wamp.call(PREFIX + 'users/set_profile', {'show_intro': false});
	};

	App.prototype.changedTimezone = function App_changedTimezone(tz) {
		this.wamp.call(PREFIX + 'users/set_profile', {'timezone': tz});
	};

	App.prototype.openPM = function App_openPM(user, callback) {
		callback = callback || function() {};
		var self = this;
		this.wamp.call(PREFIX + 'pm/open', this.organization.id, user.id, function (err, pm) {
			if (err) return self.emit('error', err);
			pm = self._newRoom(pm);
			self.organization.pms.push(pm);
			user.pm = pm;
			self.emit('newPMOpened', pm);
			callback();
		});
	};

	App.prototype.createRoom = function App_createRoom(room) {
		room.organization = this.organization.id;
		var self = this;
		this.wamp.call(PREFIX + 'rooms/create', room, function (err, room) {
			if (err) return self.emit('roomcreateerror', err.details);
			self.emit('roomcreated', self._tryAddRoom(room));
		});
	};

	App.prototype.deleteRoom = function App_deleteRoom(room, roomName, callback) {
		room.organization = this.organization.id;
		var self = this;
		this.wamp.call(PREFIX + 'channels/delete', room.id, roomName, function (err, result) {
			if (callback !== undefined) {
				callback(err, result);
			}
		});
	};

	App.prototype.joinRoom = function App_joinRoom(room, callback) {
		var self = this;
		if (room.joined) return;
		this.wamp.call(PREFIX + 'channels/join', room.id, function (err) {
			if (err) return self.emit('error', err);
			room.joined = true;
			self.emit('joinedChannel');
			if (callback !== undefined) callback();
		});
	};

	App.prototype.leaveRoom = function App_leaveRoom(roomID) {
		var self = this;
		var room = models.Room.get(roomID);
		if (!room.joined) return;
		this.wamp.call(PREFIX + 'channels/leave', room.id, function (err) {
			if (err) return self.emit('error', err);
			room.joined = false;
			self.emit('leftChannel', room);
		});
	};

	App.prototype.renameRoom = function App_renameRoom(roomID, newName) {
		var emit = this.emit.bind(this);
		this.wamp.call(PREFIX + 'rooms/rename', roomID, newName, function(err) {
			if (err) emit('roomrenameerror', err);
		});
	}

	App.prototype.onSetNotificationsSession = function App_onSetNotificationsSession (orgID) {
		this.wamp.call(PREFIX + 'notifications/set_notification_session', orgID);
	};

	App.prototype.autocomplete = function App_autocomplete(text, callback) {
		this.wamp.call(
			PREFIX + 'search/autocomplete',
			text,
			this.organization.id,
			// Show all.
			true,
			// Amount of results per section.
			15,
			// Return external services too.
			true,
			function (err, result) {
				if (callback !== undefined) {
					callback(err, result);
				}

			}
		);
	};

	App.prototype.autocompleteDate = function App_autocompleteDate(text, callback) {
		this.wamp.call(PREFIX + 'search/autocomplete_date', text, this.organization.id,
				function (err, result) {
				if (callback !== undefined) {
					callback(err, result);
				}

		});
	};

	App.prototype.search = function App_search(text) {
		var self = this;
		this.wamp.call(PREFIX + 'search/search', text, this.organization.id,
				function (err, results) {
				var r = [];
				var lines = results.results.map(function(l) {
					if(l.index !== 'objects_alias') {
						l = new models.Line(l);
						r.unshift(l);
					} else {
						r.unshift(l);
					}
				});
				var f = [];
				self.emit('gotsearchresults', {
					'results': r,
					'facets': f,
					'total': results.total,
					'q': results.q
				});
			});
	};

	App.prototype.inviteToRoom = function App_inviteToRoom(room, users, callback) {
		this.wamp.call(PREFIX + 'channels/invite', room.id, users, function(err, result) {
			if (callback !== undefined) {
				callback(err, result);
			}
		});
	};

	/**
	 * Loads history for `room`
	 */
	App.prototype.getHistory = function App_getHistory(room, options) {
		var self = this;
		options = options || {};
		this.wamp.call(PREFIX + 'channels/get_history', room.id, options, function (err, res) {
			if (err) return self.emit('error', err);
			// so when the first message in history is read, assume the history as read
			// as well
			var read = !!room.history.length && room.history[0].read;
			if (res.length === 0) return self.emit('nohistory');
			// append all to the front of the array
			// TODO: for now the results are sorted in reverse order, will this be
			// consistent?
			var lines = res.map(function (line) {
				// check if line already exists and only add it to the history
				// if it isnt in the history yet
				var exists = models.Line.get(line.id);
				if (!exists || !~room.history.indexOf(exists)) {
					line.read = read;
					line = new models.Line(line);
					// TODO: maybe check if everythings correctly sorted before
					// inserting the line?
					room.history.unshift(line);
				}
			});
			self.emit('gotHistory');
		});
	};

	App.prototype.onLoadHistoryForSearch = function App_onLoadHistoryForSearch (direction, room, options) {
		this.wamp.call(PREFIX + 'channels/get_history', room.id, options, function (err, res) {
			var lines = res.map(function (line) {
				var exists = models.Line.get(line.id);
				if (!exists || !~room.searchHistory.indexOf(exists)) {
					line.read = true;
					line = new models.Line(line);
					if (direction === 'old')
						room.searchHistory.unshift(line);
					else
						room.searchHistory.push(line);
				}
			});
			this.emit('gotHistory', direction);	
		}.bind(this));
	}

	App.prototype.setRead = function App_setRead(room, line) {
		// update the unread count
		// iterate the history in reverse order
		// (its more likely the read line is at the end)
		room.mentioned = 0;
		var setread = false;
		for (var i = room.history.length - 1; i >= 0; i--) {
			var l = room.history[i];
			if (l.read)
				break;
			if (l === line) {
				setread = true;
				room.unread = room.history.length - i - 1;
			}
			if (setread)
				l.read = true;
		}
		if (!setread)
			return;
		// and notify the server
		// TODO: emit error?
		this.wamp.call(PREFIX + 'channels/read', room.id, line.id);
	};

	App.prototype.onRequestMessage = function App_onRequestMessage(room, msgID) {
		// channels/focus_message, room ID, msg ID, before, after, strict
		// strict is false by default
		// when false, fallback results will be returned
		// when true, unexisting msg IDs will throw an error
		this.wamp.call(PREFIX + 'channels/focus_message', room.id, msgID, 25, 25, true, function (err, res ) {
			if (err) return this.emit('messageNotFound', room);
			room.searchHistory.splice(0, room.searchHistory.length);
			var lines = res.map(function (line) {
				var exists = models.Line.get(line.id);
				if (!exists || !~room.searchHistory.indexOf(exists)) {
					line = new models.Line(line);
					line.read = true;
					room.searchHistory.push(line);
				}
			});
			this.emit('focusMessage', msgID);
		}.bind(this));
	}

	App.prototype.setTyping = function App_setTyping(room, typing) {
		// TODO: emit error?
		this.wamp.call(PREFIX + 'channels/set_typing', room.id, typing);
	};

	App.prototype.onDeleteMessage = function App_onDeleteMessage(ch, msgId) {
		this.wamp.call(PREFIX + 'channels/delete_message', ch['id'], msgId);
	};

	App.prototype.publish = function App_publish(room, msg, options) {
		var self = this;
		msg = msg.text ? msg.text : msg;
		this.wamp.call(PREFIX + 'channels/post', room.id, msg, options, function (err) {
			if (err) return self.emit('error', err);
		});
	};

	App.prototype.updateMsg = function App_updateMessage(msg, text) {
		this.wamp.call(PREFIX + 'channels/update_message', msg['channel'].id, msg['id'], text, function (err) {

		});
	};

	App.prototype.onKickMember = function App_onKickMember (roomID, memberID) {
		this.wamp.call(PREFIX + 'channels/kick', roomID, parseInt(memberID));
	}


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var ws = __webpack_require__(5);
	var Emitter = __webpack_require__(6);

	var slice = [].slice;

	module.exports = Wamp;

	function Wamp(host, options, fn) {
		Emitter.call(this);
		if (typeof host === 'string')
			this.socket = new ws(host);
		else
			this.socket = host;
		if (typeof options === 'function' || !options) {
			fn = options;
			options = {};
		}
		this.socket.on('message', this._handle.bind(this));
		this.sessionId = undefined;
		this._welcomecb = fn || function () {};
		this._listeners = {};
		this._prefixes = {};
		this._calls = {};
		this._omitSubscribe = options.omitSubscribe;
	}

	Wamp.prototype = Object.create(Emitter.prototype);

	Wamp.types = Wamp.prototype.types = [
		'welcome',
		'prefix',
		'call',
		'callresult',
		'callerror',
		'subscribe',
		'unsubscribe',
		'publish',
		'event',
	];

	function type(t) {
		return Wamp.types.indexOf(t);
	}

	Wamp.prototype._send = function Wamp__send(json) {
		this.socket.send(JSON.stringify(json));
	};

	Wamp.prototype._handle = function Wamp__handle(message) {
		message = JSON.parse(message);
		var type = this.types[message.shift()];
		switch (type) {
			case 'welcome':
				this._handleWelcome(message);
			break;
			case 'event':
				this._handleEvent(message[0], message[1]);
			break;
			case 'callresult':
			case 'callerror':
				var callno = message[0];
				var fn = this._calls[callno];
				delete this._calls[callno];
				var result = message[1];
				if (type === 'callerror') {
					result = new Error(message[2]);
					result.uri = message[1];
					if (message.length === 4)
						result.details = message[3];
				}
				if (!fn) {
					var error = new Error('Unmatched ' + type + ' received from server');
					error.type = type;
					error.callId = callno;
					error[type === 'callerror' ? 'error' : 'result'] = result;
					return this.emit('error', error);
				}
				if (type === 'callresult') {
					fn(undefined, result);
				} else {
					fn(result);
				}
			break;
		}
	};

	Wamp.prototype._handleWelcome = function Wamp__handleWelcome(msg) {
		var version = msg[1];
		var server = msg[2];
		if (version !== 1) {
			return this.emit('error', new Error('Server "' + server +
				'" uses incompatible protocol version ' + version));
		}
		// TODO: maybe make this configurable?
		// re-send all the previously registered prefixes and subscriptions
		// but not on the very first welcome, this interacts badly with buffering
		// socket implementations, such as `Swatinem/websocket-buffering`
		if (this.sessionId) {
			for (var prefix in this._prefixes) {
				var expanded = this._prefixes[prefix];
				this._send([type('prefix'), prefix, expanded]);
			}
			if (!this._omitSubscribe) {
				for (var uri in this._listeners) {
					this._send([type('subscribe'), uri]);
				}
			}
		}
		this.sessionId = msg[0];
		this._welcomecb({
			sessionId: this.sessionId,
			version: version,
			server: server
		});
	};

	Wamp.prototype._handleEvent = function Wamp__handleEvent(event, data) {
		this.emit('event', event, data);
		// emit the original version straight away
		this._emit(event, data);
		for (var prefix in this._prefixes) {
			var expanded = this._prefixes[prefix];
			prefix = prefix + ':';
			if (event.indexOf(prefix) === 0) {
				// if the prefix matches, also emit the expanded version
				return this._emit(expanded + event.slice(prefix.length), data);
			} else if (event.indexOf(expanded) === 0) {
				// similarly, also emit the prefixed version if the expanded matches
				return this._emit(prefix + event.slice(expanded.length), data);
			}
		}
	};

	Wamp.prototype._emit = function Wamp__emit(event, data) {
		(this._listeners[event] || []).forEach(function (fn) {
			fn(data);
		});
	};

	Wamp.prototype.prefix = function Wamp_prefix(prefix, uri) {
		this._prefixes[prefix] = uri;
		this._send([type('prefix'), prefix, uri]);
	};

	Wamp.prototype.subscribe = function Wamp_subscribe(uri, fn) {
		(this._listeners[uri] = this._listeners[uri] || []).push(fn);
		if (this._listeners[uri].length === 1 && !this._omitSubscribe)
			this._send([type('subscribe'), uri]);
	};

	Wamp.prototype.unsubscribe = function Wamp_unsubscribe(uri, fn) {
		var list = this._listeners[uri];
		if (fn) {
			var i = list.indexOf(fn);
			list.splice(i, 1);
			if (list.length)
				return;
		}
		delete this._listeners[uri];
		if (!this._omitSubscribe)
			this._send([type('unsubscribe'), uri]);
	};

	Wamp.prototype.publish = function Wamp_emit() {
		this._send([type('publish')].concat(slice.call(arguments)));
	};

	Wamp.prototype.call = function Wamp_call(uri) {
		var args = slice.call(arguments, 1);
		var fn = args.pop();
		if (typeof fn !== 'function') {
			// add back the argument, and add a bogus function
			args.push(fn);
			fn = function () {};
		}
		var callid = Math.random().toString(36).substring(2);
		this._calls[callid] = fn;
		this._send([type('call'), callid, uri].concat(args));
	};



/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var Emitter = __webpack_require__(6);

	module.exports = WebSocketWrapper;

	/**
	 * Create a WebSocket to optional `host`,
	 * defaults to current page.
	 *
	 * @param {String} host
	 * @return {Object} ws
	 * @api public
	 */

	function WebSocketWrapper(url) {
		if (!(this instanceof WebSocketWrapper))
			return new WebSocketWrapper(url);

		Emitter.call(this);

		this.url = url;
		this._socket = this._connect();
	}
	WebSocketWrapper.prototype = Object.create(Emitter.prototype);

	WebSocketWrapper.CONNECTING = 0;
	WebSocketWrapper.OPEN = 1;
	WebSocketWrapper.CLOSING = 2;
	WebSocketWrapper.CLOSED = 3;

	// wrap readyState
	Object.defineProperty(WebSocketWrapper.prototype, 'readyState', {
		enumerable: true,
		get: function () {
			return this._socket ? this._socket.readyState : WebSocketWrapper.CLOSED;
		}
	});

	// wrap this for easier extensibility
	WebSocketWrapper.prototype.send = function WebSocketWrapper_send(msg) {
		if (this.readyState === WebSocketWrapper.OPEN) {
			// Calling send() on a closed WebSocket object which reports an open
			// readyState causes a crash. This scenario can occur when returning to
			// a backgrounded page which received data and then closed when in the
			// backgrounded state.
			// https://gist.github.com/mloughran/2052006
			setTimeout(function () {
				this._socket.send(msg);
			}.bind(this))
		}
	};

	WebSocketWrapper.prototype.close = function WebSocketWrapper_close(code) {
		this._socket.close(code);
	};

	/**
	 * Connect the websocket and hook up the events
	 */
	WebSocketWrapper.prototype._connect = function WebSocketWrapper__connect() {
		try {
			var socket = new WebSocket(this.url);
		}
		catch (err) {
			return setTimeout(function() {
				this.emit('error', err);
			}.bind(this), 0);
		}

		socket.onmessage = function (e) {
			this.emit('message', e.data);
		}.bind(this);

		['open', 'close', 'error'].forEach(function (event) {
			socket['on' + event] = function (e) {
				this.emit(event, e);
			}.bind(this);
		}, this);

		return socket;
	};


/***/ },
/* 6 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(8);


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies
	 */

	var Enumerable = __webpack_require__(9);
	var proto = Array.prototype;
	var isArray = Array.isArray || __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"isArray\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	try {
	  var Emitter = __webpack_require__(6);
	} catch(e) {
	  var Emitter = __webpack_require__(12);
	}

	/*
	 * Expose `array`
	 */

	module.exports = array;

	/**
	 * Initialize `array`
	 *
	 * @param {Array|Object|Undefined} arr
	 * @return {array}
	 * @api public
	 */

	function array(arr) {
	  if(!(this instanceof array)) return new array(arr);
	  arr = arr || [];

	  if (isArray(arr)) {
	    // create array-like object
	    var len = this.length = arr.length;
	    for(var i = 0; i < len; i++) this[i] = arr[i];
	  } else if ('object' == typeof arr) {
	    if (isObjectLiteral(arr)) {
	      arr._ctx = this._ctx = JSON.parse(JSON.stringify(arr));
	    }

	    // mixin to another object
	    for(var key in array.prototype) arr[key] = array.prototype[key];
	    return arr;
	  }
	}

	/**
	 * Mixin `Emitter`
	 */

	Emitter(array.prototype);

	/**
	 * Mixin `Enumerable`
	 */

	Enumerable(array.prototype);

	/**
	 * Removes the last element from an array and returns that element
	 *
	 * @return {Mixed} removed element
	 * @api public
	 */

	array.prototype.pop = function() {
	  var ret = proto.pop.apply(this, arguments);
	  this.emit('remove', ret, this.length);
	  this.emit('change');
	  return ret;
	};

	/**
	 * Push a value onto the end of the array,
	 * returning the length of the array
	 *
	 * @param {Mixed, ...} elements
	 * @return {Number}
	 * @api public
	 */

	array.prototype.push = function() {
	  var ret = proto.push.apply(this, arguments),
	      args = [].slice.call(arguments);
	  for(var i = 0, len = args.length; i < len; i++) this.emit('add', args[i], ret - len + i);
	  this.emit('change');
	  return ret;
	};

	/**
	 * Removes the first element from an array and returns that element.
	 *
	 * @return {Mixed}
	 * @api public
	 */

	array.prototype.shift = function() {
	  var ret = proto.shift.apply(this, arguments);
	  this.emit('remove', ret, 0);
	  this.emit('change');
	  return ret;
	};

	/**
	 * Adds and/or removes elements from an array.
	 *
	 * @param {Number} index
	 * @param {Number} howMany
	 * @param {Mixed, ...} elements
	 * @return {Array} removed elements
	 * @api public
	 */

	array.prototype.splice = function(index) {
	  var ret = proto.splice.apply(this, arguments),
	      added = [].slice.call(arguments, 2);
	  for(var i = 0, len = ret.length; i < len; i++) this.emit('remove', ret[i], index);
	  for(    i = 0, len = added.length; i < len; i++) this.emit('add', added[i], index + i);
	  this.emit('change');
	  return ret;
	};

	/**
	 * Adds one or more elements to the front of an array
	 * and returns the new length of the array.
	 *
	 * @param {Mixed, ...} elements
	 * @return {Number} length
	 * @api public
	 */

	array.prototype.unshift = function() {
	  var ret = proto.unshift.apply(this, arguments),
	      args = [].slice.call(arguments);
	  for(var i = 0, len = args.length; i < len; i++) this.emit('add', args[i], i);
	  this.emit('change');
	  return ret;
	};

	/**
	 * Reverses the array, emitting the `reverse` event
	 *
	 * @api public
	 */

	array.prototype.reverse = function () {
	  var ret = proto.reverse.apply(this, arguments);
	  this.emit('reverse');
	  this.emit('change');
	  return ret;
	};

	/**
	 * Sort the array, emitting the `sort` event
	 *
	 * With strings:
	 *
	 *   fruits.sort('calories')
	 *
	 * Descending sort:
	 *
	 *   fruits.sort('calories', 'desc')
	 *
	 * @param {undefined|Function|String} fn
	 * @param {Nunber|String|Boolean} dir
	 * @return {Array}
	 * @api public
	 */
	var sort = array.prototype.sort;
	array.prototype.sort = function () {
	  var ret = sort.apply(this, arguments);
	  this.emit('sort');
	  this.emit('change');
	  return ret;
	}


	/**
	 * toJSON
	 *
	 * @return {Object}
	 * @api public
	 */

	array.prototype.toJSON = function() {
	  return this.map(function(obj) {
	    return (obj.toJSON) ? obj.toJSON() : obj;
	  }).toArray();
	}

	/**
	 * Convert the array-like object to an actual array
	 *
	 * @return {Array}
	 * @api public
	 */

	array.prototype.toArray  = function() {
	  return proto.slice.call(this);
	};

	/**
	 * Static: get the array item
	 *
	 * @param {Mixed} obj
	 * @return {Mixed}
	 * @api public
	 */

	array.get = function(obj) {
	  return obj;
	};

	/**
	 * Get the array item
	 *
	 * @param {Number} i
	 * @return {Mixed}
	 * @api public
	 */

	array.prototype.get = array.get;

	/**
	 * Attach the rest of the array methods
	 */

	var methods = ['toString', 'concat', 'join', 'slice'];

	methods.forEach(function(method) {
	  array.prototype[method] = function() {
	    return proto[method].apply(this, arguments);
	  };
	});

	/**
	 * Remake the array, emptying it, then adding values back in
	 *
	 * @api private
	 */

	array.prototype._remake = function(arr) {
	  var construct = this.constructor;
	  var clone = (this._ctx) ? new construct(this._ctx) : new construct();
	  proto.push.apply(clone, arr);
	  clone.get = this.get || array.get;
	  return clone;
	};

	/**
	 * Is object utility
	 *
	 * @param {Mixed} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isObjectLiteral(obj) {
	  return obj.constructor == Object;
	}


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var toFunction = __webpack_require__(10),
	    proto = Array.prototype,
	    enumerable = {};

	/**
	 * Mixin to `obj`.
	 *
	 *    var Enumerable = require('enumerable');
	 *    Enumerable(Something.prototype);
	 *
	 * @param {Object} obj
	 * @return {Object} obj
	 * @api private
	 */

	module.exports = function(obj) {
	  for(var key in enumerable) obj[key] = enumerable[key];
	  return obj;
	};

	/**
	 * Iterate each value and invoke `fn(val, i)`.
	 *
	 *    users.each(function(val, i){
	 *
	 *    })
	 *
	 * @param {Function} fn
	 * @return {Object} self
	 * @api public
	 */

	enumerable.forEach =
	enumerable.each = function(fn){
	  var arr = this,
	      len = arr.length;

	  for (var i = 0; i < len; i++) {
	    fn(arr[i], i);
	  }

	  return this;
	};

	/**
	 * Map each return value from `fn(val, i)`.
	 *
	 * Passing a callback function:
	 *
	 *    users.map(function(user){
	 *      return user.name.first
	 *    })
	 *
	 * Passing a property string:
	 *
	 *    users.map('name.first')
	 *
	 * @param {Function} fn
	 * @return {Enumerable}
	 * @api public
	 */

	enumerable.map = function(fn){
	  fn = toFunction(fn);
	  var out = [],
	      arr = this,
	      len = arr.length;

	  for (var i = 0; i < len; ++i) {
	    out.push(fn(arr.get(arr[i]), i));
	  }

	  return this._remake(out);
	};

	/**
	 * Select all values that return a truthy value of `fn(val, i)`.
	 *
	 *    users.select(function(user){
	 *      return user.age > 20
	 *    })
	 *
	 *  With a property:
	 *
	 *    items.select('complete')
	 *
	 * @param {Function|String} fn
	 * @return {Enumerable}
	 * @api public
	 */

	enumerable.filter =
	enumerable.select = function(fn){
	  fn = toFunction(fn);
	  var out = [],
	      arr = this,
	      len = arr.length,
	      val;

	  for (var i = 0; i < len; ++i) {
	    val = arr.get(arr[i]);
	    if (fn(val, i)) out.push(arr[i]);
	  }

	  return this._remake(out);
	};

	/**
	 * Select all unique values.
	 *
	 *    nums.unique()
	 *
	 * @param {Function|String} fn
	 * @return {Enumerable}
	 * @api public
	 */

	enumerable.unique = function(fn){
	  var out = [],
	      vals = [],
	      arr = this,
	      len = arr.length,
	      val;

	  fn = (fn) ? toFunction(fn) : function(o) { return o; };

	  for (var i = 0; i < len; ++i) {
	    val = fn(arr.get(arr[i]));
	    if (~vals.indexOf(val)) continue;
	    vals.push(val);
	    out.push(arr[i]);
	  }

	  return this._remake(out);
	};

	/**
	 * Reject all values that return a truthy value of `fn(val, i)`.
	 *
	 * Rejecting using a callback:
	 *
	 *    users.reject(function(user){
	 *      return user.age < 20
	 *    })
	 *
	 * Rejecting with a property:
	 *
	 *    items.reject('complete')
	 *
	 * Rejecting values via `==`:
	 *
	 *    data.reject(null)
	 *    users.reject(tobi)
	 *
	 * @param {Function|String|Mixed} fn
	 * @return {Enumerable}
	 * @api public
	 */

	enumerable.reject = function(fn){
	  var out = [],
	      arr = this,
	      len = arr.length,
	      val, i;

	  if ('string' == typeof fn) fn = toFunction(fn);
	  if (fn) {
	    for (i = 0; i < len; ++i) {
	      val = arr.get(arr[i]);
	      if (!fn(val, i)) out.push(arr[i]);
	    }
	  } else {
	    for (i = 0; i < len; ++i) {
	      val = arr.get(arr[i]);
	      if (val != fn) out.push(arr[i]);
	    }
	  }

	  return this._remake(out);
	};

	/**
	 * Reject `null` and `undefined`.
	 *
	 *    [1, null, 5, undefined].compact()
	 *    // => [1,5]
	 *
	 * @return {Enumerable}
	 * @api public
	 */


	enumerable.compact = function(){
	  return this.reject(null);
	};

	/**
	 * Return the first value when `fn(val, i)` is truthy,
	 * otherwise return `undefined`.
	 *
	 *    users.find(function(user){
	 *      return user.role == 'admin'
	 *    })
	 *
	 * With a property string:
	 *
	 *    users.find('age > 20')
	 *
	 * @param {Function|String} fn
	 * @return {Mixed}
	 * @api public
	 */

	enumerable.find = function(fn){
	  fn = toFunction(fn);
	  var arr = this,
	      len = arr.length,
	      val;

	  for (var i = 0; i < len; ++i) {
	    val = arr.get(arr[i]);
	    if (fn(val, i)) return arr[i];
	  }
	};

	/**
	 * Return the last value when `fn(val, i)` is truthy,
	 * otherwise return `undefined`.
	 *
	 *    users.findLast(function(user){
	 *      return user.role == 'admin'
	 *    })
	 *
	 * @param {Function} fn
	 * @return {Mixed}
	 * @api public
	 */

	enumerable.findLast = function (fn) {
	    fn = toFunction(fn);
	  var arr = this,
	  i = arr.length;

	  while(i--) if (fn(arr.get(arr[i]), i)) return arr[i];
	};

	/**
	 * Assert that all invocations of `fn(val, i)` are truthy.
	 *
	 * For example ensuring that all pets are ferrets:
	 *
	 *    pets.all(function(pet){
	 *      return pet.species == 'ferret'
	 *    })
	 *
	 *    users.all('admin')
	 *
	 * @param {Function|String} fn
	 * @return {Boolean}
	 * @api public
	 */

	enumerable.every = function(fn){
	  fn = toFunction(fn);
	  var arr = this,
	      len = arr.length,
	      val;

	  for (var i = 0; i < len; ++i) {
	    val = arr.get(arr[i]);
	    if (!fn(val, i)) return false;
	  }

	  return true;
	};

	/**
	 * Assert that none of the invocations of `fn(val, i)` are truthy.
	 *
	 * For example ensuring that no pets are admins:
	 *
	 *    pets.none(function(p){ return p.admin })
	 *    pets.none('admin')
	 *
	 * @param {Function|String} fn
	 * @return {Boolean}
	 * @api public
	 */

	enumerable.none = function(fn){
	  fn = toFunction(fn);
	  var arr = this,
	      len = arr.length,
	      val;

	  for (var i = 0; i < len; ++i) {
	    val = arr.get(arr[i]);
	    if (fn(val, i)) return false;
	  }
	  return true;
	};

	/**
	 * Assert that at least one invocation of `fn(val, i)` is truthy.
	 *
	 * For example checking to see if any pets are ferrets:
	 *
	 *    pets.any(function(pet){
	 *      return pet.species == 'ferret'
	 *    })
	 *
	 * @param {Function} fn
	 * @return {Boolean}
	 * @api public
	 */

	enumerable.any = function(fn){
	  fn = toFunction(fn);
	  var arr = this,
	      len = arr.length,
	      val;

	  for (var i = 0; i < len; ++i) {
	    val = arr.get(arr[i]);
	    if (fn(val, i)) return true;
	  }
	  return false;
	};

	/**
	 * Count the number of times `fn(val, i)` returns true.
	 *
	 *    var n = pets.count(function(pet){
	 *      return pet.species == 'ferret'
	 *    })
	 *
	 * @param {Function} fn
	 * @return {Number}
	 * @api public
	 */

	enumerable.count = function(fn){
	  fn = toFunction(fn);
	  var n = 0,
	      arr = this,
	      len = arr.length,
	      val;

	  if(!fn) return len;

	  for (var i = 0; i < len; ++i) {
	    val = arr.get(arr[i]);
	    if (fn(val, i)) ++n;
	  }
	  return n;
	};

	/**
	 * Determine the indexof `obj` or return `-1`.
	 *
	 * @param {Mixed} obj
	 * @return {Number}
	 * @api public
	 */

	enumerable.indexOf = function(obj) {
	  var arr = this,
	      len = arr.length,
	      val;

	  for (var i = 0; i < len; ++i) {
	    val = arr.get(arr[i]);
	    if (val === obj) return i;
	  }

	  return -1;
	};

	/**
	 * Determine the last indexof `obj` or return `-1`.
	 *
	 * @param {Mixed} obj
	 * @return {Number}
	 * @api public
	 */

	enumerable.lastIndexOf = function(obj) {
	  var arr = this,
	      len = arr.length,
	      val;

	  for (var i = --len; i >= 0; --i) {
	    val = arr.get(arr[i]);
	    if (val === obj) return i;
	  }

	  return -1;
	};

	/**
	 * Check if `obj` is present in this enumerable.
	 *
	 * @param {Mixed} obj
	 * @return {Boolean}
	 * @api public
	 */

	enumerable.has = function(obj) {
	  return !! ~this.indexOf(obj);
	};

	/**
	 * Reduce with `fn(accumulator, val, i)` using
	 * optional `init` value defaulting to the first
	 * enumerable value.
	 *
	 * @param {Function} fn
	 * @param {Mixed} [val]
	 * @return {Mixed}
	 * @api public
	 */

	enumerable.reduce = function(fn, init){
	  var arr = this,
	      len = arr.length,
	      i = 0,
	      val;

	  val = null == init
	    ? arr.get(i++)
	    : init;

	  for (; i < len; ++i) {
	    val = fn(val, arr.get(arr[i]), i);
	  }

	  return val;
	};


	/**
	 * Determine the max value.
	 *
	 * With a callback function:
	 *
	 *    pets.max(function(pet){
	 *      return pet.age
	 *    })
	 *
	 * With property strings:
	 *
	 *    pets.max('age')
	 *
	 * With immediate values:
	 *
	 *    nums.max()
	 *
	 * @param {Function|String} fn
	 * @return {Number}
	 * @api public
	 */

	enumerable.max = function(fn){
	  var arr = this,
	      len = arr.length,
	      max = -Infinity,
	      n = 0,
	      val, i;

	  if (fn) {
	    fn = toFunction(fn);
	    for (i = 0; i < len; ++i) {
	      n = fn(arr.get(arr[i]), i);
	      max = n > max ? n : max;
	    }
	  } else {
	    for (i = 0; i < len; ++i) {
	      n = arr.get(arr[i]);
	      max = n > max ? n : max;
	    }
	  }

	  return max;
	};

	/**
	 * Determine the min value.
	 *
	 * With a callback function:
	 *
	 *    pets.min(function(pet){
	 *      return pet.age
	 *    })
	 *
	 * With property strings:
	 *
	 *    pets.min('age')
	 *
	 * With immediate values:
	 *
	 *    nums.min()
	 *
	 * @param {Function|String} fn
	 * @return {Number}
	 * @api public
	 */

	enumerable.min = function(fn){
	  var arr = this,
	      len = arr.length,
	      min = Infinity,
	      n = 0,
	      val, i;

	  if (fn) {
	    fn = toFunction(fn);
	    for (i = 0; i < len; ++i) {
	      n = fn(arr.get(arr[i]), i);
	      min = n < min ? n : min;
	    }
	  } else {
	    for (i = 0; i < len; ++i) {
	      n = arr.get(arr[i]);
	      min = n < min ? n : min;
	    }
	  }

	  return min;
	};

	/**
	 * Determine the sum.
	 *
	 * With a callback function:
	 *
	 *    pets.sum(function(pet){
	 *      return pet.age
	 *    })
	 *
	 * With property strings:
	 *
	 *    pets.sum('age')
	 *
	 * With immediate values:
	 *
	 *    nums.sum()
	 *
	 * @param {Function|String} fn
	 * @return {Number}
	 * @api public
	 */

	enumerable.sum = function(fn){
	  var arr = this,
	      len = arr.length,
	      n = 0,
	      val, i;

	  if (fn) {
	    fn = toFunction(fn);
	    for (i = 0; i < len; ++i) {
	      n += fn(arr.get(arr[i]), i);
	    }
	  } else {
	    for (i = 0; i < len; ++i) {
	      n += arr.get(arr[i]);
	    }
	  }

	  return n;
	};

	/**
	 * Determine the average value.
	 *
	 * With a callback function:
	 *
	 *    pets.avg(function(pet){
	 *      return pet.age
	 *    })
	 *
	 * With property strings:
	 *
	 *    pets.avg('age')
	 *
	 * With immediate values:
	 *
	 *    nums.avg()
	 *
	 * @param {Function|String} fn
	 * @return {Number}
	 * @api public
	 */

	enumerable.avg =
	enumerable.mean = function(fn){
	  var arr = this,
	      len = arr.length,
	      n = 0,
	      val, i;

	  if (fn) {
	    fn = toFunction(fn);
	    for (i = 0; i < len; ++i) {
	      n += fn(arr.get(arr[i]), i);
	    }
	  } else {
	    for (i = 0; i < len; ++i) {
	      n += arr.get(arr[i]);
	    }
	  }

	  return n / len;
	};

	/**
	 * Return the first value, or first `n` values.
	 *
	 * @param {Number|Function} [n]
	 * @return {Array|Mixed}
	 * @api public
	 */

	enumerable.first = function(n) {
	  var arr = this;

	  if(!n) return arr[0];
	  else if ('number' !== typeof n) return this.find(n);

	  var len = Math.min(n, arr.length),
	      out = new Array(len);

	  for (var i = 0; i < len; ++i) {
	    out[i] = arr[i];
	  }

	  return out;

	};

	/**
	 * Return the last value, or last `n` values.
	 *
	 * @param {Number|Function} [n]
	 * @return {Array|Mixed}
	 * @api public
	 */

	enumerable.last = function(n){
	  var arr = this,
	      len = arr.length;

	  if(!n) return arr[len - 1];
	  else if ('number' !== typeof n) return this.findLast(n);

	  var i = Math.max(0, len - n),
	      out = [];

	  for (; i < len; ++i) {
	    out.push(arr[i]);
	  }

	  return out;
	};

	/**
	 * Create a hash from a given `key`
	 *
	 * @param {String} key
	 * @return {Object}
	 * @api public
	 */

	enumerable.hash = function(str) {
	  var arr = this,
	      len = arr.length,
	      out = {},
	      key;

	  for (var i = 0, len = arr.length; i < len; i++) {
	    key = arr.get(arr[i])[str];
	    // TODO: assess, maybe we want out[i] = arr.get(i)
	    if(!key) continue;
	    out[key] = arr[i];
	  };

	  return out;
	};

	/**
	 * Sort the array.
	 *
	 * With strings:
	 *
	 *   fruits.sort('calories')
	 *
	 * Descending sort:
	 *
	 *   fruits.sort('calories', 'desc')
	 *
	 * @param {undefined|Function|String} fn
	 * @param {Nunber|String|Boolean} dir
	 * @return {Array}
	 * @api public
	 */

	enumerable.sort = function(fn, dir) {
	  dir = (dir !== undefined) ? dir : 1;
	  var sort = proto.sort;
	  if(!fn) return sort.apply(this);
	  else if('function' == typeof fn) return sort.apply(this, arguments);

	  var self = this;
	  fn = toFunction(fn);

	  // support ascending and descending directions
	  if('string' == typeof dir) {
	    if(/asc/.test(dir)) dir = 1;
	    else if(/des/.test(dir)) dir = -1;
	  } else if('boolean' == typeof dir) {
	    dir = (dir) ? 1 : -1;
	  }

	  function compare(a, b) {
	    a = fn(self.get(a)), b = fn(self.get(b));
	    if(a < b) return -(dir);
	    else if(a > b) return dir;
	    return 0
	  };

	  return sort.call(this, compare);
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	try {
	  var expr = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"props\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	} catch(e) {
	  var expr = __webpack_require__(11);
	}

	/**
	 * Expose `toFunction()`.
	 */

	module.exports = toFunction;

	/**
	 * Convert `obj` to a `Function`.
	 *
	 * @param {Mixed} obj
	 * @return {Function}
	 * @api private
	 */

	function toFunction(obj) {
	  switch ({}.toString.call(obj)) {
	    case '[object Object]':
	      return objectToFunction(obj);
	    case '[object Function]':
	      return obj;
	    case '[object String]':
	      return stringToFunction(obj);
	    case '[object RegExp]':
	      return regexpToFunction(obj);
	    default:
	      return defaultToFunction(obj);
	  }
	}

	/**
	 * Default to strict equality.
	 *
	 * @param {Mixed} val
	 * @return {Function}
	 * @api private
	 */

	function defaultToFunction(val) {
	  return function(obj){
	    return val === obj;
	  }
	}

	/**
	 * Convert `re` to a function.
	 *
	 * @param {RegExp} re
	 * @return {Function}
	 * @api private
	 */

	function regexpToFunction(re) {
	  return function(obj){
	    return re.test(obj);
	  }
	}

	/**
	 * Convert property `str` to a function.
	 *
	 * @param {String} str
	 * @return {Function}
	 * @api private
	 */

	function stringToFunction(str) {
	  // immediate such as "> 20"
	  if (/^ *\W+/.test(str)) return new Function('_', 'return _ ' + str);

	  // properties such as "name.first" or "age > 18" or "age > 18 && age < 36"
	  return new Function('_', 'return ' + get(str));
	}

	/**
	 * Convert `object` to a function.
	 *
	 * @param {Object} object
	 * @return {Function}
	 * @api private
	 */

	function objectToFunction(obj) {
	  var match = {}
	  for (var key in obj) {
	    match[key] = typeof obj[key] === 'string'
	      ? defaultToFunction(obj[key])
	      : toFunction(obj[key])
	  }
	  return function(val){
	    if (typeof val !== 'object') return false;
	    for (var key in match) {
	      if (!(key in val)) return false;
	      if (!match[key](val[key])) return false;
	    }
	    return true;
	  }
	}

	/**
	 * Built the getter function. Supports getter style functions
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function get(str) {
	  var props = expr(str);
	  if (!props.length) return '_.' + str;

	  var val;
	  for(var i = 0, prop; prop = props[i]; i++) {
	    val = '_.' + prop;
	    val = "('function' == typeof " + val + " ? " + val + "() : " + val + ")";
	    str = str.replace(new RegExp(prop, 'g'), val);
	  }

	  return str;
	}


/***/ },
/* 11 */
/***/ function(module, exports) {

	
	/**
	 * Return immediate identifiers parsed from `str`.
	 *
	 * @param {String} str
	 * @return {Array}
	 * @api public
	 */

	module.exports = function(str, prefix){
	  var p = unique(props(str));
	  if (prefix) return prefixed(str, p, prefix);
	  return p;
	};

	/**
	 * Return immediate identifiers in `str`.
	 *
	 * @param {String} str
	 * @return {Array}
	 * @api private
	 */

	function props(str) {
	  return str
	    .replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\//g, '')
	    .match(/[a-zA-Z_]\w*/g)
	    || [];
	}

	/**
	 * Return `str` with `props` prefixed with `prefix`.
	 *
	 * @param {String} str
	 * @param {Array} props
	 * @param {String} prefix
	 * @return {String}
	 * @api private
	 */

	function prefixed(str, props, prefix) {
	  var re = /\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\/|[a-zA-Z_]\w*/g;
	  return str.replace(re, function(_){
	    if ('(' == _[_.length - 1]) return prefix + _;
	    if (!~props.indexOf(_)) return _;
	    return prefix + _;
	  });
	}

	/**
	 * Return unique array.
	 *
	 * @param {Array} arr
	 * @return {Array}
	 * @api private
	 */

	function unique(arr) {
	  var ret = [];

	  for (var i = 0; i < arr.length; i++) {
	    if (~ret.indexOf(arr[i])) continue;
	    ret.push(arr[i]);
	  }

	  return ret;
	}


/***/ },
/* 12 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Model = __webpack_require__(14);
	var cache = __webpack_require__(18);
	var cast = __webpack_require__(20);
	var array = __webpack_require__(22);

	var User = __webpack_require__(23);

	module.exports = new Model([
			'name',
			'slug',
			'creator',
			'joined',
			'unread',
			'mentioned',
			'typing',
			'is_public',
			'first_message_time',
			'latest_message_time'
		])
		.use(cache('id'))
		.use(array)
		.array('history', {events: false})
		.array('searchHistory', {events: false})
		.array('typing', {events: false})
		.array('users', {childEvents: true}) // TODO: maybe make this a map?
		.use(cast)
		.cast('creator', castCreator)
		.use(children);

	// some internal lookup maps
	function children(Model) {
		Model.on('construct', function (instance) {
			// a map of typing user ids
			instance.typing = Object.create(null);
			// this is a map from user ids to lines read by the user
			instance._readingStatus = Object.create(null);
		});
	}


	function castCreator(creator_id) {
		if (creator_id !== null) {
			var user = User.get(creator_id);
			if (user)
				return user;
		}

		return null;
	}



/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {module.exports = process.env.MODEL_COV
	  ? __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./lib-cov\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  : __webpack_require__(16);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	
	try {
		var Emitter = __webpack_require__(6);
	} catch (e) {
		Emitter = __webpack_require__(17);
	}

	module.exports = createModel;

	function createModel(properties) {
		function Model(data) {
			if (!(this instanceof Model)) return new Model(data);
			Emitter.call(this);
			this._data = {};
			data = data || {};
			this._model.emit('construct', this, data);
			for (var prop in data) {
				if (!(prop in Model._skip))
					this[prop] = data[prop];
			}
		}

		Emitter(Model);

		Model._skip = {};
		Model._attrs = {};
		Model.attr = attr;
		Model.use = use;

		Model.prototype = Object.create(Emitter.prototype);
		Model.prototype._model = Model;
		Model.prototype._get = get;
		Model.prototype._set = set;
		Model.prototype.toJSON = toJSON;

		properties = properties || [];
		if (Array.isArray(properties)) {
			for (var i = 0; i < properties.length; i++) {
				var prop = properties[i];
				Model.attr(prop);
			}
		} else {
			var keys = Object.keys(properties);
			for (var i = 0; i < keys.length; i++) {
				var prop = keys[i];
				Model.attr(prop, properties[prop]);
			}
		}

		return Model;
	}

	function use(fns) {
		var self = this;
		fns = Array.isArray(fns) ? fns : [fns];
		for (var i = 0; i < fns.length; i++) {
			var fn = fns[i];
			fn(this);
		}
		return this;
	}

	function attr(name, metadata) {
		this._attrs[name] = metadata || {};

		Object.defineProperty(this.prototype, name, {
			enumerable: true,
			configurable: true,
			get: function () { return this._get(name); },
			set: function (val) { this._set(name, val); }
		});

		return this;
	}

	function get(name) {
		return this._data[name];
	}
	function set(name, val) {
		var prev = this._data[name];
		this._data[name] = val;
		this._model.emit('change', this, name, val, prev);
		this._model.emit('change ' + name, this, val, prev);
		this.emit('change', name, val, prev);
		this.emit('change ' + name, val, prev);
	}
	// FIXME: this might be fragile?
	var ignore = {
		_data: true,
		_callbacks: true // emitter
	};
	function toJSON() {
		var json = {};
		var keys = Object.keys(this);
		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			if (!(key in ignore))
				json[key] = this[key];
		}
		for (var k in this._data)
			json[k] = this._data[k];
		return json;
	}


/***/ },
/* 17 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {module.exports = process.env.MODEL_CACHE_COV
	  ? __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./lib-cov\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  : __webpack_require__(19);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ },
/* 19 */
/***/ function(module, exports) {

	
	module.exports = function (prop) {
		return function (Model) {
			var cache = Model._cache = Object.create(null);
			Model.on('construct', function (instance, initial) {
				var key = initial[prop];
				cache[key] = instance;
			});
			Model.get = function (key) {
				return cache[key];
			};
			Model.clear = function (key) {
				if (typeof key !== 'undefined')
					delete cache[key];
				else
					cache = Model._cache = Object.create(null);
			};
		};
	};



/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	module.exports = process.env.MODEL_CAST_COV
		? __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./lib-cov\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
		: __webpack_require__(21);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ },
/* 21 */
/***/ function(module, exports) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var exports = module.exports = bindCast;

	// convenience method because `Date` does not work when called as function
	exports.Date = function (d) {
		if (d instanceof Date)
			return d;
		return new Date(d);
	};

	// convenience method that works well with Swatinem/model-cache
	exports.Cache = function (Model) {
		return function (key) {
			if (key instanceof Model)
				return key;
			return Model.get(key);
		};
	};

	function bindCast(Model) {
		Model.cast = defineCast;
	}

	function defineCast(name, fn) {
		/* jshint validthis: true */

		var desc = Object.getOwnPropertyDescriptor(this.prototype, name);
		var setter = desc.set;
		desc.set = function (val) {
			setter.call(this, fn(val));
		};
		Object.defineProperty(this.prototype, name, desc);

		return this;
	}



/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	module.exports = bindArray;

	var array = __webpack_require__(7);

	function bindArray(Model) {
		Model.array = defineArray;
		Model._arrays = {};
		Model.on('construct', construct);
	}

	function defineArray(name, options) {
		/* jshint validthis: true */
		this._arrays[name] = options || {};
		Object.defineProperty(this.prototype, name, {
			enumerable: true,
			get: function () { return this._data[name]; },
			set: function (val) {
				this._data[name].splice.apply(this._data[name], [0, this._data[name].length].concat(val));
			}
		});

		return this;
	}

	var slice = [].slice;
	function construct(instance) {
		var Model = instance._model;

		for (var name in Model._arrays) {
			var options = Model._arrays[name];
			var arr = instance._data[name] = new array();
			if (options.events === false)
				continue;
			if (options.detailedEvents) {
				arr.on('add', detailedEvent(name, 'add'));
				arr.on('remove', detailedEvent(name, 'remove'));
				arr.on('sort', detailedEvent(name, 'sort'));
				arr.on('reverse', detailedEvent(name, 'reverse'));
			} else {
				arr.on('change', onChange);
			}
			if (options.childEvents) {
				arr.on('add', onChild);
				arr.on('remove', offChild);
			}
		}

		// generic event
		function onChange() {
			Model.emit('change', instance, name);
			Model.emit('change ' + name, instance);
			instance.emit('change', name);
			instance.emit('change ' + name);
		}
		// detailed events
		function detailedEvent(name, ev) {
			return function () {
				var args = [ev].concat(slice.call(arguments));
				Model.emit.apply(Model, ['change', instance, name].concat(args));
				Model.emit.apply(Model, ['change ' + name, instance].concat(args));
				instance.emit.apply(instance, ['change', name].concat(args));
				instance.emit.apply(instance, ['change ' + name].concat(args));
			};
		}
		// delegating child events
		function childEvent() {
			/* jshint validthis: true */
			// thank god this provides the correct `this`
			var args = ['child', this].concat(slice.call(arguments));
			Model.emit.apply(Model, ['change', instance, name].concat(args));
			Model.emit.apply(Model, ['change ' + name, instance].concat(args));
			instance.emit.apply(instance, ['change', name].concat(args));
			instance.emit.apply(instance, ['change ' + name].concat(args));
		}
		function onChild(elem) {
			elem.on('change', childEvent);
		}
		function offChild(elem) {
			elem.off('change', childEvent);
		}
	}



/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Model = __webpack_require__(14);
	var cache = __webpack_require__(18);
	var staticurl = __webpack_require__(24);

	module.exports = new Model([
			'username',
			'firstName',
			'lastName',
			'displayName',
			'status',
			'avatar',
			'is_only_invited',
			'role',
			'pm',
		])
		.use(cache('id'))
		.use(defaultAvatar('images/avatar.gif', 'images/avatar_invited.gif'));

	function defaultAvatar(url, url_invited) {
		return function (Model) {
			Model.on('construct', function (instance, initial) {
				if (initial.is_only_invited) {
					initial.avatar = staticurl(url_invited);
				}
				initial.avatar = initial.avatar || staticurl(url);
			});
		};
	}


/***/ },
/* 24 */
/***/ function(module, exports) {

	"use strict";

	module.exports = staticurl;

	function staticurl(url) {
	    //TODO: don't use global vars (staticPath)
	    if (typeof staticPath === 'undefined')
	        return url;
	    return (staticPath || '') + url;
	}


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Model = __webpack_require__(14);
	var cache = __webpack_require__(18);
	var cast = __webpack_require__(20);
	var array = __webpack_require__(22);

	var User = __webpack_require__(23);
	var Channel = __webpack_require__(13);

	module.exports = new Model([
			'author',
			'channel',
			'time',
			'user_time',
			'read' // to track if the current user has read the line
		])
		.use(cache('id'))
		.use(cast)
		.cast('author', castAuthor)
		.cast('channel', castChannel)
		.cast('time', cast.Date)
		.use(array)
		.array('readers');

	function castAuthor(author) {
		if (author.type === 'user') {
			var user = User.get(author.id) || new User({id: author.id});
			if (user) {
				user['type'] = 'user';
			}
			return user;
		}

		if (author.type === 'service'){
			return {
				'id': author.id,
				'username': author.username || author.id,
				'type': 'service'
			};
		}

		return author;
	}


	// for display in search results we need the channel name as well
	function castChannel(channel) {
		var ch = Channel.get(channel);
		if (ch)
			return ch;
		return channel;
	}


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Model = __webpack_require__(14);
	var cache = __webpack_require__(18);
	var array = __webpack_require__(22);
	var staticurl = __webpack_require__(24);

	module.exports = new Model([
			'logo',
			'role',
			'custom_emojis',
			'has_integrations'
		])
		.use(cache('id'))
		.use(array)
		.array('rooms')
		.array('pms')
		.array('users')
		.use(defaultLogo('images/head.png'));

	function defaultLogo(url) {
		return function (Model) {
			Model.on('construct', function (instance, initial) {
				initial.logo = initial.logo || staticurl(url);
			});
		};
	}



/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = {
		ROLE_USER: 0,
		ROLE_ADMIN: 1,
		ROLE_OWNER: 2
	};


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var template = __webpack_require__(29);
	var v = __webpack_require__(34);
	var Emitter = __webpack_require__(41);
	var broker = __webpack_require__(42);
	var qs = __webpack_require__(43);
	var domify = __webpack_require__(44);
	var escape_html = __webpack_require__(45);
	var notification = __webpack_require__(46);
	var classes = __webpack_require__(99);
	var staticurl = __webpack_require__(24);
	var events = __webpack_require__(101);
	var notify = __webpack_require__(102);
	var constants = __webpack_require__(3).constants;
	var Introjs = __webpack_require__(103).introJs;
	var Clipboard = __webpack_require__(104);
	var dropAnywhere = __webpack_require__(109);
	var timezone = __webpack_require__(115);
	var focus = __webpack_require__(116);
	var pipeEvents = __webpack_require__(117);
	var page = __webpack_require__(118);
	var Router = __webpack_require__(119);

	var exports = module.exports = UI;

	__webpack_require__(120);
	__webpack_require__(121);

	// configure locales and template locals
	var template = __webpack_require__(29);
	template.root = 'cg/templates';
	template.locals.strftime = __webpack_require__(122);
	var _ = __webpack_require__(123);
	// ['de', 'en'].forEach(function (lang) {
	// 	_.merge(lang, require('../locale/' + lang));
	// });
	_.lang('en');
	// _ is set here so that the tests which don't load the UI work as well
	template.locals._ = _;
	template.locals.escape_html = escape_html;
	template.locals.markdown = __webpack_require__(125);
	template.locals.constants = constants;
	// XXX: I really don’t want to hack in innerHTML support right now, so just
	// make a little workaround here
	template.locals.html = function (html) {
		return v.fromDOM(domify(html));
	};

	// FIXME: change language, for now
	// this should be done via a switch in the UI

	exports.ItemList = __webpack_require__(132);
	var datejs = __webpack_require__(134);
	var Navigation = exports.Navigation = __webpack_require__(303);
	var RoomPopover = exports.RoomPopover = __webpack_require__(313);
	var RoomMembersPopover = exports.RoomMembersPopover = __webpack_require__(315);
	var UserPopover = exports.UserPopover = __webpack_require__(316);
	var OrganizationPopover = exports.OrganizationPopover = __webpack_require__(317);
	var RoomCreationPopover = exports.RoomCreationPopover = __webpack_require__(318);
	var ChatHeader = exports.ChatHeader = __webpack_require__(319);
	var GrapeInputIntegration = exports.GrapeInputIntegration = __webpack_require__(321);
	var HistoryView = exports.HistoryView = __webpack_require__(323);
	var Title = exports.Title = __webpack_require__(407);
	var FileUploader = exports.FileUploader = __webpack_require__(408);
	var Messages = exports.Messages = __webpack_require__(412);
	var Notifications = exports.Notifications = __webpack_require__(413);
	var SearchView = exports.SearchView = __webpack_require__(414);
	var Invite = exports.Invite = __webpack_require__(415);
	var Dropzone = exports.Dropzone = __webpack_require__(433);
	var DeleteRoomDialog = exports.DeleteRoomDialog = __webpack_require__(434);
	var MarkdownTipsDialog = exports.MarkdownTipsDialog = __webpack_require__(439);

	function UI(options) {
		Emitter.call(this);
		this.options = options || {};
		this.init();
		this.bind();
	}

	UI.prototype = Object.create(Emitter.prototype);

	UI.prototype.init = function UI_init() {
		// set the current language
		_.lang(this.options.languageCode || 'en');
		template.locals._ = _;
		template.locals.staticurl = staticurl;
		// initialize user and org with dummy image
		template.locals.user = {
			avatar: staticurl("images/orga-image-load.gif"),
			username: "Loading",
			displayName: "Loading"
		};
		template.locals.org = {
			logo: staticurl("images/orga-image-load.gif"),
			name: "Loading"
		};

		this.el = v.toDOM(template('index.jade'));

		// add the navigation to the layout
		var sidebar = qs('.navigation', this.el);
		var navigation = this.navigation = new Navigation();
		sidebar.parentNode.replaceChild(navigation.el, sidebar);

		// initialize the popovers
		this.addRoom = new RoomPopover();
		this.userMenu = new UserPopover();
		this.membersMenu = new RoomMembersPopover();
		this.organizationMenu = new OrganizationPopover();
		this.searchView = new SearchView();
		this.roomCreation = new RoomCreationPopover();

		this.chatHeader = new ChatHeader();
		qs('.room-header', this.el).appendChild(this.chatHeader.el);

		// initialize the input field
		this.grapeInput = new GrapeInputIntegration();
		qs('.footer', this.el).appendChild(this.grapeInput.el);

		this.markdownTips = new MarkdownTipsDialog().closable();

		this.historyView = new HistoryView();
		var chat = qs('.chat-wrapper .chat', this.el);
		chat.parentNode.replaceChild(this.historyView.el, chat);

		this.invite = new Invite();
		var invite_placeholder = qs('.invite',this.membersMenu.el);
		invite_placeholder.parentNode.replaceChild(this.invite.el, invite_placeholder);

		this.title = new Title();

		this.messages = new Messages();
		qs('.chat-wrapper', this.el).appendChild(this.messages.el);

		this.upload = new FileUploader(this.options.uploadPath);
		var uploadContainer = qs('.uploader', this.grapeInput.el);
		uploadContainer.parentNode.replaceChild(this.upload.el, uploadContainer);

		this.clipboard = new Clipboard(window);

		// on paste, check if the pasted item is a blob object -image-,
		// then emit an upload event to the broker to call the uploader
		this.clipboard.on('paste', function(e){
			if(e.items[0] instanceof Blob) this.emit('upload', e.items[0]);
	  	});

		// initialize dragAndDrop
		// receive the dragged items and emit
		// an event to the uploader to upload them
		var self = this;
		this.dropzone = new Dropzone();
		this.dragAndDrop = dropAnywhere(function(e){
			e.items.forEach(function(item){
				self.emit('uploadDragged', item);
			});
		}, this.dropzone.el);

		// initialize notifications
		this.notifications = new Notifications();
		// only show notification info bar in supported browsers and only if the
		// user has't accepted or declined notifications before
		// don't show it in IE. it only supports notifications in "SiteMode" and
		// there the permission is automatically granted, so no need to ask for it.
		if (notify.isSupported
			&& notify.permissionLevel() === notify.PERMISSION_DEFAULT
			&& (typeof window.external === "undefined" || typeof window.external.msIsSiteMode === "undefined")) {
				this.enableNotificationMessage = this.messages.info('notifications reminder');
				classes(qs('body')).add('notifications-disabled');
		}

		// initialize user guide
		this.intro = new Introjs();
		this.intro.setOptions({
			nextLabel: '<strong>' + _('Next') + '</strong>',
			skipLabel: _('Skip'),
			overlayOpacity: 0.7,
			showStepNumbers: false,
			showProgress: true,
			showBullets: false,
			steps: [
				{
					intro: _('<img style="float: left;margin-left: -10px" width="120" height="120" src="'+ staticurl("images/mascot/mascot_wave.png") +'"><div style="overflow: hidden"><h2>Hi '+ globalDisplayName +', welcome to ChatGrape!</h2><h3>My name is Trauby and I am here to give you a warm welcome at ChatGrape.</h3><p>The goal is to make your work life more <u>efficient</u>, <u>productive</u> and <u>enjoyable</u>. With the following 5 tips I will give you a quick overview of the chat and its nifty features.</p><p> If you want to talk to us, you can always reach out via <a target="_blank" href="mailto:support@chatgrape.com">support@chatgrape.com</a> or by tweeting at <a href="https://twitter.com/chatgrapecom" target="_blank">@chatgrapecom</a>.</p></div><div style="clear:both"></div>'),
					tooltipClass: "intro-welcome"
				},
				{
					element: '#intro-stepOne',
					intro: _('<img style="float: left;margin-left: -10px" width="110" height="130" src="'+ staticurl("images/mascot/mascot_playing.png") +'"><div style="overflow: hidden"><h2>Juggle your company from <u>one place</u></h2><h3>Access all your company data right from the chat.</h3><p>Add <u>Service Integrations</u> inside of your <u>Organization Settings</u> to make them available inside of ChatGrape. You can search some external websites right away:</p><p><ul class="ver-list"><li>Type <span class="example-text">#youtube: chatgrape</span> to search youtube,</li><li>or <span class="example-text">#gif: explosion</span> to search the internet for gifs.</li></ul></p><p><strong>But most importantly</strong>: Add your own company data in your <u>Organization Settings</u> to browse your files, tasks and appointments within ChatGrape.</p> </div><div style="clear:both;height:1px;width:720px"></div>'),
					position: 'top'
				},
				{
					element: '#intro-step2',
					intro: _('<img style="float: right;margin-right: -10px" width="110" height="130" src="'+ staticurl("images/mascot/mascot_reading.png") +'"><div style="overflow: hidden"><h2>Rooms are a <u>virtual profile of your company</u></h2><h3>Join and create rooms for projects and departments within your organization.</h3><p>You can create and join public and private rooms by clicking the <u>Manage Rooms</u> button in the corner.</p> </div><div style="clear:both;height:1px;width:550px"></div>'),
					position: 'right'
				},
				{
					element: '#intro-step3',
					intro: _('<h2>Communicate 1-on-1</h2><h3>Click on your team members to start private conversations</h3><p>The color dot indicates each user\'s current state:<ul class="ver-list"><li><strong>Green</strong>: The user is online</li><li><strong>Red</strong>: The user is currently not reachable</li><li><strong>Grey</strong>: The user has been removed from the organization</li></ul></p><p>Your private messages are sorted by latest interactions, pushing unread messages to the top.</p><div style="clear:both;height:1px;width:550px"></div>'),
					position: 'right',
					tooltipClass: 'introjs-push-arrow-bottom'
				},
				{
					element: '#intro-step4',
					intro: _('<h2>The Room header</h2><h3>At ChatGrape everything is just one click away.</h3><p>As an admin or room owner, you can modify a <u>Room Name</u> just by clicking the <i class="fa fa-pencil"></i> button.</p><p>You can <u>Delete Rooms</u> by clicking the <i class="fa fa-trash"></i> icon.</p><p>The little round images show the <u>users inside a room</u>. Click the <i class="fa fa-user-plus"></i> button to see all and to invite new users.</p>'),
					position: 'bottom'
				},
				{
					intro: _('<img style="float: left;margin-left: -10px" width="120" height="120" src="'+ staticurl("images/mascot/gifs/trauby_space_sml.gif") +'"><div style="overflow: hidden"><h2>ChatGrape - We Have Lift-off!</h2><h3>With the tutorial out of the way, it\'s now time to set up your organization.</h3><p><u>Manage your rooms</u>, invite your <u>team members</u> and <u>add service integrations</u> in your organization settings.</p><p>If you need help with the setup, don\'t hesitate and contact us right away!</p><p>Cheerio, <br>-Trauby</p></div><div style="clear:both;height:1px;width:720px"></div>'),
				}
			]
		});

		// check timezone
		this.tz = timezone.determine().name();
		this.notificationSessionSet = false;
		this.firstTimeConnect = true;
	};

	UI.prototype.bind = function UI_bind() {
		pipeEvents(this);
		var self = this;
		var navigation = this.navigation;

		this.events = events(this.el, {
			'toggleOrganizationMenu': function() {
				self.organizationMenu.toggle(qs('.logo'));
			},
			'requestPermission': function() {
				notify.requestPermission(function(permission){
					if (permission !== "default") {
						self.enableNotificationMessage.remove();
						classes(qs('body')).remove('notifications-disabled');
					}
				});
			}
		});
		this.events.bind('click .logo', 'toggleOrganizationMenu');
		this.events.bind('click .enable_notifications', 'requestPermission');

		this.room = null;

		this.upload.on('uploaded', function (attachment) {
			self.emit('send', self.room, '', {attachments: [attachment.id]});
			self.upload.hide();
		});

		// intro
		this.intro.oncomplete(function() {
			self.emit('introend');
		});
		this.intro.onexit(function() {
			self.emit('introend');
		});

		// Open certain link in the external browser in the OS X app
		if (typeof MacGap !== 'undefined') {
			var as, i;
			as = qs.all('a', this.organizationMenu.el);
			for (i = 0; i < as.length; ++i) {
				as[i].target = '_blank';
			}
			as = qs.all('a', this.userMenu.el);
			for (i = 0; i < as.length; ++i) {
				if (as[i].href.endsWith('/accounts/settings/')) {
					as[i].target = '_blank';
				}
			}
		}
	};

	UI.prototype.setOrganization = function UI_setOrganization(org) {
		var self = this;
		this.org = org;
		template.locals.org = this.org;
		this.emit('orgReady', this.org);
		Router(this);
		this.setNotificationsSession();
		if (this.notificationSessionSet == true) return;
		focus.on('focus', this.setNotificationsSession.bind(this));
		this.notificationSessionSet = true;
	};

	UI.prototype.setUser = function UI_setUser(user) {
		// the first time setUser will be called it hopefully contains the current
		// user and not another one
		if (this.user === undefined || user.id === this.user.id) {
			this.user = user;
			template.locals.user = user;
			this.grapeInput.redraw();
		}
	};

	UI.prototype.setSettings = function UI_setSettings(settings) {
		this.settings = settings;
		if (this.settings.show_intro) {
			this.intro.start();
		}

		// javscript timezone should always override server timezone setting?
		if (!this.settings.timezone || this.settings.timezone != this.tz) {
			console.log("new timezone; old:", this.settings.timezone, "new:", this.tz);
			this.emit('timezonechange', this.tz);
		}
	};

	UI.prototype.setOrganizations = function UI_setOrganizations(orgs) {
		var self = this;
		var org = orgs.filter(function(o) {
			if (o.id === self.options.organizationID) return o;
		})[0];
		this.emit('selectorganization', org);
	};

	UI.prototype.setNotificationsSession = function UI_setNotificationsSession() {
		if(notify.permissionLevel() == notify.PERMISSION_GRANTED)
			this.emit('setNotificationsSession', this.org.id);
	}

	UI.prototype.displaySearchResults = function UI_displaySearchResults(results) {
		this.searchView.showResults(results);
	};

	UI.prototype.showSearchResults = function() {
		classes(this.el).add('searching');
	};

	UI.prototype.hideSearchResults = function() {
		classes(this.el).remove('searching');
		this.chatHeader.clearSearch();
	};

	UI.prototype.roomCreated = function UI_roomCreated(room) {
		var self = this;
		self.emit('joinroom', room, function() {
			page('/chat/' + room.slug);
			setTimeout(function() {
				self.emit('toggleinvite', qs('.room-header .room-users-wrap'))
			}, 100);
			self.emit('endroomcreation');
		});
	};

	UI.prototype.gotError = function UI_gotError(err) {
		notification.error(err.message, err.details);
	};

	UI.prototype.handleConnectionClosed = function UI_handleConnectionClosed() {
		if (this._connErrMsg == undefined) this._connErrMsg = this.messages.danger('connection lost');
		classes(qs('body')).add('disconnected');
		this.firstTimeConnect = false;
	};

	UI.prototype.handleReconnection = function UI_handleReconnection() {
		if (this.firstTimeConnect) return;
		if (this._connErrMsg) {
			this._connErrMsg.remove();
			delete this._connErrMsg;
		}
		classes(qs('body')).remove('disconnected');
		var msg = this.messages.success('reconnected')
		setTimeout(function(){ msg.remove(); }, 2000);
	};

	UI.prototype.setRoomContext = function UI_setRoomContext(room) {
		this.room = room;
	}

	UI.prototype.toggleDeleteRoomDialog = function UI_toggleDeleteRoomDialog(room) {
		var deleteRoomDialog = new DeleteRoomDialog({
			room: room
		}).closable().overlay().show();
		broker.pass(deleteRoomDialog, 'deleteroom', this, 'deleteroom');
	};

	UI.prototype.showMarkdownTips = function UI_showMarkdownTips() {
		this.markdownTips.overlay().show();
	};

	UI.prototype.roomDeleted = function UI_roomDeleted(room) {
		if (this.room != room) return;
		page.replace('/chat/');
		var msg = this.messages.success('room deleted', { room : room.name });
		setTimeout(function(){ msg.remove(); }, 2000);
	};

	UI.prototype.leftChannel = function UI_leftChannel(room) {
		if (this.room != room) return;
		page.replace('/chat/');
	}

	UI.prototype.channelUpdate = function UI_channelUpdate(room) {
		if(this.room != room) return;
		page.replace('/chat/' + room.slug);
	}

	UI.prototype.onMessageNotFound = function UI_onMessageNotFound (room) {
		var redirectSlug = room.type == 'pm' ? '@' + room.users[0].username.toLowerCase() : room.slug;
		page.replace('/chat/' + redirectSlug);
		var msg = this.messages.warning('message not found');
		setTimeout(function(){ msg.remove(); }, 6000);
	}

	UI.prototype.onNotificationClicked = function UI_onNotificationClicked (channel) {
		if (this.room === channel) return;
		var slug = channel.type === 'pm' ? '@' + channel.users[0].username.toLowerCase() : channel.slug;
		page('/chat/' + slug);
	}

	UI.prototype.onSwitchToChatMode = function UI_onSwitchToChatMode (room) {
		var redirectSlug = room.type == 'pm' ? '@' + room.users[0].username.toLowerCase() : room.slug;
		page('/chat/' + redirectSlug);
	}


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = template;

	function template(name, locals) {
		locals = extend(extend({}, template.locals), locals || {});
		return __webpack_require__(30)(template.root + '/' + name)(locals);
	}

	template.root = '';
	template.locals = {};

	function extend(a, b) {
		for (var k in b) {
			a[k] = b[k];
		}
		return a;
	}


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./index": 29,
		"./index.js": 29
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 30;


/***/ },
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	exports.fromDOM = __webpack_require__(35);
	exports.toDOM = __webpack_require__(37);
	exports.applyPatch = __webpack_require__(39);
	exports.diff = __webpack_require__(40);



/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var slice = [].slice;
	var parseStyle = __webpack_require__(36);

	module.exports = fromDOM;

	function fromDOM(node) {
		var type = node.nodeType;
		if (type === Node.TEXT_NODE)
			return node.data;
		if (type === Node.COMMENT_NODE)
			return {comment: node.data};
		if (type === Node.DOCUMENT_FRAGMENT_NODE)
			return slice.call(node.childNodes).map(fromDOM);

		var v = {
			tag: node.tagName.toLowerCase(),
			ns: node.namespaceURI,
			class: slice.call(node.classList),
			style: parseStyle(node.style.cssText),
			data: clone(node.dataset),
			attributes: getAttributes(node),
			children: slice.call(node.childNodes).map(fromDOM)
		};
		return v;
	}

	function getAttributes(node) {
		var ret = Object.create(null);
		slice.call(node.attributes).forEach(function (attr) {
			var name = attr.name;
			if (~['style', 'class'].indexOf(name)) return;
			if (name.indexOf('data-') === 0) return;
			ret[name] = node.getAttribute(name);
		});
		return ret;
	}

	function clone(obj) {
		var ret = Object.create(null);
		for (var key in obj) ret[key] = obj[key];
		return ret;
	}



/***/ },
/* 36 */
/***/ function(module, exports) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	module.exports = parseStyle;

	// XXX: I know parsing via regexp is not very robust.
	// problem is that using `getPropertyValue` of `CSSStyleDeclaration` is
	// inconsistent through the browsers
	function parseStyle(style) {
		var ret = Object.create(null);
		if (!style) return ret;
		var re = /\s*([\w\-]+)\s*:\s*([^;]*)\s*;?/g;
		var match;
		while ((match = re.exec(style))) {
			ret[camelize(match[1])] = match[2];
		}
		return ret;
	}

	function camelize(str) {
		return str.replace(/\-(\w)/g, function (whole, char) {
			return char.toUpperCase();
		});
	}


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var clean = __webpack_require__(38);

	module.exports = toDOM;

	function toDOM(vnode) {
		if (typeof vnode === 'string')
			return document.createTextNode(vnode);
		if (typeof vnode.comment !== 'undefined')
			return document.createComment(vnode.comment);

		var node;
		if (Array.isArray(vnode)) {
			node = document.createDocumentFragment();
			clean(vnode).forEach(function (child) {
				node.appendChild(toDOM(child));
			});
			return node;
		}

		node = vnode.ns ?
			document.createElementNS(vnode.ns, vnode.tag) :
			document.createElement(vnode.tag);
		if (vnode.class && vnode.class.length)
			node.className = vnode.class.filter(function (id) { return id; }).join(' ');
		var key;
		if (vnode.data)
			for (key in vnode.data)
				node.dataset[key] = vnode.data[key];
		if (vnode.style)
			for (key in vnode.style)
				node.style[key] = vnode.style[key];
		if (vnode.attributes)
			for (key in vnode.attributes)
				node.setAttribute(key, vnode.attributes[key]);
		if (vnode.children)
			node.appendChild(toDOM(vnode.children));
		return node;
	}


/***/ },
/* 38 */
/***/ function(module, exports) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	module.exports = clean;

	function clean(arr) {
		var ret = [];
		if (!arr)
			return ret;
		for (var i = 0; i < arr.length; i++) {
			var el = arr[i];
			if (el === undefined || el === null)
				continue;
			if (Array.isArray(el))
				ret.push.apply(ret, clean(el));
			else
				ret.push(el);
		}
		return ret;
	}



/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var toDOM = __webpack_require__(37);

	module.exports = applyPatch;

	function applyPatch(node, patch) {
		if (Array.isArray(patch))
			return patch.forEach(applyPatch.bind(null, node));
		// get to the node we want to modify
		for (var i = 0; i < patch.node.length; i++) {
			var child = patch.node[i];
			node = node.childNodes[child];
		}

		var key;

		if (patch.addClasses)
			patch.addClasses.forEach(function (klass) { node.classList.add(klass); });
		if (patch.removeClasses)
			patch.removeClasses.forEach(function (klass) { node.classList.remove(klass); });
		// XXX: because browsers don’t do this automatically:
		if (node.classList && !node.classList.length)
			node.removeAttribute('class');

		if (patch.setStyles) {
			for (key in patch.setStyles)
				node.style[key] = patch.setStyles[key];
		}
		if (patch.removeStyles)
			patch.removeStyles.forEach(function (key) { node.style[key] = null; });
		// XXX: because browsers don’t do this automatically:
		if (node.style && !node.style.length)
			node.removeAttribute('style');

		if (patch.setAttributes) {
			for (key in patch.setAttributes)
				node.setAttribute(key, patch.setAttributes[key]);
		}
		if (patch.removeAttributes)
			patch.removeAttributes.forEach(node.removeAttribute.bind(node));

		if (patch.setData) {
			for (key in patch.setData)
				node.dataset[key] = patch.setData[key];
		}
		if (patch.removeData)
			patch.removeData.forEach(function (key) {
				if (node.dataset.hasOwnProperty(key)) delete node.dataset[key];
			});

		if ('setContent' in patch)
			node.data = patch.setContent;

		if (patch.childPatches)
			patch.childPatches.forEach(applyChildPatch.bind(null, node));
	}

	function applyChildPatch(node, patch) {
		var newNode = patch.child && toDOM(patch.child);
		switch (patch.type) {
		case 'insert':
			return node.insertBefore(newNode, node.childNodes[patch.index]);
		case 'remove':
			return node.removeChild(node.childNodes[patch.index]);
		case 'replace':
			return node.replaceChild(newNode, node.childNodes[patch.index]);
		case 'move':
			throw new Error('not implemented');
			//return;
		}
	}



/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var clean = __webpack_require__(38);
	var seqdiff = __webpack_require__(40);

	module.exports = diff;

	function diff(from, to) {
		// only the root needs to be of same type, otherwise we just modify children
		if (typeDiffers(from, to))
			throw new Error('can only diff nodes of same type');

		var node = [];
		var patches = [];
		diffElem(from, to, node, patches);
		return patches;
	}

	function typeDiffers(from, to) {
		return (typeof from !== typeof to || typeof from === 'object' && (
		        (typeof from.comment !== 'undefined' && typeof to.comment === 'undefined') ||
		        (typeof from.comment === 'undefined' && typeof to.comment !== 'undefined') ||
		        from.tag !== to.tag ||
		        from.ns !== to.ns));
	}

	function diffElem(from, to, node, patches) {
		if (from === to) return;

		var patch = {node: node};

		if (typeof from === 'string') {
			// these must be unequal, otherwise we would have returned already
			patch.setContent = to;
			patches.push(patch);
			return;
		}
		if (typeof to.comment !== 'undefined') {
			if (from.comment !== to.comment) {
				patch.setContent = to.comment;
				patches.push(patch);
			}
			return;
		}

		var diff = diffArray(from.class || [], to.class || []);
		if (diff.add.length)
			patch.addClasses = diff.add;
		if (diff.remove.length)
			patch.removeClasses = diff.remove;

		var empty = Object.create(null);
		[
			['Styles', 'style'],
			['Attributes', 'attributes'],
			['Data', 'data']
		].forEach(function (what) {
			var diff = diffObject(from[what[1]] || empty, to[what[1]] || empty);
			if (Object.keys(diff.set).length)
				patch['set' + what[0]] = diff.set;
			if (diff.remove.length)
				patch['remove' + what[0]] = diff.remove;
		});

		var childPatches = diffChildren(from, to, node, patches);
		if (childPatches.length)
			patch.childPatches = childPatches;

		if (Object.keys(patch).length > 1)
			patches.push(patch);
	}

	function diffObject(from, to) {
		var key, keys, len, i;
		var set = Object.create(null);
		var remove = [];

		keys = Object.keys(from);
		len = keys.length;
		for (i = 0; i < len; i++) {
			key = keys[i];
			if (typeof to[key] === 'undefined')
				remove.push(key);
		}
		keys = Object.keys(to);
		len = keys.length;
		for (i = 0; i < len; i++) {
			key = keys[i];
			if (to[key] !== from[key])
				set[key] = to[key];
		}

		return {set: set, remove: remove};
	}

	function diffArray(from, to) {
		if (!from.length)
			return {add: to, remove: []};
		if (!to.length)
			return {add: [], remove: from};
		var fromSet = Object.create(null);
		var toSet = Object.create(null);
		var el, i;
		for (i = 0; i < from.length; i++) {
			el = from[i];
			if (el)
				fromSet[el] = true;
		}
		for (i = 0; i < to.length; i++) {
			el = to[i];
			if (el)
				toSet[el] = true;
		}

		var diff = diffObject(fromSet, toSet);
		return {add: Object.keys(diff.set), remove: diff.remove};
	}

	function diffChildren(from, to, node, patches) {
		from = clean(from.children);
		to = clean(to.children);

		var diff = seqdiff(from, to, eql);
		var aindex = 0, bindex = 0;
		var skew = 0;
		var ops = [];
		for (var i = 0; i < diff.length; i++) {
			var op = diff[i];
			switch (op) {
			case 'nop':
				diffElem(from[aindex], to[bindex], node.concat([aindex]), patches);
				aindex++; bindex++;
				break;
			case 'ins':
				ops.push({type: 'insert', index: aindex + skew, child: to[bindex]});
				skew++; bindex++;
				break;
			case 'del':
				ops.push({type: 'remove', index: aindex + skew});
				skew--; aindex++;
				break;
			case 'rep':
				ops.push({type: 'replace', index: aindex + skew, child: to[bindex]});
				aindex++;
				bindex++;
				break;
			}
		}
		return ops;
	}

	function eql(a, b) {
		return a === b || keyFunction(a) === keyFunction(b);
	}

	function keyFunction(node) {
		if (typeof node === 'string')
			return '#text';
		if (node.key)
			return node.key;
		if (typeof node.comment !== 'undefined')
			return '#comment';
		return '#' + node.ns + '#' + node.tag;
	}


/***/ },
/* 41 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var broker = __webpack_require__(42);

	module.exports = doBroker;

	function doBroker(ui, app) {
		broker(app, 'change organization', ui, 'setOrganization');
		broker(app, 'change organizations', ui, 'setOrganizations');
		broker(app, 'change user', ui, 'setUser');
		broker(app, 'change settings', ui, 'setSettings');
		broker(app, 'leftChannel', ui, 'leftChannel');
		broker(app, 'gotsearchresults', ui, 'displaySearchResults');
		broker(app, 'roomcreated', ui, 'roomCreated');
		broker(app, 'roomdeleted', ui, 'roomDeleted');
		broker(app, 'error', ui, 'gotError');
		broker(app, 'messageNotFound', ui, 'onMessageNotFound');
		broker(app, 'channelupdate', ui, 'channelUpdate');
		broker(app, 'disconnected', ui, 'handleConnectionClosed');
		broker(app, 'connected', ui, 'handleReconnection');

		broker(ui, 'selectorganization', app, 'setOrganization');
		broker(ui, 'setNotificationsSession', app, 'onSetNotificationsSession');
		broker(ui, 'kickMember', app, 'onKickMember');
		broker(ui, 'joinroom', app, 'joinRoom');
		broker(ui, 'leaveroom', app, 'leaveRoom');
		broker(ui, 'createroom', app, 'createRoom');
		broker(ui, 'deleteroom', app, 'deleteRoom');
		broker(ui, 'openpm', app, 'openPM');
		broker(ui, 'send', app, 'publish');
		broker(ui, 'update', app, 'updateMsg');
		broker(ui, 'hasread', app, 'setRead');
		broker(ui, 'introend', app, 'endedIntro');
		broker(ui, 'timezonechange', app, 'changedTimezone');
		broker(ui, 'needhistory', app, 'getHistory');
		broker(ui, 'requestMessage', app, 'onRequestMessage');
		broker(ui, 'loadHistoryForSearch', app, 'onLoadHistoryForSearch');
		broker(ui, 'autocomplete', app, 'autocomplete');
		broker(ui, 'autocompletedate', app, 'autocompleteDate');
		broker(ui, 'searching', app, 'search');
		broker(ui, 'confirmroomrename', app, 'renameRoom');
		broker(ui, 'deleteMessage', app, 'onDeleteMessage');
		broker(ui, 'invitetoroom', app, 'inviteToRoom');

		broker.pass(app, 'newMessage', ui, 'newMessage');
		broker.pass(app, 'newMsgNotification', ui, 'newMsgNotification');
		broker.pass(app, 'newInviteNotification', ui, 'newInviteNotification');
		broker.pass(app, 'channelRead', ui, 'channelRead');
		broker.pass(app, 'userMention', ui, 'userMention');
		broker.pass(app, 'newPMOpened', ui, 'newPMOpened');
		broker.pass(app, 'change user', ui, 'change user');
		broker.pass(app, 'joinedChannel', ui, 'joinedChannel');
		broker.pass(app, 'leftChannel', ui, 'leftChannel');
		broker.pass(app, 'newRoomMember', ui, 'newRoomMember');
		broker.pass(app, 'memberLeftChannel', ui, 'memberLeftChannel');
		broker.pass(app, 'focusMessage', ui, 'focusMessage');
		broker.pass(app, 'gotHistory', ui, 'gotHistory');
		broker.pass(app, 'nohistory', ui, 'nohistory');
		broker.pass(app, 'roomrenameerror', ui, 'roomrenameerror');
		broker.pass(app, 'roomcreateerror', ui, 'roomcreateerror');
		broker.pass(app, 'channelupdate', ui, 'channelupdate');
		broker.pass(app, 'userDeleted', ui, 'userDeleted');
		broker.pass(app, 'new org member', ui, 'new org member');
		broker.pass(app, 'newRoom', ui, 'newRoom');
		broker.pass(app, 'roomdeleted', ui, 'roomdeleted');

		ui.on('starttyping', function (room) {
			app.setTyping(room, true);
		});
		ui.on('stoptyping', function (room) {
			app.setTyping(room, false);
		});
	}



/***/ },
/* 43 */
/***/ function(module, exports) {

	function one(selector, el) {
	  return el.querySelector(selector);
	}

	exports = module.exports = function(selector, el){
	  el = el || document;
	  return one(selector, el);
	};

	exports.all = function(selector, el){
	  el = el || document;
	  return el.querySelectorAll(selector);
	};

	exports.engine = function(obj){
	  if (!obj.one) throw new Error('.one callback required');
	  if (!obj.all) throw new Error('.all callback required');
	  one = obj.one;
	  exports.all = obj.all;
	  return exports;
	};


/***/ },
/* 44 */
/***/ function(module, exports) {

	
	/**
	 * Expose `parse`.
	 */

	module.exports = parse;

	/**
	 * Tests for browser support.
	 */

	var div = document.createElement('div');
	// Setup
	div.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	var innerHTMLBug = !div.getElementsByTagName('link').length;
	div = undefined;

	/**
	 * Wrap map from jquery.
	 */

	var map = {
	  legend: [1, '<fieldset>', '</fieldset>'],
	  tr: [2, '<table><tbody>', '</tbody></table>'],
	  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  // for script/link/style tags to work in IE6-8, you have to wrap
	  // in a div with a non-whitespace character in front, ha!
	  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
	};

	map.td =
	map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	map.option =
	map.optgroup = [1, '<select multiple="multiple">', '</select>'];

	map.thead =
	map.tbody =
	map.colgroup =
	map.caption =
	map.tfoot = [1, '<table>', '</table>'];

	map.text =
	map.circle =
	map.ellipse =
	map.line =
	map.path =
	map.polygon =
	map.polyline =
	map.rect = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

	/**
	 * Parse `html` and return a DOM Node instance, which could be a TextNode,
	 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
	 * instance, depending on the contents of the `html` string.
	 *
	 * @param {String} html - HTML string to "domify"
	 * @param {Document} doc - The `document` instance to create the Node for
	 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
	 * @api private
	 */

	function parse(html, doc) {
	  if ('string' != typeof html) throw new TypeError('String expected');

	  // default to the global `document` object
	  if (!doc) doc = document;

	  // tag name
	  var m = /<([\w:]+)/.exec(html);
	  if (!m) return doc.createTextNode(html);

	  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

	  var tag = m[1];

	  // body support
	  if (tag == 'body') {
	    var el = doc.createElement('html');
	    el.innerHTML = html;
	    return el.removeChild(el.lastChild);
	  }

	  // wrap map
	  var wrap = map[tag] || map._default;
	  var depth = wrap[0];
	  var prefix = wrap[1];
	  var suffix = wrap[2];
	  var el = doc.createElement('div');
	  el.innerHTML = prefix + html + suffix;
	  while (depth--) el = el.lastChild;

	  // one element
	  if (el.firstChild == el.lastChild) {
	    return el.removeChild(el.firstChild);
	  }

	  // several elements
	  var fragment = doc.createDocumentFragment();
	  while (el.firstChild) {
	    fragment.appendChild(el.removeChild(el.firstChild));
	  }

	  return fragment;
	}


/***/ },
/* 45 */
/***/ function(module, exports) {

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {String} html
	 * @return {String}
	 * @api private
	 */

	module.exports = function(html) {
	  return String(html)
	    .replace(/&/g, '&amp;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#39;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;');
	}


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var dom = __webpack_require__(47);
	var Emitter = __webpack_require__(41);
	var onBody = __webpack_require__(93);

	/**
	 * Expose `notify`.
	 */

	exports = module.exports = notify;

	/**
	 * Notification list.
	 */

	var list = dom('<ul id="notifications">');

	/**
	 * Append to body when it exists.
	 */

	onBody(function (body) {
	  list.appendTo(body);
	});

	/**
	 * Return a new `Notification` with the given
	 * (optional) `title` and `msg`.
	 *
	 * @param {String} title or msg
	 * @param {String} msg
	 * @return {Dialog}
	 * @api public
	 */

	function notify(title, msg){
	  switch (arguments.length) {
	    case 2:
	      return new Notification({ title: title, message: msg })
	        .show()
	        .hide(4000);
	    case 1:
	      return new Notification({ message: title })
	        .show()
	        .hide(4000);
	  }
	}

	/**
	 * Construct a notification function for `type`.
	 *
	 * @param {String} type
	 * @return {Function}
	 * @api private
	 */

	function type(type) {
	  return function(title, msg){
	    return notify.apply(this, arguments)
	      .type(type);
	  };
	}

	/**
	 * Notification methods.
	 */

	exports.info = notify;
	exports.warn = type('warn');
	exports.error = type('error');

	/**
	 * Expose constructor.
	 */

	exports.Notification = Notification;

	/**
	 * Initialize a new `Notification`.
	 *
	 * Options:
	 *
	 *    - `title` dialog title
	 *    - `message` a message to display
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Notification(options) {
	  Emitter.call(this);
	  options = options || {};
	  this.el = dom(__webpack_require__(98));
	  this.render(options);
	  if (options.classname) this.el.addClass(options.classname);
	  if (Notification.effect) this.effect(Notification.effect);
	}

	/**
	 * Inherit from `Emitter.prototype`.
	 */

	Notification.prototype = new Emitter;

	/**
	 * Render with the given `options`.
	 *
	 * @param {Object} options
	 * @api public
	 */

	Notification.prototype.render = function(options){
	  var el = this.el
	    , title = options.title
	    , msg = options.message
	    , self = this;

	  el.find('.close').on('click', function(){
	    self.emit('close');
	    self.hide();
	    return false;
	  });

	  el.on('click', function(e){
	    e.preventDefault();
	    self.emit('click', e);
	  });

	  el.find('.title').text(title);
	  if (!title) el.find('.title').remove();

	  // message
	  if ('string' == typeof msg) {
	    el.find('p').text(msg);
	  } else if (msg) {
	    el.find('p').replace(msg.el || msg);
	  }

	  setTimeout(function(){
	    el.removeClass('hide');
	  }, 0);
	};

	/**
	 * Enable the dialog close link.
	 *
	 * @return {Notification} for chaining
	 * @api public
	 */

	Notification.prototype.closable = function(){
	  this.el.addClass('closable');
	  return this;
	};

	/**
	 * Set the effect to `type`.
	 *
	 * @param {String} type
	 * @return {Notification} for chaining
	 * @api public
	 */

	Notification.prototype.effect = function(type){
	  this._effect = type;
	  this.el.addClass(type);
	  return this;
	};

	/**
	 * Show the notification.
	 *
	 * @return {Notification} for chaining
	 * @api public
	 */

	Notification.prototype.show = function(){
	  this.el.appendTo(list);
	  return this;
	};

	/**
	 * Set the notification `type`.
	 *
	 * @param {String} type
	 * @return {Notification} for chaining
	 * @api public
	 */

	Notification.prototype.type = function(type){
	  this._type = type;
	  this.el.addClass(type);
	  return this;
	};

	/**
	 * Make it stick (clear hide timer), and make it closable.
	 *
	 * @return {Notification} for chaining
	 * @api public
	 */

	Notification.prototype.sticky = function(){
	  return this.hide(0).closable();
	};

	/**
	 * Hide the dialog with optional delay of `ms`,
	 * otherwise the notification is removed immediately.
	 *
	 * @return {Number} ms
	 * @return {Notification} for chaining
	 * @api public
	 */

	Notification.prototype.hide = function(ms){
	  var self = this;

	  // duration
	  if ('number' == typeof ms) {
	    clearTimeout(this.timer);
	    if (!ms) return this;
	    this.timer = setTimeout(function(){
	      self.hide();
	    }, ms);
	    return this;
	  }

	  // hide / remove
	  this.el.addClass('hide');
	  if (this._effect) {
	    setTimeout(function(self){
	      self.remove();
	    }, 500, this);
	  } else {
	    self.remove();
	  }

	  return this;
	};

	/**
	 * Hide the notification without potential animation.
	 *
	 * @return {Dialog} for chaining
	 * @api public
	 */

	Notification.prototype.remove = function(){
	  this.el.remove();
	  return this;
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var domify = __webpack_require__(48);
	var each = __webpack_require__(49);
	var events = __webpack_require__(53);
	var getKeys = __webpack_require__(54);
	var query = __webpack_require__(43);
	var trim = __webpack_require__(56);
	var slice = [].slice;

	var isArray = Array.isArray || function (val) {
	  return !! val && '[object Array]' === Object.prototype.toString.call(val);
	};

	/**
	 * Attributes supported.
	 */

	var attrs = [
	  'id',
	  'src',
	  'rel',
	  'cols',
	  'rows',
	  'type',
	  'name',
	  'href',
	  'title',
	  'style',
	  'width',
	  'height',
	  'action',
	  'method',
	  'tabindex',
	  'placeholder'
	];

	/*
	 * A simple way to check for HTML strings or ID strings
	 */

	var quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/;

	/**
	 * Expose `dom()`.
	 */

	module.exports = dom;

	/**
	 * Return a dom `List` for the given
	 * `html`, selector, or element.
	 *
	 * @param {String|Element|List} selector
	 * @param {String|ELement|context} context
	 * @return {List}
	 * @api public
	 */

	function dom(selector, context) {
	  // array
	  if (isArray(selector)) {
	    return new List(selector);
	  }

	  // List
	  if (selector instanceof List) {
	    return selector;
	  }

	  // node
	  if (selector.nodeName) {
	    return new List([selector]);
	  }

	  if ('string' != typeof selector) {
	    throw new TypeError('invalid selector');
	  }

	  // html
	  var htmlselector = trim.left(selector);
	  if (isHTML(htmlselector)) {
	    return new List([domify(htmlselector)], htmlselector);
	  }

	  // selector
	  var ctx = context
	    ? (context instanceof List ? context[0] : context)
	    : document;

	  return new List(query.all(selector, ctx), selector);
	}

	/**
	 * Static: Expose `List`
	 */

	dom.List = List;

	/**
	 * Static: Expose supported attrs.
	 */

	dom.attrs = attrs;

	/**
	 * Static: Mixin a function
	 *
	 * @param {Object|String} name
	 * @param {Object|Function} obj
	 * @return {List} self
	 */

	dom.use = function(name, fn) {
	  var keys = [];
	  var tmp;

	  if (2 == arguments.length) {
	    keys.push(name);
	    tmp = {};
	    tmp[name] = fn;
	    fn = tmp;
	  } else if (name.name) {
	    // use function name
	    fn = name;
	    name = name.name;
	    keys.push(name);
	    tmp = {};
	    tmp[name] = fn;
	    fn = tmp;
	  } else {
	    keys = getKeys(name);
	    fn = name;
	  }

	  for(var i = 0, len = keys.length; i < len; i++) {
	    List.prototype[keys[i]] = fn[keys[i]];
	  }

	  return this;
	}

	/**
	 * Initialize a new `List` with the
	 * given array-ish of `els` and `selector`
	 * string.
	 *
	 * @param {Mixed} els
	 * @param {String} selector
	 * @api private
	 */

	function List(els, selector) {
	  els = els || [];
	  var len = this.length = els.length;
	  for(var i = 0; i < len; i++) this[i] = els[i];
	  this.selector = selector;
	}

	/**
	 * Remake the list
	 *
	 * @param {String|ELement|context} context
	 * @return {List}
	 * @api private
	 */

	List.prototype.dom = dom;

	/**
	 * Make `List` an array-like object
	 */

	List.prototype.length = 0;
	List.prototype.splice = Array.prototype.splice;

	/**
	 * Array-like object to array
	 *
	 * @return {Array}
	 */

	List.prototype.toArray = function() {
	  return slice.call(this);
	}

	/**
	 * Attribute accessors.
	 */

	each(attrs, function(name){
	  List.prototype[name] = function(val){
	    if (0 == arguments.length) return this.attr(name);
	    return this.attr(name, val);
	  };
	});

	/**
	 * Mixin the API
	 */

	dom.use(__webpack_require__(57));
	dom.use(__webpack_require__(60));
	dom.use(__webpack_require__(63));
	dom.use(__webpack_require__(67));
	dom.use(__webpack_require__(86));

	/**
	 * Check if the string is HTML
	 *
	 * @param {String} str
	 * @return {Boolean}
	 * @api private
	 */

	function isHTML(str) {
	  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML
	  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;

	  // Run the regex
	  var match = quickExpr.exec(str);
	  return !!(match && match[1]);
	}


/***/ },
/* 48 */
/***/ function(module, exports) {

	
	/**
	 * Expose `parse`.
	 */

	module.exports = parse;

	/**
	 * Tests for browser support.
	 */

	var div = document.createElement('div');
	// Setup
	div.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	var innerHTMLBug = !div.getElementsByTagName('link').length;
	div = undefined;

	/**
	 * Wrap map from jquery.
	 */

	var map = {
	  legend: [1, '<fieldset>', '</fieldset>'],
	  tr: [2, '<table><tbody>', '</tbody></table>'],
	  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  // for script/link/style tags to work in IE6-8, you have to wrap
	  // in a div with a non-whitespace character in front, ha!
	  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
	};

	map.td =
	map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	map.option =
	map.optgroup = [1, '<select multiple="multiple">', '</select>'];

	map.thead =
	map.tbody =
	map.colgroup =
	map.caption =
	map.tfoot = [1, '<table>', '</table>'];

	map.polyline =
	map.ellipse =
	map.polygon =
	map.circle =
	map.text =
	map.line =
	map.path =
	map.rect =
	map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

	/**
	 * Parse `html` and return a DOM Node instance, which could be a TextNode,
	 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
	 * instance, depending on the contents of the `html` string.
	 *
	 * @param {String} html - HTML string to "domify"
	 * @param {Document} doc - The `document` instance to create the Node for
	 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
	 * @api private
	 */

	function parse(html, doc) {
	  if ('string' != typeof html) throw new TypeError('String expected');

	  // default to the global `document` object
	  if (!doc) doc = document;

	  // tag name
	  var m = /<([\w:]+)/.exec(html);
	  if (!m) return doc.createTextNode(html);

	  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

	  var tag = m[1];

	  // body support
	  if (tag == 'body') {
	    var el = doc.createElement('html');
	    el.innerHTML = html;
	    return el.removeChild(el.lastChild);
	  }

	  // wrap map
	  var wrap = map[tag] || map._default;
	  var depth = wrap[0];
	  var prefix = wrap[1];
	  var suffix = wrap[2];
	  var el = doc.createElement('div');
	  el.innerHTML = prefix + html + suffix;
	  while (depth--) el = el.lastChild;

	  // one element
	  if (el.firstChild == el.lastChild) {
	    return el.removeChild(el.firstChild);
	  }

	  // several elements
	  var fragment = doc.createDocumentFragment();
	  while (el.firstChild) {
	    fragment.appendChild(el.removeChild(el.firstChild));
	  }

	  return fragment;
	}


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	try {
	  var type = __webpack_require__(50);
	} catch (err) {
	  var type = __webpack_require__(50);
	}

	var toFunction = __webpack_require__(51);

	/**
	 * HOP reference.
	 */

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Iterate the given `obj` and invoke `fn(val, i)`
	 * in optional context `ctx`.
	 *
	 * @param {String|Array|Object} obj
	 * @param {Function} fn
	 * @param {Object} [ctx]
	 * @api public
	 */

	module.exports = function(obj, fn, ctx){
	  fn = toFunction(fn);
	  ctx = ctx || this;
	  switch (type(obj)) {
	    case 'array':
	      return array(obj, fn, ctx);
	    case 'object':
	      if ('number' == typeof obj.length) return array(obj, fn, ctx);
	      return object(obj, fn, ctx);
	    case 'string':
	      return string(obj, fn, ctx);
	  }
	};

	/**
	 * Iterate string chars.
	 *
	 * @param {String} obj
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @api private
	 */

	function string(obj, fn, ctx) {
	  for (var i = 0; i < obj.length; ++i) {
	    fn.call(ctx, obj.charAt(i), i);
	  }
	}

	/**
	 * Iterate object keys.
	 *
	 * @param {Object} obj
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @api private
	 */

	function object(obj, fn, ctx) {
	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      fn.call(ctx, key, obj[key]);
	    }
	  }
	}

	/**
	 * Iterate array-ish.
	 *
	 * @param {Array|Object} obj
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @api private
	 */

	function array(obj, fn, ctx) {
	  for (var i = 0; i < obj.length; ++i) {
	    fn.call(ctx, obj[i], i);
	  }
	}


/***/ },
/* 50 */
/***/ function(module, exports) {

	
	/**
	 * toString ref.
	 */

	var toString = Object.prototype.toString;

	/**
	 * Return the type of `val`.
	 *
	 * @param {Mixed} val
	 * @return {String}
	 * @api public
	 */

	module.exports = function(val){
	  switch (toString.call(val)) {
	    case '[object Function]': return 'function';
	    case '[object Date]': return 'date';
	    case '[object RegExp]': return 'regexp';
	    case '[object Arguments]': return 'arguments';
	    case '[object Array]': return 'array';
	    case '[object String]': return 'string';
	  }

	  if (val === null) return 'null';
	  if (val === undefined) return 'undefined';
	  if (val && val.nodeType === 1) return 'element';
	  if (val === Object(val)) return 'object';

	  return typeof val;
	};


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module Dependencies
	 */

	var expr;
	try {
	  expr = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"props\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	} catch(e) {
	  expr = __webpack_require__(52);
	}

	/**
	 * Expose `toFunction()`.
	 */

	module.exports = toFunction;

	/**
	 * Convert `obj` to a `Function`.
	 *
	 * @param {Mixed} obj
	 * @return {Function}
	 * @api private
	 */

	function toFunction(obj) {
	  switch ({}.toString.call(obj)) {
	    case '[object Object]':
	      return objectToFunction(obj);
	    case '[object Function]':
	      return obj;
	    case '[object String]':
	      return stringToFunction(obj);
	    case '[object RegExp]':
	      return regexpToFunction(obj);
	    default:
	      return defaultToFunction(obj);
	  }
	}

	/**
	 * Default to strict equality.
	 *
	 * @param {Mixed} val
	 * @return {Function}
	 * @api private
	 */

	function defaultToFunction(val) {
	  return function(obj){
	    return val === obj;
	  };
	}

	/**
	 * Convert `re` to a function.
	 *
	 * @param {RegExp} re
	 * @return {Function}
	 * @api private
	 */

	function regexpToFunction(re) {
	  return function(obj){
	    return re.test(obj);
	  };
	}

	/**
	 * Convert property `str` to a function.
	 *
	 * @param {String} str
	 * @return {Function}
	 * @api private
	 */

	function stringToFunction(str) {
	  // immediate such as "> 20"
	  if (/^ *\W+/.test(str)) return new Function('_', 'return _ ' + str);

	  // properties such as "name.first" or "age > 18" or "age > 18 && age < 36"
	  return new Function('_', 'return ' + get(str));
	}

	/**
	 * Convert `object` to a function.
	 *
	 * @param {Object} object
	 * @return {Function}
	 * @api private
	 */

	function objectToFunction(obj) {
	  var match = {};
	  for (var key in obj) {
	    match[key] = typeof obj[key] === 'string'
	      ? defaultToFunction(obj[key])
	      : toFunction(obj[key]);
	  }
	  return function(val){
	    if (typeof val !== 'object') return false;
	    for (var key in match) {
	      if (!(key in val)) return false;
	      if (!match[key](val[key])) return false;
	    }
	    return true;
	  };
	}

	/**
	 * Built the getter function. Supports getter style functions
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function get(str) {
	  var props = expr(str);
	  if (!props.length) return '_.' + str;

	  var val, i, prop;
	  for (i = 0; i < props.length; i++) {
	    prop = props[i];
	    val = '_.' + prop;
	    val = "('function' == typeof " + val + " ? " + val + "() : " + val + ")";

	    // mimic negative lookbehind to avoid problems with nested properties
	    str = stripNested(prop, str, val);
	  }

	  return str;
	}

	/**
	 * Mimic negative lookbehind to avoid problems with nested properties.
	 *
	 * See: http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript
	 *
	 * @param {String} prop
	 * @param {String} str
	 * @param {String} val
	 * @return {String}
	 * @api private
	 */

	function stripNested (prop, str, val) {
	  return str.replace(new RegExp('(\\.)?' + prop, 'g'), function($0, $1) {
	    return $1 ? $0 : val;
	  });
	}


/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Global Names
	 */

	var globals = /\b(Array|Date|Object|Math|JSON)\b/g;

	/**
	 * Return immediate identifiers parsed from `str`.
	 *
	 * @param {String} str
	 * @param {String|Function} map function or prefix
	 * @return {Array}
	 * @api public
	 */

	module.exports = function(str, fn){
	  var p = unique(props(str));
	  if (fn && 'string' == typeof fn) fn = prefixed(fn);
	  if (fn) return map(str, p, fn);
	  return p;
	};

	/**
	 * Return immediate identifiers in `str`.
	 *
	 * @param {String} str
	 * @return {Array}
	 * @api private
	 */

	function props(str) {
	  return str
	    .replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\//g, '')
	    .replace(globals, '')
	    .match(/[a-zA-Z_]\w*/g)
	    || [];
	}

	/**
	 * Return `str` with `props` mapped with `fn`.
	 *
	 * @param {String} str
	 * @param {Array} props
	 * @param {Function} fn
	 * @return {String}
	 * @api private
	 */

	function map(str, props, fn) {
	  var re = /\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\/|[a-zA-Z_]\w*/g;
	  return str.replace(re, function(_){
	    if ('(' == _[_.length - 1]) return fn(_);
	    if (!~props.indexOf(_)) return _;
	    return fn(_);
	  });
	}

	/**
	 * Return unique array.
	 *
	 * @param {Array} arr
	 * @return {Array}
	 * @api private
	 */

	function unique(arr) {
	  var ret = [];

	  for (var i = 0; i < arr.length; i++) {
	    if (~ret.indexOf(arr[i])) continue;
	    ret.push(arr[i]);
	  }

	  return ret;
	}

	/**
	 * Map with prefix `str`.
	 */

	function prefixed(str) {
	  return function(_){
	    return str + _;
	  };
	}


/***/ },
/* 53 */
/***/ function(module, exports) {

	var bind = window.addEventListener ? 'addEventListener' : 'attachEvent',
	    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
	    prefix = bind !== 'addEventListener' ? 'on' : '';

	/**
	 * Bind `el` event `type` to `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	exports.bind = function(el, type, fn, capture){
	  el[bind](prefix + type, fn, capture || false);
	  return fn;
	};

	/**
	 * Unbind `el` event `type`'s callback `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	exports.unbind = function(el, type, fn, capture){
	  el[unbind](prefix + type, fn, capture || false);
	  return fn;
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(55);
	var hasDontEnumBug = !({ 'toString': null }).propertyIsEnumerable('toString');
	var hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];

	var keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var ctor = object.constructor;
			var skipConstructor = ctor && ctor.prototype === object;

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};

	keysShim.shim = function shimObjectKeys() {
		if (!Object.keys) {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};

	module.exports = keysShim;


/***/ },
/* 55 */
/***/ function(module, exports) {

	'use strict';

	var toStr = Object.prototype.toString;

	module.exports = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]'
				&& value !== null
				&& typeof value === 'object'
				&& typeof value.length === 'number'
				&& value.length >= 0
				&& toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};


/***/ },
/* 56 */
/***/ function(module, exports) {

	
	exports = module.exports = trim;

	function trim(str){
	  return str.replace(/^\s*|\s*$/g, '');
	}

	exports.left = function(str){
	  return str.replace(/^\s*/, '');
	};

	exports.right = function(str){
	  return str.replace(/\s*$/, '');
	};


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var value = __webpack_require__(58);

	/**
	 * Set attribute `name` to `val`, or get attr `name`.
	 *
	 * @param {String} name
	 * @param {String} [val]
	 * @return {String|List} self
	 * @api public
	 */

	exports.attr = function(name, val){
	  // get
	  if (1 == arguments.length) {
	    return this[0] && this[0].getAttribute(name);
	  }

	  // remove
	  if (null == val) {
	    return this.removeAttr(name);
	  }

	  // set
	  return this.forEach(function(el){
	    el.setAttribute(name, val);
	  });
	};

	/**
	 * Remove attribute `name`.
	 *
	 * @param {String} name
	 * @return {List} self
	 * @api public
	 */

	exports.removeAttr = function(name){
	  return this.forEach(function(el){
	    el.removeAttribute(name);
	  });
	};

	/**
	 * Set property `name` to `val`, or get property `name`.
	 *
	 * @param {String} name
	 * @param {String} [val]
	 * @return {Object|List} self
	 * @api public
	 */

	exports.prop = function(name, val){
	  if (1 == arguments.length) {
	    return this[0] && this[0][name];
	  }

	  return this.forEach(function(el){
	    el[name] = val;
	  });
	};

	/**
	 * Get the first element's value or set selected
	 * element values to `val`.
	 *
	 * @param {Mixed} [val]
	 * @return {Mixed}
	 * @api public
	 */

	exports.val =
	exports.value = function(val){
	  if (0 == arguments.length) {
	    return this[0]
	      ? value(this[0])
	      : undefined;
	  }

	  return this.forEach(function(el){
	    value(el, val);
	  });
	};


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var typeOf = __webpack_require__(59);

	/**
	 * Set or get `el`'s' value.
	 *
	 * @param {Element} el
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api public
	 */

	module.exports = function(el, val){
	  if (2 == arguments.length) return set(el, val);
	  return get(el);
	};

	/**
	 * Get `el`'s value.
	 */

	function get(el) {
	  switch (type(el)) {
	    case 'checkbox':
	    case 'radio':
	      if (el.checked) {
	        var attr = el.getAttribute('value');
	        return null == attr ? true : attr;
	      } else {
	        return false;
	      }
	    case 'radiogroup':
	      for (var i = 0, radio; radio = el[i]; i++) {
	        if (radio.checked) return radio.value;
	      }
	      break;
	    case 'select':
	      for (var i = 0, option; option = el.options[i]; i++) {
	        if (option.selected) return option.value;
	      }
	      break;
	    default:
	      return el.value;
	  }
	}

	/**
	 * Set `el`'s value.
	 */

	function set(el, val) {
	  switch (type(el)) {
	    case 'checkbox':
	    case 'radio':
	      if (val) {
	        el.checked = true;
	      } else {
	        el.checked = false;
	      }
	      break;
	    case 'radiogroup':
	      for (var i = 0, radio; radio = el[i]; i++) {
	        radio.checked = radio.value === val;
	      }
	      break;
	    case 'select':
	      for (var i = 0, option; option = el.options[i]; i++) {
	        option.selected = option.value === val;
	      }
	      break;
	    default:
	      el.value = val;
	  }
	}

	/**
	 * Element type.
	 */

	function type(el) {
	  var group = 'array' == typeOf(el) || 'object' == typeOf(el);
	  if (group) el = el[0];
	  var name = el.nodeName.toLowerCase();
	  var type = el.getAttribute('type');

	  if (group && type && 'radio' == type.toLowerCase()) return 'radiogroup';
	  if ('input' == name && type && 'checkbox' == type.toLowerCase()) return 'checkbox';
	  if ('input' == name && type && 'radio' == type.toLowerCase()) return 'radio';
	  if ('select' == name) return 'select';
	  return name;
	}


/***/ },
/* 59 */
/***/ function(module, exports) {

	/**
	 * toString ref.
	 */

	var toString = Object.prototype.toString;

	/**
	 * Return the type of `val`.
	 *
	 * @param {Mixed} val
	 * @return {String}
	 * @api public
	 */

	module.exports = function(val){
	  switch (toString.call(val)) {
	    case '[object Date]': return 'date';
	    case '[object RegExp]': return 'regexp';
	    case '[object Arguments]': return 'arguments';
	    case '[object Array]': return 'array';
	    case '[object Error]': return 'error';
	  }

	  if (val === null) return 'null';
	  if (val === undefined) return 'undefined';
	  if (val !== val) return 'nan';
	  if (val && val.nodeType === 1) return 'element';

	  val = val.valueOf
	    ? val.valueOf()
	    : Object.prototype.valueOf.apply(val)

	  return typeof val;
	};


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var classes = __webpack_require__(61);

	/**
	 * Add the given class `name`.
	 *
	 * @param {String} name
	 * @return {List} self
	 * @api public
	 */

	exports.addClass = function(name){
	  return this.forEach(function(el) {
	    el._classes = el._classes || classes(el);
	    el._classes.add(name);
	  });
	};

	/**
	 * Remove the given class `name`.
	 *
	 * @param {String|RegExp} name
	 * @return {List} self
	 * @api public
	 */

	exports.removeClass = function(name){
	  return this.forEach(function(el) {
	    el._classes = el._classes || classes(el);
	    el._classes.remove(name);
	  });
	};

	/**
	 * Toggle the given class `name`,
	 * optionally a `bool` may be given
	 * to indicate that the class should
	 * be added when truthy.
	 *
	 * @param {String} name
	 * @param {Boolean} bool
	 * @return {List} self
	 * @api public
	 */

	exports.toggleClass = function(name, bool){
	  var fn = 'toggle';

	  // toggle with boolean
	  if (2 == arguments.length) {
	    fn = bool ? 'add' : 'remove';
	  }

	  return this.forEach(function(el) {
	    el._classes = el._classes || classes(el);
	    el._classes[fn](name);
	  })
	};

	/**
	 * Check if the given class `name` is present.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	exports.hasClass = function(name){
	  var el;

	  for(var i = 0, len = this.length; i < len; i++) {
	    el = this[i];
	    el._classes = el._classes || classes(el);
	    if (el._classes.has(name)) return true;
	  }

	  return false;
	};


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var index = __webpack_require__(62);

	/**
	 * Whitespace regexp.
	 */

	var re = /\s+/;

	/**
	 * toString reference.
	 */

	var toString = Object.prototype.toString;

	/**
	 * Wrap `el` in a `ClassList`.
	 *
	 * @param {Element} el
	 * @return {ClassList}
	 * @api public
	 */

	module.exports = function(el){
	  return new ClassList(el);
	};

	/**
	 * Initialize a new ClassList for `el`.
	 *
	 * @param {Element} el
	 * @api private
	 */

	function ClassList(el) {
	  if (!el || !el.nodeType) {
	    throw new Error('A DOM element reference is required');
	  }
	  this.el = el;
	  this.list = el.classList;
	}

	/**
	 * Add class `name` if not already present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.add = function(name){
	  // classList
	  if (this.list) {
	    this.list.add(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (!~i) arr.push(name);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove class `name` when present, or
	 * pass a regular expression to remove
	 * any which match.
	 *
	 * @param {String|RegExp} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.remove = function(name){
	  if ('[object RegExp]' == toString.call(name)) {
	    return this.removeMatching(name);
	  }

	  // classList
	  if (this.list) {
	    this.list.remove(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (~i) arr.splice(i, 1);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove all classes matching `re`.
	 *
	 * @param {RegExp} re
	 * @return {ClassList}
	 * @api private
	 */

	ClassList.prototype.removeMatching = function(re){
	  var arr = this.array();
	  for (var i = 0; i < arr.length; i++) {
	    if (re.test(arr[i])) {
	      this.remove(arr[i]);
	    }
	  }
	  return this;
	};

	/**
	 * Toggle class `name`, can force state via `force`.
	 *
	 * For browsers that support classList, but do not support `force` yet,
	 * the mistake will be detected and corrected.
	 *
	 * @param {String} name
	 * @param {Boolean} force
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.toggle = function(name, force){
	  // classList
	  if (this.list) {
	    if ("undefined" !== typeof force) {
	      if (force !== this.list.toggle(name, force)) {
	        this.list.toggle(name); // toggle again to correct
	      }
	    } else {
	      this.list.toggle(name);
	    }
	    return this;
	  }

	  // fallback
	  if ("undefined" !== typeof force) {
	    if (!force) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  } else {
	    if (this.has(name)) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  }

	  return this;
	};

	/**
	 * Return an array of classes.
	 *
	 * @return {Array}
	 * @api public
	 */

	ClassList.prototype.array = function(){
	  var str = this.el.className.replace(/^\s+|\s+$/g, '');
	  var arr = str.split(re);
	  if ('' === arr[0]) arr.shift();
	  return arr;
	};

	/**
	 * Check if class `name` is present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.has =
	ClassList.prototype.contains = function(name){
	  return this.list
	    ? this.list.contains(name)
	    : !! ~index(this.array(), name);
	};


/***/ },
/* 62 */
/***/ function(module, exports) {

	module.exports = function(arr, obj){
	  if (arr.indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var events = __webpack_require__(53);
	var delegate = __webpack_require__(64);

	/**
	 * Bind to `event` and invoke `fn(e)`. When
	 * a `selector` is given then events are delegated.
	 *
	 * @param {String} event
	 * @param {String} [selector]
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {List}
	 * @api public
	 */

	exports.on = function(event, selector, fn, capture){
	  if ('string' == typeof selector) {
	    return this.forEach(function (el) {
	      fn._delegate = delegate.bind(el, selector, event, fn, capture);
	    });
	  }

	  capture = fn;
	  fn = selector;

	  return this.forEach(function (el) {
	    events.bind(el, event, fn, capture);
	  });
	};

	/**
	 * Unbind to `event` and invoke `fn(e)`. When
	 * a `selector` is given then delegated event
	 * handlers are unbound.
	 *
	 * @param {String} event
	 * @param {String} [selector]
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {List}
	 * @api public
	 */

	exports.off = function(event, selector, fn, capture){
	  if ('string' == typeof selector) {
	    return this.forEach(function (el) {
	      // TODO: add selector support back
	      delegate.unbind(el, event, fn._delegate, capture);
	    });
	  }

	  capture = fn;
	  fn = selector;

	  return this.forEach(function (el) {
	    events.unbind(el, event, fn, capture);
	  });
	};


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var closest = __webpack_require__(65)
	  , event = __webpack_require__(53);

	/**
	 * Delegate event `type` to `selector`
	 * and invoke `fn(e)`. A callback function
	 * is returned which may be passed to `.unbind()`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	exports.bind = function(el, selector, type, fn, capture){
	  return event.bind(el, type, function(e){
	    var target = e.target || e.srcElement;
	    e.delegateTarget = closest(target, selector, true, el);
	    if (e.delegateTarget) fn.call(el, e);
	  }, capture);
	};

	/**
	 * Unbind event `type`'s callback `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @api public
	 */

	exports.unbind = function(el, type, fn, capture){
	  event.unbind(el, type, fn, capture);
	};


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var matches = __webpack_require__(66)

	module.exports = function (element, selector, checkYoSelf, root) {
	  element = checkYoSelf ? {parentNode: element} : element

	  root = root || document

	  // Make sure `element !== document` and `element != null`
	  // otherwise we get an illegal invocation
	  while ((element = element.parentNode) && element !== document) {
	    if (matches(element, selector))
	      return element
	    // After `matches` on the edge case that
	    // the selector matches the root
	    // (when the root is not the document)
	    if (element === root)
	      return
	  }
	}


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var query = __webpack_require__(43);

	/**
	 * Element prototype.
	 */

	var proto = Element.prototype;

	/**
	 * Vendor function.
	 */

	var vendor = proto.matches
	  || proto.webkitMatchesSelector
	  || proto.mozMatchesSelector
	  || proto.msMatchesSelector
	  || proto.oMatchesSelector;

	/**
	 * Expose `match()`.
	 */

	module.exports = match;

	/**
	 * Match `el` to `selector`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @return {Boolean}
	 * @api public
	 */

	function match(el, selector) {
	  if (!el || el.nodeType !== 1) return false;
	  if (vendor) return vendor.call(el, selector);
	  var nodes = query.all(selector, el.parentNode);
	  for (var i = 0; i < nodes.length; ++i) {
	    if (nodes[i] == el) return true;
	  }
	  return false;
	}


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var value = __webpack_require__(58);
	var css = __webpack_require__(68);
	var text = __webpack_require__(85);

	/**
	 * Return element text.
	 *
	 * @param {String} str
	 * @return {String|List}
	 * @api public
	 */

	exports.text = function(str) {
	  if (1 == arguments.length) {
	    return this.forEach(function(el) {
	      if (11 == el.nodeType) {
	        var node;
	        while (node = el.firstChild) el.removeChild(node);
	        el.appendChild(document.createTextNode(str));
	      } else {
	        text(el, str);
	      }
	    });
	  }

	  var out = '';
	  this.forEach(function(el) {
	    if (11 == el.nodeType) {
	      out += getText(el.firstChild);
	    } else {
	      out += text(el);
	    }
	  });

	  return out;
	};

	/**
	 * Get text helper from Sizzle.
	 *
	 * Source: https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L914-L947
	 *
	 * @param {Element|Array} el
	 * @return {String}
	 */

	function getText(el) {
	  var ret = '';
	  var type = el.nodeType;
	  var node;

	  switch(type) {
	    case 1:
	    case 9:
	      ret = text(el);
	      break;
	    case 11:
	      ret = el.textContent || el.innerText;
	      break;
	    case 3:
	    case 4:
	      return el.nodeValue;
	    default:
	      while (node = el[i++]) {
	        ret += getText(node);
	      }
	  }

	  return ret;
	}

	/**
	 * Return element html.
	 *
	 * @return {String} html
	 * @api public
	 */

	exports.html = function(html) {
	  if (1 == arguments.length) {
	    return this.forEach(function(el) {
	      el.innerHTML = html;
	    });
	  }

	  // TODO: real impl
	  return this[0] && this[0].innerHTML;
	};

	/**
	 * Get and set the css value
	 *
	 * @param {String|Object} prop
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api public
	 */

	exports.css = function(prop, val) {
	  // getter
	  if (!val && 'object' != typeof prop) {
	    return css(this[0], prop);
	  }
	  // setter
	  this.forEach(function(el) {
	    css(el, prop, val);
	  });

	  return this;
	};

	/**
	 * Prepend `val`.
	 *
	 * From jQuery: if there is more than one target element
	 * cloned copies of the inserted element will be created
	 * for each target after the first.
	 *
	 * @param {String|Element|List} val
	 * @return {List} self
	 * @api public
	 */

	exports.prepend = function(val) {
	  var dom = this.dom;

	  this.forEach(function(target, i) {
	    dom(val).forEach(function(selector) {
	      selector = i ? selector.cloneNode(true) : selector;
	      if (target.children.length) {
	        target.insertBefore(selector, target.firstChild);
	      } else {
	        target.appendChild(selector);
	      }
	    });
	  });

	  return this;
	};

	/**
	 * Append `val`.
	 *
	 * From jQuery: if there is more than one target element
	 * cloned copies of the inserted element will be created
	 * for each target after the first.
	 *
	 * @param {String|Element|List} val
	 * @return {List} self
	 * @api public
	 */

	exports.append = function(val) {
	  var dom = this.dom;

	  this.forEach(function(target, i) {
	    dom(val).forEach(function(el) {
	      el = i ? el.cloneNode(true) : el;
	      target.appendChild(el);
	    });
	  });

	  return this;
	};

	/**
	 * Insert self's `els` after `val`
	 *
	 * From jQuery: if there is more than one target element,
	 * cloned copies of the inserted element will be created
	 * for each target after the first, and that new set
	 * (the original element plus clones) is returned.
	 *
	 * @param {String|Element|List} val
	 * @return {List} self
	 * @api public
	 */

	exports.insertAfter = function(val) {
	  var dom = this.dom;

	  this.forEach(function(el) {
	    dom(val).forEach(function(target, i) {
	      if (!target.parentNode) return;
	      el = i ? el.cloneNode(true) : el;
	      target.parentNode.insertBefore(el, target.nextSibling);
	    });
	  });

	  return this;
	};

	/**
	 * Append self's `el` to `val`
	 *
	 * @param {String|Element|List} val
	 * @return {List} self
	 * @api public
	 */

	exports.appendTo = function(val) {
	  this.dom(val).append(this);
	  return this;
	};

	/**
	 * Replace elements in the DOM.
	 *
	 * @param {String|Element|List} val
	 * @return {List} self
	 * @api public
	 */

	exports.replace = function(val) {
	  var self = this;
	  var list = this.dom(val);

	  list.forEach(function(el, i) {
	    var old = self[i];
	    var parent = old.parentNode;
	    if (!parent) return;
	    el = i ? el.cloneNode(true) : el;
	    parent.replaceChild(el, old);
	  });

	  return this;
	};

	/**
	 * Empty the dom list
	 *
	 * @return self
	 * @api public
	 */

	exports.empty = function() {
	  return this.forEach(function(el) {
	    text(el, "");
	  });
	};

	/**
	 * Remove all elements in the dom list
	 *
	 * @return {List} self
	 * @api public
	 */

	exports.remove = function() {
	  return this.forEach(function(el) {
	    var parent = el.parentNode;
	    if (parent) parent.removeChild(el);
	  });
	};

	/**
	 * Return a cloned dom list with all elements cloned.
	 *
	 * @return {List}
	 * @api public
	 */

	exports.clone = function() {
	  var out = this.map(function(el) {
	    return el.cloneNode(true);
	  });

	  return this.dom(out);
	};

	/**
	 * Focus the first dom element in our list.
	 * 
	 * @return {List} self
	 * @api public
	 */

	exports.focus = function(){
	  this[0].focus();
	  return this;
	};


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var debug = __webpack_require__(69)('css');
	var set = __webpack_require__(72);
	var get = __webpack_require__(80);

	/**
	 * Expose `css`
	 */

	module.exports = css;

	/**
	 * Get and set css values
	 *
	 * @param {Element} el
	 * @param {String|Object} prop
	 * @param {Mixed} val
	 * @return {Element} el
	 * @api public
	 */

	function css(el, prop, val) {
	  if (!el) return;

	  if (undefined !== val) {
	    var obj = {};
	    obj[prop] = val;
	    debug('setting styles %j', obj);
	    return setStyles(el, obj);
	  }

	  if ('object' == typeof prop) {
	    debug('setting styles %j', prop);
	    return setStyles(el, prop);
	  }

	  debug('getting %s', prop);
	  return get(el, prop);
	}

	/**
	 * Set the styles on an element
	 *
	 * @param {Element} el
	 * @param {Object} props
	 * @return {Element} el
	 */

	function setStyles(el, props) {
	  for (var prop in props) {
	    set(el, prop, props[prop]);
	  }

	  return el;
	}


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(70);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(71);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var debug = __webpack_require__(69)('css:style');
	var camelcase = __webpack_require__(73);
	var support = __webpack_require__(76);
	var property = __webpack_require__(77);
	var hooks = __webpack_require__(79);

	/**
	 * Expose `style`
	 */

	module.exports = style;

	/**
	 * Possibly-unitless properties
	 *
	 * Don't automatically add 'px' to these properties
	 */

	var cssNumber = {
	  "columnCount": true,
	  "fillOpacity": true,
	  "fontWeight": true,
	  "lineHeight": true,
	  "opacity": true,
	  "order": true,
	  "orphans": true,
	  "widows": true,
	  "zIndex": true,
	  "zoom": true
	};

	/**
	 * Set a css value
	 *
	 * @param {Element} el
	 * @param {String} prop
	 * @param {Mixed} val
	 * @param {Mixed} extra
	 */

	function style(el, prop, val, extra) {
	  // Don't set styles on text and comment nodes
	  if (!el || el.nodeType === 3 || el.nodeType === 8 || !el.style ) return;

	  var orig = camelcase(prop);
	  var style = el.style;
	  var type = typeof val;

	  if (!val) return get(el, prop, orig, extra);

	  prop = property(prop, style);

	  var hook = hooks[prop] || hooks[orig];

	  // If a number was passed in, add 'px' to the (except for certain CSS properties)
	  if ('number' == type && !cssNumber[orig]) {
	    debug('adding "px" to end of number');
	    val += 'px';
	  }

	  // Fixes jQuery #8908, it can be done more correctly by specifying setters in cssHooks,
	  // but it would mean to define eight (for every problematic property) identical functions
	  if (!support.clearCloneStyle && '' === val && 0 === prop.indexOf('background')) {
	    debug('set property (%s) value to "inherit"', prop);
	    style[prop] = 'inherit';
	  }

	  // If a hook was provided, use that value, otherwise just set the specified value
	  if (!hook || !hook.set || undefined !== (val = hook.set(el, val, extra))) {
	    // Support: Chrome, Safari
	    // Setting style to blank string required to delete "style: x !important;"
	    debug('set hook defined. setting property (%s) to %s', prop, val);
	    style[prop] = '';
	    style[prop] = val;
	  }

	}

	/**
	 * Get the style
	 *
	 * @param {Element} el
	 * @param {String} prop
	 * @param {String} orig
	 * @param {Mixed} extra
	 * @return {String}
	 */

	function get(el, prop, orig, extra) {
	  var style = el.style;
	  var hook = hooks[prop] || hooks[orig];
	  var ret;

	  if (hook && hook.get && undefined !== (ret = hook.get(el, false, extra))) {
	    debug('get hook defined, returning: %s', ret);
	    return ret;
	  }

	  ret = style[prop];
	  debug('getting %s', ret);
	  return ret;
	}


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	
	var toSpace = __webpack_require__(74);


	/**
	 * Expose `toCamelCase`.
	 */

	module.exports = toCamelCase;


	/**
	 * Convert a `string` to camel case.
	 *
	 * @param {String} string
	 * @return {String}
	 */


	function toCamelCase (string) {
	  return toSpace(string).replace(/\s(\w)/g, function (matches, letter) {
	    return letter.toUpperCase();
	  });
	}

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	
	var clean = __webpack_require__(75);


	/**
	 * Expose `toSpaceCase`.
	 */

	module.exports = toSpaceCase;


	/**
	 * Convert a `string` to space case.
	 *
	 * @param {String} string
	 * @return {String}
	 */


	function toSpaceCase (string) {
	  return clean(string).replace(/[\W_]+(.|$)/g, function (matches, match) {
	    return match ? ' ' + match : '';
	  });
	}

/***/ },
/* 75 */
/***/ function(module, exports) {

	
	/**
	 * Expose `toNoCase`.
	 */

	module.exports = toNoCase;


	/**
	 * Test whether a string is camel-case.
	 */

	var hasSpace = /\s/;
	var hasCamel = /[a-z][A-Z]/;
	var hasSeparator = /[\W_]/;


	/**
	 * Remove any starting case from a `string`, like camel or snake, but keep
	 * spaces and punctuation that may be important otherwise.
	 *
	 * @param {String} string
	 * @return {String}
	 */

	function toNoCase (string) {
	  if (hasSpace.test(string)) return string.toLowerCase();

	  if (hasSeparator.test(string)) string = unseparate(string);
	  if (hasCamel.test(string)) string = uncamelize(string);
	  return string.toLowerCase();
	}


	/**
	 * Separator splitter.
	 */

	var separatorSplitter = /[\W_]+(.|$)/g;


	/**
	 * Un-separate a `string`.
	 *
	 * @param {String} string
	 * @return {String}
	 */

	function unseparate (string) {
	  return string.replace(separatorSplitter, function (m, next) {
	    return next ? ' ' + next : '';
	  });
	}


	/**
	 * Camelcase splitter.
	 */

	var camelSplitter = /(.)([A-Z]+)/g;


	/**
	 * Un-camelcase a `string`.
	 *
	 * @param {String} string
	 * @return {String}
	 */

	function uncamelize (string) {
	  return string.replace(camelSplitter, function (m, previous, uppers) {
	    return previous + ' ' + uppers.toLowerCase().split('').join(' ');
	  });
	}

/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * Support values
	 */

	var reliableMarginRight;
	var boxSizingReliableVal;
	var pixelPositionVal;
	var clearCloneStyle;

	/**
	 * Container setup
	 */

	var docElem = document.documentElement;
	var container = document.createElement('div');
	var div = document.createElement('div');

	/**
	 * Clear clone style
	 */

	div.style.backgroundClip = 'content-box';
	div.cloneNode(true).style.backgroundClip = '';
	exports.clearCloneStyle = div.style.backgroundClip === 'content-box';

	container.style.cssText = 'border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px';
	container.appendChild(div);

	/**
	 * Pixel position
	 *
	 * Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	 * getComputedStyle returns percent when specified for top/left/bottom/right
	 * rather than make the css module depend on the offset module, we just check for it here
	 */

	exports.pixelPosition = function() {
	  if (undefined == pixelPositionVal) computePixelPositionAndBoxSizingReliable();
	  return pixelPositionVal;
	}

	/**
	 * Reliable box sizing
	 */

	exports.boxSizingReliable = function() {
	  if (undefined == boxSizingReliableVal) computePixelPositionAndBoxSizingReliable();
	  return boxSizingReliableVal;
	}

	/**
	 * Reliable margin right
	 *
	 * Support: Android 2.3
	 * Check if div with explicit width and no margin-right incorrectly
	 * gets computed margin-right based on width of container. (#3333)
	 * WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
	 * This support function is only executed once so no memoizing is needed.
	 *
	 * @return {Boolean}
	 */

	exports.reliableMarginRight = function() {
	  var ret;
	  var marginDiv = div.appendChild(document.createElement("div" ));

	  marginDiv.style.cssText = div.style.cssText = divReset;
	  marginDiv.style.marginRight = marginDiv.style.width = "0";
	  div.style.width = "1px";
	  docElem.appendChild(container);

	  ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);

	  docElem.removeChild(container);

	  // Clean up the div for other support tests.
	  div.innerHTML = "";

	  return ret;
	}

	/**
	 * Executing both pixelPosition & boxSizingReliable tests require only one layout
	 * so they're executed at the same time to save the second computation.
	 */

	function computePixelPositionAndBoxSizingReliable() {
	  // Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
	  div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
	    "box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;" +
	    "position:absolute;top:1%";
	  docElem.appendChild(container);

	  var divStyle = window.getComputedStyle(div, null);
	  pixelPositionVal = divStyle.top !== "1%";
	  boxSizingReliableVal = divStyle.width === "4px";

	  docElem.removeChild(container);
	}




/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies
	 */

	var debug = __webpack_require__(69)('css:prop');
	var camelcase = __webpack_require__(73);
	var vendor = __webpack_require__(78);

	/**
	 * Export `prop`
	 */

	module.exports = prop;

	/**
	 * Normalize Properties
	 */

	var cssProps = {
	  'float': 'cssFloat' in document.documentElement.style ? 'cssFloat' : 'styleFloat'
	};

	/**
	 * Get the vendor prefixed property
	 *
	 * @param {String} prop
	 * @param {String} style
	 * @return {String} prop
	 * @api private
	 */

	function prop(prop, style) {
	  prop = cssProps[prop] || (cssProps[prop] = vendor(prop, style));
	  debug('transform property: %s => %s', prop, style);
	  return prop;
	}


/***/ },
/* 78 */
/***/ function(module, exports) {

	/**
	 * Module Dependencies
	 */

	var prefixes = ['Webkit', 'O', 'Moz', 'ms'];

	/**
	 * Expose `vendor`
	 */

	module.exports = vendor;

	/**
	 * Get the vendor prefix for a given property
	 *
	 * @param {String} prop
	 * @param {Object} style
	 * @return {String}
	 */

	function vendor(prop, style) {
	  // shortcut for names that are not vendor prefixed
	  if (style[prop]) return prop;

	  // check for vendor prefixed names
	  var capName = prop[0].toUpperCase() + prop.slice(1);
	  var original = prop;
	  var i = prefixes.length;

	  while (i--) {
	    prop = prefixes[i] + capName;
	    if (prop in style) return prop;
	  }

	  return original;
	}


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var each = __webpack_require__(49);
	var css = __webpack_require__(80);
	var cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' };
	var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;
	var rnumnonpx = new RegExp( '^(' + pnum + ')(?!px)[a-z%]+$', 'i');
	var rnumsplit = new RegExp( '^(' + pnum + ')(.*)$', 'i');
	var rdisplayswap = /^(none|table(?!-c[ea]).+)/;
	var styles = __webpack_require__(83);
	var support = __webpack_require__(76);
	var swap = __webpack_require__(84);
	var computed = __webpack_require__(81);
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	/**
	 * Height & Width
	 */

	each(['width', 'height'], function(name) {
	  exports[name] = {};

	  exports[name].get = function(el, compute, extra) {
	    if (!compute) return;
	    // certain elements can have dimension info if we invisibly show them
	    // however, it must have a current display style that would benefit from this
	    return 0 == el.offsetWidth && rdisplayswap.test(css(el, 'display'))
	      ? swap(el, cssShow, function() { return getWidthOrHeight(el, name, extra); })
	      : getWidthOrHeight(el, name, extra);
	  }

	  exports[name].set = function(el, val, extra) {
	    var styles = extra && styles(el);
	    return setPositiveNumber(el, val, extra
	      ? augmentWidthOrHeight(el, name, extra, 'border-box' == css(el, 'boxSizing', false, styles), styles)
	      : 0
	    );
	  };

	});

	/**
	 * Opacity
	 */

	exports.opacity = {};
	exports.opacity.get = function(el, compute) {
	  if (!compute) return;
	  var ret = computed(el, 'opacity');
	  return '' == ret ? '1' : ret;
	}

	/**
	 * Utility: Set Positive Number
	 *
	 * @param {Element} el
	 * @param {Mixed} val
	 * @param {Number} subtract
	 * @return {Number}
	 */

	function setPositiveNumber(el, val, subtract) {
	  var matches = rnumsplit.exec(val);
	  return matches ?
	    // Guard against undefined 'subtract', e.g., when used as in cssHooks
	    Math.max(0, matches[1]) + (matches[2] || 'px') :
	    val;
	}

	/**
	 * Utility: Get the width or height
	 *
	 * @param {Element} el
	 * @param {String} prop
	 * @param {Mixed} extra
	 * @return {String}
	 */

	function getWidthOrHeight(el, prop, extra) {
	  // Start with offset property, which is equivalent to the border-box value
	  var valueIsBorderBox = true;
	  var val = prop === 'width' ? el.offsetWidth : el.offsetHeight;
	  var styles = computed(el);
	  var isBorderBox = support.boxSizing && css(el, 'boxSizing') === 'border-box';

	  // some non-html elements return undefined for offsetWidth, so check for null/undefined
	  // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	  // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	  if (val <= 0 || val == null) {
	    // Fall back to computed then uncomputed css if necessary
	    val = computed(el, prop, styles);

	    if (val < 0 || val == null) {
	      val = el.style[prop];
	    }

	    // Computed unit is not pixels. Stop here and return.
	    if (rnumnonpx.test(val)) {
	      return val;
	    }

	    // we need the check for style in case a browser which returns unreliable values
	    // for getComputedStyle silently falls back to the reliable el.style
	    valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === el.style[prop]);

	    // Normalize ', auto, and prepare for extra
	    val = parseFloat(val) || 0;
	  }

	  // use the active box-sizing model to add/subtract irrelevant styles
	  extra = extra || (isBorderBox ? 'border' : 'content');
	  val += augmentWidthOrHeight(el, prop, extra, valueIsBorderBox, styles);
	  return val + 'px';
	}

	/**
	 * Utility: Augment the width or the height
	 *
	 * @param {Element} el
	 * @param {String} prop
	 * @param {Mixed} extra
	 * @param {Boolean} isBorderBox
	 * @param {Array} styles
	 */

	function augmentWidthOrHeight(el, prop, extra, isBorderBox, styles) {
	  // If we already have the right measurement, avoid augmentation,
	  // Otherwise initialize for horizontal or vertical properties
	  var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : 'width' == prop ? 1 : 0;
	  var val = 0;

	  for (; i < 4; i += 2) {
	    // both box models exclude margin, so add it if we want it
	    if (extra === 'margin') {
	      val += css(el, extra + cssExpand[i], true, styles);
	    }

	    if (isBorderBox) {
	      // border-box includes padding, so remove it if we want content
	      if (extra === 'content') {
	        val -= css(el, 'padding' + cssExpand[i], true, styles);
	      }

	      // at this point, extra isn't border nor margin, so remove border
	      if (extra !== 'margin') {
	        val -= css(el, 'border' + cssExpand[i] + 'Width', true, styles);
	      }
	    } else {
	      // at this point, extra isn't content, so add padding
	      val += css(el, 'padding' + cssExpand[i], true, styles);

	      // at this point, extra isn't content nor padding, so add border
	      if (extra !== 'padding') {
	        val += css(el, 'border' + cssExpand[i] + 'Width', true, styles);
	      }
	    }
	  }

	  return val;
	}


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var debug = __webpack_require__(69)('css:css');
	var camelcase = __webpack_require__(73);
	var computed = __webpack_require__(81);
	var property = __webpack_require__(77);

	/**
	 * Expose `css`
	 */

	module.exports = css;

	/**
	 * CSS Normal Transforms
	 */

	var cssNormalTransform = {
	  letterSpacing: 0,
	  fontWeight: 400
	};

	/**
	 * Get a CSS value
	 *
	 * @param {Element} el
	 * @param {String} prop
	 * @param {Mixed} extra
	 * @param {Array} styles
	 * @return {String}
	 */

	function css(el, prop, extra, styles) {
	  var hooks = __webpack_require__(79);
	  var orig = camelcase(prop);
	  var style = el.style;
	  var val;

	  prop = property(prop, style);
	  var hook = hooks[prop] || hooks[orig];

	  // If a hook was provided get the computed value from there
	  if (hook && hook.get) {
	    debug('get hook provided. use that');
	    val = hook.get(el, true, extra);
	  }

	  // Otherwise, if a way to get the computed value exists, use that
	  if (undefined == val) {
	    debug('fetch the computed value of %s', prop);
	    val = computed(el, prop);
	  }

	  if ('normal' == val && cssNormalTransform[prop]) {
	    val = cssNormalTransform[prop];
	    debug('normal => %s', val);
	  }

	  // Return, converting to number if forced or a qualifier was provided and val looks numeric
	  if ('' == extra || extra) {
	    debug('converting value: %s into a number', val);
	    var num = parseFloat(val);
	    return true === extra || isNumeric(num) ? num || 0 : val;
	  }

	  return val;
	}

	/**
	 * Is Numeric
	 *
	 * @param {Mixed} obj
	 * @return {Boolean}
	 */

	function isNumeric(obj) {
	  return !isNan(parseFloat(obj)) && isFinite(obj);
	}


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var debug = __webpack_require__(69)('css:computed');
	var withinDocument = __webpack_require__(82);
	var styles = __webpack_require__(83);

	/**
	 * Expose `computed`
	 */

	module.exports = computed;

	/**
	 * Get the computed style
	 *
	 * @param {Element} el
	 * @param {String} prop
	 * @param {Array} precomputed (optional)
	 * @return {Array}
	 * @api private
	 */

	function computed(el, prop, precomputed) {
	  var computed = precomputed || styles(el);
	  var ret;
	  
	  if (!computed) return;

	  if (computed.getPropertyValue) {
	    ret = computed.getPropertyValue(prop) || computed[prop];
	  } else {
	    ret = computed[prop];
	  }

	  if ('' === ret && !withinDocument(el)) {
	    debug('element not within document, try finding from style attribute');
	    var style = __webpack_require__(72);
	    ret = style(el, prop);
	  }

	  debug('computed value of %s: %s', prop, ret);

	  // Support: IE
	  // IE returns zIndex value as an integer.
	  return undefined === ret ? ret : ret + '';
	}


/***/ },
/* 82 */
/***/ function(module, exports) {

	
	/**
	 * Check if `el` is within the document.
	 *
	 * @param {Element} el
	 * @return {Boolean}
	 * @api private
	 */

	module.exports = function(el) {
	  var node = el;
	  while (node = node.parentNode) {
	    if (node == document) return true;
	  }
	  return false;
	};

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Expose `styles`
	 */

	module.exports = styles;

	/**
	 * Get all the styles
	 *
	 * @param {Element} el
	 * @return {Array}
	 */

	function styles(el) {
	  if (window.getComputedStyle) {
	    return el.ownerDocument.defaultView.getComputedStyle(el, null);
	  } else {
	    return el.currentStyle;
	  }
	}


/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Export `swap`
	 */

	module.exports = swap;

	/**
	 * Initialize `swap`
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @param {Function} fn
	 * @param {Array} args
	 * @return {Mixed}
	 */

	function swap(el, options, fn, args) {
	  // Remember the old values, and insert the new ones
	  for (var key in options) {
	    old[key] = el.style[key];
	    el.style[key] = options[key];
	  }

	  ret = fn.apply(el, args || []);

	  // Revert the old values
	  for (key in options) {
	    el.style[key] = old[key];
	  }

	  return ret;
	}


/***/ },
/* 85 */
/***/ function(module, exports) {

	module.exports = function(node, value) {
	  var text = (node.textContent !== undefined ?
	    'textContent' : 'innerText'
	  )

	  if (typeof value != 'undefined') {
	    node[text] = value
	  }

	  return node[text]
	}


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module Dependencies
	 */

	var proto = Array.prototype;
	var each = __webpack_require__(49);
	var traverse = __webpack_require__(87);
	var toFunction = __webpack_require__(90);
	var matches = __webpack_require__(92);

	/**
	 * Find children matching the given `selector`.
	 *
	 * @param {String} selector
	 * @return {List}
	 * @api public
	 */

	exports.find = function(selector){
	  return this.dom(selector, this);
	};

	/**
	 * Check if the any element in the selection
	 * matches `selector`.
	 *
	 * @param {String} selector
	 * @return {Boolean}
	 * @api public
	 */

	exports.is = function(selector){
	  for(var i = 0, el; el = this[i]; i++) {
	    if (matches(el, selector)) return true;
	  }

	  return false;
	};

	/**
	 * Get parent(s) with optional `selector` and `limit`
	 *
	 * @param {String} selector
	 * @param {Number} limit
	 * @return {List}
	 * @api public
	 */

	exports.parent = function(selector, limit){
	  return this.dom(traverse('parentNode',
	    this[0],
	    selector,
	    limit
	    || 1));
	};

	/**
	 * Get next element(s) with optional `selector` and `limit`.
	 *
	 * @param {String} selector
	 * @param {Number} limit
	 * @retrun {List}
	 * @api public
	 */

	exports.next = function(selector, limit){
	  return this.dom(traverse('nextSibling',
	    this[0],
	    selector,
	    limit
	    || 1));
	};

	/**
	 * Get previous element(s) with optional `selector` and `limit`.
	 *
	 * @param {String} selector
	 * @param {Number} limit
	 * @return {List}
	 * @api public
	 */

	exports.prev =
	exports.previous = function(selector, limit){
	  return this.dom(traverse('previousSibling',
	    this[0],
	    selector,
	    limit
	    || 1));
	};

	/**
	 * Iterate over each element creating a new list with
	 * one item and invoking `fn(list, i)`.
	 *
	 * @param {Function} fn
	 * @return {List} self
	 * @api public
	 */

	exports.each = function(fn){
	  var dom = this.dom;

	  for (var i = 0, list, len = this.length; i < len; i++) {
	    list = dom(this[i]);
	    fn.call(list, list, i);
	  }

	  return this;
	};

	/**
	 * Iterate over each element and invoke `fn(el, i)`
	 *
	 * @param {Function} fn
	 * @return {List} self
	 * @api public
	 */

	exports.forEach = function(fn) {
	  for (var i = 0, len = this.length; i < len; i++) {
	    fn.call(this[i], this[i], i);
	  }

	  return this;
	};

	/**
	 * Map each return value from `fn(val, i)`.
	 *
	 * Passing a callback function:
	 *
	 *    inputs.map(function(input){
	 *      return input.type
	 *    })
	 *
	 * Passing a property string:
	 *
	 *    inputs.map('type')
	 *
	 * @param {Function} fn
	 * @return {List} self
	 * @api public
	 */

	exports.map = function(fn){
	  fn = toFunction(fn);
	  var dom = this.dom;
	  var out = [];

	  for (var i = 0, len = this.length; i < len; i++) {
	    out.push(fn.call(dom(this[i]), this[i], i));
	  }

	  return this.dom(out);
	};

	/**
	 * Select all values that return a truthy value of `fn(val, i)`.
	 *
	 *    inputs.select(function(input){
	 *      return input.type == 'password'
	 *    })
	 *
	 *  With a property:
	 *
	 *    inputs.select('type == password')
	 *
	 * @param {Function|String} fn
	 * @return {List} self
	 * @api public
	 */

	exports.filter =
	exports.select = function(fn){
	  fn = toFunction(fn);
	  var dom = this.dom;
	  var out = [];
	  var val;

	  for (var i = 0, len = this.length; i < len; i++) {
	    val = fn.call(dom(this[i]), this[i], i);
	    if (val) out.push(this[i]);
	  }

	  return this.dom(out);
	};

	/**
	 * Reject all values that return a truthy value of `fn(val, i)`.
	 *
	 * Rejecting using a callback:
	 *
	 *    input.reject(function(user){
	 *      return input.length < 20
	 *    })
	 *
	 * Rejecting with a property:
	 *
	 *    items.reject('password')
	 *
	 * Rejecting values via `==`:
	 *
	 *    data.reject(null)
	 *    input.reject(file)
	 *
	 * @param {Function|String|Mixed} fn
	 * @return {List}
	 * @api public
	 */

	exports.reject = function(fn){
	  var dom = this.dom;
	  var out = [];
	  var len = this.length;
	  var val, i;

	  if ('string' == typeof fn) fn = toFunction(fn);

	  if (fn) {
	    for (i = 0; i < len; i++) {
	      val = fn.call(dom(this[i]), this[i], i);
	      if (!val) out.push(this[i]);
	    }
	  } else {
	    for (i = 0; i < len; i++) {
	      if (this[i] != fn) out.push(this[i]);
	    }
	  }

	  return this.dom(out);
	};

	/**
	 * Return a `List` containing the element at `i`.
	 *
	 * @param {Number} i
	 * @return {List}
	 * @api public
	 */

	exports.at = function(i){
	  return this.dom(this[i]);
	};

	/**
	 * Return a `List` containing the first element.
	 *
	 * @param {Number} i
	 * @return {List}
	 * @api public
	 */

	exports.first = function(){
	  return this.dom(this[0]);
	};

	/**
	 * Return a `List` containing the last element.
	 *
	 * @param {Number} i
	 * @return {List}
	 * @api public
	 */

	exports.last = function(){
	  return this.dom(this[this.length - 1]);
	};

	/**
	 * Mixin the array functions
	 */

	each([
	  'push',
	  'pop',
	  'shift',
	  'splice',
	  'unshift',
	  'reverse',
	  'sort',
	  'toString',
	  'concat',
	  'join',
	  'slice'
	], function(method) {
	  exports[method] = function() {
	    return proto[method].apply(this.toArray(), arguments);
	  };
	});


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * dependencies
	 */

	var matches = __webpack_require__(88);

	/**
	 * Traverse with the given `el`, `selector` and `len`.
	 *
	 * @param {String} type
	 * @param {Element} el
	 * @param {String} selector
	 * @param {Number} len
	 * @return {Array}
	 * @api public
	 */

	module.exports = function(type, el, selector, len){
	  var el = el[type]
	    , n = len || 1
	    , ret = [];

	  if (!el) return ret;

	  do {
	    if (n == ret.length) break;
	    if (1 != el.nodeType) continue;
	    if (matches(el, selector)) ret.push(el);
	    if (!selector) ret.push(el);
	  } while (el = el[type]);

	  return ret;
	}


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var query = __webpack_require__(89);

	/**
	 * Element prototype.
	 */

	var proto = Element.prototype;

	/**
	 * Vendor function.
	 */

	var vendor = proto.matches
	  || proto.webkitMatchesSelector
	  || proto.mozMatchesSelector
	  || proto.msMatchesSelector
	  || proto.oMatchesSelector;

	/**
	 * Expose `match()`.
	 */

	module.exports = match;

	/**
	 * Match `el` to `selector`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @return {Boolean}
	 * @api public
	 */

	function match(el, selector) {
	  if (vendor) return vendor.call(el, selector);
	  var nodes = query.all(selector, el.parentNode);
	  for (var i = 0; i < nodes.length; ++i) {
	    if (nodes[i] == el) return true;
	  }
	  return false;
	}


/***/ },
/* 89 */
/***/ function(module, exports) {

	function one(selector, el) {
	  return el.querySelector(selector);
	}

	exports = module.exports = function(selector, el){
	  el = el || document;
	  return one(selector, el);
	};

	exports.all = function(selector, el){
	  el = el || document;
	  return el.querySelectorAll(selector);
	};

	exports.engine = function(obj){
	  if (!obj.one) throw new Error('.one callback required');
	  if (!obj.all) throw new Error('.all callback required');
	  one = obj.one;
	  exports.all = obj.all;
	  return exports;
	};


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module Dependencies
	 */

	var expr;
	try {
	  expr = __webpack_require__(91);
	} catch(e) {
	  expr = __webpack_require__(91);
	}

	/**
	 * Expose `toFunction()`.
	 */

	module.exports = toFunction;

	/**
	 * Convert `obj` to a `Function`.
	 *
	 * @param {Mixed} obj
	 * @return {Function}
	 * @api private
	 */

	function toFunction(obj) {
	  switch ({}.toString.call(obj)) {
	    case '[object Object]':
	      return objectToFunction(obj);
	    case '[object Function]':
	      return obj;
	    case '[object String]':
	      return stringToFunction(obj);
	    case '[object RegExp]':
	      return regexpToFunction(obj);
	    default:
	      return defaultToFunction(obj);
	  }
	}

	/**
	 * Default to strict equality.
	 *
	 * @param {Mixed} val
	 * @return {Function}
	 * @api private
	 */

	function defaultToFunction(val) {
	  return function(obj){
	    return val === obj;
	  };
	}

	/**
	 * Convert `re` to a function.
	 *
	 * @param {RegExp} re
	 * @return {Function}
	 * @api private
	 */

	function regexpToFunction(re) {
	  return function(obj){
	    return re.test(obj);
	  };
	}

	/**
	 * Convert property `str` to a function.
	 *
	 * @param {String} str
	 * @return {Function}
	 * @api private
	 */

	function stringToFunction(str) {
	  // immediate such as "> 20"
	  if (/^ *\W+/.test(str)) return new Function('_', 'return _ ' + str);

	  // properties such as "name.first" or "age > 18" or "age > 18 && age < 36"
	  return new Function('_', 'return ' + get(str));
	}

	/**
	 * Convert `object` to a function.
	 *
	 * @param {Object} object
	 * @return {Function}
	 * @api private
	 */

	function objectToFunction(obj) {
	  var match = {};
	  for (var key in obj) {
	    match[key] = typeof obj[key] === 'string'
	      ? defaultToFunction(obj[key])
	      : toFunction(obj[key]);
	  }
	  return function(val){
	    if (typeof val !== 'object') return false;
	    for (var key in match) {
	      if (!(key in val)) return false;
	      if (!match[key](val[key])) return false;
	    }
	    return true;
	  };
	}

	/**
	 * Built the getter function. Supports getter style functions
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function get(str) {
	  var props = expr(str);
	  if (!props.length) return '_.' + str;

	  var val, i, prop;
	  for (i = 0; i < props.length; i++) {
	    prop = props[i];
	    val = '_.' + prop;
	    val = "('function' == typeof " + val + " ? " + val + "() : " + val + ")";

	    // mimic negative lookbehind to avoid problems with nested properties
	    str = stripNested(prop, str, val);
	  }

	  return str;
	}

	/**
	 * Mimic negative lookbehind to avoid problems with nested properties.
	 *
	 * See: http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript
	 *
	 * @param {String} prop
	 * @param {String} str
	 * @param {String} val
	 * @return {String}
	 * @api private
	 */

	function stripNested (prop, str, val) {
	  return str.replace(new RegExp('(\\.)?' + prop, 'g'), function($0, $1) {
	    return $1 ? $0 : val;
	  });
	}


/***/ },
/* 91 */
/***/ function(module, exports) {

	/**
	 * Global Names
	 */

	var globals = /\b(Array|Date|Object|Math|JSON)\b/g;

	/**
	 * Return immediate identifiers parsed from `str`.
	 *
	 * @param {String} str
	 * @param {String|Function} map function or prefix
	 * @return {Array}
	 * @api public
	 */

	module.exports = function(str, fn){
	  var p = unique(props(str));
	  if (fn && 'string' == typeof fn) fn = prefixed(fn);
	  if (fn) return map(str, p, fn);
	  return p;
	};

	/**
	 * Return immediate identifiers in `str`.
	 *
	 * @param {String} str
	 * @return {Array}
	 * @api private
	 */

	function props(str) {
	  return str
	    .replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\//g, '')
	    .replace(globals, '')
	    .match(/[a-zA-Z_]\w*/g)
	    || [];
	}

	/**
	 * Return `str` with `props` mapped with `fn`.
	 *
	 * @param {String} str
	 * @param {Array} props
	 * @param {Function} fn
	 * @return {String}
	 * @api private
	 */

	function map(str, props, fn) {
	  var re = /\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\/|[a-zA-Z_]\w*/g;
	  return str.replace(re, function(_){
	    if ('(' == _[_.length - 1]) return fn(_);
	    if (!~props.indexOf(_)) return _;
	    return fn(_);
	  });
	}

	/**
	 * Return unique array.
	 *
	 * @param {Array} arr
	 * @return {Array}
	 * @api private
	 */

	function unique(arr) {
	  var ret = [];

	  for (var i = 0; i < arr.length; i++) {
	    if (~ret.indexOf(arr[i])) continue;
	    ret.push(arr[i]);
	  }

	  return ret;
	}

	/**
	 * Map with prefix `str`.
	 */

	function prefixed(str) {
	  return function(_){
	    return str + _;
	  };
	}


/***/ },
/* 92 */
/***/ function(module, exports) {

	'use strict';

	var proto = Element.prototype;
	var vendor = proto.matches
	  || proto.matchesSelector
	  || proto.webkitMatchesSelector
	  || proto.mozMatchesSelector
	  || proto.msMatchesSelector
	  || proto.oMatchesSelector;

	module.exports = match;

	/**
	 * Match `el` to `selector`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @return {Boolean}
	 * @api public
	 */

	function match(el, selector) {
	  if (vendor) return vendor.call(el, selector);
	  var nodes = el.parentNode.querySelectorAll(selector);
	  for (var i = 0; i < nodes.length; i++) {
	    if (nodes[i] == el) return true;
	  }
	  return false;
	}

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var each = __webpack_require__(94);


	/**
	 * Cache whether `<body>` exists.
	 */

	var body = false;


	/**
	 * Callbacks to call when the body exists.
	 */

	var callbacks = [];


	/**
	 * Export a way to add handlers to be invoked once the body exists.
	 *
	 * @param {Function} callback  A function to call when the body exists.
	 */

	module.exports = function onBody (callback) {
	  if (body) {
	    call(callback);
	  } else {
	    callbacks.push(callback);
	  }
	};


	/**
	 * Set an interval to check for `document.body`.
	 */

	var interval = setInterval(function () {
	  if (!document.body) return;
	  body = true;
	  each(callbacks, call);
	  clearInterval(interval);
	}, 5);


	/**
	 * Call a callback, passing it the body.
	 *
	 * @param {Function} callback  The callback to call.
	 */

	function call (callback) {
	  callback(document.body);
	}

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	try {
	  var type = __webpack_require__(95);
	} catch (err) {
	  var type = __webpack_require__(95);
	}

	var toFunction = __webpack_require__(96);

	/**
	 * HOP reference.
	 */

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Iterate the given `obj` and invoke `fn(val, i)`
	 * in optional context `ctx`.
	 *
	 * @param {String|Array|Object} obj
	 * @param {Function} fn
	 * @param {Object} [ctx]
	 * @api public
	 */

	module.exports = function(obj, fn, ctx){
	  fn = toFunction(fn);
	  ctx = ctx || this;
	  switch (type(obj)) {
	    case 'array':
	      return array(obj, fn, ctx);
	    case 'object':
	      if ('number' == typeof obj.length) return array(obj, fn, ctx);
	      return object(obj, fn, ctx);
	    case 'string':
	      return string(obj, fn, ctx);
	  }
	};

	/**
	 * Iterate string chars.
	 *
	 * @param {String} obj
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @api private
	 */

	function string(obj, fn, ctx) {
	  for (var i = 0; i < obj.length; ++i) {
	    fn.call(ctx, obj.charAt(i), i);
	  }
	}

	/**
	 * Iterate object keys.
	 *
	 * @param {Object} obj
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @api private
	 */

	function object(obj, fn, ctx) {
	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      fn.call(ctx, key, obj[key]);
	    }
	  }
	}

	/**
	 * Iterate array-ish.
	 *
	 * @param {Array|Object} obj
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @api private
	 */

	function array(obj, fn, ctx) {
	  for (var i = 0; i < obj.length; ++i) {
	    fn.call(ctx, obj[i], i);
	  }
	}


/***/ },
/* 95 */
/***/ function(module, exports) {

	
	/**
	 * toString ref.
	 */

	var toString = Object.prototype.toString;

	/**
	 * Return the type of `val`.
	 *
	 * @param {Mixed} val
	 * @return {String}
	 * @api public
	 */

	module.exports = function(val){
	  switch (toString.call(val)) {
	    case '[object Function]': return 'function';
	    case '[object Date]': return 'date';
	    case '[object RegExp]': return 'regexp';
	    case '[object Arguments]': return 'arguments';
	    case '[object Array]': return 'array';
	    case '[object String]': return 'string';
	  }

	  if (val === null) return 'null';
	  if (val === undefined) return 'undefined';
	  if (val && val.nodeType === 1) return 'element';
	  if (val === Object(val)) return 'object';

	  return typeof val;
	};


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module Dependencies
	 */

	var expr;
	try {
	  expr = __webpack_require__(97);
	} catch(e) {
	  expr = __webpack_require__(97);
	}

	/**
	 * Expose `toFunction()`.
	 */

	module.exports = toFunction;

	/**
	 * Convert `obj` to a `Function`.
	 *
	 * @param {Mixed} obj
	 * @return {Function}
	 * @api private
	 */

	function toFunction(obj) {
	  switch ({}.toString.call(obj)) {
	    case '[object Object]':
	      return objectToFunction(obj);
	    case '[object Function]':
	      return obj;
	    case '[object String]':
	      return stringToFunction(obj);
	    case '[object RegExp]':
	      return regexpToFunction(obj);
	    default:
	      return defaultToFunction(obj);
	  }
	}

	/**
	 * Default to strict equality.
	 *
	 * @param {Mixed} val
	 * @return {Function}
	 * @api private
	 */

	function defaultToFunction(val) {
	  return function(obj){
	    return val === obj;
	  };
	}

	/**
	 * Convert `re` to a function.
	 *
	 * @param {RegExp} re
	 * @return {Function}
	 * @api private
	 */

	function regexpToFunction(re) {
	  return function(obj){
	    return re.test(obj);
	  };
	}

	/**
	 * Convert property `str` to a function.
	 *
	 * @param {String} str
	 * @return {Function}
	 * @api private
	 */

	function stringToFunction(str) {
	  // immediate such as "> 20"
	  if (/^ *\W+/.test(str)) return new Function('_', 'return _ ' + str);

	  // properties such as "name.first" or "age > 18" or "age > 18 && age < 36"
	  return new Function('_', 'return ' + get(str));
	}

	/**
	 * Convert `object` to a function.
	 *
	 * @param {Object} object
	 * @return {Function}
	 * @api private
	 */

	function objectToFunction(obj) {
	  var match = {};
	  for (var key in obj) {
	    match[key] = typeof obj[key] === 'string'
	      ? defaultToFunction(obj[key])
	      : toFunction(obj[key]);
	  }
	  return function(val){
	    if (typeof val !== 'object') return false;
	    for (var key in match) {
	      if (!(key in val)) return false;
	      if (!match[key](val[key])) return false;
	    }
	    return true;
	  };
	}

	/**
	 * Built the getter function. Supports getter style functions
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function get(str) {
	  var props = expr(str);
	  if (!props.length) return '_.' + str;

	  var val, i, prop;
	  for (i = 0; i < props.length; i++) {
	    prop = props[i];
	    val = '_.' + prop;
	    val = "('function' == typeof " + val + " ? " + val + "() : " + val + ")";

	    // mimic negative lookbehind to avoid problems with nested properties
	    str = stripNested(prop, str, val);
	  }

	  return str;
	}

	/**
	 * Mimic negative lookbehind to avoid problems with nested properties.
	 *
	 * See: http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript
	 *
	 * @param {String} prop
	 * @param {String} str
	 * @param {String} val
	 * @return {String}
	 * @api private
	 */

	function stripNested (prop, str, val) {
	  return str.replace(new RegExp('(\\.)?' + prop, 'g'), function($0, $1) {
	    return $1 ? $0 : val;
	  });
	}


/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Global Names
	 */

	var globals = /\b(Array|Date|Object|Math|JSON)\b/g;

	/**
	 * Return immediate identifiers parsed from `str`.
	 *
	 * @param {String} str
	 * @param {String|Function} map function or prefix
	 * @return {Array}
	 * @api public
	 */

	module.exports = function(str, fn){
	  var p = unique(props(str));
	  if (fn && 'string' == typeof fn) fn = prefixed(fn);
	  if (fn) return map(str, p, fn);
	  return p;
	};

	/**
	 * Return immediate identifiers in `str`.
	 *
	 * @param {String} str
	 * @return {Array}
	 * @api private
	 */

	function props(str) {
	  return str
	    .replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\//g, '')
	    .replace(globals, '')
	    .match(/[a-zA-Z_]\w*/g)
	    || [];
	}

	/**
	 * Return `str` with `props` mapped with `fn`.
	 *
	 * @param {String} str
	 * @param {Array} props
	 * @param {Function} fn
	 * @return {String}
	 * @api private
	 */

	function map(str, props, fn) {
	  var re = /\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\/|[a-zA-Z_]\w*/g;
	  return str.replace(re, function(_){
	    if ('(' == _[_.length - 1]) return fn(_);
	    if (!~props.indexOf(_)) return _;
	    return fn(_);
	  });
	}

	/**
	 * Return unique array.
	 *
	 * @param {Array} arr
	 * @return {Array}
	 * @api private
	 */

	function unique(arr) {
	  var ret = [];

	  for (var i = 0; i < arr.length; i++) {
	    if (~ret.indexOf(arr[i])) continue;
	    ret.push(arr[i]);
	  }

	  return ret;
	}

	/**
	 * Map with prefix `str`.
	 */

	function prefixed(str) {
	  return function(_){
	    return str + _;
	  };
	}


/***/ },
/* 98 */
/***/ function(module, exports) {

	module.exports = '<li class="notification hide">\n  <div class="content">\n    <span class="title">Title</span>\n    <a href="#" class="close">&#215;</a>\n    <p>Message</p>\n  </div>\n</li>\n';

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var index = __webpack_require__(100);

	/**
	 * Whitespace regexp.
	 */

	var re = /\s+/;

	/**
	 * toString reference.
	 */

	var toString = Object.prototype.toString;

	/**
	 * Wrap `el` in a `ClassList`.
	 *
	 * @param {Element} el
	 * @return {ClassList}
	 * @api public
	 */

	module.exports = function(el){
	  return new ClassList(el);
	};

	/**
	 * Initialize a new ClassList for `el`.
	 *
	 * @param {Element} el
	 * @api private
	 */

	function ClassList(el) {
	  if (!el || !el.nodeType) {
	    throw new Error('A DOM element reference is required');
	  }
	  this.el = el;
	  this.list = el.classList;
	}

	/**
	 * Add class `name` if not already present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.add = function(name){
	  // classList
	  if (this.list) {
	    this.list.add(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (!~i) arr.push(name);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove class `name` when present, or
	 * pass a regular expression to remove
	 * any which match.
	 *
	 * @param {String|RegExp} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.remove = function(name){
	  if ('[object RegExp]' == toString.call(name)) {
	    return this.removeMatching(name);
	  }

	  // classList
	  if (this.list) {
	    this.list.remove(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (~i) arr.splice(i, 1);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove all classes matching `re`.
	 *
	 * @param {RegExp} re
	 * @return {ClassList}
	 * @api private
	 */

	ClassList.prototype.removeMatching = function(re){
	  var arr = this.array();
	  for (var i = 0; i < arr.length; i++) {
	    if (re.test(arr[i])) {
	      this.remove(arr[i]);
	    }
	  }
	  return this;
	};

	/**
	 * Toggle class `name`, can force state via `force`.
	 *
	 * For browsers that support classList, but do not support `force` yet,
	 * the mistake will be detected and corrected.
	 *
	 * @param {String} name
	 * @param {Boolean} force
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.toggle = function(name, force){
	  // classList
	  if (this.list) {
	    if ("undefined" !== typeof force) {
	      if (force !== this.list.toggle(name, force)) {
	        this.list.toggle(name); // toggle again to correct
	      }
	    } else {
	      this.list.toggle(name);
	    }
	    return this;
	  }

	  // fallback
	  if ("undefined" !== typeof force) {
	    if (!force) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  } else {
	    if (this.has(name)) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  }

	  return this;
	};

	/**
	 * Return an array of classes.
	 *
	 * @return {Array}
	 * @api public
	 */

	ClassList.prototype.array = function(){
	  var className = this.el.getAttribute('class') || '';
	  var str = className.replace(/^\s+|\s+$/g, '');
	  var arr = str.split(re);
	  if ('' === arr[0]) arr.shift();
	  return arr;
	};

	/**
	 * Check if class `name` is present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.has =
	ClassList.prototype.contains = function(name){
	  return this.list
	    ? this.list.contains(name)
	    : !! ~index(this.array(), name);
	};


/***/ },
/* 100 */
/***/ function(module, exports) {

	module.exports = function(arr, obj){
	  if (arr.indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 101 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2012 Tsvetan Tsvetkov
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * Author: Tsvetan Tsvetkov (tsekach@gmail.com)
	 */
	(function (win) {
	    /*
	     Safari native methods required for Notifications do NOT run in strict mode.
	     */
	    //"use strict";
	    var PERMISSION_DEFAULT = "default",
	        PERMISSION_GRANTED = "granted",
	        PERMISSION_DENIED = "denied",
	        PERMISSION = [PERMISSION_GRANTED, PERMISSION_DEFAULT, PERMISSION_DENIED],
	        defaultSetting = {
	            pageVisibility: false,
	            autoClose: 0
	        },
	        empty = {},
	        emptyString = "",
	        isSupported = (function () {
	            var isSupported = false;
	            /*
	             * Use try {} catch() {} because the check for IE may throws an exception
	             * if the code is run on browser that is not Safar/Chrome/IE or
	             * Firefox with html5notifications plugin.
	             *
	             * Also, we canNOT detect if msIsSiteMode method exists, as it is
	             * a method of host object. In IE check for existing method of host
	             * object returns undefined. So, we try to run it - if it runs
	             * successfully - then it is IE9+, if not - an exceptions is thrown.
	             */
	            try {
	                isSupported = !!(/* Safari, Chrome */win.Notification || /* Chrome & ff-html5notifications plugin */win.webkitNotifications || /* Firefox Mobile */navigator.mozNotification || /* IE9+ */(win.external && win.external.msIsSiteMode() !== undefined));
	            } catch (e) {}
	            return isSupported;
	        }()),
	        ieVerification = Math.floor((Math.random() * 10) + 1),
	        isFunction = function (value) { return (value && (value).constructor === Function); },
	        isString = function (value) {return (value && (value).constructor === String); },
	        isObject = function (value) {return (value && (value).constructor === Object); },
	        /**
	         * Dojo Mixin
	         */
	        mixin = function (target, source) {
	            var name, s;
	            for (name in source) {
	                s = source[name];
	                if (!(name in target) || (target[name] !== s && (!(name in empty) || empty[name] !== s))) {
	                    target[name] = s;
	                }
	            }
	            return target; // Object
	        },
	        noop = function () {},
	        settings = defaultSetting;
	    function getNotification(title, options) {
	        var notification;
	        if (win.Notification) { /* Safari 6, Chrome (23+) */
	            notification =  new win.Notification(title, {
	                /* The notification's icon - For Chrome in Windows, Linux & Chrome OS */
	                icon: isString(options.icon) ? options.icon : options.icon.x32,
	                /* The notification’s subtitle. */
	                body: options.body || emptyString,
	                /*
	                    The notification’s unique identifier.
	                    This prevents duplicate entries from appearing if the user has multiple instances of your website open at once.
	                */
	                tag: options.tag || emptyString
	            });
	        } else if (win.webkitNotifications) { /* FF with html5Notifications plugin installed */
	            notification = win.webkitNotifications.createNotification(options.icon, title, options.body);
	            notification.show();
	        } else if (navigator.mozNotification) { /* Firefox Mobile */
	            notification = navigator.mozNotification.createNotification(title, options.body, options.icon);
	            notification.show();
	        } else if (win.external && win.external.msIsSiteMode()) { /* IE9+ */
	            //Clear any previous notifications
	            win.external.msSiteModeClearIconOverlay();
	            win.external.msSiteModeSetIconOverlay((isString(options.icon) ? options.icon : options.icon.x16), title);
	            win.external.msSiteModeActivate();
	            notification = {
	                "ieVerification": ieVerification + 1
	            };
	        }
	        notification.onclick = options.onclick;
	        return notification;
	    }
	    function getWrapper(notification) {
	        return {
	            close: function () {
	                if (notification) {
	                    if (notification.close) {
	                        //http://code.google.com/p/ff-html5notifications/issues/detail?id=58
	                        notification.close();
	                    }
	                    else if (notification.cancel) {
	                        notification.cancel();
	                    } else if (win.external && win.external.msIsSiteMode()) {
	                        if (notification.ieVerification === ieVerification) {
	                            win.external.msSiteModeClearIconOverlay();
	                        }
	                    }
	                }
	            }
	        };
	    }
	    function requestPermission(callback) {
	        if (!isSupported) { return; }
	        var callbackFunction = isFunction(callback) ? callback : noop;
	        if (win.webkitNotifications && win.webkitNotifications.checkPermission) {
	            /*
	             * Chrome 23 supports win.Notification.requestPermission, but it
	             * breaks the browsers, so use the old-webkit-prefixed
	             * win.webkitNotifications.checkPermission instead.
	             *
	             * Firefox with html5notifications plugin supports this method
	             * for requesting permissions.
	             */
	            win.webkitNotifications.requestPermission(callbackFunction);
	        } else if (win.Notification && win.Notification.requestPermission) {
	            win.Notification.requestPermission(callbackFunction);
	        }
	    }
	    function permissionLevel() {
	        var permission;
	        if (!isSupported) { return; }
	        if (win.Notification && win.Notification.permissionLevel) {
	            //Safari 6
	            permission = win.Notification.permissionLevel();
	        } else if (win.webkitNotifications && win.webkitNotifications.checkPermission) {
	            //Chrome & Firefox with html5-notifications plugin installed
	            permission = PERMISSION[win.webkitNotifications.checkPermission()];
	        } else if (win.Notification && win.Notification.permission) {
	            // Firefox 23+
	            permission = win.Notification.permission;
	        } else if (navigator.mozNotification) {
	            //Firefox Mobile
	            permission = PERMISSION_GRANTED;
	        } else if (win.external && (win.external.msIsSiteMode() !== undefined)) { /* keep last */
	            //IE9+
	            permission = win.external.msIsSiteMode() ? PERMISSION_GRANTED : PERMISSION_DEFAULT;
	        }
	        return permission;
	    }
	    /**
	     *
	     */
	    function config(params) {
	        if (params && isObject(params)) {
	            mixin(settings, params);
	        }
	        return settings;
	    }

	    function createNotification(title, options) {
	        var notification,
	            notificationWrapper;
	        /*
	            Return undefined if notifications are not supported.

	            Return undefined if no permissions for displaying notifications.

	            Title and icons are required. Return undefined if not set.
	         */
	        if (isSupported && isString(title) && (options && (isString(options.icon) || isObject(options.icon))) && (permissionLevel() === PERMISSION_GRANTED)) {
	            notification = getNotification(title, options);
	        }
	        notificationWrapper = getWrapper(notification);
	        //Auto-close notification
	        if (settings.autoClose && notification && !notification.ieVerification && notification.addEventListener) {
	            notification.addEventListener("show", function () {
	                var notification = notificationWrapper;
	                win.setTimeout(function () {
	                    notification.close();
	                }, settings.autoClose);
	            });
	        }
	        return notificationWrapper;
	    }
	    win.notify = {
	        PERMISSION_DEFAULT: PERMISSION_DEFAULT,
	        PERMISSION_GRANTED: PERMISSION_GRANTED,
	        PERMISSION_DENIED: PERMISSION_DENIED,
	        isSupported: isSupported,
	        config: config,
	        createNotification: createNotification,
	        permissionLevel: permissionLevel,
	        requestPermission: requestPermission
	    };
	    if (isFunction(Object.seal)) {
	        Object.seal(win.notify);
	    }
	}(window));

	module.exports = window.notify;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Intro.js v1.0.0
	 * https://github.com/usablica/intro.js
	 * MIT licensed
	 *
	 * Copyright (C) 2013 usabli.ca - A weekend project by Afshin Mehrabani (@afshinmeh)
	 */

	(function (root, factory) {
	  if (true) {
	    // CommonJS
	    factory(exports);
	  } else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(['exports'], factory);
	  } else {
	    // Browser globals
	    factory(root);
	  }
	} (this, function (exports) {
	  //Default config/variables
	  var VERSION = '1.0.0';

	  /**
	   * IntroJs main class
	   *
	   * @class IntroJs
	   */
	  function IntroJs(obj) {
	    this._targetElement = obj;

	    this._options = {
	      /* Next button label in tooltip box */
	      nextLabel: 'Next &rarr;',
	      /* Previous button label in tooltip box */
	      prevLabel: '&larr; Back',
	      /* Skip button label in tooltip box */
	      skipLabel: 'Skip',
	      /* Done button label in tooltip box */
	      doneLabel: 'Done',
	      /* Default tooltip box position */
	      tooltipPosition: 'bottom',
	      /* Next CSS class for tooltip boxes */
	      tooltipClass: '',
	      /* CSS class that is added to the helperLayer */
	      highlightClass: '',
	      /* Close introduction when pressing Escape button? */
	      exitOnEsc: true,
	      /* Close introduction when clicking on overlay layer? */
	      exitOnOverlayClick: true,
	      /* Show step numbers in introduction? */
	      showStepNumbers: true,
	      /* Let user use keyboard to navigate the tour? */
	      keyboardNavigation: true,
	      /* Show tour control buttons? */
	      showButtons: true,
	      /* Show tour bullets? */
	      showBullets: true,
	      /* Show tour progress? */
	      showProgress: false,
	      /* Scroll to highlighted element? */
	      scrollToElement: true,
	      /* Set the overlay opacity */
	      overlayOpacity: 0.8,
	      /* Precedence of positions, when auto is enabled */
	      positionPrecedence: ["bottom", "top", "right", "left"],
	      /* Disable an interaction with element? */
	      disableInteraction: false
	    };
	  }

	  /**
	   * Initiate a new introduction/guide from an element in the page
	   *
	   * @api private
	   * @method _introForElement
	   * @param {Object} targetElm
	   * @returns {Boolean} Success or not?
	   */
	  function _introForElement(targetElm) {
	    var introItems = [],
	        self = this;

	    if (this._options.steps) {
	      //use steps passed programmatically
	      var allIntroSteps = [];

	      for (var i = 0, stepsLength = this._options.steps.length; i < stepsLength; i++) {
	        var currentItem = _cloneObject(this._options.steps[i]);
	        //set the step
	        currentItem.step = introItems.length + 1;
	        //use querySelector function only when developer used CSS selector
	        if (typeof(currentItem.element) === 'string') {
	          //grab the element with given selector from the page
	          currentItem.element = document.querySelector(currentItem.element);
	        }

	        //intro without element
	        if (typeof(currentItem.element) === 'undefined' || currentItem.element == null) {
	          var floatingElementQuery = document.querySelector(".introjsFloatingElement");

	          if (floatingElementQuery == null) {
	            floatingElementQuery = document.createElement('div');
	            floatingElementQuery.className = 'introjsFloatingElement';

	            document.body.appendChild(floatingElementQuery);
	          }

	          currentItem.element  = floatingElementQuery;
	          currentItem.position = 'floating';
	        }

	        if (currentItem.element != null) {
	          introItems.push(currentItem);
	        }
	      }

	    } else {
	      //use steps from data-* annotations
	      var allIntroSteps = targetElm.querySelectorAll('*[data-intro]');
	      //if there's no element to intro
	      if (allIntroSteps.length < 1) {
	        return false;
	      }

	      //first add intro items with data-step
	      for (var i = 0, elmsLength = allIntroSteps.length; i < elmsLength; i++) {
	        var currentElement = allIntroSteps[i];
	        var step = parseInt(currentElement.getAttribute('data-step'), 10);

	        if (step > 0) {
	          introItems[step - 1] = {
	            element: currentElement,
	            intro: currentElement.getAttribute('data-intro'),
	            step: parseInt(currentElement.getAttribute('data-step'), 10),
	            tooltipClass: currentElement.getAttribute('data-tooltipClass'),
	            highlightClass: currentElement.getAttribute('data-highlightClass'),
	            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition
	          };
	        }
	      }

	      //next add intro items without data-step
	      //todo: we need a cleanup here, two loops are redundant
	      var nextStep = 0;
	      for (var i = 0, elmsLength = allIntroSteps.length; i < elmsLength; i++) {
	        var currentElement = allIntroSteps[i];

	        if (currentElement.getAttribute('data-step') == null) {

	          while (true) {
	            if (typeof introItems[nextStep] == 'undefined') {
	              break;
	            } else {
	              nextStep++;
	            }
	          }

	          introItems[nextStep] = {
	            element: currentElement,
	            intro: currentElement.getAttribute('data-intro'),
	            step: nextStep + 1,
	            tooltipClass: currentElement.getAttribute('data-tooltipClass'),
	            highlightClass: currentElement.getAttribute('data-highlightClass'),
	            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition
	          };
	        }
	      }
	    }

	    //removing undefined/null elements
	    var tempIntroItems = [];
	    for (var z = 0; z < introItems.length; z++) {
	      introItems[z] && tempIntroItems.push(introItems[z]);  // copy non-empty values to the end of the array
	    }

	    introItems = tempIntroItems;

	    //Ok, sort all items with given steps
	    introItems.sort(function (a, b) {
	      return a.step - b.step;
	    });

	    //set it to the introJs object
	    self._introItems = introItems;

	    //add overlay layer to the page
	    if(_addOverlayLayer.call(self, targetElm)) {
	      //then, start the show
	      _nextStep.call(self);

	      var skipButton     = targetElm.querySelector('.introjs-skipbutton'),
	          nextStepButton = targetElm.querySelector('.introjs-nextbutton');

	      self._onKeyDown = function(e) {
	        if (e.keyCode === 27 && self._options.exitOnEsc == true) {
	          //escape key pressed, exit the intro
	          _exitIntro.call(self, targetElm);
	          //check if any callback is defined
	          if (self._introExitCallback != undefined) {
	            self._introExitCallback.call(self);
	          }
	        } else if(e.keyCode === 37) {
	          //left arrow
	          _previousStep.call(self);
	        } else if (e.keyCode === 39) {
	          //right arrow
	          _nextStep.call(self);
	        } else if (e.keyCode === 13) {
	          //srcElement === ie
	          var target = e.target || e.srcElement;
	          if (target && target.className.indexOf('introjs-prevbutton') > 0) {
	            //user hit enter while focusing on previous button
	            _previousStep.call(self);
	          } else if (target && target.className.indexOf('introjs-skipbutton') > 0) {
	            //user hit enter while focusing on skip button
	            _exitIntro.call(self, targetElm);
	          } else {
	            //default behavior for responding to enter
	            _nextStep.call(self);
	          }

	          //prevent default behaviour on hitting Enter, to prevent steps being skipped in some browsers
	          if(e.preventDefault) {
	            e.preventDefault();
	          } else {
	            e.returnValue = false;
	          }
	        }
	      };

	      self._onResize = function(e) {
	        _setHelperLayerPosition.call(self, document.querySelector('.introjs-helperLayer'));
	        _setHelperLayerPosition.call(self, document.querySelector('.introjs-tooltipReferenceLayer'));
	      };

	      if (window.addEventListener) {
	        if (this._options.keyboardNavigation) {
	          window.addEventListener('keydown', self._onKeyDown, true);
	        }
	        //for window resize
	        window.addEventListener('resize', self._onResize, true);
	      } else if (document.attachEvent) { //IE
	        if (this._options.keyboardNavigation) {
	          document.attachEvent('onkeydown', self._onKeyDown);
	        }
	        //for window resize
	        document.attachEvent('onresize', self._onResize);
	      }
	    }
	    return false;
	  }

	 /*
	   * makes a copy of the object
	   * @api private
	   * @method _cloneObject
	  */
	  function _cloneObject(object) {
	      if (object == null || typeof (object) != 'object' || typeof (object.nodeType) != 'undefined') {
	          return object;
	      }
	      var temp = {};
	      for (var key in object) {
	          temp[key] = _cloneObject(object[key]);
	      }
	      return temp;
	  }
	  /**
	   * Go to specific step of introduction
	   *
	   * @api private
	   * @method _goToStep
	   */
	  function _goToStep(step) {
	    //because steps starts with zero
	    this._currentStep = step - 2;
	    if (typeof (this._introItems) !== 'undefined') {
	      _nextStep.call(this);
	    }
	  }

	  /**
	   * Go to next step on intro
	   *
	   * @api private
	   * @method _nextStep
	   */
	  function _nextStep() {
	    this._direction = 'forward';

	    if (typeof (this._currentStep) === 'undefined') {
	      this._currentStep = 0;
	    } else {
	      ++this._currentStep;
	    }

	    if ((this._introItems.length) <= this._currentStep) {
	      //end of the intro
	      //check if any callback is defined
	      if (typeof (this._introCompleteCallback) === 'function') {
	        this._introCompleteCallback.call(this);
	      }
	      _exitIntro.call(this, this._targetElement);
	      return;
	    }

	    var nextStep = this._introItems[this._currentStep];
	    if (typeof (this._introBeforeChangeCallback) !== 'undefined') {
	      this._introBeforeChangeCallback.call(this, nextStep.element);
	    }

	    _showElement.call(this, nextStep);
	  }

	  /**
	   * Go to previous step on intro
	   *
	   * @api private
	   * @method _nextStep
	   */
	  function _previousStep() {
	    this._direction = 'backward';

	    if (this._currentStep === 0) {
	      return false;
	    }

	    var nextStep = this._introItems[--this._currentStep];
	    if (typeof (this._introBeforeChangeCallback) !== 'undefined') {
	      this._introBeforeChangeCallback.call(this, nextStep.element);
	    }

	    _showElement.call(this, nextStep);
	  }

	  /**
	   * Exit from intro
	   *
	   * @api private
	   * @method _exitIntro
	   * @param {Object} targetElement
	   */
	  function _exitIntro(targetElement) {
	    //remove overlay layer from the page
	    var overlayLayer = targetElement.querySelector('.introjs-overlay');

	    //return if intro already completed or skipped
	    if (overlayLayer == null) {
	      return;
	    }

	    //for fade-out animation
	    overlayLayer.style.opacity = 0;
	    setTimeout(function () {
	      if (overlayLayer.parentNode) {
	        overlayLayer.parentNode.removeChild(overlayLayer);
	      }
	    }, 500);

	    //remove all helper layers
	    var helperLayer = targetElement.querySelector('.introjs-helperLayer');
	    if (helperLayer) {
	      helperLayer.parentNode.removeChild(helperLayer);
	    }

	    var referenceLayer = targetElement.querySelector('.introjs-tooltipReferenceLayer');
	    if (referenceLayer) {
	      referenceLayer.parentNode.removeChild(referenceLayer);
		}
	    //remove disableInteractionLayer
	    var disableInteractionLayer = targetElement.querySelector('.introjs-disableInteraction');
	    if (disableInteractionLayer) {
	      disableInteractionLayer.parentNode.removeChild(disableInteractionLayer);
	    }

	    //remove intro floating element
	    var floatingElement = document.querySelector('.introjsFloatingElement');
	    if (floatingElement) {
	      floatingElement.parentNode.removeChild(floatingElement);
	    }

	    //remove `introjs-showElement` class from the element
	    var showElement = document.querySelector('.introjs-showElement');
	    if (showElement) {
	      showElement.className = showElement.className.replace(/introjs-[a-zA-Z]+/g, '').replace(/^\s+|\s+$/g, ''); // This is a manual trim.
	    }

	    //remove `introjs-fixParent` class from the elements
	    var fixParents = document.querySelectorAll('.introjs-fixParent');
	    if (fixParents && fixParents.length > 0) {
	      for (var i = fixParents.length - 1; i >= 0; i--) {
	        fixParents[i].className = fixParents[i].className.replace(/introjs-fixParent/g, '').replace(/^\s+|\s+$/g, '');
	      };
	    }

	    //clean listeners
	    if (window.removeEventListener) {
	      window.removeEventListener('keydown', this._onKeyDown, true);
	    } else if (document.detachEvent) { //IE
	      document.detachEvent('onkeydown', this._onKeyDown);
	    }

	    //set the step to zero
	    this._currentStep = undefined;
	  }

	  /**
	   * Render tooltip box in the page
	   *
	   * @api private
	   * @method _placeTooltip
	   * @param {Object} targetElement
	   * @param {Object} tooltipLayer
	   * @param {Object} arrowLayer
	   */
	  function _placeTooltip(targetElement, tooltipLayer, arrowLayer, helperNumberLayer) {
	    var tooltipCssClass = '',
	        currentStepObj,
	        tooltipOffset,
	        targetElementOffset;

	    //reset the old style
	    tooltipLayer.style.top        = null;
	    tooltipLayer.style.right      = null;
	    tooltipLayer.style.bottom     = null;
	    tooltipLayer.style.left       = null;
	    tooltipLayer.style.marginLeft = null;
	    tooltipLayer.style.marginTop  = null;

	    arrowLayer.style.display = 'inherit';

	    if (typeof(helperNumberLayer) != 'undefined' && helperNumberLayer != null) {
	      helperNumberLayer.style.top  = null;
	      helperNumberLayer.style.left = null;
	    }

	    //prevent error when `this._currentStep` is undefined
	    if (!this._introItems[this._currentStep]) return;

	    //if we have a custom css class for each step
	    currentStepObj = this._introItems[this._currentStep];
	    if (typeof (currentStepObj.tooltipClass) === 'string') {
	      tooltipCssClass = currentStepObj.tooltipClass;
	    } else {
	      tooltipCssClass = this._options.tooltipClass;
	    }

	    tooltipLayer.className = ('introjs-tooltip ' + tooltipCssClass).replace(/^\s+|\s+$/g, '');

	    //custom css class for tooltip boxes
	    var tooltipCssClass = this._options.tooltipClass;

	    currentTooltipPosition = this._introItems[this._currentStep].position;
	    if ((currentTooltipPosition == "auto" || this._options.tooltipPosition == "auto")) {
	      if (currentTooltipPosition != "floating") { // Floating is always valid, no point in calculating
	        currentTooltipPosition = _determineAutoPosition.call(this, targetElement, tooltipLayer, currentTooltipPosition)
	      }
	    }
	    var targetOffset = _getOffset(targetElement)
	    var tooltipHeight = _getOffset(tooltipLayer).height
	    var windowSize = _getWinSize()
	    switch (currentTooltipPosition) {
	      case 'top':
	        tooltipLayer.style.left = '15px';
	        tooltipLayer.style.top = '-' + (tooltipHeight + 10) + 'px';
	        arrowLayer.className = 'introjs-arrow bottom';
	        break;
	      case 'right':
	        tooltipLayer.style.left = (_getOffset(targetElement).width + 20) + 'px';
	        if (targetOffset.top + tooltipHeight > windowSize.height) {
	          // In this case, right would have fallen below the bottom of the screen.
	          // Modify so that the bottom of the tooltip connects with the target
	          arrowLayer.className = "introjs-arrow left-bottom";
	          tooltipLayer.style.top = "-" + (tooltipHeight - targetOffset.height - 20) + "px"
	        }
	        arrowLayer.className = 'introjs-arrow left';
	        break;
	      case 'left':
	        if (this._options.showStepNumbers == true) {
	          tooltipLayer.style.top = '15px';
	        }

	        if (targetOffset.top + tooltipHeight > windowSize.height) {
	          // In this case, left would have fallen below the bottom of the screen.
	          // Modify so that the bottom of the tooltip connects with the target
	          tooltipLayer.style.top = "-" + (tooltipHeight - targetOffset.height - 20) + "px"
	          arrowLayer.className = 'introjs-arrow right-bottom';
	        } else {
	          arrowLayer.className = 'introjs-arrow right';
	        }
	        tooltipLayer.style.right = (targetOffset.width + 20) + 'px';


	        break;
	      case 'floating':
	        arrowLayer.style.display = 'none';

	        //we have to adjust the top and left of layer manually for intro items without element
	        tooltipOffset = _getOffset(tooltipLayer);

	        tooltipLayer.style.left   = '50%';
	        tooltipLayer.style.top    = '50%';
	        tooltipLayer.style.marginLeft = '-' + (tooltipOffset.width / 2)  + 'px';
	        tooltipLayer.style.marginTop  = '-' + (tooltipOffset.height / 2) + 'px';

	        if (typeof(helperNumberLayer) != 'undefined' && helperNumberLayer != null) {
	          helperNumberLayer.style.left = '-' + ((tooltipOffset.width / 2) + 18) + 'px';
	          helperNumberLayer.style.top  = '-' + ((tooltipOffset.height / 2) + 18) + 'px';
	        }

	        break;
	      case 'bottom-right-aligned':
	        arrowLayer.className      = 'introjs-arrow top-right';
	        tooltipLayer.style.right  = '0px';
	        tooltipLayer.style.bottom = '-' + (_getOffset(tooltipLayer).height + 10) + 'px';
	        break;
	      case 'bottom-middle-aligned':
	        targetElementOffset = _getOffset(targetElement);
	        tooltipOffset       = _getOffset(tooltipLayer);

	        arrowLayer.className      = 'introjs-arrow top-middle';
	        tooltipLayer.style.left   = (targetElementOffset.width / 2 - tooltipOffset.width / 2) + 'px';
	        tooltipLayer.style.bottom = '-' + (tooltipOffset.height + 10) + 'px';
	        break;
	      case 'bottom-left-aligned':
	      // Bottom-left-aligned is the same as the default bottom
	      case 'bottom':
	      // Bottom going to follow the default behavior
	      default:
	        tooltipLayer.style.bottom = '-' + (_getOffset(tooltipLayer).height + 10) + 'px';
	        tooltipLayer.style.left = (_getOffset(targetElement).width / 2 - _getOffset(tooltipLayer).width / 2) + 'px';

	        arrowLayer.className = 'introjs-arrow top';
	        break;
	    }
	  }

	  /**
	   * Determines the position of the tooltip based on the position precedence and availability
	   * of screen space.
	   *
	   * @param {Object} targetElement
	   * @param {Object} tooltipLayer
	   * @param {Object} desiredTooltipPosition
	   *
	   */
	  function _determineAutoPosition(targetElement, tooltipLayer, desiredTooltipPosition) {

	    // Take a clone of position precedence. These will be the available
	    var possiblePositions = this._options.positionPrecedence.slice()

	    var windowSize = _getWinSize()
	    var tooltipHeight = _getOffset(tooltipLayer).height + 10
	    var tooltipWidth = _getOffset(tooltipLayer).width + 20
	    var targetOffset = _getOffset(targetElement)

	    // If we check all the possible areas, and there are no valid places for the tooltip, the element
	    // must take up most of the screen real estate. Show the tooltip floating in the middle of the screen.
	    var calculatedPosition = "floating"

	    // Check if the width of the tooltip + the starting point would spill off the right side of the screen
	    // If no, neither bottom or top are valid
	    if (targetOffset.left + tooltipWidth > windowSize.width || ((targetOffset.left + (targetOffset.width / 2)) - tooltipWidth) < 0) {
	      _removeEntry(possiblePositions, "bottom")
	      _removeEntry(possiblePositions, "top");
	    } else {
	      // Check for space below
	      if ((targetOffset.height + targetOffset.top + tooltipHeight) > windowSize.height) {
	        _removeEntry(possiblePositions, "bottom")
	      }

	      // Check for space above
	      if (targetOffset.top - tooltipHeight < 0) {
	        _removeEntry(possiblePositions, "top");
	      }
	    }

	    // Check for space to the right
	    if (targetOffset.width + targetOffset.left + tooltipWidth > windowSize.width) {
	      _removeEntry(possiblePositions, "right");
	    }

	    // Check for space to the left
	    if (targetOffset.left - tooltipWidth < 0) {
	      _removeEntry(possiblePositions, "left");
	    }

	    // At this point, our array only has positions that are valid. Pick the first one, as it remains in order
	    if (possiblePositions.length > 0) {
	      calculatedPosition = possiblePositions[0];
	    }

	    // If the requested position is in the list, replace our calculated choice with that
	    if (desiredTooltipPosition && desiredTooltipPosition != "auto") {
	      if (possiblePositions.indexOf(desiredTooltipPosition) > -1) {
	        calculatedPosition = desiredTooltipPosition
	      }
	    }

	    return calculatedPosition
	  }

	  /**
	   * Remove an entry from a string array if it's there, does nothing if it isn't there.
	   *
	   * @param {Array} stringArray
	   * @param {String} stringToRemove
	   */
	  function _removeEntry(stringArray, stringToRemove) {
	    if (stringArray.indexOf(stringToRemove) > -1) {
	      stringArray.splice(stringArray.indexOf(stringToRemove), 1);
	    }
	  }

	  /**
	   * Update the position of the helper layer on the screen
	   *
	   * @api private
	   * @method _setHelperLayerPosition
	   * @param {Object} helperLayer
	   */
	  function _setHelperLayerPosition(helperLayer) {
	    if (helperLayer) {
	      //prevent error when `this._currentStep` in undefined
	      if (!this._introItems[this._currentStep]) return;

	      var currentElement  = this._introItems[this._currentStep],
	          elementPosition = _getOffset(currentElement.element),
	          widthHeightPadding = 10;

	      if (currentElement.position == 'floating') {
	        widthHeightPadding = 0;
	      }

	      //set new position to helper layer
	      helperLayer.setAttribute('style', 'width: ' + (elementPosition.width  + widthHeightPadding)  + 'px; ' +
	                                        'height:' + (elementPosition.height + widthHeightPadding)  + 'px; ' +
	                                        'top:'    + (elementPosition.top    - 5)   + 'px;' +
	                                        'left: '  + (elementPosition.left   - 5)   + 'px;');

	    }
	  }

	  /**
	   * Add disableinteraction layer and adjust the size and position of the layer
	   *
	   * @api private
	   * @method _disableInteraction
	   */
	  function _disableInteraction () {
	    var disableInteractionLayer = document.querySelector('.introjs-disableInteraction');
	    if (disableInteractionLayer === null) {
	      disableInteractionLayer = document.createElement('div');
	      disableInteractionLayer.className = 'introjs-disableInteraction';
	      this._targetElement.appendChild(disableInteractionLayer);
	    }

	    _setHelperLayerPosition.call(this, disableInteractionLayer);
	  }

	  /**
	   * Show an element on the page
	   *
	   * @api private
	   * @method _showElement
	   * @param {Object} targetElement
	   */
	  function _showElement(targetElement) {

	    if (typeof (this._introChangeCallback) !== 'undefined') {
	      this._introChangeCallback.call(this, targetElement.element);
	    }

	    var self = this,
	        oldHelperLayer = document.querySelector('.introjs-helperLayer'),
	        oldReferenceLayer = document.querySelector('.introjs-tooltipReferenceLayer'),
	        highlightClass = 'introjs-helperLayer',
	        elementPosition = _getOffset(targetElement.element);

	    //check for a current step highlight class
	    if (typeof (targetElement.highlightClass) === 'string') {
	      highlightClass += (' ' + targetElement.highlightClass);
	    }
	    //check for options highlight class
	    if (typeof (this._options.highlightClass) === 'string') {
	      highlightClass += (' ' + this._options.highlightClass);
	    }

	    if (oldHelperLayer != null) {
	      var oldHelperNumberLayer = oldReferenceLayer.querySelector('.introjs-helperNumberLayer'),
	          oldtooltipLayer      = oldReferenceLayer.querySelector('.introjs-tooltiptext'),
	          oldArrowLayer        = oldReferenceLayer.querySelector('.introjs-arrow'),
	          oldtooltipContainer  = oldReferenceLayer.querySelector('.introjs-tooltip'),
	          skipTooltipButton    = oldReferenceLayer.querySelector('.introjs-skipbutton'),
	          prevTooltipButton    = oldReferenceLayer.querySelector('.introjs-prevbutton'),
	          nextTooltipButton    = oldReferenceLayer.querySelector('.introjs-nextbutton');

	      //update or reset the helper highlight class
	      oldHelperLayer.className = highlightClass;
	      //hide the tooltip
	      oldtooltipContainer.style.opacity = 0;
	      oldtooltipContainer.style.display = "none";

	      if (oldHelperNumberLayer != null) {
	        var lastIntroItem = this._introItems[(targetElement.step - 2 >= 0 ? targetElement.step - 2 : 0)];

	        if (lastIntroItem != null && (this._direction == 'forward' && lastIntroItem.position == 'floating') || (this._direction == 'backward' && targetElement.position == 'floating')) {
	          oldHelperNumberLayer.style.opacity = 0;
	        }
	      }

	      //set new position to helper layer
	      _setHelperLayerPosition.call(self, oldHelperLayer);
	      _setHelperLayerPosition.call(self, oldReferenceLayer);

	      //remove `introjs-fixParent` class from the elements
	      var fixParents = document.querySelectorAll('.introjs-fixParent');
	      if (fixParents && fixParents.length > 0) {
	        for (var i = fixParents.length - 1; i >= 0; i--) {
	          fixParents[i].className = fixParents[i].className.replace(/introjs-fixParent/g, '').replace(/^\s+|\s+$/g, '');
	        };
	      }

	      //remove old classes
	      var oldShowElement = document.querySelector('.introjs-showElement');
	      oldShowElement.className = oldShowElement.className.replace(/introjs-[a-zA-Z]+/g, '').replace(/^\s+|\s+$/g, '');

	      //we should wait until the CSS3 transition is competed (it's 0.3 sec) to prevent incorrect `height` and `width` calculation
	      if (self._lastShowElementTimer) {
	        clearTimeout(self._lastShowElementTimer);
	      }
	      self._lastShowElementTimer = setTimeout(function() {
	        //set current step to the label
	        if (oldHelperNumberLayer != null) {
	          oldHelperNumberLayer.innerHTML = targetElement.step;
	        }
	        //set current tooltip text
	        oldtooltipLayer.innerHTML = targetElement.intro;
	        //set the tooltip position
	        oldtooltipContainer.style.display = "block";
	        _placeTooltip.call(self, targetElement.element, oldtooltipContainer, oldArrowLayer, oldHelperNumberLayer);

	        //change active bullet
	        oldReferenceLayer.querySelector('.introjs-bullets li > a.active').className = '';
	        oldReferenceLayer.querySelector('.introjs-bullets li > a[data-stepnumber="' + targetElement.step + '"]').className = 'active';

	        oldReferenceLayer.querySelector('.introjs-progress .introjs-progressbar').setAttribute('style', 'width:' + _getProgress.call(self) + '%;');

	        //show the tooltip
	        oldtooltipContainer.style.opacity = 1;
	        if (oldHelperNumberLayer) oldHelperNumberLayer.style.opacity = 1;

	        //reset button focus
	        if (nextTooltipButton.tabIndex === -1) {
	          //tabindex of -1 means we are at the end of the tour - focus on skip / done
	          skipTooltipButton.focus();
	        } else {
	          //still in the tour, focus on next
	          nextTooltipButton.focus();
	        }
	      }, 350);

	    } else {
	      var helperLayer       = document.createElement('div'),
	          referenceLayer    = document.createElement('div'),
	          arrowLayer        = document.createElement('div'),
	          tooltipLayer      = document.createElement('div'),
	          tooltipTextLayer  = document.createElement('div'),
	          bulletsLayer      = document.createElement('div'),
	          progressLayer     = document.createElement('div'),
	          buttonsLayer      = document.createElement('div');

	      helperLayer.className = highlightClass;
	      referenceLayer.className = 'introjs-tooltipReferenceLayer';

	      //set new position to helper layer
	      _setHelperLayerPosition.call(self, helperLayer);
	      _setHelperLayerPosition.call(self, referenceLayer);

	      //add helper layer to target element
	      this._targetElement.appendChild(helperLayer);
	      this._targetElement.appendChild(referenceLayer);

	      arrowLayer.className = 'introjs-arrow';

	      tooltipTextLayer.className = 'introjs-tooltiptext';
	      tooltipTextLayer.innerHTML = targetElement.intro;

	      bulletsLayer.className = 'introjs-bullets';

	      if (this._options.showBullets === false) {
	        bulletsLayer.style.display = 'none';
	      }


	      var ulContainer = document.createElement('ul');

	      for (var i = 0, stepsLength = this._introItems.length; i < stepsLength; i++) {
	        var innerLi    = document.createElement('li');
	        var anchorLink = document.createElement('a');

	        anchorLink.onclick = function() {
	          self.goToStep(this.getAttribute('data-stepnumber'));
	        };

	        if (i === (targetElement.step-1)) anchorLink.className = 'active';

	        anchorLink.href = 'javascript:void(0);';
	        anchorLink.innerHTML = "&nbsp;";
	        anchorLink.setAttribute('data-stepnumber', this._introItems[i].step);

	        innerLi.appendChild(anchorLink);
	        ulContainer.appendChild(innerLi);
	      }

	      bulletsLayer.appendChild(ulContainer);

	      progressLayer.className = 'introjs-progress';

	      if (this._options.showProgress === false) {
	        progressLayer.style.display = 'none';
	      }
	      var progressBar = document.createElement('div');
	      progressBar.className = 'introjs-progressbar';
	      progressBar.setAttribute('style', 'width:' + _getProgress.call(this) + '%;');

	      progressLayer.appendChild(progressBar);

	      buttonsLayer.className = 'introjs-tooltipbuttons';
	      if (this._options.showButtons === false) {
	        buttonsLayer.style.display = 'none';
	      }

	      tooltipLayer.className = 'introjs-tooltip';
	      tooltipLayer.appendChild(tooltipTextLayer);
	      tooltipLayer.appendChild(bulletsLayer);
	      tooltipLayer.appendChild(progressLayer);

	      //add helper layer number
	      if (this._options.showStepNumbers == true) {
	        var helperNumberLayer = document.createElement('span');
	        helperNumberLayer.className = 'introjs-helperNumberLayer';
	        helperNumberLayer.innerHTML = targetElement.step;
	        referenceLayer.appendChild(helperNumberLayer);
	      }

	      tooltipLayer.appendChild(arrowLayer);
	      referenceLayer.appendChild(tooltipLayer);

	      //next button
	      var nextTooltipButton = document.createElement('a');

	      nextTooltipButton.onclick = function(e) {
	        e.preventDefault();
	        if (self._introItems.length - 1 != self._currentStep) {
	          _nextStep.call(self);
	        }
	      };

	      nextTooltipButton.href = 'javascript:void(0);';
	      nextTooltipButton.innerHTML = this._options.nextLabel;

	      //previous button
	      var prevTooltipButton = document.createElement('a');

	      prevTooltipButton.onclick = function(e) {
	        e.preventDefault();
	        if (self._currentStep != 0) {
	          _previousStep.call(self);
	        }
	      };

	      prevTooltipButton.href = 'javascript:void(0);';
	      prevTooltipButton.innerHTML = this._options.prevLabel;

	      //skip button
	      var skipTooltipButton = document.createElement('a');
	      skipTooltipButton.className = 'introjs-button introjs-skipbutton';
	      skipTooltipButton.href = 'javascript:void(0);';
	      skipTooltipButton.innerHTML = this._options.skipLabel;

	      skipTooltipButton.onclick = function() {
	        if (self._introItems.length - 1 == self._currentStep && typeof (self._introCompleteCallback) === 'function') {
	          self._introCompleteCallback.call(self);
	        }

	        if (self._introItems.length - 1 != self._currentStep && typeof (self._introExitCallback) === 'function') {
	          self._introExitCallback.call(self);
	        }

	        _exitIntro.call(self, self._targetElement);
	      };

	      buttonsLayer.appendChild(skipTooltipButton);

	      //in order to prevent displaying next/previous button always
	      if (this._introItems.length > 1) {
	        buttonsLayer.appendChild(prevTooltipButton);
	        buttonsLayer.appendChild(nextTooltipButton);
	      }

	      tooltipLayer.appendChild(buttonsLayer);

	      //set proper position
	      _placeTooltip.call(self, targetElement.element, tooltipLayer, arrowLayer, helperNumberLayer);
	    }

	    //disable interaction
	    if (this._options.disableInteraction === true) {
	      _disableInteraction.call(self);
	    }

	    prevTooltipButton.removeAttribute('tabIndex');
	    nextTooltipButton.removeAttribute('tabIndex');

	    if (this._currentStep == 0 && this._introItems.length > 1) {
	      prevTooltipButton.className = 'introjs-button introjs-prevbutton introjs-disabled';
	      prevTooltipButton.tabIndex = '-1';
	      nextTooltipButton.className = 'introjs-button introjs-nextbutton';
	      skipTooltipButton.innerHTML = this._options.skipLabel;
	    } else if (this._introItems.length - 1 == this._currentStep || this._introItems.length == 1) {
	      skipTooltipButton.innerHTML = this._options.doneLabel;
	      prevTooltipButton.className = 'introjs-button introjs-prevbutton';
	      nextTooltipButton.className = 'introjs-button introjs-nextbutton introjs-disabled';
	      nextTooltipButton.tabIndex = '-1';
	    } else {
	      prevTooltipButton.className = 'introjs-button introjs-prevbutton';
	      nextTooltipButton.className = 'introjs-button introjs-nextbutton';
	      skipTooltipButton.innerHTML = this._options.skipLabel;
	    }

	    //Set focus on "next" button, so that hitting Enter always moves you onto the next step
	    nextTooltipButton.focus();

	    //add target element position style
	    targetElement.element.className += ' introjs-showElement';

	    var currentElementPosition = _getPropValue(targetElement.element, 'position');
	    if (currentElementPosition !== 'absolute' &&
	        currentElementPosition !== 'relative') {
	      //change to new intro item
	      targetElement.element.className += ' introjs-relativePosition';
	    }

	    var parentElm = targetElement.element.parentNode;
	    while (parentElm != null) {
	      if (parentElm.tagName.toLowerCase() === 'body') break;

	      //fix The Stacking Contenxt problem.
	      //More detail: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context
	      var zIndex = _getPropValue(parentElm, 'z-index');
	      var opacity = parseFloat(_getPropValue(parentElm, 'opacity'));
	      var transform = _getPropValue(parentElm, 'transform') || _getPropValue(parentElm, '-webkit-transform') || _getPropValue(parentElm, '-moz-transform') || _getPropValue(parentElm, '-ms-transform') || _getPropValue(parentElm, '-o-transform');
	      if (/[0-9]+/.test(zIndex) || opacity < 1 || transform !== 'none') {
	        parentElm.className += ' introjs-fixParent';
	      }

	      parentElm = parentElm.parentNode;
	    }

	    if (!_elementInViewport(targetElement.element) && this._options.scrollToElement === true) {
	      var rect = targetElement.element.getBoundingClientRect(),
	        winHeight = _getWinSize().height,
	        top = rect.bottom - (rect.bottom - rect.top),
	        bottom = rect.bottom - winHeight;

	      //Scroll up
	      if (top < 0 || targetElement.element.clientHeight > winHeight) {
	        window.scrollBy(0, top - 30); // 30px padding from edge to look nice

	      //Scroll down
	      } else {
	        window.scrollBy(0, bottom + 100); // 70px + 30px padding from edge to look nice
	      }
	    }

	    if (typeof (this._introAfterChangeCallback) !== 'undefined') {
	      this._introAfterChangeCallback.call(this, targetElement.element);
	    }
	  }

	  /**
	   * Get an element CSS property on the page
	   * Thanks to JavaScript Kit: http://www.javascriptkit.com/dhtmltutors/dhtmlcascade4.shtml
	   *
	   * @api private
	   * @method _getPropValue
	   * @param {Object} element
	   * @param {String} propName
	   * @returns Element's property value
	   */
	  function _getPropValue (element, propName) {
	    var propValue = '';
	    if (element.currentStyle) { //IE
	      propValue = element.currentStyle[propName];
	    } else if (document.defaultView && document.defaultView.getComputedStyle) { //Others
	      propValue = document.defaultView.getComputedStyle(element, null).getPropertyValue(propName);
	    }

	    //Prevent exception in IE
	    if (propValue && propValue.toLowerCase) {
	      return propValue.toLowerCase();
	    } else {
	      return propValue;
	    }
	  }

	  /**
	   * Provides a cross-browser way to get the screen dimensions
	   * via: http://stackoverflow.com/questions/5864467/internet-explorer-innerheight
	   *
	   * @api private
	   * @method _getWinSize
	   * @returns {Object} width and height attributes
	   */
	  function _getWinSize() {
	    if (window.innerWidth != undefined) {
	      return { width: window.innerWidth, height: window.innerHeight };
	    } else {
	      var D = document.documentElement;
	      return { width: D.clientWidth, height: D.clientHeight };
	    }
	  }

	  /**
	   * Add overlay layer to the page
	   * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport
	   *
	   * @api private
	   * @method _elementInViewport
	   * @param {Object} el
	   */
	  function _elementInViewport(el) {
	    var rect = el.getBoundingClientRect();

	    return (
	      rect.top >= 0 &&
	      rect.left >= 0 &&
	      (rect.bottom+80) <= window.innerHeight && // add 80 to get the text right
	      rect.right <= window.innerWidth
	    );
	  }

	  /**
	   * Add overlay layer to the page
	   *
	   * @api private
	   * @method _addOverlayLayer
	   * @param {Object} targetElm
	   */
	  function _addOverlayLayer(targetElm) {
	    var overlayLayer = document.createElement('div'),
	        styleText = '',
	        self = this;

	    //set css class name
	    overlayLayer.className = 'introjs-overlay';

	    //check if the target element is body, we should calculate the size of overlay layer in a better way
	    if (targetElm.tagName.toLowerCase() === 'body') {
	      styleText += 'top: 0;bottom: 0; left: 0;right: 0;position: fixed;';
	      overlayLayer.setAttribute('style', styleText);
	    } else {
	      //set overlay layer position
	      var elementPosition = _getOffset(targetElm);
	      if (elementPosition) {
	        styleText += 'width: ' + elementPosition.width + 'px; height:' + elementPosition.height + 'px; top:' + elementPosition.top + 'px;left: ' + elementPosition.left + 'px;';
	        overlayLayer.setAttribute('style', styleText);
	      }
	    }

	    targetElm.appendChild(overlayLayer);

	    overlayLayer.onclick = function() {
	      if (self._options.exitOnOverlayClick == true) {
	        _exitIntro.call(self, targetElm);

	        //check if any callback is defined
	        if (self._introExitCallback != undefined) {
	          self._introExitCallback.call(self);
	        }
	      }
	    };

	    setTimeout(function() {
	      styleText += 'opacity: ' + self._options.overlayOpacity.toString() + ';';
	      overlayLayer.setAttribute('style', styleText);
	    }, 10);

	    return true;
	  }

	  /**
	   * Get an element position on the page
	   * Thanks to `meouw`: http://stackoverflow.com/a/442474/375966
	   *
	   * @api private
	   * @method _getOffset
	   * @param {Object} element
	   * @returns Element's position info
	   */
	  function _getOffset(element) {
	    var elementPosition = {};

	    //set width
	    elementPosition.width = element.offsetWidth;

	    //set height
	    elementPosition.height = element.offsetHeight;

	    //calculate element top and left
	    var _x = 0;
	    var _y = 0;
	    while (element && !isNaN(element.offsetLeft) && !isNaN(element.offsetTop)) {
	      _x += element.offsetLeft;
	      _y += element.offsetTop;
	      element = element.offsetParent;
	    }
	    //set top
	    elementPosition.top = _y;
	    //set left
	    elementPosition.left = _x;

	    return elementPosition;
	  }

	  /**
	   * Gets the current progress percentage
	   *
	   * @api private
	   * @method _getProgress
	   * @returns current progress percentage
	   */
	  function _getProgress() {
	    // Steps are 0 indexed
	    var currentStep = parseInt((this._currentStep + 1), 10);
	    return ((currentStep / this._introItems.length) * 100);
	  }

	  /**
	   * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1
	   * via: http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically
	   *
	   * @param obj1
	   * @param obj2
	   * @returns obj3 a new object based on obj1 and obj2
	   */
	  function _mergeOptions(obj1,obj2) {
	    var obj3 = {};
	    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
	    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
	    return obj3;
	  }

	  var introJs = function (targetElm) {
	    if (typeof (targetElm) === 'object') {
	      //Ok, create a new instance
	      return new IntroJs(targetElm);

	    } else if (typeof (targetElm) === 'string') {
	      //select the target element with query selector
	      var targetElement = document.querySelector(targetElm);

	      if (targetElement) {
	        return new IntroJs(targetElement);
	      } else {
	        throw new Error('There is no element with given selector.');
	      }
	    } else {
	      return new IntroJs(document.body);
	    }
	  };

	  /**
	   * Current IntroJs version
	   *
	   * @property version
	   * @type String
	   */
	  introJs.version = VERSION;

	  //Prototype
	  introJs.fn = IntroJs.prototype = {
	    clone: function () {
	      return new IntroJs(this);
	    },
	    setOption: function(option, value) {
	      this._options[option] = value;
	      return this;
	    },
	    setOptions: function(options) {
	      this._options = _mergeOptions(this._options, options);
	      return this;
	    },
	    start: function () {
	      _introForElement.call(this, this._targetElement);
	      return this;
	    },
	    goToStep: function(step) {
	      _goToStep.call(this, step);
	      return this;
	    },
	    nextStep: function() {
	      _nextStep.call(this);
	      return this;
	    },
	    previousStep: function() {
	      _previousStep.call(this);
	      return this;
	    },
	    exit: function() {
	      _exitIntro.call(this, this._targetElement);
	      return this;
	    },
	    refresh: function() {
	      _setHelperLayerPosition.call(this, document.querySelector('.introjs-helperLayer'));
	      _setHelperLayerPosition.call(this, document.querySelector('.introjs-tooltipReferenceLayer'));
	      return this;
	    },
	    onbeforechange: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introBeforeChangeCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for onbeforechange was not a function');
	      }
	      return this;
	    },
	    onchange: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introChangeCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for onchange was not a function.');
	      }
	      return this;
	    },
	    onafterchange: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introAfterChangeCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for onafterchange was not a function');
	      }
	      return this;
	    },
	    oncomplete: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introCompleteCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for oncomplete was not a function.');
	      }
	      return this;
	    },
	    onexit: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introExitCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for onexit was not a function.');
	      }
	      return this;
	    }
	  };

	  exports.introJs = introJs;
	  return introJs;
	}));


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var normalize = __webpack_require__(105);
	var Emitter = __webpack_require__(41);
	var file = __webpack_require__(106);

	/**
	 * Expose `Clipboard`.
	 */

	module.exports = Clipboard;

	/**
	 * Initialize a `Clipboard`.
	 *
	 * @api private
	 */

	function Clipboard(el) {
	  Emitter.call(this);
	  this.el = el;
	  this.onpaste = this.onpaste.bind(this);
	  this.oncopy = this.oncopy.bind(this);
	  this.oncut = this.oncut.bind(this);
	  this.bind();
	}

	/**
	 * Mixin emitter.
	 */

	Emitter(Clipboard.prototype);

	/**
	 * Bind event handlers.
	 *
	 * @api public
	 */

	Clipboard.prototype.bind = function(){
	  this.el.addEventListener('paste', this.onpaste, false);
	  this.el.addEventListener('copy', this.oncopy, false);
	  this.el.addEventListener('cut', this.oncut, false);
	};

	/**
	 * Unbind event handlers.
	 *
	 * @api public
	 */

	Clipboard.prototype.unbind = function(arg){
	  this.el.removeEventListener('paste', this.onpaste);
	  this.el.removeEventListener('copy', this.oncopy);
	  this.el.removeEventListener('cut', this.oncut);
	};

	/**
	 * Handle copy.
	 */

	Clipboard.prototype.oncopy = function(e){
	  this.emit('copy', e);
	};

	/**
	 * Handle cut.
	 */

	Clipboard.prototype.oncut = function(e){
	  this.emit('cut', e);
	};

	/**
	 * Handle paste.
	 */

	Clipboard.prototype.onpaste = function(e){
	  var self = this;
	  normalize(e, function(){
	    self.emit('paste', e);
	  });
	};


/***/ },
/* 105 */
/***/ function(module, exports) {

	
	/**
	 * Expose `normalize()`.
	 */

	module.exports = normalize;

	/**
	 * Get `type` from `e` on .clipboardData or .dataTransfer.
	 *
	 * @param {Event} e
	 * @param {String} type
	 * @return {Array}
	 * @api private
	 */

	function get(e, type) {
	  if (e.clipboardData) return e.clipboardData[type] || [];
	  if (e.dataTransfer) return e.dataTransfer[type] || [];
	  return [];
	}

	/**
	 * Normalize `e` adding the `e.items` array and invoke `fn()`.
	 *
	 * @param {Event} e
	 * @param {Function} fn
	 * @api public
	 */

	function normalize(e, fn) {
	  e.items = [];

	  var ignore = [];
	  var files = get(e, 'files');
	  var items = get(e, 'items');

	  normalizeItems(e, items, ignore, function(){
	    normalizeFiles(e, files, ignore, function(){
	      fn(e)
	    });
	  });
	}

	/**
	 * Process `files`.
	 *
	 * Some browsers (chrome) populate both .items and .files
	 * with the same things, so we need to check that the `File`
	 * is not already present.
	 *
	 * @param {Event} e
	 * @param {FileList} files
	 * @param {Function} fn
	 * @api private
	 */

	function normalizeFiles(e, files, ignore, fn) {
	  var pending = files.length;

	  if (!pending) return fn();

	  for (var i = 0; i < files.length; i++) {
	    var file = files[i];
	    if (~ignore.indexOf(file)) continue;
	    if (~e.items.indexOf(file)) continue;
	    file.kind = 'file';
	    e.items.push(file);
	  }

	  fn();
	}

	/**
	 * Process `items`.
	 *
	 * @param {Event} e
	 * @param {ItemList} items
	 * @param {Function} fn
	 * @return {Type}
	 * @api private
	 */

	function normalizeItems(e, items, ignore, fn){
	  var pending = items.length;

	  if (!pending) return fn();

	  for (var i = 0; i < items.length; i++) {
	    var item = items[i];

	    // directories
	    if ('file' == item.kind && item.webkitGetAsEntry) {
	      var entry = item.webkitGetAsEntry();
	      if (entry && entry.isDirectory) {
	        ignore.push(item.getAsFile());
	        walk(e, entry, function(){
	          --pending || fn(e);
	        });
	        continue;
	      }
	    }

	    // files
	    if ('file' == item.kind) {
	      var file = item.getAsFile();
	      file.kind = 'file';
	      e.items.push(file);
	      --pending || fn(e);
	      continue;
	    }

	    // others
	    (function(){
	      var type = item.type;
	      var kind = item.kind;
	      item.getAsString(function(str){
	        e.items.push({
	          kind: kind,
	          type: type,
	          string: str
	        });

	        --pending || fn(e);
	      })
	    })()
	  }
	};

	/**
	 * Walk `entry`.
	 *
	 * @param {Event} e
	 * @param {FileEntry} entry
	 * @param {Function} fn
	 * @api private
	 */

	function walk(e, entry, fn){
	  if (entry.isFile) {
	    return entry.file(function(file){
	      file.entry = entry;
	      file.kind = 'file';
	      e.items.push(file);
	      fn();
	    })
	  }

	  if (entry.isDirectory) {
	    var dir = entry.createReader();
	    dir.readEntries(function(entries){
	      entries = filterHidden(entries);
	      var pending = entries.length;

	      for (var i = 0; i < entries.length; i++) {
	        walk(e, entries[i], function(){
	          --pending || fn();
	        });
	      }
	    })
	  }
	}

	/**
	 * Filter hidden entries.
	 *
	 * @param {Array} entries
	 * @return {Array}
	 * @api private
	 */

	function filterHidden(entries) {
	  var arr = [];

	  for (var i = 0; i < entries.length; i++) {
	    if ('.' == entries[i].name[0]) continue;
	    arr.push(entries[i]);
	  }

	  return arr;
	}


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var file = __webpack_require__(107)
	  , reader = __webpack_require__(108);

	/**
	 * Expose `file()`.
	 */

	exports = module.exports = file;

	/**
	 * Expose `reader()`.
	 */

	exports.reader = reader;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var Emitter = __webpack_require__(41)
	  , Reader = __webpack_require__(108);

	/**
	 * Expose `file()`.
	 */

	module.exports = file;

	/**
	 * Initialize a new `File` wrapping `file`.
	 *
	 * @param {File} file
	 * @return {File}
	 * @api public
	 */

	function file(file) {
	  return new File(file);
	}

	/**
	 * Initialize a new `File` wrapper.
	 *
	 * @param {File} file
	 * @api private
	 */

	function File(file) {
	  Emitter.call(this);
	  this.file = file;
	  for (var key in file) this[key] = file[key];
	}

	/**
	 * Inherits from `Emitter.prototype`.
	 */

	Emitter(File.prototype);

	/**
	 * Check if the mime type matches `type`.
	 *
	 * Examples:
	 *
	 *    file.is('image/jpeg')
	 *    file.is('image/*')
	 *
	 * @param {String} type
	 * @return {Boolean}
	 * @api public
	 */

	File.prototype.is = function(type){
	  var real = this.file.type;

	  // identical
	  if (type == real) return true;

	  real = real.split('/');
	  type = type.split('/');

	  // type/*
	  if (type[0] == real[0] && type[1] == '*') return true;

	  // */subtype
	  if (type[1] == real[1] && type[0] == '*') return true;

	  return false;
	};

	/**
	 * Convert to `type` and invoke `fn(err, result)`.
	 *
	 * @param {String} type
	 * @param {Function} fn
	 * @return {Reader}
	 * @api private
	 */

	File.prototype.to = function(type, fn){
	  if (!window.FileReader) return fn();
	  var reader = Reader();
	  reader.on('error', fn);
	  reader.on('end', function(res){ fn(null, res) });
	  reader.read(this.file, type);
	  return reader;
	};

	/**
	 * Convert to an `ArrayBuffer`.
	 *
	 * @param {Function} fn
	 * @return {Reader}
	 * @api public
	 */

	File.prototype.toArrayBuffer = function(fn){
	  return this.to('ArrayBuffer', fn);
	};

	/**
	 * Convert to text.
	 *
	 * @param {Function} fn
	 * @return {Reader}
	 * @api public
	 */

	File.prototype.toText = function(fn){
	  // TODO: encoding
	  return this.to('Text', fn);
	};

	/**
	 * Convert to a data uri.
	 *
	 * @param {Function} fn
	 * @return {Reader}
	 * @api public
	 */

	File.prototype.toDataURL = function(fn){
	  return this.to('DataURL', fn);
	};


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var Emitter = __webpack_require__(41);

	/**
	 * Expose `reader()`.
	 */

	module.exports = reader;

	/**
	 * Initialize a new `Reader` from optional `reader`
	 * or a new `FileReader` is created.
	 *
	 * @param {FileReader} reader
	 * @return {Reader}
	 * @api public
	 */

	function reader(reader) {
	  return reader
	    ? new Reader(reader)
	    : new Reader(new FileReader);
	}

	/**
	 * Initialize a new `Reader`, a wrapper
	 * around a `FileReader`.
	 *
	 * Emits:
	 *
	 *   - `error` an error occurred
	 *   - `progress` in progress (`e.percent` etc)
	 *   - `end` read is complete
	 *
	 * @param {FileReader} reader
	 * @api private
	 */

	function Reader(reader) {
	  Emitter.call(this);
	  this.reader = reader;
	  reader.onerror = this.emit.bind(this, 'error');
	  reader.onabort = this.emit.bind(this, 'error', new Error('abort'));
	  reader.onprogress = this.onprogress.bind(this);
	  reader.onload = this.onload.bind(this);
	}

	/**
	 * Inherits from `Emitter.prototype`.
	 */

	Emitter(Reader.prototype);

	/**
	 * Onload handler.
	 * 
	 * @api private
	 */

	Reader.prototype.onload = function(e){
	  this.emit('end', this.reader.result);
	};

	/**
	 * Progress handler.
	 * 
	 * @api private
	 */

	Reader.prototype.onprogress = function(e){
	  e.percent = e.loaded / e.total * 100 | 0;
	  this.emit('progress', e);
	};

	/**
	 * Abort.
	 *
	 * @api public
	 */

	Reader.prototype.abort = function(){
	  this.reader.abort();
	};

	/**
	 * Read `file` as `type`.
	 *
	 * @param {File} file
	 * @param {String} type
	 * @api private
	 */

	Reader.prototype.read = function(file, type){
	  var method = 'readAs' + type;
	  this.reader[method](file);
	};



/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var drop = __webpack_require__(110);
	var events = __webpack_require__(112);
	var classes = __webpack_require__(99);

	/**
	 * Expose `DropAnywhere`.
	 */

	module.exports = DropAnywhere;

	/**
	 * Make the document droppable and invoke `fn(err, upload)`.
	 *
	 * @param {Function} fn
	 * @api public
	 */

	function DropAnywhere(fn, el) {
	  if (!(this instanceof DropAnywhere)) return new DropAnywhere(fn, el);
	  this.callback = fn;
	  this.el = el;
	  this.events = events(this.el, this);
	  this.classes = classes(this.el);
	  this.winEvents = events(window, this);
	  this.events.bind('click', 'hide');
	  this.events.bind('drop', 'hide');
	  this.events.bind('dragleave', 'hide');
	  this.winEvents.bind('dragenter', 'show');
	  this.drop = drop(this.el, this.callback);
	  this.add();
	}

	/**
	 * Add the element.
	 */

	DropAnywhere.prototype.add = function(){
	  document.body.appendChild(this.el);
	};

	/**
	 * Remove the element.
	 */

	DropAnywhere.prototype.remove = function(){
	  document.body.removeChild(this.el);
	};

	/**
	 * Show the dropzone.
	 */

	DropAnywhere.prototype.show = function(e){
		var dt = e.dataTransfer;
		
		//this condtition makes drop-anywhere work
		//for desktop files exclusively
		if(dt.types != null && (dt.types.indexOf ? dt.types.indexOf('Files') != -1 : dt.types.contains('application/x-moz-file'))) {
			this.classes.add('show');
		}
	};

	/**
	 * Hide the dropzone.
	 */

	DropAnywhere.prototype.hide = function(){
	  this.classes.remove('show');
	};

	/**
	 * Unbind.
	 *
	 * @api public
	 */

	DropAnywhere.prototype.unbind = function(){
	  this.remove();
	  this.winEvents.unbind();
	  this.events.unbind();
	  this.drop.unbind();
	};


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var normalize = __webpack_require__(111);
	var classes = __webpack_require__(99);
	var events = __webpack_require__(112);

	/**
	 * Expose `Drop`.
	 */

	module.exports = Drop;

	/**
	 * Initialize a drop point
	 * on the given `el` and callback `fn(e)`.
	 *
	 * @param {Element} el
	 * @param {Function} fn
	 * @api public
	 */

	function Drop(el, fn) {
	  if (!(this instanceof Drop)) return new Drop(el, fn);
	  this.el = el;
	  this.callback = fn;
	  this.classes = classes(el);
	  this.events = events(el, this);
	  this.events.bind('drop');
	  this.events.bind('dragenter');
	  this.events.bind('dragleave');
	  this.events.bind('dragover');

	  // HTML5 "dragenter" and "dragleave" events kinda suck... since they get fired
	  // even for child nodes within the target droppable element, we need to do some
	  // additional bookkeeping to only add/remove the "over" class on the real target
	  this.first = false;
	  this.second = false;
	}

	/**
	 * Unbind event handlers.
	 *
	 * @api public
	 */

	Drop.prototype.unbind = function(){
	  this.events.unbind();
	};

	/**
	 * Dragenter handler.
	 */

	Drop.prototype.ondragenter = function(e){
	  if (this.first) {
	    this.second = true;
	  } else {
	    this.first = true;
	    this.classes.add('over');
	  }
	};

	/**
	 * Dragover handler.
	 */

	Drop.prototype.ondragover = function(e){
	  e.preventDefault();
	};

	/**
	 * Dragleave handler.
	 */

	Drop.prototype.ondragleave = function(e){
	  if (this.second) {
	    this.second = false;
	  } else if (this.first) {
	    this.first = false;
	  }
	  if (!this.first && !this.second) {
	    this.classes.remove('over');
	  }
	};

	/**
	 * Drop handler.
	 */

	Drop.prototype.ondrop = function(e){
	  e.stopPropagation();
	  e.preventDefault();
	  this.classes.remove('over');
	  normalize(e, this.callback);
	};


/***/ },
/* 111 */
/***/ function(module, exports) {

	
	/**
	 * Expose `normalize()`.
	 */

	module.exports = normalize;

	/**
	 * Get `type` from `e` on .clipboardData or .dataTransfer.
	 *
	 * @param {Event} e
	 * @param {String} type
	 * @return {Array}
	 * @api private
	 */

	function get(e, type) {
	  if (e.clipboardData) return e.clipboardData[type] || [];
	  if (e.dataTransfer) return e.dataTransfer[type] || [];
	  return [];
	}

	/**
	 * Normalize `e` adding the `e.items` array and invoke `fn()`.
	 *
	 * @param {Event} e
	 * @param {Function} fn
	 * @api public
	 */

	function normalize(e, fn) {
	  e.items = [];

	  var ignore = [];
	  var files = get(e, 'files');
	  var items = get(e, 'items');

	  normalizeItems(e, items, ignore, function(){
	    normalizeFiles(e, files, ignore, function(){
	      fn(e)
	    });
	  });
	}

	/**
	 * Process `files`.
	 *
	 * Some browsers (chrome) populate both .items and .files
	 * with the same things, so we need to check that the `File`
	 * is not already present.
	 *
	 * @param {Event} e
	 * @param {FileList} files
	 * @param {Function} fn
	 * @api private
	 */

	function normalizeFiles(e, files, ignore, fn) {
	  var pending = files.length;

	  if (!pending) return fn();

	  for (var i = 0; i < files.length; i++) {
	    var file = files[i];
	    if (~ignore.indexOf(file)) continue;
	    if (~e.items.indexOf(file)) continue;
	    file.kind = 'file';
	    e.items.push(file);
	  }

	  fn();
	}

	/**
	 * Process `items`.
	 *
	 * @param {Event} e
	 * @param {ItemList} items
	 * @param {Function} fn
	 * @return {Type}
	 * @api private
	 */

	function normalizeItems(e, items, ignore, fn){
	  var pending = items.length;

	  if (!pending) return fn();

	  for (var i = 0; i < items.length; i++) {
	    var item = items[i];

	    // directories
	    if ('file' == item.kind && item.webkitGetAsEntry) {
	      var entry = item.webkitGetAsEntry();
	      if (entry && entry.isDirectory) {
	        ignore.push(item.getAsFile());
	        walk(e, entry, function(){
	          --pending || fn(e);
	        });
	        continue;
	      }
	    }

	    // files
	    if ('file' == item.kind) {
	      var file = item.getAsFile();
	      file.kind = 'file';
	      e.items.push(file);
	      --pending || fn(e);
	      continue;
	    }

	    // others
	    (function(){
	      var type = item.type;
	      var kind = item.kind;
	      item.getAsString(function(str){
	        e.items.push({
	          kind: kind,
	          type: type,
	          string: str
	        });

	        --pending || fn(e);
	      })
	    })()
	  }
	};

	/**
	 * Walk `entry`.
	 *
	 * @param {Event} e
	 * @param {FileEntry} entry
	 * @param {Function} fn
	 * @api private
	 */

	function walk(e, entry, fn){
	  if (entry.isFile) {
	    return entry.file(function(file){
	      file.entry = entry;
	      file.kind = 'file';
	      e.items.push(file);
	      fn();
	    })
	  }

	  if (entry.isDirectory) {
	    var dir = entry.createReader();
	    dir.readEntries(function(entries){
	      entries = filterHidden(entries);
	      var pending = entries.length;

	      for (var i = 0; i < entries.length; i++) {
	        walk(e, entries[i], function(){
	          --pending || fn();
	        });
	      }
	    })
	  }
	}

	/**
	 * Filter hidden entries.
	 *
	 * @param {Array} entries
	 * @return {Array}
	 * @api private
	 */

	function filterHidden(entries) {
	  var arr = [];

	  for (var i = 0; i < entries.length; i++) {
	    if ('.' == entries[i].name[0]) continue;
	    arr.push(entries[i]);
	  }

	  return arr;
	}


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var events = __webpack_require__(113);
	var delegate = __webpack_require__(114);

	/**
	 * Expose `Events`.
	 */

	module.exports = Events;

	/**
	 * Initialize an `Events` with the given
	 * `el` object which events will be bound to,
	 * and the `obj` which will receive method calls.
	 *
	 * @param {Object} el
	 * @param {Object} obj
	 * @api public
	 */

	function Events(el, obj) {
	  if (!(this instanceof Events)) return new Events(el, obj);
	  if (!el) throw new Error('element required');
	  if (!obj) throw new Error('object required');
	  this.el = el;
	  this.obj = obj;
	  this._events = {};
	}

	/**
	 * Subscription helper.
	 */

	Events.prototype.sub = function(event, method, cb){
	  this._events[event] = this._events[event] || {};
	  this._events[event][method] = cb;
	};

	/**
	 * Bind to `event` with optional `method` name.
	 * When `method` is undefined it becomes `event`
	 * with the "on" prefix.
	 *
	 * Examples:
	 *
	 *  Direct event handling:
	 *
	 *    events.bind('click') // implies "onclick"
	 *    events.bind('click', 'remove')
	 *    events.bind('click', 'sort', 'asc')
	 *
	 *  Delegated event handling:
	 *
	 *    events.bind('click li > a')
	 *    events.bind('click li > a', 'remove')
	 *    events.bind('click a.sort-ascending', 'sort', 'asc')
	 *    events.bind('click a.sort-descending', 'sort', 'desc')
	 *
	 * @param {String} event
	 * @param {String|function} [method]
	 * @return {Function} callback
	 * @api public
	 */

	Events.prototype.bind = function(event, method){
	  var e = parse(event);
	  var el = this.el;
	  var obj = this.obj;
	  var name = e.name;
	  var method = method || 'on' + name;
	  var args = [].slice.call(arguments, 2);

	  // callback
	  function cb(){
	    var a = [].slice.call(arguments).concat(args);
	    obj[method].apply(obj, a);
	  }

	  // bind
	  if (e.selector) {
	    cb = delegate.bind(el, e.selector, name, cb);
	  } else {
	    events.bind(el, name, cb);
	  }

	  // subscription for unbinding
	  this.sub(name, method, cb);

	  return cb;
	};

	/**
	 * Unbind a single binding, all bindings for `event`,
	 * or all bindings within the manager.
	 *
	 * Examples:
	 *
	 *  Unbind direct handlers:
	 *
	 *     events.unbind('click', 'remove')
	 *     events.unbind('click')
	 *     events.unbind()
	 *
	 * Unbind delegate handlers:
	 *
	 *     events.unbind('click', 'remove')
	 *     events.unbind('click')
	 *     events.unbind()
	 *
	 * @param {String|Function} [event]
	 * @param {String|Function} [method]
	 * @api public
	 */

	Events.prototype.unbind = function(event, method){
	  if (0 == arguments.length) return this.unbindAll();
	  if (1 == arguments.length) return this.unbindAllOf(event);

	  // no bindings for this event
	  var bindings = this._events[event];
	  if (!bindings) return;

	  // no bindings for this method
	  var cb = bindings[method];
	  if (!cb) return;

	  events.unbind(this.el, event, cb);
	};

	/**
	 * Unbind all events.
	 *
	 * @api private
	 */

	Events.prototype.unbindAll = function(){
	  for (var event in this._events) {
	    this.unbindAllOf(event);
	  }
	};

	/**
	 * Unbind all events for `event`.
	 *
	 * @param {String} event
	 * @api private
	 */

	Events.prototype.unbindAllOf = function(event){
	  var bindings = this._events[event];
	  if (!bindings) return;

	  for (var method in bindings) {
	    this.unbind(event, method);
	  }
	};

	/**
	 * Parse `event`.
	 *
	 * @param {String} event
	 * @return {Object}
	 * @api private
	 */

	function parse(event) {
	  var parts = event.split(/ +/);
	  return {
	    name: parts.shift(),
	    selector: parts.join(' ')
	  }
	}


/***/ },
/* 113 */
/***/ function(module, exports) {

	var bind = window.addEventListener ? 'addEventListener' : 'attachEvent',
	    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
	    prefix = bind !== 'addEventListener' ? 'on' : '';

	/**
	 * Bind `el` event `type` to `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	exports.bind = function(el, type, fn, capture){
	  el[bind](prefix + type, fn, capture || false);
	  return fn;
	};

	/**
	 * Unbind `el` event `type`'s callback `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	exports.unbind = function(el, type, fn, capture){
	  el[unbind](prefix + type, fn, capture || false);
	  return fn;
	};

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var closest = __webpack_require__(65)
	  , event = __webpack_require__(113);

	/**
	 * Delegate event `type` to `selector`
	 * and invoke `fn(e)`. A callback function
	 * is returned which may be passed to `.unbind()`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	exports.bind = function(el, selector, type, fn, capture){
	  return event.bind(el, type, function(e){
	    var target = e.target || e.srcElement;
	    e.delegateTarget = closest(target, selector, true, el);
	    if (e.delegateTarget) fn.call(el, e);
	  }, capture);
	};

	/**
	 * Unbind event `type`'s callback `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @api public
	 */

	exports.unbind = function(el, type, fn, capture){
	  event.unbind(el, type, fn, capture);
	};


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This script gives you the zone info key representing your device's time zone setting.
	 *
	 * @name jsTimezoneDetect
	 * @version 1.0.5
	 * @author Jon Nylander
	 * @license MIT License - http://www.opensource.org/licenses/mit-license.php
	 *
	 * For usage and examples, visit:
	 * http://pellepim.bitbucket.org/jstz/
	 *
	 * Copyright (c) Jon Nylander
	 */

	/*jslint undef: true */
	/*global console, exports*/

	(function(root) {
	  /**
	   * Namespace to hold all the code for timezone detection.
	   */
	  var jstz = (function () {
	      'use strict';
	      var HEMISPHERE_SOUTH = 's',

	          /**
	           * Gets the offset in minutes from UTC for a certain date.
	           * @param {Date} date
	           * @returns {Number}
	           */
	          get_date_offset = function (date) {
	              var offset = -date.getTimezoneOffset();
	              return (offset !== null ? offset : 0);
	          },

	          get_date = function (year, month, date) {
	              var d = new Date();
	              if (year !== undefined) {
	                d.setFullYear(year);
	              }
	              d.setMonth(month);
	              d.setDate(date);
	              return d;
	          },

	          get_january_offset = function (year) {
	              return get_date_offset(get_date(year, 0 ,2));
	          },

	          get_june_offset = function (year) {
	              return get_date_offset(get_date(year, 5, 2));
	          },

	          /**
	           * Private method.
	           * Checks whether a given date is in daylight saving time.
	           * If the date supplied is after august, we assume that we're checking
	           * for southern hemisphere DST.
	           * @param {Date} date
	           * @returns {Boolean}
	           */
	          date_is_dst = function (date) {
	              var is_southern = date.getMonth() > 7,
	                  base_offset = is_southern ? get_june_offset(date.getFullYear()) :
	                                              get_january_offset(date.getFullYear()),
	                  date_offset = get_date_offset(date),
	                  is_west = base_offset < 0,
	                  dst_offset = base_offset - date_offset;

	              if (!is_west && !is_southern) {
	                  return dst_offset < 0;
	              }

	              return dst_offset !== 0;
	          },

	          /**
	           * This function does some basic calculations to create information about
	           * the user's timezone. It uses REFERENCE_YEAR as a solid year for which
	           * the script has been tested rather than depend on the year set by the
	           * client device.
	           *
	           * Returns a key that can be used to do lookups in jstz.olson.timezones.
	           * eg: "720,1,2".
	           *
	           * @returns {String}
	           */

	          lookup_key = function () {
	              var january_offset = get_january_offset(),
	                  june_offset = get_june_offset(),
	                  diff = january_offset - june_offset;

	              if (diff < 0) {
	                  return january_offset + ",1";
	              } else if (diff > 0) {
	                  return june_offset + ",1," + HEMISPHERE_SOUTH;
	              }

	              return january_offset + ",0";
	          },

	          /**
	           * Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.
	           *
	           * Returns a primitive object on the format:
	           * {'timezone': TimeZone, 'key' : 'the key used to find the TimeZone object'}
	           *
	           * @returns Object
	           */
	          determine = function () {
	              var key = lookup_key();
	              return new jstz.TimeZone(jstz.olson.timezones[key]);
	          },

	          /**
	           * This object contains information on when daylight savings starts for
	           * different timezones.
	           *
	           * The list is short for a reason. Often we do not have to be very specific
	           * to single out the correct timezone. But when we do, this list comes in
	           * handy.
	           *
	           * Each value is a date denoting when daylight savings starts for that timezone.
	           */
	          dst_start_for = function (tz_name) {

	            var ru_pre_dst_change = new Date(2010, 6, 15, 1, 0, 0, 0), // In 2010 Russia had DST, this allows us to detect Russia :)
	                dst_starts = {
	                    'America/Denver': new Date(2011, 2, 13, 3, 0, 0, 0),
	                    'America/Mazatlan': new Date(2011, 3, 3, 3, 0, 0, 0),
	                    'America/Chicago': new Date(2011, 2, 13, 3, 0, 0, 0),
	                    'America/Mexico_City': new Date(2011, 3, 3, 3, 0, 0, 0),
	                    'America/Asuncion': new Date(2012, 9, 7, 3, 0, 0, 0),
	                    'America/Santiago': new Date(2012, 9, 3, 3, 0, 0, 0),
	                    'America/Campo_Grande': new Date(2012, 9, 21, 5, 0, 0, 0),
	                    'America/Montevideo': new Date(2011, 9, 2, 3, 0, 0, 0),
	                    'America/Sao_Paulo': new Date(2011, 9, 16, 5, 0, 0, 0),
	                    'America/Los_Angeles': new Date(2011, 2, 13, 8, 0, 0, 0),
	                    'America/Santa_Isabel': new Date(2011, 3, 5, 8, 0, 0, 0),
	                    'America/Havana': new Date(2012, 2, 10, 2, 0, 0, 0),
	                    'America/New_York': new Date(2012, 2, 10, 7, 0, 0, 0),
	                    'Europe/Helsinki': new Date(2013, 2, 31, 5, 0, 0, 0),
	                    'Pacific/Auckland': new Date(2011, 8, 26, 7, 0, 0, 0),
	                    'America/Halifax': new Date(2011, 2, 13, 6, 0, 0, 0),
	                    'America/Goose_Bay': new Date(2011, 2, 13, 2, 1, 0, 0),
	                    'America/Miquelon': new Date(2011, 2, 13, 5, 0, 0, 0),
	                    'America/Godthab': new Date(2011, 2, 27, 1, 0, 0, 0),
	                    'Europe/Moscow': ru_pre_dst_change,
	                    'Asia/Amman': new Date(2013, 2, 29, 1, 0, 0, 0),
	                    'Asia/Beirut': new Date(2013, 2, 31, 2, 0, 0, 0),
	                    'Asia/Damascus': new Date(2013, 3, 6, 2, 0, 0, 0),
	                    'Asia/Jerusalem': new Date(2013, 2, 29, 5, 0, 0, 0),
	                    'Asia/Yekaterinburg': ru_pre_dst_change,
	                    'Asia/Omsk': ru_pre_dst_change,
	                    'Asia/Krasnoyarsk': ru_pre_dst_change,
	                    'Asia/Irkutsk': ru_pre_dst_change,
	                    'Asia/Yakutsk': ru_pre_dst_change,
	                    'Asia/Vladivostok': ru_pre_dst_change,
	                    'Asia/Baku': new Date(2013, 2, 31, 4, 0, 0),
	                    'Asia/Yerevan': new Date(2013, 2, 31, 3, 0, 0),
	                    'Asia/Kamchatka': ru_pre_dst_change,
	                    'Asia/Gaza': new Date(2010, 2, 27, 4, 0, 0),
	                    'Africa/Cairo': new Date(2010, 4, 1, 3, 0, 0),
	                    'Europe/Minsk': ru_pre_dst_change,
	                    'Pacific/Apia': new Date(2010, 10, 1, 1, 0, 0, 0),
	                    'Pacific/Fiji': new Date(2010, 11, 1, 0, 0, 0),
	                    'Australia/Perth': new Date(2008, 10, 1, 1, 0, 0, 0)
	                };

	              return dst_starts[tz_name];
	          };

	      return {
	          determine: determine,
	          date_is_dst: date_is_dst,
	          dst_start_for: dst_start_for
	      };
	  }());

	  /**
	   * Simple object to perform ambiguity check and to return name of time zone.
	   */
	  jstz.TimeZone = function (tz_name) {
	      'use strict';
	        /**
	         * The keys in this object are timezones that we know may be ambiguous after
	         * a preliminary scan through the olson_tz object.
	         *
	         * The array of timezones to compare must be in the order that daylight savings
	         * starts for the regions.
	         */
	      var AMBIGUITIES = {
	              'America/Denver':       ['America/Denver', 'America/Mazatlan'],
	              'America/Chicago':      ['America/Chicago', 'America/Mexico_City'],
	              'America/Santiago':     ['America/Santiago', 'America/Asuncion', 'America/Campo_Grande'],
	              'America/Montevideo':   ['America/Montevideo', 'America/Sao_Paulo'],
	              'Asia/Beirut':          ['Asia/Amman', 'Asia/Jerusalem', 'Asia/Beirut', 'Europe/Helsinki','Asia/Damascus'],
	              'Pacific/Auckland':     ['Pacific/Auckland', 'Pacific/Fiji'],
	              'America/Los_Angeles':  ['America/Los_Angeles', 'America/Santa_Isabel'],
	              'America/New_York':     ['America/Havana', 'America/New_York'],
	              'America/Halifax':      ['America/Goose_Bay', 'America/Halifax'],
	              'America/Godthab':      ['America/Miquelon', 'America/Godthab'],
	              'Asia/Dubai':           ['Europe/Moscow'],
	              'Asia/Dhaka':           ['Asia/Yekaterinburg'],
	              'Asia/Jakarta':         ['Asia/Omsk'],
	              'Asia/Shanghai':        ['Asia/Krasnoyarsk', 'Australia/Perth'],
	              'Asia/Tokyo':           ['Asia/Irkutsk'],
	              'Australia/Brisbane':   ['Asia/Yakutsk'],
	              'Pacific/Noumea':       ['Asia/Vladivostok'],
	              'Pacific/Tarawa':       ['Asia/Kamchatka', 'Pacific/Fiji'],
	              'Pacific/Tongatapu':    ['Pacific/Apia'],
	              'Asia/Baghdad':         ['Europe/Minsk'],
	              'Asia/Baku':            ['Asia/Yerevan','Asia/Baku'],
	              'Africa/Johannesburg':  ['Asia/Gaza', 'Africa/Cairo']
	          },

	          timezone_name = tz_name,

	          /**
	           * Checks if a timezone has possible ambiguities. I.e timezones that are similar.
	           *
	           * For example, if the preliminary scan determines that we're in America/Denver.
	           * We double check here that we're really there and not in America/Mazatlan.
	           *
	           * This is done by checking known dates for when daylight savings start for different
	           * timezones during 2010 and 2011.
	           */
	          ambiguity_check = function () {
	              var ambiguity_list = AMBIGUITIES[timezone_name],
	                  length = ambiguity_list.length,
	                  i = 0,
	                  tz = ambiguity_list[0];

	              for (; i < length; i += 1) {
	                  tz = ambiguity_list[i];

	                  if (jstz.date_is_dst(jstz.dst_start_for(tz))) {
	                      timezone_name = tz;
	                      return;
	                  }
	              }
	          },

	          /**
	           * Checks if it is possible that the timezone is ambiguous.
	           */
	          is_ambiguous = function () {
	              return typeof (AMBIGUITIES[timezone_name]) !== 'undefined';
	          };

	      if (is_ambiguous()) {
	          ambiguity_check();
	      }

	      return {
	          name: function () {
	              return timezone_name;
	          }
	      };
	  };

	  jstz.olson = {};

	  /*
	   * The keys in this dictionary are comma separated as such:
	   *
	   * First the offset compared to UTC time in minutes.
	   *
	   * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it
	   * does.
	   *
	   * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,
	   * only interesting for timezones with DST.
	   *
	   * The mapped arrays is used for constructing the jstz.TimeZone object from within
	   * jstz.determine_timezone();
	   */
	  jstz.olson.timezones = {
	      '-720,0'   : 'Pacific/Majuro',
	      '-660,0'   : 'Pacific/Pago_Pago',
	      '-600,1'   : 'America/Adak',
	      '-600,0'   : 'Pacific/Honolulu',
	      '-570,0'   : 'Pacific/Marquesas',
	      '-540,0'   : 'Pacific/Gambier',
	      '-540,1'   : 'America/Anchorage',
	      '-480,1'   : 'America/Los_Angeles',
	      '-480,0'   : 'Pacific/Pitcairn',
	      '-420,0'   : 'America/Phoenix',
	      '-420,1'   : 'America/Denver',
	      '-360,0'   : 'America/Guatemala',
	      '-360,1'   : 'America/Chicago',
	      '-360,1,s' : 'Pacific/Easter',
	      '-300,0'   : 'America/Bogota',
	      '-300,1'   : 'America/New_York',
	      '-270,0'   : 'America/Caracas',
	      '-240,1'   : 'America/Halifax',
	      '-240,0'   : 'America/Santo_Domingo',
	      '-240,1,s' : 'America/Santiago',
	      '-210,1'   : 'America/St_Johns',
	      '-180,1'   : 'America/Godthab',
	      '-180,0'   : 'America/Argentina/Buenos_Aires',
	      '-180,1,s' : 'America/Montevideo',
	      '-120,0'   : 'America/Noronha',
	      '-120,1'   : 'America/Noronha',
	      '-60,1'    : 'Atlantic/Azores',
	      '-60,0'    : 'Atlantic/Cape_Verde',
	      '0,0'      : 'UTC',
	      '0,1'      : 'Europe/London',
	      '60,1'     : 'Europe/Berlin',
	      '60,0'     : 'Africa/Lagos',
	      '60,1,s'   : 'Africa/Windhoek',
	      '120,1'    : 'Asia/Beirut',
	      '120,0'    : 'Africa/Johannesburg',
	      '180,0'    : 'Asia/Baghdad',
	      '180,1'    : 'Europe/Moscow',
	      '210,1'    : 'Asia/Tehran',
	      '240,0'    : 'Asia/Dubai',
	      '240,1'    : 'Asia/Baku',
	      '270,0'    : 'Asia/Kabul',
	      '300,1'    : 'Asia/Yekaterinburg',
	      '300,0'    : 'Asia/Karachi',
	      '330,0'    : 'Asia/Kolkata',
	      '345,0'    : 'Asia/Kathmandu',
	      '360,0'    : 'Asia/Dhaka',
	      '360,1'    : 'Asia/Omsk',
	      '390,0'    : 'Asia/Rangoon',
	      '420,1'    : 'Asia/Krasnoyarsk',
	      '420,0'    : 'Asia/Jakarta',
	      '480,0'    : 'Asia/Shanghai',
	      '480,1'    : 'Asia/Irkutsk',
	      '525,0'    : 'Australia/Eucla',
	      '525,1,s'  : 'Australia/Eucla',
	      '540,1'    : 'Asia/Yakutsk',
	      '540,0'    : 'Asia/Tokyo',
	      '570,0'    : 'Australia/Darwin',
	      '570,1,s'  : 'Australia/Adelaide',
	      '600,0'    : 'Australia/Brisbane',
	      '600,1'    : 'Asia/Vladivostok',
	      '600,1,s'  : 'Australia/Sydney',
	      '630,1,s'  : 'Australia/Lord_Howe',
	      '660,1'    : 'Asia/Kamchatka',
	      '660,0'    : 'Pacific/Noumea',
	      '690,0'    : 'Pacific/Norfolk',
	      '720,1,s'  : 'Pacific/Auckland',
	      '720,0'    : 'Pacific/Tarawa',
	      '765,1,s'  : 'Pacific/Chatham',
	      '780,0'    : 'Pacific/Tongatapu',
	      '780,1,s'  : 'Pacific/Apia',
	      '840,0'    : 'Pacific/Kiritimati'
	  };

	  if (true) {
	    exports.jstz = jstz;

	  } else {
	    root.jstz = jstz;
	  }
	  module.exports = jstz;
	})(this);

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var exports = module.exports = __webpack_require__(41)({});

	exports.state = 'focus';

	window.addEventListener('blur', function () {
		exports.state = 'blur';
		exports.emit('change', exports.state);
		exports.emit('blur');
	});
	window.addEventListener('focus', function () {
		exports.state = 'focus';
		exports.emit('change', exports.state);
		exports.emit('focus');
	});

	// TODO: maybe use `yields/visibility`?
	//var visibility = require('visibility');
	//visibility(function () {
	//	console.log(arguments);
	//});






/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var broker = __webpack_require__(42);

	module.exports = pipeEvents;

	function pipeEvents(ui) {
		// ui
		broker(ui, 'selectchannel', ui, 'setRoomContext');

		// addRoom popover
		broker(ui, 'orgReady', ui.addRoom, 'onOrgReady');
		broker.pass(ui.addRoom, 'createroom', ui, 'createroom');
		broker.pass(ui.addRoom, 'leaveroom', ui, 'leaveroom');
		broker(ui, 'newRoom', ui.addRoom, 'onNewRoom');
		broker(ui.addRoom, 'toggleroomcreation', ui.roomCreation, 'toggle');
		broker(ui.roomCreation, 'toggleaddroom', ui.addRoom, 'toggle');
		broker(ui, 'newRoomMember', ui.addRoom, 'onNewRoomMember');
		broker(ui, 'memberLeftChannel', ui.addRoom, 'onMemberLeftChannel');
		broker(ui, 'channelupdate', ui.addRoom, 'onChannelUpdate');
		broker(ui, 'roomdeleted', ui.addRoom, 'onRoomDeleted');
		broker(ui, 'joinedChannel', ui.addRoom, 'onJoinedChannel');
		broker(ui, 'leftChannel', ui.addRoom, 'onLeftChannel');

		// chat header/search functionality
		broker.pass(ui.chatHeader, 'searching', ui, 'searching');
		broker(ui, 'selectchannel', ui.chatHeader, 'setRoom');
		broker(ui, 'selectchannel', ui.membersMenu, 'setRoom');
		broker(ui.chatHeader, 'toggleusermenu', ui.userMenu, 'toggle');
		broker(ui.chatHeader, 'togglemembersmenu', ui.membersMenu, 'toggle');
		broker(ui.chatHeader, 'toggledeleteroomdialog', ui, 'toggleDeleteRoomDialog');
		broker(ui.searchView, 'show', ui, 'showSearchResults');
		broker(ui.searchView, 'hide', ui, 'hideSearchResults');
		broker(ui.chatHeader, 'stopsearching', ui.searchView, 'hideResults');
		broker.pass(ui.chatHeader, 'confirmroomrename', ui, 'confirmroomrename');
		broker(ui, 'channelupdate', ui.chatHeader, 'channelUpdate');
		broker(ui, 'roomrenameerror', ui.chatHeader, 'roomRenameError');
		broker(ui, 'newRoomMember', ui.chatHeader, 'onNewRoomMember');
		broker(ui, 'memberLeftChannel', ui.chatHeader, 'onMemberLeftChannel');

		// grape input
		broker(ui, 'selectchannel', ui.grapeInput, 'setRoom');
		broker(ui.grapeInput, 'input', ui.historyView, 'onInput');
		broker.pass(ui.historyView, 'send', ui, 'send');
		broker.pass(ui.historyView, 'loadHistoryForSearch', ui, 'loadHistoryForSearch');
		broker.pass(ui.grapeInput, 'update', ui, 'update');
		broker(ui.grapeInput, 'editingdone', ui.historyView, 'unselectForEditing');
		broker.pass(ui.grapeInput, 'starttyping', ui, 'starttyping');
		broker.pass(ui.grapeInput, 'stoptyping', ui, 'stoptyping');
		broker.pass(ui.grapeInput, 'autocomplete', ui, 'autocomplete');
		broker.pass(ui.grapeInput, 'autocompletedate', ui, 'autocompletedate');
		broker(ui.grapeInput, 'showmarkdowntips', ui, 'showMarkdownTips');
		broker(ui, 'orgReady', ui.grapeInput, 'onOrgReady');

		// history view
		broker(ui, 'orgReady', ui.historyView, 'onOrgReady');
		broker(ui, 'selectchannel', ui.historyView, 'setRoom');
		broker(ui, 'gotHistory', ui.historyView, 'onGotHistory');
		broker(ui, 'nohistory', ui.historyView, 'noHistory');
		broker.pass(ui.historyView, 'hasread', ui, 'hasread');
		broker.pass(ui.historyView, 'needhistory', ui, 'needhistory');
		broker.pass(ui.historyView, 'deleteMessage', ui, 'deleteMessage');
		broker.pass(ui.historyView, 'requestMessage', ui, 'requestMessage');
		broker(ui.historyView, 'toggleinvite', ui.membersMenu, 'toggle');
		broker(ui.historyView, 'selectedforediting', ui.grapeInput, 'editMessage');
		broker(ui.historyView, 'switchToChatMode', ui, 'onSwitchToChatMode');
		broker(ui.historyView, 'switchToChatMode', ui.chatHeader, 'onSwitchToChatMode');
		broker(ui.historyView, 'switchToSearchMode', ui.chatHeader, 'onSwitchToSearchMode');
		broker(ui, 'newMessage', ui.historyView, 'onNewMessage');
		broker(ui, 'focusMessage', ui.historyView, 'onFocusMessage');
		broker(ui, 'newPMOpened', ui.historyView, 'onNewPMOpened');
		broker(ui, 'newRoom', ui.historyView, 'onNewRoom');

		// title
		broker(ui, 'selectchannel', ui.title, 'setRoom');
		broker(ui, 'selectorganization', ui.title, 'setOrganization');

		// notifications
		broker(ui, 'selectchannel', ui.notifications, 'setRoom');
		broker(ui, 'newMsgNotification', ui.notifications, 'onNewMsgNotification');
		broker(ui, 'newInviteNotification', ui.notifications, 'onNewInviteNotification');
		broker(ui.notifications, 'notificationClicked', ui, 'onNotificationClicked');

		// file upload
		broker(ui, 'selectorganization', ui.upload, 'setOrganization');
		broker(ui.upload, 'uploading', ui.historyView, 'onUploading');

		// clipboard
		broker(ui.clipboard, 'upload', ui.upload, 'doUpload');

		// dragAndDrop
		broker(ui, 'uploadDragged', ui.upload, 'doUpload');

		// membersMenu
		broker(ui, 'toggleinvite', ui.membersMenu, 'toggle');
		broker(ui, 'memberLeftChannel', ui.membersMenu, 'onMemberLeftChannel');
		broker.pass(ui.membersMenu, 'kickMember', ui, 'kickMember');

		// roomCreation
		broker.pass(ui.roomCreation, 'createroom', ui, 'createroom');
		broker(ui, 'endroomcreation', ui.roomCreation, 'end');
		broker(ui, 'roomcreateerror', ui.roomCreation, 'errorFeedback');

		// invite
		broker(ui, 'orgReady', ui.invite, 'onOrgReady');
		broker(ui, 'selectchannel', ui.invite, 'setRoom');
		broker.pass(ui.invite, 'invitetoroom', ui, 'invitetoroom');

		// navigation
		broker(ui, 'orgReady', ui.navigation, 'onOrgReady');
		broker(ui, 'userDeleted', ui.navigation, 'onUserDeleted');
		broker(ui, 'newMessage', ui.navigation, 'onNewMessage');
		broker(ui, 'new org member', ui.navigation, 'newOrgMember');
		broker(ui, 'roomdeleted', ui.navigation, 'deleteRoom');
		broker(ui, 'selectchannel', ui.navigation, 'select');
		broker(ui.navigation, 'addroom', ui.addRoom, 'toggle');
		broker(ui, 'change user', ui.navigation, 'onChangeUser');
		broker(ui, 'channelupdate', ui.navigation, 'onChannelUpdate');
		broker(ui, 'channelRead', ui.navigation, 'onChannelRead');
		broker(ui, 'joinedChannel', ui.navigation, 'onJoinedChannel');
		broker(ui, 'leftChannel', ui.navigation, 'onLeftChannel');
		broker(ui, 'userMention', ui.navigation, 'onUserMention');
	}


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	
	;(function(){

	  /**
	   * Perform initial dispatch.
	   */

	  var dispatch = true;

	  /**
	   * Base path.
	   */

	  var base = '';

	  /**
	   * Running flag.
	   */

	  var running;

	  /**
	   * Register `path` with callback `fn()`,
	   * or route `path`, or `page.start()`.
	   *
	   *   page(fn);
	   *   page('*', fn);
	   *   page('/user/:id', load, user);
	   *   page('/user/' + user.id, { some: 'thing' });
	   *   page('/user/' + user.id);
	   *   page();
	   *
	   * @param {String|Function} path
	   * @param {Function} fn...
	   * @api public
	   */

	  function page(path, fn) {
	    // <callback>
	    if ('function' == typeof path) {
	      return page('*', path);
	    }

	    // route <path> to <callback ...>
	    if ('function' == typeof fn) {
	      var route = new Route(path);
	      for (var i = 1; i < arguments.length; ++i) {
	        page.callbacks.push(route.middleware(arguments[i]));
	      }
	    // show <path> with [state]
	    } else if ('string' == typeof path) {
	      page.show(path, fn);
	    // start [options]
	    } else {
	      page.start(path);
	    }
	  }

	  /**
	   * Callback functions.
	   */

	  page.callbacks = [];

	  /**
	   * Get or set basepath to `path`.
	   *
	   * @param {String} path
	   * @api public
	   */

	  page.base = function(path){
	    if (0 == arguments.length) return base;
	    base = path;
	  };

	  /**
	   * Bind with the given `options`.
	   *
	   * Options:
	   *
	   *    - `click` bind to click events [true]
	   *    - `popstate` bind to popstate [true]
	   *    - `dispatch` perform initial dispatch [true]
	   *
	   * @param {Object} options
	   * @api public
	   */

	  page.start = function(options){
	    options = options || {};
	    if (running) return;
	    running = true;
	    if (false === options.dispatch) dispatch = false;
	    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);
	    if (false !== options.click) window.addEventListener('click', onclick, false);
	    if (!dispatch) return;
	    var url = location.pathname + location.search + location.hash;
	    page.replace(url, null, true, dispatch);
	  };

	  /**
	   * Unbind click and popstate event handlers.
	   *
	   * @api public
	   */

	  page.stop = function(){
	    running = false;
	    removeEventListener('click', onclick, false);
	    removeEventListener('popstate', onpopstate, false);
	  };

	  /**
	   * Show `path` with optional `state` object.
	   *
	   * @param {String} path
	   * @param {Object} state
	   * @param {Boolean} dispatch
	   * @return {Context}
	   * @api public
	   */

	  page.show = function(path, state, dispatch){
	    var ctx = new Context(path, state);
	    if (false !== dispatch) page.dispatch(ctx);
	    if (!ctx.unhandled) ctx.pushState();
	    return ctx;
	  };

	  /**
	   * Replace `path` with optional `state` object.
	   *
	   * @param {String} path
	   * @param {Object} state
	   * @return {Context}
	   * @api public
	   */

	  page.replace = function(path, state, init, dispatch){
	    var ctx = new Context(path, state);
	    ctx.init = init;
	    if (null == dispatch) dispatch = true;
	    if (dispatch) page.dispatch(ctx);
	    ctx.save();
	    return ctx;
	  };

	  /**
	   * Dispatch the given `ctx`.
	   *
	   * @param {Object} ctx
	   * @api private
	   */

	  page.dispatch = function(ctx){
	    var i = 0;

	    function next() {
	      var fn = page.callbacks[i++];
	      if (!fn) return unhandled(ctx);
	      fn(ctx, next);
	    }

	    next();
	  };

	  /**
	   * Unhandled `ctx`. When it's not the initial
	   * popstate then redirect. If you wish to handle
	   * 404s on your own use `page('*', callback)`.
	   *
	   * @param {Context} ctx
	   * @api private
	   */

	  function unhandled(ctx) {
	    var current = window.location.pathname + window.location.search;
	    if (current == ctx.canonicalPath) return;
	    page.stop();
	    ctx.unhandled = true;
	    window.location = ctx.canonicalPath;
	  }

	  /**
	   * Initialize a new "request" `Context`
	   * with the given `path` and optional initial `state`.
	   *
	   * @param {String} path
	   * @param {Object} state
	   * @api public
	   */

	  function Context(path, state) {
	    if ('/' == path[0] && 0 != path.indexOf(base)) path = base + path;
	    var i = path.indexOf('?');

	    this.canonicalPath = path;
	    this.path = path.replace(base, '') || '/';

	    this.title = document.title;
	    this.state = state || {};
	    this.state.path = path;
	    this.querystring = ~i ? path.slice(i + 1) : '';
	    this.pathname = ~i ? path.slice(0, i) : path;
	    this.params = [];

	    // fragment
	    this.hash = '';
	    if (!~this.path.indexOf('#')) return;
	    var parts = this.path.split('#');
	    this.path = parts[0];
	    this.hash = parts[1] || '';
	    this.querystring = this.querystring.split('#')[0];
	  }

	  /**
	   * Expose `Context`.
	   */

	  page.Context = Context;

	  /**
	   * Push state.
	   *
	   * @api private
	   */

	  Context.prototype.pushState = function(){
	    history.pushState(this.state, this.title, this.canonicalPath);
	  };

	  /**
	   * Save the context state.
	   *
	   * @api public
	   */

	  Context.prototype.save = function(){
	    history.replaceState(this.state, this.title, this.canonicalPath);
	  };

	  /**
	   * Initialize `Route` with the given HTTP `path`,
	   * and an array of `callbacks` and `options`.
	   *
	   * Options:
	   *
	   *   - `sensitive`    enable case-sensitive routes
	   *   - `strict`       enable strict matching for trailing slashes
	   *
	   * @param {String} path
	   * @param {Object} options.
	   * @api private
	   */

	  function Route(path, options) {
	    options = options || {};
	    this.path = path;
	    this.method = 'GET';
	    this.regexp = pathtoRegexp(path
	      , this.keys = []
	      , options.sensitive
	      , options.strict);
	  }

	  /**
	   * Expose `Route`.
	   */

	  page.Route = Route;

	  /**
	   * Return route middleware with
	   * the given callback `fn()`.
	   *
	   * @param {Function} fn
	   * @return {Function}
	   * @api public
	   */

	  Route.prototype.middleware = function(fn){
	    var self = this;
	    return function(ctx, next){
	      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);
	      next();
	    };
	  };

	  /**
	   * Check if this route matches `path`, if so
	   * populate `params`.
	   *
	   * @param {String} path
	   * @param {Array} params
	   * @return {Boolean}
	   * @api private
	   */

	  Route.prototype.match = function(path, params){
	    var keys = this.keys
	      , qsIndex = path.indexOf('?')
	      , pathname = ~qsIndex ? path.slice(0, qsIndex) : path
	      , m = this.regexp.exec(decodeURIComponent(pathname));

	    if (!m) return false;

	    for (var i = 1, len = m.length; i < len; ++i) {
	      var key = keys[i - 1];

	      var val = 'string' == typeof m[i]
	        ? decodeURIComponent(m[i])
	        : m[i];

	      if (key) {
	        params[key.name] = undefined !== params[key.name]
	          ? params[key.name]
	          : val;
	      } else {
	        params.push(val);
	      }
	    }

	    return true;
	  };

	  /**
	   * Normalize the given path string,
	   * returning a regular expression.
	   *
	   * An empty array should be passed,
	   * which will contain the placeholder
	   * key names. For example "/user/:id" will
	   * then contain ["id"].
	   *
	   * @param  {String|RegExp|Array} path
	   * @param  {Array} keys
	   * @param  {Boolean} sensitive
	   * @param  {Boolean} strict
	   * @return {RegExp}
	   * @api private
	   */

	  function pathtoRegexp(path, keys, sensitive, strict) {
	    if (path instanceof RegExp) return path;
	    if (path instanceof Array) path = '(' + path.join('|') + ')';
	    path = path
	      .concat(strict ? '' : '/?')
	      .replace(/\/\(/g, '(?:/')
	      .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, function(_, slash, format, key, capture, optional){
	        keys.push({ name: key, optional: !! optional });
	        slash = slash || '';
	        return ''
	          + (optional ? '' : slash)
	          + '(?:'
	          + (optional ? slash : '')
	          + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
	          + (optional || '');
	      })
	      .replace(/([\/.])/g, '\\$1')
	      .replace(/\*/g, '(.*)');
	    return new RegExp('^' + path + '$', sensitive ? '' : 'i');
	  }

	  /**
	   * Handle "populate" events.
	   */

	  function onpopstate(e) {
	    if (e.state) {
	      var path = e.state.path;
	      page.replace(path, e.state);
	    }
	  }

	  /**
	   * Handle "click" events.
	   */

	  function onclick(e) {
	    if (1 != which(e)) return;
	    if (e.metaKey || e.ctrlKey || e.shiftKey) return;
	    if (e.defaultPrevented) return;

	    // ensure link
	    var el = e.target;
	    while (el && 'A' != el.nodeName) el = el.parentNode;
	    if (!el || 'A' != el.nodeName) return;

	    // ensure non-hash for the same path
	    var link = el.getAttribute('href');
	    if (el.pathname == location.pathname && (el.hash || '#' == link)) return;

	    // Check for mailto: in the href
	    if (link.indexOf("mailto:") > -1) return;

	    // check target
	    if (el.target) return;

	    // x-origin
	    if (!sameOrigin(el.href)) return;

	    // rebuild path
	    var path = el.pathname + el.search + (el.hash || '');

	    // same page
	    var orig = path + el.hash;

	    path = path.replace(base, '');
	    if (base && orig == path) return;

	    e.preventDefault();
	    page.show(orig);
	  }

	  /**
	   * Event button.
	   */

	  function which(e) {
	    e = e || window.event;
	    return null == e.which
	      ? e.button
	      : e.which;
	  }

	  /**
	   * Check if `href` is the same origin.
	   */

	  function sameOrigin(href) {
	    var origin = location.protocol + '//' + location.hostname;
	    if (location.port) origin += ':' + location.port;
	    return 0 == href.indexOf(origin);
	  }

	  /**
	   * Expose `page`.
	   */

	  if (false) {
	    window.page = page;
	  } else {
	    module.exports = page;
	  }

	})();


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var page = __webpack_require__(118);

	module.exports = Router;

	function Router(ui) {	
		var	baseURL	= '/chat',
			cUser	= ui.user;
		page.stop();
		page.base(baseURL);
		page('/', pickChannel);
		page('/@:pm', goToPM);
		page('/:room', goToRoom);
		page('/@:pm/:message', goToPM);
		page('/:room/:message', goToRoom);
		page('*', notFound);
		page();

		function pickChannel () {
			var redirectRoom = false;
			ui.navigation.roomList.items.every(function(room) {
				if (room.joined) {
					redirectRoom = room;
					return false;
				}
				return true;
			});
			var redirectSlug = redirectRoom ? redirectRoom.slug : '@' + ui.navigation.pmList.items[0].username.toLowerCase();		
			page.replace(baseURL + '/' + redirectSlug);
		}

		function goToPM (cxt) {
			var	username	= cxt.params.pm,
				chosenPM	= selectPM(username),
				message		= cxt.params.message ? cxt.params.message : null;
			if (chosenPM) {
				if (chosenPM.pm) return ui.emit('selectchannel', chosenPM.pm, message);
				ui.emit('openpm', chosenPM, function() {
					ui.emit('selectchannel', chosenPM.pm, message);
				});
			} else {
				notFound();
			}
		}

		function selectPM (username) {
			var chosenPM = false;
			ui.org.users.every(function(user) {
				if(user.username.toLowerCase() == username
					&& cUser.username != username) {
					chosenPM = user;
					return false;
				} else {
					return true;
				}
			});
			return chosenPM;
		}

		function goToRoom (cxt) {
			var	slug		= cxt.params.room,
				chosenRoom	= selectRoom(slug),
				message		= cxt.params.message ? cxt.params.message : null;
			if (chosenRoom) {
				if (chosenRoom.joined) return ui.emit('selectchannel', chosenRoom, message);
				ui.emit('joinroom', chosenRoom, function() {
					ui.emit('selectchannel', chosenRoom, message);
				});
			} else {
				notFound();
			}
		}

		function selectRoom (slug) {
			var chosenRoom = false;
			ui.org.rooms.every(function(room) {
				if(room.slug == slug) {
					chosenRoom = room;
					return false;
				} else {
					return true;
				}
			});
			return chosenRoom;
		}

		function notFound() {
			page.replace(baseURL + '/');
			setTimeout(function () {
				var msg = ui.messages.warning('url not found');
				setTimeout(function() {
					msg.remove();
				}, 6000);
			}, 500);
		}
	}

/***/ },
/* 120 */
/***/ function(module, exports) {

	// https://stackoverflow.com/questions/646628/how-to-check-if-a-string-startswith-another-string

	if (typeof String.prototype.startsWith != 'function') {
	  String.prototype.startsWith = function (str){
	    return this.slice(0, str.length) == str;
	  };
	}

	if (typeof String.prototype.startsWithIgnoreCase != 'function') {
	  String.prototype.startsWithIgnoreCase = function (str){
	    return this.slice(0, str.length).toLowerCase() == str.toLowerCase();
	  };
	}


/***/ },
/* 121 */
/***/ function(module, exports) {

	// https://stackoverflow.com/questions/646628/how-to-check-if-a-string-startswith-another-string

	if (typeof String.prototype.endsWith != 'function') {
	  String.prototype.endsWith = function (str){
	    return this.slice(-str.length) == str;
	  };
	}

	if (typeof String.prototype.endsWithIgnoreCase != 'function') {
	  String.prototype.endsWithIgnoreCase = function (str){
	    return this.slice(-str.length).toLowerCase() == str.toLowerCase();
	  };
	}


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	//
	// strftime
	// github.com/samsonjs/strftime
	// @_sjs
	//
	// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>
	//
	// MIT License
	// http://sjs.mit-license.org
	//

	;(function() {

	  //// Where to export the API
	  var namespace;

	  // CommonJS / Node module
	  if (true) {
	    namespace = module.exports = strftime;
	  }

	  // Browsers and other environments
	  else {
	    // Get the global object. Works in ES3, ES5, and ES5 strict mode.
	    namespace = (function(){ return this || (1,eval)('this') }());
	  }

	  function words(s) { return (s || '').split(' '); }

	  var DefaultLocale =
	  { days: words('Sunday Monday Tuesday Wednesday Thursday Friday Saturday')
	  , shortDays: words('Sun Mon Tue Wed Thu Fri Sat')
	  , months: words('January February March April May June July August September October November December')
	  , shortMonths: words('Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec')
	  , AM: 'AM'
	  , PM: 'PM'
	  , am: 'am'
	  , pm: 'pm'
	  };

	  namespace.strftime = strftime;
	  function strftime(fmt, d, locale) {
	    return _strftime(fmt, d, locale);
	  }

	  // locale is optional
	  namespace.strftimeTZ = strftime.strftimeTZ = strftimeTZ;
	  function strftimeTZ(fmt, d, locale, timezone) {
	    if ((typeof locale == 'number' || typeof locale == 'string') && timezone == null) {
	      timezone = locale;
	      locale = undefined;
	    }
	    return _strftime(fmt, d, locale, { timezone: timezone });
	  }

	  namespace.strftimeUTC = strftime.strftimeUTC = strftimeUTC;
	  function strftimeUTC(fmt, d, locale) {
	    return _strftime(fmt, d, locale, { utc: true });
	  }

	  namespace.localizedStrftime = strftime.localizedStrftime = localizedStrftime;
	  function localizedStrftime(locale) {
	    return function(fmt, d, options) {
	      return strftime(fmt, d, locale, options);
	    };
	  }

	  // d, locale, and options are optional, but you can't leave
	  // holes in the argument list. If you pass options you have to pass
	  // in all the preceding args as well.
	  //
	  // options:
	  //   - locale   [object] an object with the same structure as DefaultLocale
	  //   - timezone [number] timezone offset in minutes from GMT
	  function _strftime(fmt, d, locale, options) {
	    options = options || {};

	    // d and locale are optional so check if d is really the locale
	    if (d && !quacksLikeDate(d)) {
	      locale = d;
	      d = undefined;
	    }
	    d = d || new Date();

	    locale = locale || DefaultLocale;
	    locale.formats = locale.formats || {};

	    // Hang on to this Unix timestamp because we might mess with it directly below.
	    var timestamp = d.getTime();

	    var tz = options.timezone;
	    var tzType = typeof tz;

	    if (options.utc || tzType == 'number' || tzType == 'string') {
	      d = dateToUTC(d);
	    }

	    if (tz) {
	      // ISO 8601 format timezone string, [-+]HHMM
	      //
	      // Convert to the number of minutes and it'll be applied to the date below.
	      if (tzType == 'string') {
	        var sign = tz[0] == '-' ? -1 : 1;
	        var hours = parseInt(tz.slice(1, 3), 10);
	        var mins = parseInt(tz.slice(3, 5), 10);
	        tz = sign * ((60 * hours) + mins);
	      }

	      if (tzType) {
	        d = new Date(d.getTime() + (tz * 60000));
	      }
	    }

	    // Most of the specifiers supported by C's strftime, and some from Ruby.
	    // Some other syntax extensions from Ruby are supported: %-, %_, and %0
	    // to pad with nothing, space, or zero (respectively).
	    return fmt.replace(/%([-_0]?.)/g, function(_, c) {
	      var mod, padding;

	      if (c.length == 2) {
	        mod = c[0];
	        // omit padding
	        if (mod == '-') {
	          padding = '';
	        }
	        // pad with space
	        else if (mod == '_') {
	          padding = ' ';
	        }
	        // pad with zero
	        else if (mod == '0') {
	          padding = '0';
	        }
	        else {
	          // unrecognized, return the format
	          return _;
	        }
	        c = c[1];
	      }

	      switch (c) {

	        // Examples for new Date(0) in GMT

	        // 'Thursday'
	        case 'A': return locale.days[d.getDay()];

	        // 'Thu'
	        case 'a': return locale.shortDays[d.getDay()];

	        // 'January'
	        case 'B': return locale.months[d.getMonth()];

	        // 'Jan'
	        case 'b': return locale.shortMonths[d.getMonth()];

	        // '19'
	        case 'C': return pad(Math.floor(d.getFullYear() / 100), padding);

	        // '01/01/70'
	        case 'D': return _strftime(locale.formats.D || '%m/%d/%y', d, locale);

	        // '01'
	        case 'd': return pad(d.getDate(), padding);

	        // '01'
	        case 'e': return pad(d.getDate(), padding == null ? ' ' : padding);

	        // '1970-01-01'
	        case 'F': return _strftime(locale.formats.F || '%Y-%m-%d', d, locale);

	        // '00'
	        case 'H': return pad(d.getHours(), padding);

	        // 'Jan'
	        case 'h': return locale.shortMonths[d.getMonth()];

	        // '12'
	        case 'I': return pad(hours12(d), padding);

	        // '000'
	        case 'j':
	          var y = new Date(d.getFullYear(), 0, 1);
	          var day = Math.ceil((d.getTime() - y.getTime()) / (1000 * 60 * 60 * 24));
	          return pad(day, 3);

	        // ' 0'
	        case 'k': return pad(d.getHours(), padding == null ? ' ' : padding);

	        // '000'
	        case 'L': return pad(Math.floor(timestamp % 1000), 3);

	        // '12'
	        case 'l': return pad(hours12(d), padding == null ? ' ' : padding);

	        // '00'
	        case 'M': return pad(d.getMinutes(), padding);

	        // '01'
	        case 'm': return pad(d.getMonth() + 1, padding);

	        // '\n'
	        case 'n': return '\n';

	        // '1st'
	        case 'o': return String(d.getDate()) + ordinal(d.getDate());

	        // 'am'
	        case 'P': return d.getHours() < 12 ? locale.am : locale.pm;

	        // 'AM'
	        case 'p': return d.getHours() < 12 ? locale.AM : locale.PM;

	        // '00:00'
	        case 'R': return _strftime(locale.formats.R || '%H:%M', d, locale);

	        // '12:00:00 AM'
	        case 'r': return _strftime(locale.formats.r || '%I:%M:%S %p', d, locale);

	        // '00'
	        case 'S': return pad(d.getSeconds(), padding);

	        // '0'
	        case 's': return Math.floor(timestamp / 1000);

	        // '00:00:00'
	        case 'T': return _strftime(locale.formats.T || '%H:%M:%S', d, locale);

	        // '\t'
	        case 't': return '\t';

	        // '00'
	        case 'U': return pad(weekNumber(d, 'sunday'), padding);

	        // '4'
	        case 'u':
	          var day = d.getDay();
	          return day == 0 ? 7 : day; // 1 - 7, Monday is first day of the week

	        // ' 1-Jan-1970'
	        case 'v': return _strftime(locale.formats.v || '%e-%b-%Y', d, locale);

	        // '00'
	        case 'W': return pad(weekNumber(d, 'monday'), padding);

	        // '4'
	        case 'w': return d.getDay(); // 0 - 6, Sunday is first day of the week

	        // '1970'
	        case 'Y': return d.getFullYear();

	        // '70'
	        case 'y':
	          var y = String(d.getFullYear());
	          return y.slice(y.length - 2);

	        // 'GMT'
	        case 'Z':
	          if (options.utc) {
	            return "GMT";
	          }
	          else {
	            var tzString = d.toString().match(/\(([\w\s]+)\)/);
	            return tzString && tzString[1] || '';
	          }

	        // '+0000'
	        case 'z':
	          if (options.utc) {
	            return "+0000";
	          }
	          else {
	            var off = typeof tz == 'number' ? tz : -d.getTimezoneOffset();
	            return (off < 0 ? '-' : '+') + pad(Math.floor(Math.abs(off) / 60)) + pad(Math.abs(off) % 60);
	          }

	        default: return c;
	      }
	    });
	  }

	  function dateToUTC(d) {
	    var msDelta = (d.getTimezoneOffset() || 0) * 60000;
	    return new Date(d.getTime() + msDelta);
	  }

	  var RequiredDateMethods = ['getTime', 'getTimezoneOffset', 'getDay', 'getDate', 'getMonth', 'getFullYear', 'getYear', 'getHours', 'getMinutes', 'getSeconds'];
	  function quacksLikeDate(x) {
	    var i = 0
	      , n = RequiredDateMethods.length
	      ;
	    for (i = 0; i < n; ++i) {
	      if (typeof x[RequiredDateMethods[i]] != 'function') {
	        return false;
	      }
	    }
	    return true;
	  }

	  // Default padding is '0' and default length is 2, both are optional.
	  function pad(n, padding, length) {
	    // pad(n, <length>)
	    if (typeof padding === 'number') {
	      length = padding;
	      padding = '0';
	    }

	    // Defaults handle pad(n) and pad(n, <padding>)
	    if (padding == null) {
	      padding = '0';
	    }
	    length = length || 2;

	    var s = String(n);
	    // padding may be an empty string, don't loop forever if it is
	    if (padding) {
	      while (s.length < length) s = padding + s;
	    }
	    return s;
	  }

	  function hours12(d) {
	    var hour = d.getHours();
	    if (hour == 0) hour = 12;
	    else if (hour > 12) hour -= 12;
	    return hour;
	  }

	  // Get the ordinal suffix for a number: st, nd, rd, or th
	  function ordinal(n) {
	    var i = n % 10
	      , ii = n % 100
	      ;
	    if ((ii >= 11 && ii <= 13) || i === 0 || i >= 4) {
	      return 'th';
	    }
	    switch (i) {
	      case 1: return 'st';
	      case 2: return 'nd';
	      case 3: return 'rd';
	    }
	  }

	  // firstWeekday: 'sunday' or 'monday', default is 'sunday'
	  //
	  // Pilfered & ported from Ruby's strftime implementation.
	  function weekNumber(d, firstWeekday) {
	    firstWeekday = firstWeekday || 'sunday';

	    // This works by shifting the weekday back by one day if we
	    // are treating Monday as the first day of the week.
	    var wday = d.getDay();
	    if (firstWeekday == 'monday') {
	      if (wday == 0) // Sunday
	        wday = 6;
	      else
	        wday--;
	    }
	    var firstDayOfYear = new Date(d.getFullYear(), 0, 1)
	      , yday = (d - firstDayOfYear) / 86400000
	      , weekNum = (yday + 7 - wday) / 7
	      ;
	    return Math.floor(weekNum);
	  }

	}());


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	exports = module.exports = __webpack_require__(123);

	var definitions = {};

	exports.definition = function definition(code) {
		if (typeof code === 'string')
			return definitions[code];

		// create registries registry
		var parent = null;
		if (code.inherits) {
			parent = exports[code.inherits] = exports[code.inherits] || Object.create(null);
		}
		if (!exports[code.code])
			exports[code.code] = Object.create(parent);
		definitions[code.code] = code;
	};

	exports.merge = function merge(code, strings) {
		var into = exports[code] = exports[code] || Object.create(null);
		for (var key in strings)
			into[key] = strings[key];
	};

	// load some standard definitions
	__webpack_require__(124).forEach(exports.definition);


/***/ },
/* 124 */
/***/ function(module, exports) {

	[{
		"code": "de",
		"language": "Deutsch"
	}, {
		"code": "de-de",
		"language": "Deutsch (Deutschland)",
		"inherits": "de"
	}, {
		"code": "de-at",
		"language": "Deutsch (Österreich)",
		"inherits": "de"
	}, {
		"code": "en",
		"language": "English"
	}, {
		"code": "en-us",
		"language": "English (United States)",
		"inherits": "en"
	}]


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var marked = __webpack_require__(126);
	var markdown_renderlink = __webpack_require__(127);
	var emoji = __webpack_require__(130);

	var renderer = new marked.Renderer();

	renderer.link_simple = function(href, title, text) {
		// Renderer.prototype.link, but with target blank
		var out = '<a target="_blank" href="' + href + '"';
		if (title)
			out += ' title="' + title + '"';
		out += '>' + text + '</a>';
		return out;
	};
	renderer.link = function(href, title, text) {
		if (this.options.sanitize) {
		    try {
		      var prot = decodeURIComponent(unescape(href))
		        .replace(/[^\w:]/g, '')
		        .toLowerCase();
		    } catch (e) {
		      href = '';
		    }
			if (!href.match(/((mailto\:|cg\:|(news|(ht|f)tp(s?))\:\/){1}\S+)/)) href = '';
		}
		if (href.slice(0, 5) === "cg://")
			return markdown_renderlink(href, title, text);
		else
			return this.link_simple(href, title, text);
	};
	renderer.heading = function (text, level) {
		// this is a hack, we should replace the markdown parser
		return (new Array(level+1)).join("#") + text;
	};
	renderer.hr = function() {
		return "--";
	};
	renderer.image = function (href, title, text) {
	  var out = '<span class="markdown-img-wrapper">';
	  out += '<img src="' + href + '" alt="' + text + '"';
	  if (title) out += ' title="' + title + '"';
	  out += this.options.xhtml ? '/>' : '>';
	  out += '</span>';
	  return out;
	};

	marked.setOptions({
		renderer: renderer,
		sanitize: true,
		gfm: true,
		breaks: true,
		emoji: function (emo) {
			emoji.init_colons();
			// TODO: app.organization
			var custom_emojis = app.organization.custom_emojis;
			if (custom_emojis.hasOwnProperty(emo)) {
				return '<img src="'+custom_emojis[emo]+'" class="emoji" alt="'+emo+'"/>';
			}
			var val = emoji.map.colons[emo];
			return val ? emoji.replacement(val, emo, ':') : ':' + emo + ':';
		}
	});

	module.exports = marked;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/chjj/marked
	 */

	;(function() {

	/**
	 * Block-Level Grammar
	 */

	var block = {
	  newline: /^\n+/,
	  code: /^( {4}[^\n]+\n*)+/,
	  fences: noop,
	  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
	  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
	  nptable: noop,
	  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
	  blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
	  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
	  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
	  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
	  table: noop,
	  paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
	  text: /^[^\n]+/
	};

	block.bullet = /(?:[*+-]|\d+\.)/;
	block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
	block.item = replace(block.item, 'gm')
	  (/bull/g, block.bullet)
	  ();

	block.list = replace(block.list)
	  (/bull/g, block.bullet)
	  ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
	  ('def', '\\n+(?=' + block.def.source + ')')
	  ();

	block.blockquote = replace(block.blockquote)
	  ('def', block.def)
	  ();

	block._tag = '(?!(?:'
	  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
	  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
	  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

	block.html = replace(block.html)
	  ('comment', /<!--[\s\S]*?-->/)
	  ('closed', /<(tag)[\s\S]+?<\/\1>/)
	  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
	  (/tag/g, block._tag)
	  ();

	block.paragraph = replace(block.paragraph)
	  ('hr', block.hr)
	  ('heading', block.heading)
	  ('lheading', block.lheading)
	  ('blockquote', block.blockquote)
	  ('tag', '<' + block._tag)
	  ('def', block.def)
	  ();

	/**
	 * Normal Block Grammar
	 */

	block.normal = merge({}, block);

	/**
	 * GFM Block Grammar
	 */

	block.gfm = merge({}, block.normal, {
	  fences: /^ *(`{3,}|~{3,}) *(\S+)? *\n([\s\S]+?)\s*\1 *(?:\n+|$)/,
	  paragraph: /^/
	});

	block.gfm.paragraph = replace(block.paragraph)
	  ('(?!', '(?!'
	    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
	    + block.list.source.replace('\\1', '\\3') + '|')
	  ();

	/**
	 * GFM + Tables Block Grammar
	 */

	block.tables = merge({}, block.gfm, {
	  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
	  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
	});

	/**
	 * Block Lexer
	 */

	function Lexer(options) {
	  this.tokens = [];
	  this.tokens.links = {};
	  this.options = options || marked.defaults;
	  this.rules = block.normal;

	  if (this.options.gfm) {
	    if (this.options.tables) {
	      this.rules = block.tables;
	    } else {
	      this.rules = block.gfm;
	    }
	  }
	}

	/**
	 * Expose Block Rules
	 */

	Lexer.rules = block;

	/**
	 * Static Lex Method
	 */

	Lexer.lex = function(src, options) {
	  var lexer = new Lexer(options);
	  return lexer.lex(src);
	};

	/**
	 * Preprocessing
	 */

	Lexer.prototype.lex = function(src) {
	  src = src
	    .replace(/\r\n|\r/g, '\n')
	    .replace(/\t/g, '    ')
	    .replace(/\u00a0/g, ' ')
	    .replace(/\u2424/g, '\n');

	  return this.token(src, true);
	};

	/**
	 * Lexing
	 */

	Lexer.prototype.token = function(src, top, bq) {
	  var src = src.replace(/^ +$/gm, '')
	    , next
	    , loose
	    , cap
	    , bull
	    , b
	    , item
	    , space
	    , i
	    , l;

	  while (src) {
	    // newline
	    if (cap = this.rules.newline.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[0].length > 1) {
	        this.tokens.push({
	          type: 'space'
	        });
	      }
	    }

	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      cap = cap[0].replace(/^ {4}/gm, '');
	      this.tokens.push({
	        type: 'code',
	        text: !this.options.pedantic
	          ? cap.replace(/\n+$/, '')
	          : cap
	      });
	      continue;
	    }

	    // fences (gfm)
	    if (cap = this.rules.fences.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'code',
	        lang: cap[2],
	        text: cap[3]
	      });
	      continue;
	    }

	    // heading
	    if (cap = this.rules.heading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[1].length,
	        text: cap[2]
	      });
	      continue;
	    }

	    // table no leading pipe (gfm)
	    if (top && (cap = this.rules.nptable.exec(src))) {
	      src = src.substring(cap[0].length);

	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/\n$/, '').split('\n')
	      };

	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }

	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i].split(/ *\| */);
	      }

	      this.tokens.push(item);

	      continue;
	    }

	    // lheading
	    if (cap = this.rules.lheading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[2] === '=' ? 1 : 2,
	        text: cap[1]
	      });
	      continue;
	    }

	    // hr
	    if (cap = this.rules.hr.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'hr'
	      });
	      continue;
	    }

	    // blockquote
	    if (cap = this.rules.blockquote.exec(src)) {
	      src = src.substring(cap[0].length);

	      this.tokens.push({
	        type: 'blockquote_start'
	      });

	      cap = cap[0].replace(/^ *> ?/gm, '');

	      // Pass `top` to keep the current
	      // "toplevel" state. This is exactly
	      // how markdown.pl works.
	      this.token(cap, top, true);

	      this.tokens.push({
	        type: 'blockquote_end'
	      });

	      continue;
	    }

	    // list
	    if (cap = this.rules.list.exec(src)) {
	      src = src.substring(cap[0].length);
	      bull = cap[2];

	      this.tokens.push({
	        type: 'list_start',
	        ordered: bull.length > 1
	      });

	      // Get each top-level item.
	      cap = cap[0].match(this.rules.item);

	      next = false;
	      l = cap.length;
	      i = 0;

	      for (; i < l; i++) {
	        item = cap[i];

	        // Remove the list item's bullet
	        // so it is seen as the next token.
	        space = item.length;
	        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

	        // Outdent whatever the
	        // list item contains. Hacky.
	        if (~item.indexOf('\n ')) {
	          space -= item.length;
	          item = !this.options.pedantic
	            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
	            : item.replace(/^ {1,4}/gm, '');
	        }

	        // Determine whether the next list item belongs here.
	        // Backpedal if it does not belong in this list.
	        if (this.options.smartLists && i !== l - 1) {
	          b = block.bullet.exec(cap[i + 1])[0];
	          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
	            src = cap.slice(i + 1).join('\n') + src;
	            i = l - 1;
	          }
	        }

	        // Determine whether item is loose or not.
	        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
	        // for discount behavior.
	        loose = next || /\n\n(?!\s*$)/.test(item);
	        if (i !== l - 1) {
	          next = item.charAt(item.length - 1) === '\n';
	          if (!loose) loose = next;
	        }

	        this.tokens.push({
	          type: loose
	            ? 'loose_item_start'
	            : 'list_item_start'
	        });

	        // Recurse.
	        this.token(item, false, bq);

	        this.tokens.push({
	          type: 'list_item_end'
	        });
	      }

	      this.tokens.push({
	        type: 'list_end'
	      });

	      continue;
	    }

	    // html
	    if (cap = this.rules.html.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: this.options.sanitize
	          ? 'paragraph'
	          : 'html',
	        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',
	        text: cap[0]
	      });
	      continue;
	    }

	    // def
	    if ((!bq && top) && (cap = this.rules.def.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.links[cap[1].toLowerCase()] = {
	        href: cap[2],
	        title: cap[3]
	      };
	      continue;
	    }

	    // table (gfm)
	    if (top && (cap = this.rules.table.exec(src))) {
	      src = src.substring(cap[0].length);

	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
	      };

	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }

	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i]
	          .replace(/^ *\| *| *\| *$/g, '')
	          .split(/ *\| */);
	      }

	      this.tokens.push(item);

	      continue;
	    }

	    // top-level paragraph
	    if (top && (cap = this.rules.paragraph.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'paragraph',
	        text: cap[1].charAt(cap[1].length - 1) === '\n'
	          ? cap[1].slice(0, -1)
	          : cap[1]
	      });
	      continue;
	    }

	    // text
	    if (cap = this.rules.text.exec(src)) {
	      // Top-level should never reach here.
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'text',
	        text: cap[0]
	      });
	      continue;
	    }

	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }

	  return this.tokens;
	};

	/**
	 * Inline-Level Grammar
	 */

	var inline = {
	  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
	  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
	  url: noop,
	  tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
	  link: /^!?\[(inside)\]\(href\)/,
	  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
	  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
	  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
	  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
	  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
	  br: /^ {2,}\n(?!\s*$)/,
	  del: noop,
	  emoji: noop,
	  text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
	};

	inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
	inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

	inline.link = replace(inline.link)
	  ('inside', inline._inside)
	  ('href', inline._href)
	  ();

	inline.reflink = replace(inline.reflink)
	  ('inside', inline._inside)
	  ();

	/**
	 * Normal Inline Grammar
	 */

	inline.normal = merge({}, inline);

	/**
	 * Pedantic Inline Grammar
	 */

	inline.pedantic = merge({}, inline.normal, {
	  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
	  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
	});

	/**
	 * GFM Inline Grammar
	 */

	inline.gfm = merge({}, inline.normal, {
	  escape: replace(inline.escape)('])', '~|])')(),
	  url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
	  del: /^~~(?=\S)([\s\S]*?\S)~~/,
	  emoji: /^:([A-Za-z0-9_\-\+]+?):/,
	  text: replace(inline.text)
	    (']|', ':~]|')
	    ('|', '|https?://|')
	    ()
	});

	/**
	 * GFM + Line Breaks Inline Grammar
	 */

	inline.breaks = merge({}, inline.gfm, {
	  br: replace(inline.br)('{2,}', '*')(),
	  text: replace(inline.gfm.text)('{2,}', '*')()
	});

	/**
	 * Inline Lexer & Compiler
	 */

	function InlineLexer(links, options) {
	  this.options = options || marked.defaults;
	  this.links = links;
	  this.rules = inline.normal;
	  this.renderer = this.options.renderer || new Renderer;
	  this.renderer.options = this.options;

	  if (!this.links) {
	    throw new
	      Error('Tokens array requires a `links` property.');
	  }

	  if (this.options.gfm) {
	    if (this.options.breaks) {
	      this.rules = inline.breaks;
	    } else {
	      this.rules = inline.gfm;
	    }
	  } else if (this.options.pedantic) {
	    this.rules = inline.pedantic;
	  }

	  this.emojiTemplate = getEmojiTemplate(options);
	}

	/**
	 * Expose Inline Rules
	 */

	InlineLexer.rules = inline;

	/**
	 * Static Lexing/Compiling Method
	 */

	InlineLexer.output = function(src, links, options) {
	  var inline = new InlineLexer(links, options);
	  return inline.output(src);
	};

	/**
	 * Lexing/Compiling
	 */

	InlineLexer.prototype.output = function(src) {
	  var out = ''
	    , link
	    , text
	    , href
	    , cap;

	  while (src) {
	    // escape
	    if (cap = this.rules.escape.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += cap[1];
	      continue;
	    }

	    // autolink
	    if (cap = this.rules.autolink.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[2] === '@') {
	        text = cap[1].charAt(6) === ':'
	          ? this.mangle(cap[1].substring(7))
	          : this.mangle(cap[1]);
	        href = this.mangle('mailto:') + text;
	      } else {
	        text = escape(cap[1]);
	        href = text;
	      }
	      out += this.renderer.link(href, null, text);
	      continue;
	    }

	    // url (gfm)
	    if (!this.inLink && (cap = this.rules.url.exec(src))) {
	      src = src.substring(cap[0].length);
	      text = escape(cap[1]);
	      href = text;
	      out += this.renderer.link(href, null, text);
	      continue;
	    }

	    // tag
	    if (cap = this.rules.tag.exec(src)) {
	      if (!this.inLink && /^<a /i.test(cap[0])) {
	        this.inLink = true;
	      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
	        this.inLink = false;
	      }
	      src = src.substring(cap[0].length);
	      out += this.options.sanitize
	        ? escape(cap[0])
	        : cap[0];
	      continue;
	    }

	    // link
	    if (cap = this.rules.link.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.inLink = true;
	      out += this.outputLink(cap, {
	        href: cap[2],
	        title: cap[3]
	      });
	      this.inLink = false;
	      continue;
	    }

	    // reflink, nolink
	    if ((cap = this.rules.reflink.exec(src))
	        || (cap = this.rules.nolink.exec(src))) {
	      src = src.substring(cap[0].length);
	      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
	      link = this.links[link.toLowerCase()];
	      if (!link || !link.href) {
	        out += cap[0].charAt(0);
	        src = cap[0].substring(1) + src;
	        continue;
	      }
	      this.inLink = true;
	      out += this.outputLink(cap, link);
	      this.inLink = false;
	      continue;
	    }

	    // strong
	    if (cap = this.rules.strong.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.strong(this.output(cap[2] || cap[1]));
	      continue;
	    }

	    // em
	    if (cap = this.rules.em.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.em(this.output(cap[2] || cap[1]));
	      continue;
	    }

	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.codespan(escape(cap[2], true));
	      continue;
	    }

	    // br
	    if (cap = this.rules.br.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.br();
	      continue;
	    }

	    // del (gfm)
	    if (cap = this.rules.del.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.del(this.output(cap[1]));
	      continue;
	    }

	    // emoji (gfm)
	    if (cap = this.rules.emoji.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.emoji(cap[1]);
	      continue;
	    }

	    // text
	    if (cap = this.rules.text.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += escape(this.smartypants(cap[0]));
	      continue;
	    }

	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }

	  return out;
	};

	/**
	 * Compile Link
	 */

	InlineLexer.prototype.outputLink = function(cap, link) {
	  var href = escape(link.href)
	    , title = link.title ? escape(link.title) : null;

	  return cap[0].charAt(0) !== '!'
	    ? this.renderer.link(href, title, this.output(cap[1]))
	    : this.renderer.image(href, title, escape(cap[1]));
	};

	/**
	 * Emoji Transformations
	 */

	function emojiDefaultTemplate(emoji) {
	  return '<img src="'
	    + '/graphics/emojis/'
	    + encodeURIComponent(emoji)
	    + '.png"'
	    + ' alt=":'
	    + escape(emoji)
	    + ':"'
	    + ' title=":'
	    + escape(emoji)
	    + ':"'
	    + ' class="emoji" align="absmiddle" height="20" width="20">';
	}

	function getEmojiTemplate(options) {
	  if (options.emoji) {
	    if (typeof options.emoji === 'function') {
	      return options.emoji;
	    }

	    if (typeof options.emoji === 'string') {
	      var emojiSplit = options.emoji.split(/\{emoji\}/g);
	      return function(emoji) {
	        return emojiSplit.join(emoji);
	      }
	    }
	  }
	  return emojiDefaultTemplate;
	}

	InlineLexer.prototype.emojiTemplate = emojiDefaultTemplate;
	InlineLexer.prototype.emoji = function (name) {
	  if (!this.options.emoji) return ':' + name + ':';

	  return this.emojiTemplate(name);
	};

	/**
	 * Smartypants Transformations
	 */

	InlineLexer.prototype.smartypants = function(text) {
	  if (!this.options.smartypants) return text;
	  return text
	    // em-dashes
	    .replace(/--/g, '\u2014')
	    // opening singles
	    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
	    // closing singles & apostrophes
	    .replace(/'/g, '\u2019')
	    // opening doubles
	    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
	    // closing doubles
	    .replace(/"/g, '\u201d')
	    // ellipses
	    .replace(/\.{3}/g, '\u2026');
	};

	/**
	 * Mangle Links
	 */

	InlineLexer.prototype.mangle = function(text) {
	  var out = ''
	    , l = text.length
	    , i = 0
	    , ch;

	  for (; i < l; i++) {
	    ch = text.charCodeAt(i);
	    if (Math.random() > 0.5) {
	      ch = 'x' + ch.toString(16);
	    }
	    out += '&#' + ch + ';';
	  }

	  return out;
	};

	/**
	 * Renderer
	 */

	function Renderer(options) {
	  this.options = options || {};
	}

	Renderer.prototype.code = function(code, lang, escaped) {
	  if (this.options.highlight) {
	    var out = this.options.highlight(code, lang);
	    if (out != null && out !== code) {
	      escaped = true;
	      code = out;
	    }
	  }

	  if (!lang) {
	    return '<pre><code>'
	      + (escaped ? code : escape(code, true))
	      + '\n</code></pre>';
	  }

	  return '<pre><code class="'
	    + this.options.langPrefix
	    + escape(lang, true)
	    + '">'
	    + (escaped ? code : escape(code, true))
	    + '\n</code></pre>\n';
	};

	Renderer.prototype.blockquote = function(quote) {
	  return '<blockquote>\n' + quote + '</blockquote>\n';
	};

	Renderer.prototype.html = function(html) {
	  return html;
	};

	Renderer.prototype.heading = function(text, level, raw) {
	  return '<h'
	    + level
	    + ' id="'
	    + this.options.headerPrefix
	    + raw.toLowerCase().replace(/[^\w]+/g, '-')
	    + '">'
	    + text
	    + '</h'
	    + level
	    + '>\n';
	};

	Renderer.prototype.hr = function() {
	  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
	};

	Renderer.prototype.list = function(body, ordered) {
	  var type = ordered ? 'ol' : 'ul';
	  return '<' + type + '>\n' + body + '</' + type + '>\n';
	};

	Renderer.prototype.listitem = function(text) {
	  return '<li>' + text + '</li>\n';
	};

	Renderer.prototype.paragraph = function(text) {
	  return '<p>' + text + '</p>\n';
	};

	Renderer.prototype.table = function(header, body) {
	  return '<table>\n'
	    + '<thead>\n'
	    + header
	    + '</thead>\n'
	    + '<tbody>\n'
	    + body
	    + '</tbody>\n'
	    + '</table>\n';
	};

	Renderer.prototype.tablerow = function(content) {
	  return '<tr>\n' + content + '</tr>\n';
	};

	Renderer.prototype.tablecell = function(content, flags) {
	  var type = flags.header ? 'th' : 'td';
	  var tag = flags.align
	    ? '<' + type + ' style="text-align:' + flags.align + '">'
	    : '<' + type + '>';
	  return tag + content + '</' + type + '>\n';
	};

	// span level renderer
	Renderer.prototype.strong = function(text) {
	  return '<strong>' + text + '</strong>';
	};

	Renderer.prototype.em = function(text) {
	  return '<em>' + text + '</em>';
	};

	Renderer.prototype.codespan = function(text) {
	  return '<code>' + text + '</code>';
	};

	Renderer.prototype.br = function() {
	  return this.options.xhtml ? '<br/>' : '<br>';
	};

	Renderer.prototype.del = function(text) {
	  return '<del>' + text + '</del>';
	};

	Renderer.prototype.link = function(href, title, text) {
	  if (this.options.sanitize) {
	    try {
	      var prot = decodeURIComponent(unescape(href))
	        .replace(/[^\w:]/g, '')
	        .toLowerCase();
	    } catch (e) {
	      return '';
	    }
	    if (prot.indexOf('javascript:') === 0) {
	      return '';
	    }
	  }
	  var out = '<a href="' + href + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += '>' + text + '</a>';
	  return out;
	};

	Renderer.prototype.image = function(href, title, text) {
	  var out = '<img src="' + href + '" alt="' + text + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += this.options.xhtml ? '/>' : '>';
	  return out;
	};

	/**
	 * Parsing & Compiling
	 */

	function Parser(options) {
	  this.tokens = [];
	  this.token = null;
	  this.options = options || marked.defaults;
	  this.options.renderer = this.options.renderer || new Renderer;
	  this.renderer = this.options.renderer;
	  this.renderer.options = this.options;
	}

	/**
	 * Static Parse Method
	 */

	Parser.parse = function(src, options, renderer) {
	  var parser = new Parser(options, renderer);
	  return parser.parse(src);
	};

	/**
	 * Parse Loop
	 */

	Parser.prototype.parse = function(src) {
	  this.inline = new InlineLexer(src.links, this.options, this.renderer);
	  this.tokens = src.reverse();

	  var out = '';
	  while (this.next()) {
	    out += this.tok();
	  }

	  return out;
	};

	/**
	 * Next Token
	 */

	Parser.prototype.next = function() {
	  return this.token = this.tokens.pop();
	};

	/**
	 * Preview Next Token
	 */

	Parser.prototype.peek = function() {
	  return this.tokens[this.tokens.length - 1] || 0;
	};

	/**
	 * Parse Text Tokens
	 */

	Parser.prototype.parseText = function() {
	  var body = this.token.text;

	  while (this.peek().type === 'text') {
	    body += '\n' + this.next().text;
	  }

	  return this.inline.output(body);
	};

	/**
	 * Parse Current Token
	 */

	Parser.prototype.tok = function() {
	  switch (this.token.type) {
	    case 'space': {
	      return '';
	    }
	    case 'hr': {
	      return this.renderer.hr();
	    }
	    case 'heading': {
	      return this.renderer.heading(
	        this.inline.output(this.token.text),
	        this.token.depth,
	        this.token.text);
	    }
	    case 'code': {
	      return this.renderer.code(this.token.text,
	        this.token.lang,
	        this.token.escaped);
	    }
	    case 'table': {
	      var header = ''
	        , body = ''
	        , i
	        , row
	        , cell
	        , flags
	        , j;

	      // header
	      cell = '';
	      for (i = 0; i < this.token.header.length; i++) {
	        flags = { header: true, align: this.token.align[i] };
	        cell += this.renderer.tablecell(
	          this.inline.output(this.token.header[i]),
	          { header: true, align: this.token.align[i] }
	        );
	      }
	      header += this.renderer.tablerow(cell);

	      for (i = 0; i < this.token.cells.length; i++) {
	        row = this.token.cells[i];

	        cell = '';
	        for (j = 0; j < row.length; j++) {
	          cell += this.renderer.tablecell(
	            this.inline.output(row[j]),
	            { header: false, align: this.token.align[j] }
	          );
	        }

	        body += this.renderer.tablerow(cell);
	      }
	      return this.renderer.table(header, body);
	    }
	    case 'blockquote_start': {
	      var body = '';

	      while (this.next().type !== 'blockquote_end') {
	        body += this.tok();
	      }

	      return this.renderer.blockquote(body);
	    }
	    case 'list_start': {
	      var body = ''
	        , ordered = this.token.ordered;

	      while (this.next().type !== 'list_end') {
	        body += this.tok();
	      }

	      return this.renderer.list(body, ordered);
	    }
	    case 'list_item_start': {
	      var body = '';

	      while (this.next().type !== 'list_item_end') {
	        body += this.token.type === 'text'
	          ? this.parseText()
	          : this.tok();
	      }

	      return this.renderer.listitem(body);
	    }
	    case 'loose_item_start': {
	      var body = '';

	      while (this.next().type !== 'list_item_end') {
	        body += this.tok();
	      }

	      return this.renderer.listitem(body);
	    }
	    case 'html': {
	      var html = !this.token.pre && !this.options.pedantic
	        ? this.inline.output(this.token.text)
	        : this.token.text;
	      return this.renderer.html(html);
	    }
	    case 'paragraph': {
	      return this.renderer.paragraph(this.inline.output(this.token.text));
	    }
	    case 'text': {
	      return this.renderer.paragraph(this.parseText());
	    }
	  }
	};

	/**
	 * Helpers
	 */

	function escape(html, encode) {
	  return html
	    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#39;');
	}

	function unescape(html) {
	  return html.replace(/&([#\w]+);/g, function(_, n) {
	    n = n.toLowerCase();
	    if (n === 'colon') return ':';
	    if (n.charAt(0) === '#') {
	      return n.charAt(1) === 'x'
	        ? String.fromCharCode(parseInt(n.substring(2), 16))
	        : String.fromCharCode(+n.substring(1));
	    }
	    return '';
	  });
	}

	function replace(regex, opt) {
	  regex = regex.source;
	  opt = opt || '';
	  return function self(name, val) {
	    if (!name) return new RegExp(regex, opt);
	    val = val.source || val;
	    val = val.replace(/(^|[^\[])\^/g, '$1');
	    regex = regex.replace(name, val);
	    return self;
	  };
	}

	function noop() {}
	noop.exec = noop;

	function merge(obj) {
	  var i = 1
	    , target
	    , key;

	  for (; i < arguments.length; i++) {
	    target = arguments[i];
	    for (key in target) {
	      if (Object.prototype.hasOwnProperty.call(target, key)) {
	        obj[key] = target[key];
	      }
	    }
	  }

	  return obj;
	}


	/**
	 * Marked
	 */

	function marked(src, opt, callback) {
	  if (callback || typeof opt === 'function') {
	    if (!callback) {
	      callback = opt;
	      opt = null;
	    }

	    opt = merge({}, marked.defaults, opt || {});

	    var highlight = opt.highlight
	      , tokens
	      , pending
	      , i = 0;

	    try {
	      tokens = Lexer.lex(src, opt)
	    } catch (e) {
	      return callback(e);
	    }

	    pending = tokens.length;

	    var done = function(err) {
	      if (err) {
	        opt.highlight = highlight;
	        return callback(err);
	      }

	      var out;

	      try {
	        out = Parser.parse(tokens, opt);
	      } catch (e) {
	        err = e;
	      }

	      opt.highlight = highlight;

	      return err
	        ? callback(err)
	        : callback(null, out);
	    };

	    if (!highlight || highlight.length < 3) {
	      return done();
	    }

	    delete opt.highlight;

	    if (!pending) return done();

	    for (; i < tokens.length; i++) {
	      (function(token) {
	        if (token.type !== 'code') {
	          return --pending || done();
	        }
	        return highlight(token.text, token.lang, function(err, code) {
	          if (err) return done(err);
	          if (code == null || code === token.text) {
	            return --pending || done();
	          }
	          token.text = code;
	          token.escaped = true;
	          --pending || done();
	        });
	      })(tokens[i]);
	    }

	    return;
	  }
	  try {
	    if (opt) opt = merge({}, marked.defaults, opt);
	    return Parser.parse(Lexer.lex(src, opt), opt);
	  } catch (e) {
	    e.message += '\nPlease report this to https://github.com/chjj/marked.';
	    if ((opt || marked.defaults).silent) {
	      return '<p>An error occured:</p><pre>'
	        + escape(e.message + '', true)
	        + '</pre>';
	    }
	    throw e;
	  }
	}

	/**
	 * Options
	 */

	marked.options =
	marked.setOptions = function(opt) {
	  merge(marked.defaults, opt);
	  return marked;
	};

	marked.defaults = {
	  gfm: true,
	  emoji: false,
	  tables: true,
	  breaks: false,
	  pedantic: false,
	  sanitize: false,
	  smartLists: false,
	  silent: false,
	  highlight: null,
	  langPrefix: 'lang-',
	  smartypants: false,
	  headerPrefix: '',
	  renderer: new Renderer,
	  xhtml: false
	};

	/**
	 * Expose
	 */

	marked.Parser = Parser;
	marked.parser = Parser.parse;

	marked.Renderer = Renderer;

	marked.Lexer = Lexer;
	marked.lexer = Lexer.lex;

	marked.InlineLexer = InlineLexer;
	marked.inlineLexer = InlineLexer.output;

	marked.parse = marked;

	if (true) {
	  module.exports = marked;
	} else if (typeof define === 'function' && define.amd) {
	  define(function() { return marked; });
	} else {
	  this.marked = marked;
	}

	}).call(function() {
	  return this || (typeof window !== 'undefined' ? window : global);
	}());

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var renderautocomplete = __webpack_require__(128);

	// TODO: move this back to markdown.js but make it somehow accessible to the
	// outside. we also need this in chatinput.js for editing messages

	module.exports = function markdown_renderLink(href, title, text, asButton) {
	    asButton = asButton || false;
		var data = href.slice(5).split('|');
		var object = {
			id: "[" + text + '](' + href + ')',
			insert: text,
			service: data[0],
			type: data[1],
			url: data[3]
		};
		return renderautocomplete(object, asButton);
	};


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var isWebkit = __webpack_require__(129);

	module.exports = renderAutocompleteItem;

	function renderAutocompleteItem(obj, asButton) {
		asButton = asButton || false;
		var name = obj.id.replace(/"/g, '&quot;');

		if (asButton===true) {
			if (isWebkit()) {
				// Google Chrome and other webkit browser
				// Can only draw an inline icon within the <button> element.
				return '<button class="ac ' + obj.service + '" contenteditable="false" tabindex="-1" data-object="' + name + '" data-url="' + obj.url+ '"><span class="entry-type-icon type-' + obj.service + obj.type +'">&nbsp;</span>' + obj.insert + '</button>';
			} else {
				// Firefox, IE
				if (typeof obj.service !== "undefined" && obj.service === "emoji") {
					return '<button class="ac ' + obj.service + ' type-' + obj.service + obj.type +'" tabindex="-1" data-object="' + name + '">' + obj.insert + '</button>';
				} else {
					return '<input type="button" class="ac service-' + obj.service + ' type-' + obj.service + obj.type +'" tabindex="-1" data-object="' + name + '" data-url="' + obj.url+ '" value="' + obj.insert + '"/>';

				}
			}
		} else {
			var target = ' target="_blank"';
			if (obj.service==="chatgrape") {
				target = '';
			}
			return '<a class="ac service-' + obj.service + ' type-' + obj.service + obj.type +'" tabindex="-1" data-object="' + name + '" href="' + obj.url+ '"' + target + '>' + obj.insert + '</a>';
		}
	}


/***/ },
/* 129 */
/***/ function(module, exports) {

	module.exports = isWebkit;

	var isWebkit_;

	function isWebkit() {
	    if (typeof isWebkit_ === 'undefined') {
	        var div = document.createElement('div');
	        div.setAttribute('contenteditable', 'PLAINTEXT-ONLY');
	        isWebkit_ = div.contentEditable === 'plaintext-only';
	    }
	    return isWebkit_;
	}

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var staticurl = __webpack_require__(24);
	var jsemoji = __webpack_require__(131);
	jsemoji.img_path = staticurl('emoji/');
	jsemoji.sheet_path = staticurl('app/cg/images/emoji_sheet_32_optimized.png');
	jsemoji.use_sheet = true;

	// https://github.com/ubergrape/chatgrape/issues/839
	// https://bugzilla.mozilla.org/show_bug.cgi?id=923007
	if (~navigator.userAgent.indexOf('Firefox') && navigator.platform === "MacIntel") {
		jsemoji.allow_native = false;
	}

	module.exports = jsemoji;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {;(function() {

	function emoji(){}
		// settings
		emoji.img_path = 'emoji/';
		emoji.sheet_path = 'sheet_64.png';

		emoji.use_css_imgs = false;
		emoji.colons_mode = false;
		emoji.text_mode = false;
		emoji.include_title = false;
		emoji.allow_native = true;
		emoji.use_sheet = false;

		emoji.inits = {};
		emoji.map = {};

		emoji.replace_emoticons = function(str){
			emoji.init_emoticons();
			return str.replace(emoji.rx_emoticons, function(m, $1, $2){
				var val = emoji.map.emoticons[$2];
				return val ? $1+emoji.replacement(val, $2) : m;
			});
		};
		emoji.replace_emoticons_with_colons = function(str){
			emoji.init_emoticons();
			return str.replace(emoji.rx_emoticons, function(m, $1, $2){
				var val = emoji.data[emoji.map.emoticons[$2]][3][0];
				return val ? $1+':'+val+':' : m;
			});
		};
		emoji.replace_colons = function(str){
			emoji.init_colons();
			return str.replace(emoji.rx_colons, function(m){
				var idx = m.substr(1, m.length-2);
				var val = emoji.map.colons[idx];
				return val ? emoji.replacement(val, idx, ':') : m;
			});
		};
		emoji.replace_unified = function(str){
			emoji.init_unified();
			return str.replace(emoji.rx_unified, function(m){
				var val = emoji.map.unified[m];
				return val ? emoji.replacement(val) : m;
			});
		};

		emoji.replacement = function(idx, actual, wrapper){
			wrapper = wrapper || '';
			if (emoji.colons_mode) return ':'+emoji.data[idx][3][0]+':';
			var text_name = (actual) ? wrapper+actual+wrapper : emoji.data[idx][6] || wrapper+emoji.data[idx][3][0]+wrapper;
			if (emoji.text_mode) return text_name;
			emoji.init_env();
			if (emoji.replace_mode == 'unified'  && emoji.allow_native && emoji.data[idx][0][0]) return emoji.data[idx][0][0];
			if (emoji.replace_mode == 'softbank' && emoji.allow_native && emoji.data[idx][1]) return emoji.data[idx][1];
			if (emoji.replace_mode == 'google'   && emoji.allow_native && emoji.data[idx][2]) return emoji.data[idx][2];
			var img = emoji.data[idx][7] || emoji.img_path+idx+'.png';
			var title = emoji.include_title ? ' title="'+(actual || emoji.data[idx][3][0])+'"' : '';
			var text  = emoji.include_text  ? wrapper+(actual || emoji.data[idx][3][0])+wrapper : '';
			if (emoji.supports_css) {
				var px = emoji.data[idx][4];
				var py = emoji.data[idx][5];
				if (emoji.use_sheet && px != null && py != null){
					var mul = 100 / (emoji.sheet_size - 1);
					var style = 'background: url('+emoji.sheet_path+');background-position:'+(mul*px)+'% '+(mul*py)+'%;background-size:'+emoji.sheet_size+'00%';
					return '<span class="emoji-outer emoji-sizer"><span class="emoji-inner" style="'+style+'"'+title+'>'+text+'</span></span>';
				}else if (emoji.use_css_imgs){
					return '<span class="emoji emoji-'+idx+'"'+title+'>'+text+'</span>';
				}else{
					return '<span class="emoji emoji-sizer" style="background-image:url('+img+')"'+title+'>'+text+'</span>';
				}
			}
			return '<img src="'+img+'" class="emoji" '+title+'/>';
		};

		emoji.init_emoticons = function(){
			if (emoji.inits.emoticons) return;
			emoji.init_colons(); // we require this for the emoticons map
			emoji.inits.emoticons = 1;
			
			var a = [];
			emoji.map.emoticons = {};
			for (var i in emoji.emoticons_data){
				// because we never see some characters in our text except as entities, we must do some replacing
				var emoticon = i.replace(/\&/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
				
				if (!emoji.map.colons[emoji.emoticons_data[i]]) continue;

				emoji.map.emoticons[emoticon] = emoji.map.colons[emoji.emoticons_data[i]];
				a.push(emoji.escape_rx(emoticon));
			}
			emoji.rx_emoticons = new RegExp(('(^|\\s)('+a.join('|')+')(?=$|[\\s|\\?\\.,!])'), 'g');
		};
		emoji.init_colons = function(){
			if (emoji.inits.colons) return;
			emoji.inits.colons = 1;
			emoji.rx_colons = new RegExp('\:[^\\s:]+\:', 'g');
			emoji.map.colons = {};
			for (var i in emoji.data){
				for (var j=0; j<emoji.data[i][3].length; j++){
					emoji.map.colons[emoji.data[i][3][j]] = i;
				}
			}
		};
		emoji.init_unified = function(){
			if (emoji.inits.unified) return;
			emoji.inits.unified = 1;

			var a = [];
			emoji.map.unified = {};

			for (var i in emoji.data){
				for (var j=0; j<emoji.data[i][0].length; j++){
					a.push(emoji.data[i][0][j]);
					emoji.map.unified[emoji.data[i][0][j]] = i;
				}
			}

			emoji.rx_unified = new RegExp('('+a.join('|')+')', "g");
		};
		emoji.init_env = function(){
			if (emoji.inits.env) return;
			emoji.inits.env = 1;
			emoji.replace_mode = 'img';
			emoji.supports_css = false;
			var ua = navigator.userAgent;
			if (window.getComputedStyle){
				var st = window.getComputedStyle(document.body);
				if (st['background-size'] || st['backgroundSize']){
					emoji.supports_css = true;
				}
			}
			if (ua.match(/(iPhone|iPod|iPad|iPhone\s+Simulator)/i)){
				if (ua.match(/OS\s+[12345]/i)){
					emoji.replace_mode = 'softbank';
					return;
				}
				if (ua.match(/OS\s+[6789]/i)){
					emoji.replace_mode = 'unified';
					return;
				}
			}
			if (ua.match(/Mac OS X 10[._ ][789]/i)){
				if (!ua.match(/Chrome/i)){
					emoji.replace_mode = 'unified';
					return;
				}
			}
			// Need a better way to detect android devices that actually
			// support emoji.
			if (false){
				emoji.replace_mode = 'google';
				return;
			}
			if (emoji.supports_css){
				emoji.replace_mode = 'css';
			}
			// nothing fancy detected - use images
		};
		emoji.escape_rx = function(text) {
			return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
		};
		emoji.sheet_size = 30;
		emoji.data = {
			"00a9":[["\u00A9"],"\uE24E","\uDBBA\uDF29",["copyright"],0,0],
			"00ae":[["\u00AE"],"\uE24F","\uDBBA\uDF2D",["registered"],0,1],
			"203c":[["\u203C\uFE0F","\u203C"],"","\uDBBA\uDF06",["bangbang"],0,2],
			"2049":[["\u2049\uFE0F","\u2049"],"","\uDBBA\uDF05",["interrobang"],0,3],
			"2122":[["\u2122"],"\uE537","\uDBBA\uDF2A",["tm"],0,4],
			"2139":[["\u2139\uFE0F","\u2139"],"","\uDBBA\uDF47",["information_source"],0,5],
			"2194":[["\u2194\uFE0F","\u2194"],"","\uDBBA\uDEF6",["left_right_arrow"],0,6],
			"2195":[["\u2195\uFE0F","\u2195"],"","\uDBBA\uDEF7",["arrow_up_down"],0,7],
			"2196":[["\u2196\uFE0F","\u2196"],"\uE237","\uDBBA\uDEF2",["arrow_upper_left"],0,8],
			"2197":[["\u2197\uFE0F","\u2197"],"\uE236","\uDBBA\uDEF0",["arrow_upper_right"],0,9],
			"2198":[["\u2198\uFE0F","\u2198"],"\uE238","\uDBBA\uDEF1",["arrow_lower_right"],0,10],
			"2199":[["\u2199\uFE0F","\u2199"],"\uE239","\uDBBA\uDEF3",["arrow_lower_left"],0,11],
			"21a9":[["\u21A9\uFE0F","\u21A9"],"","\uDBBA\uDF83",["leftwards_arrow_with_hook"],0,12],
			"21aa":[["\u21AA\uFE0F","\u21AA"],"","\uDBBA\uDF88",["arrow_right_hook"],0,13],
			"231a":[["\u231A\uFE0F","\u231A"],"","\uDBB8\uDC1D",["watch"],0,14],
			"231b":[["\u231B\uFE0F","\u231B"],"","\uDBB8\uDC1C",["hourglass"],0,15],
			"23e9":[["\u23E9"],"\uE23C","\uDBBA\uDEFE",["fast_forward"],0,16],
			"23ea":[["\u23EA"],"\uE23D","\uDBBA\uDEFF",["rewind"],0,17],
			"23eb":[["\u23EB"],"","\uDBBA\uDF03",["arrow_double_up"],0,18],
			"23ec":[["\u23EC"],"","\uDBBA\uDF02",["arrow_double_down"],0,19],
			"23f0":[["\u23F0"],"\uE02D","\uDBB8\uDC2A",["alarm_clock"],0,20],
			"23f3":[["\u23F3"],"","\uDBB8\uDC1B",["hourglass_flowing_sand"],0,21],
			"24c2":[["\u24C2\uFE0F","\u24C2"],"\uE434","\uDBB9\uDFE1",["m"],0,22],
			"25aa":[["\u25AA\uFE0F","\u25AA"],"\uE21A","\uDBBA\uDF6E",["black_small_square"],0,23],
			"25ab":[["\u25AB\uFE0F","\u25AB"],"\uE21B","\uDBBA\uDF6D",["white_small_square"],0,24],
			"25b6":[["\u25B6\uFE0F","\u25B6"],"\uE23A","\uDBBA\uDEFC",["arrow_forward"],0,25],
			"25c0":[["\u25C0\uFE0F","\u25C0"],"\uE23B","\uDBBA\uDEFD",["arrow_backward"],0,26],
			"25fb":[["\u25FB\uFE0F","\u25FB"],"\uE21B","\uDBBA\uDF71",["white_medium_square"],0,27],
			"25fc":[["\u25FC\uFE0F","\u25FC"],"\uE21A","\uDBBA\uDF72",["black_medium_square"],0,28],
			"25fd":[["\u25FD\uFE0F","\u25FD"],"\uE21B","\uDBBA\uDF6F",["white_medium_small_square"],0,29],
			"25fe":[["\u25FE\uFE0F","\u25FE"],"\uE21A","\uDBBA\uDF70",["black_medium_small_square"],1,0],
			"2600":[["\u2600\uFE0F","\u2600"],"\uE04A","\uDBB8\uDC00",["sunny"],1,1],
			"2601":[["\u2601\uFE0F","\u2601"],"\uE049","\uDBB8\uDC01",["cloud"],1,2],
			"260e":[["\u260E\uFE0F","\u260E"],"\uE009","\uDBB9\uDD23",["phone","telephone"],1,3],
			"2611":[["\u2611\uFE0F","\u2611"],"","\uDBBA\uDF8B",["ballot_box_with_check"],1,4],
			"2614":[["\u2614\uFE0F","\u2614"],"\uE04B","\uDBB8\uDC02",["umbrella"],1,5],
			"2615":[["\u2615\uFE0F","\u2615"],"\uE045","\uDBBA\uDD81",["coffee"],1,6],
			"261d":[["\u261D\uFE0F","\u261D"],"\uE00F","\uDBBA\uDF98",["point_up"],1,7],
			"263a":[["\u263A\uFE0F","\u263A"],"\uE414","\uDBB8\uDF36",["relaxed"],1,8],
			"2648":[["\u2648\uFE0F","\u2648"],"\uE23F","\uDBB8\uDC2B",["aries"],1,9],
			"2649":[["\u2649\uFE0F","\u2649"],"\uE240","\uDBB8\uDC2C",["taurus"],1,10],
			"264a":[["\u264A\uFE0F","\u264A"],"\uE241","\uDBB8\uDC2D",["gemini"],1,11],
			"264b":[["\u264B\uFE0F","\u264B"],"\uE242","\uDBB8\uDC2E",["cancer"],1,12],
			"264c":[["\u264C\uFE0F","\u264C"],"\uE243","\uDBB8\uDC2F",["leo"],1,13],
			"264d":[["\u264D\uFE0F","\u264D"],"\uE244","\uDBB8\uDC30",["virgo"],1,14],
			"264e":[["\u264E\uFE0F","\u264E"],"\uE245","\uDBB8\uDC31",["libra"],1,15],
			"264f":[["\u264F\uFE0F","\u264F"],"\uE246","\uDBB8\uDC32",["scorpius"],1,16],
			"2650":[["\u2650\uFE0F","\u2650"],"\uE247","\uDBB8\uDC33",["sagittarius"],1,17],
			"2651":[["\u2651\uFE0F","\u2651"],"\uE248","\uDBB8\uDC34",["capricorn"],1,18],
			"2652":[["\u2652\uFE0F","\u2652"],"\uE249","\uDBB8\uDC35",["aquarius"],1,19],
			"2653":[["\u2653\uFE0F","\u2653"],"\uE24A","\uDBB8\uDC36",["pisces"],1,20],
			"2660":[["\u2660\uFE0F","\u2660"],"\uE20E","\uDBBA\uDF1B",["spades"],1,21],
			"2663":[["\u2663\uFE0F","\u2663"],"\uE20F","\uDBBA\uDF1D",["clubs"],1,22],
			"2665":[["\u2665\uFE0F","\u2665"],"\uE20C","\uDBBA\uDF1A",["hearts"],1,23],
			"2666":[["\u2666\uFE0F","\u2666"],"\uE20D","\uDBBA\uDF1C",["diamonds"],1,24],
			"2668":[["\u2668\uFE0F","\u2668"],"\uE123","\uDBB9\uDFFA",["hotsprings"],1,25],
			"267b":[["\u267B\uFE0F","\u267B"],"","\uDBBA\uDF2C",["recycle"],1,26],
			"267f":[["\u267F\uFE0F","\u267F"],"\uE20A","\uDBBA\uDF20",["wheelchair"],1,27],
			"2693":[["\u2693\uFE0F","\u2693"],"\uE202","\uDBB9\uDCC1",["anchor"],1,28],
			"26a0":[["\u26A0\uFE0F","\u26A0"],"\uE252","\uDBBA\uDF23",["warning"],1,29],
			"26a1":[["\u26A1\uFE0F","\u26A1"],"\uE13D","\uDBB8\uDC04",["zap"],2,0],
			"26aa":[["\u26AA\uFE0F","\u26AA"],"\uE219","\uDBBA\uDF65",["white_circle"],2,1],
			"26ab":[["\u26AB\uFE0F","\u26AB"],"\uE219","\uDBBA\uDF66",["black_circle"],2,2],
			"26bd":[["\u26BD\uFE0F","\u26BD"],"\uE018","\uDBB9\uDFD4",["soccer"],2,3],
			"26be":[["\u26BE\uFE0F","\u26BE"],"\uE016","\uDBB9\uDFD1",["baseball"],2,4],
			"26c4":[["\u26C4\uFE0F","\u26C4"],"\uE048","\uDBB8\uDC03",["snowman"],2,5],
			"26c5":[["\u26C5\uFE0F","\u26C5"],"\uE04A\uE049","\uDBB8\uDC0F",["partly_sunny"],2,6],
			"26ce":[["\u26CE"],"\uE24B","\uDBB8\uDC37",["ophiuchus"],2,7],
			"26d4":[["\u26D4\uFE0F","\u26D4"],"\uE137","\uDBBA\uDF26",["no_entry"],2,8],
			"26ea":[["\u26EA\uFE0F","\u26EA"],"\uE037","\uDBB9\uDCBB",["church"],2,9],
			"26f2":[["\u26F2\uFE0F","\u26F2"],"\uE121","\uDBB9\uDCBC",["fountain"],2,10],
			"26f3":[["\u26F3\uFE0F","\u26F3"],"\uE014","\uDBB9\uDFD2",["golf"],2,11],
			"26f5":[["\u26F5\uFE0F","\u26F5"],"\uE01C","\uDBB9\uDFEA",["boat","sailboat"],2,12],
			"26fa":[["\u26FA\uFE0F","\u26FA"],"\uE122","\uDBB9\uDFFB",["tent"],2,13],
			"26fd":[["\u26FD\uFE0F","\u26FD"],"\uE03A","\uDBB9\uDFF5",["fuelpump"],2,14],
			"2702":[["\u2702\uFE0F","\u2702"],"\uE313","\uDBB9\uDD3E",["scissors"],2,15],
			"2705":[["\u2705"],"","\uDBBA\uDF4A",["white_check_mark"],2,16],
			"2708":[["\u2708\uFE0F","\u2708"],"\uE01D","\uDBB9\uDFE9",["airplane"],2,17],
			"2709":[["\u2709\uFE0F","\u2709"],"\uE103","\uDBB9\uDD29",["email","envelope"],2,18],
			"270a":[["\u270A"],"\uE010","\uDBBA\uDF93",["fist"],2,19],
			"270b":[["\u270B"],"\uE012","\uDBBA\uDF95",["hand","raised_hand"],2,20],
			"270c":[["\u270C\uFE0F","\u270C"],"\uE011","\uDBBA\uDF94",["v"],2,21],
			"270f":[["\u270F\uFE0F","\u270F"],"\uE301","\uDBB9\uDD39",["pencil2"],2,22],
			"2712":[["\u2712\uFE0F","\u2712"],"","\uDBB9\uDD36",["black_nib"],2,23],
			"2714":[["\u2714\uFE0F","\u2714"],"","\uDBBA\uDF49",["heavy_check_mark"],2,24],
			"2716":[["\u2716\uFE0F","\u2716"],"\uE333","\uDBBA\uDF53",["heavy_multiplication_x"],2,25],
			"2728":[["\u2728"],"\uE32E","\uDBBA\uDF60",["sparkles"],2,26],
			"2733":[["\u2733\uFE0F","\u2733"],"\uE206","\uDBBA\uDF62",["eight_spoked_asterisk"],2,27],
			"2734":[["\u2734\uFE0F","\u2734"],"\uE205","\uDBBA\uDF61",["eight_pointed_black_star"],2,28],
			"2744":[["\u2744\uFE0F","\u2744"],"","\uDBB8\uDC0E",["snowflake"],2,29],
			"2747":[["\u2747\uFE0F","\u2747"],"\uE32E","\uDBBA\uDF77",["sparkle"],3,0],
			"274c":[["\u274C"],"\uE333","\uDBBA\uDF45",["x"],3,1],
			"274e":[["\u274E"],"\uE333","\uDBBA\uDF46",["negative_squared_cross_mark"],3,2],
			"2753":[["\u2753"],"\uE020","\uDBBA\uDF09",["question"],3,3],
			"2754":[["\u2754"],"\uE336","\uDBBA\uDF0A",["grey_question"],3,4],
			"2755":[["\u2755"],"\uE337","\uDBBA\uDF0B",["grey_exclamation"],3,5],
			"2757":[["\u2757\uFE0F","\u2757"],"\uE021","\uDBBA\uDF04",["exclamation","heavy_exclamation_mark"],3,6],
			"2764":[["\u2764\uFE0F","\u2764"],"\uE022","\uDBBA\uDF0C",["heart"],3,7,"<3"],
			"2795":[["\u2795"],"","\uDBBA\uDF51",["heavy_plus_sign"],3,8],
			"2796":[["\u2796"],"","\uDBBA\uDF52",["heavy_minus_sign"],3,9],
			"2797":[["\u2797"],"","\uDBBA\uDF54",["heavy_division_sign"],3,10],
			"27a1":[["\u27A1\uFE0F","\u27A1"],"\uE234","\uDBBA\uDEFA",["arrow_right"],3,11],
			"27b0":[["\u27B0"],"","\uDBBA\uDF08",["curly_loop"],3,12],
			"27bf":[["\u27BF"],"\uE211","\uDBBA\uDC2B",["loop"],3,13],
			"2934":[["\u2934\uFE0F","\u2934"],"\uE236","\uDBBA\uDEF4",["arrow_heading_up"],3,14],
			"2935":[["\u2935\uFE0F","\u2935"],"\uE238","\uDBBA\uDEF5",["arrow_heading_down"],3,15],
			"2b05":[["\u2B05\uFE0F","\u2B05"],"\uE235","\uDBBA\uDEFB",["arrow_left"],3,16],
			"2b06":[["\u2B06\uFE0F","\u2B06"],"\uE232","\uDBBA\uDEF8",["arrow_up"],3,17],
			"2b07":[["\u2B07\uFE0F","\u2B07"],"\uE233","\uDBBA\uDEF9",["arrow_down"],3,18],
			"2b1b":[["\u2B1B\uFE0F","\u2B1B"],"\uE21A","\uDBBA\uDF6C",["black_large_square"],3,19],
			"2b1c":[["\u2B1C\uFE0F","\u2B1C"],"\uE21B","\uDBBA\uDF6B",["white_large_square"],3,20],
			"2b50":[["\u2B50\uFE0F","\u2B50"],"\uE32F","\uDBBA\uDF68",["star"],3,21],
			"2b55":[["\u2B55\uFE0F","\u2B55"],"\uE332","\uDBBA\uDF44",["o"],3,22],
			"3030":[["\u3030"],"","\uDBBA\uDF07",["wavy_dash"],3,23],
			"303d":[["\u303D\uFE0F","\u303D"],"\uE12C","\uDBBA\uDC1B",["part_alternation_mark"],3,24],
			"3297":[["\u3297\uFE0F","\u3297"],"\uE30D","\uDBBA\uDF43",["congratulations"],3,25],
			"3299":[["\u3299\uFE0F","\u3299"],"\uE315","\uDBBA\uDF2B",["secret"],3,26],
			"1f004":[["\uD83C\uDC04\uFE0F","\uD83C\uDC04"],"\uE12D","\uDBBA\uDC0B",["mahjong"],3,27],
			"1f0cf":[["\uD83C\uDCCF"],"","\uDBBA\uDC12",["black_joker"],3,28],
			"1f170":[["\uD83C\uDD70"],"\uE532","\uDBB9\uDD0B",["a"],3,29],
			"1f171":[["\uD83C\uDD71"],"\uE533","\uDBB9\uDD0C",["b"],4,0],
			"1f17e":[["\uD83C\uDD7E"],"\uE535","\uDBB9\uDD0E",["o2"],4,1],
			"1f17f":[["\uD83C\uDD7F\uFE0F","\uD83C\uDD7F"],"\uE14F","\uDBB9\uDFF6",["parking"],4,2],
			"1f18e":[["\uD83C\uDD8E"],"\uE534","\uDBB9\uDD0D",["ab"],4,3],
			"1f191":[["\uD83C\uDD91"],"","\uDBBA\uDF84",["cl"],4,4],
			"1f192":[["\uD83C\uDD92"],"\uE214","\uDBBA\uDF38",["cool"],4,5],
			"1f193":[["\uD83C\uDD93"],"","\uDBBA\uDF21",["free"],4,6],
			"1f194":[["\uD83C\uDD94"],"\uE229","\uDBBA\uDF81",["id"],4,7],
			"1f195":[["\uD83C\uDD95"],"\uE212","\uDBBA\uDF36",["new"],4,8],
			"1f196":[["\uD83C\uDD96"],"","\uDBBA\uDF28",["ng"],4,9],
			"1f197":[["\uD83C\uDD97"],"\uE24D","\uDBBA\uDF27",["ok"],4,10],
			"1f198":[["\uD83C\uDD98"],"","\uDBBA\uDF4F",["sos"],4,11],
			"1f199":[["\uD83C\uDD99"],"\uE213","\uDBBA\uDF37",["up"],4,12],
			"1f19a":[["\uD83C\uDD9A"],"\uE12E","\uDBBA\uDF32",["vs"],4,13],
			"1f201":[["\uD83C\uDE01"],"\uE203","\uDBBA\uDF24",["koko"],4,14],
			"1f202":[["\uD83C\uDE02"],"\uE228","\uDBBA\uDF3F",["sa"],4,15],
			"1f21a":[["\uD83C\uDE1A\uFE0F","\uD83C\uDE1A"],"\uE216","\uDBBA\uDF3A",["u7121"],4,16],
			"1f22f":[["\uD83C\uDE2F\uFE0F","\uD83C\uDE2F"],"\uE22C","\uDBBA\uDF40",["u6307"],4,17],
			"1f232":[["\uD83C\uDE32"],"","\uDBBA\uDF2E",["u7981"],4,18],
			"1f233":[["\uD83C\uDE33"],"\uE22B","\uDBBA\uDF2F",["u7a7a"],4,19],
			"1f234":[["\uD83C\uDE34"],"","\uDBBA\uDF30",["u5408"],4,20],
			"1f235":[["\uD83C\uDE35"],"\uE22A","\uDBBA\uDF31",["u6e80"],4,21],
			"1f236":[["\uD83C\uDE36"],"\uE215","\uDBBA\uDF39",["u6709"],4,22],
			"1f237":[["\uD83C\uDE37"],"\uE217","\uDBBA\uDF3B",["u6708"],4,23],
			"1f238":[["\uD83C\uDE38"],"\uE218","\uDBBA\uDF3C",["u7533"],4,24],
			"1f239":[["\uD83C\uDE39"],"\uE227","\uDBBA\uDF3E",["u5272"],4,25],
			"1f23a":[["\uD83C\uDE3A"],"\uE22D","\uDBBA\uDF41",["u55b6"],4,26],
			"1f250":[["\uD83C\uDE50"],"\uE226","\uDBBA\uDF3D",["ideograph_advantage"],4,27],
			"1f251":[["\uD83C\uDE51"],"","\uDBBA\uDF50",["accept"],4,28],
			"1f300":[["\uD83C\uDF00"],"\uE443","\uDBB8\uDC05",["cyclone"],4,29],
			"1f301":[["\uD83C\uDF01"],"","\uDBB8\uDC06",["foggy"],5,0],
			"1f302":[["\uD83C\uDF02"],"\uE43C","\uDBB8\uDC07",["closed_umbrella"],5,1],
			"1f303":[["\uD83C\uDF03"],"\uE44B","\uDBB8\uDC08",["night_with_stars"],5,2],
			"1f304":[["\uD83C\uDF04"],"\uE04D","\uDBB8\uDC09",["sunrise_over_mountains"],5,3],
			"1f305":[["\uD83C\uDF05"],"\uE449","\uDBB8\uDC0A",["sunrise"],5,4],
			"1f306":[["\uD83C\uDF06"],"\uE146","\uDBB8\uDC0B",["city_sunset"],5,5],
			"1f307":[["\uD83C\uDF07"],"\uE44A","\uDBB8\uDC0C",["city_sunrise"],5,6],
			"1f308":[["\uD83C\uDF08"],"\uE44C","\uDBB8\uDC0D",["rainbow"],5,7],
			"1f309":[["\uD83C\uDF09"],"\uE44B","\uDBB8\uDC10",["bridge_at_night"],5,8],
			"1f30a":[["\uD83C\uDF0A"],"\uE43E","\uDBB8\uDC38",["ocean"],5,9],
			"1f30b":[["\uD83C\uDF0B"],"","\uDBB8\uDC3A",["volcano"],5,10],
			"1f30c":[["\uD83C\uDF0C"],"\uE44B","\uDBB8\uDC3B",["milky_way"],5,11],
			"1f30d":[["\uD83C\uDF0D"],"","",["earth_africa"],5,12],
			"1f30e":[["\uD83C\uDF0E"],"","",["earth_americas"],5,13],
			"1f30f":[["\uD83C\uDF0F"],"","\uDBB8\uDC39",["earth_asia"],5,14],
			"1f310":[["\uD83C\uDF10"],"","",["globe_with_meridians"],5,15],
			"1f311":[["\uD83C\uDF11"],"","\uDBB8\uDC11",["new_moon"],5,16],
			"1f312":[["\uD83C\uDF12"],"","",["waxing_crescent_moon"],5,17],
			"1f313":[["\uD83C\uDF13"],"\uE04C","\uDBB8\uDC13",["first_quarter_moon"],5,18],
			"1f314":[["\uD83C\uDF14"],"\uE04C","\uDBB8\uDC12",["moon","waxing_gibbous_moon"],5,19],
			"1f315":[["\uD83C\uDF15"],"","\uDBB8\uDC15",["full_moon"],5,20],
			"1f316":[["\uD83C\uDF16"],"","",["waning_gibbous_moon"],5,21],
			"1f317":[["\uD83C\uDF17"],"","",["last_quarter_moon"],5,22],
			"1f318":[["\uD83C\uDF18"],"","",["waning_crescent_moon"],5,23],
			"1f319":[["\uD83C\uDF19"],"\uE04C","\uDBB8\uDC14",["crescent_moon"],5,24],
			"1f31a":[["\uD83C\uDF1A"],"","",["new_moon_with_face"],5,25],
			"1f31b":[["\uD83C\uDF1B"],"\uE04C","\uDBB8\uDC16",["first_quarter_moon_with_face"],5,26],
			"1f31c":[["\uD83C\uDF1C"],"","",["last_quarter_moon_with_face"],5,27],
			"1f31d":[["\uD83C\uDF1D"],"","",["full_moon_with_face"],5,28],
			"1f31e":[["\uD83C\uDF1E"],"","",["sun_with_face"],5,29],
			"1f31f":[["\uD83C\uDF1F"],"\uE335","\uDBBA\uDF69",["star2"],6,0],
			"1f320":[["\uD83C\uDF20"],"","\uDBBA\uDF6A",["stars"],6,1],
			"1f330":[["\uD83C\uDF30"],"","\uDBB8\uDC4C",["chestnut"],6,2],
			"1f331":[["\uD83C\uDF31"],"\uE110","\uDBB8\uDC3E",["seedling"],6,3],
			"1f332":[["\uD83C\uDF32"],"","",["evergreen_tree"],6,4],
			"1f333":[["\uD83C\uDF33"],"","",["deciduous_tree"],6,5],
			"1f334":[["\uD83C\uDF34"],"\uE307","\uDBB8\uDC47",["palm_tree"],6,6],
			"1f335":[["\uD83C\uDF35"],"\uE308","\uDBB8\uDC48",["cactus"],6,7],
			"1f337":[["\uD83C\uDF37"],"\uE304","\uDBB8\uDC3D",["tulip"],6,8],
			"1f338":[["\uD83C\uDF38"],"\uE030","\uDBB8\uDC40",["cherry_blossom"],6,9],
			"1f339":[["\uD83C\uDF39"],"\uE032","\uDBB8\uDC41",["rose"],6,10],
			"1f33a":[["\uD83C\uDF3A"],"\uE303","\uDBB8\uDC45",["hibiscus"],6,11],
			"1f33b":[["\uD83C\uDF3B"],"\uE305","\uDBB8\uDC46",["sunflower"],6,12],
			"1f33c":[["\uD83C\uDF3C"],"\uE305","\uDBB8\uDC4D",["blossom"],6,13],
			"1f33d":[["\uD83C\uDF3D"],"","\uDBB8\uDC4A",["corn"],6,14],
			"1f33e":[["\uD83C\uDF3E"],"\uE444","\uDBB8\uDC49",["ear_of_rice"],6,15],
			"1f33f":[["\uD83C\uDF3F"],"\uE110","\uDBB8\uDC4E",["herb"],6,16],
			"1f340":[["\uD83C\uDF40"],"\uE110","\uDBB8\uDC3C",["four_leaf_clover"],6,17],
			"1f341":[["\uD83C\uDF41"],"\uE118","\uDBB8\uDC3F",["maple_leaf"],6,18],
			"1f342":[["\uD83C\uDF42"],"\uE119","\uDBB8\uDC42",["fallen_leaf"],6,19],
			"1f343":[["\uD83C\uDF43"],"\uE447","\uDBB8\uDC43",["leaves"],6,20],
			"1f344":[["\uD83C\uDF44"],"","\uDBB8\uDC4B",["mushroom"],6,21],
			"1f345":[["\uD83C\uDF45"],"\uE349","\uDBB8\uDC55",["tomato"],6,22],
			"1f346":[["\uD83C\uDF46"],"\uE34A","\uDBB8\uDC56",["eggplant"],6,23],
			"1f347":[["\uD83C\uDF47"],"","\uDBB8\uDC59",["grapes"],6,24],
			"1f348":[["\uD83C\uDF48"],"","\uDBB8\uDC57",["melon"],6,25],
			"1f349":[["\uD83C\uDF49"],"\uE348","\uDBB8\uDC54",["watermelon"],6,26],
			"1f34a":[["\uD83C\uDF4A"],"\uE346","\uDBB8\uDC52",["tangerine"],6,27],
			"1f34b":[["\uD83C\uDF4B"],"","",["lemon"],6,28],
			"1f34c":[["\uD83C\uDF4C"],"","\uDBB8\uDC50",["banana"],6,29],
			"1f34d":[["\uD83C\uDF4D"],"","\uDBB8\uDC58",["pineapple"],7,0],
			"1f34e":[["\uD83C\uDF4E"],"\uE345","\uDBB8\uDC51",["apple"],7,1],
			"1f34f":[["\uD83C\uDF4F"],"\uE345","\uDBB8\uDC5B",["green_apple"],7,2],
			"1f350":[["\uD83C\uDF50"],"","",["pear"],7,3],
			"1f351":[["\uD83C\uDF51"],"","\uDBB8\uDC5A",["peach"],7,4],
			"1f352":[["\uD83C\uDF52"],"","\uDBB8\uDC4F",["cherries"],7,5],
			"1f353":[["\uD83C\uDF53"],"\uE347","\uDBB8\uDC53",["strawberry"],7,6],
			"1f354":[["\uD83C\uDF54"],"\uE120","\uDBBA\uDD60",["hamburger"],7,7],
			"1f355":[["\uD83C\uDF55"],"","\uDBBA\uDD75",["pizza"],7,8],
			"1f356":[["\uD83C\uDF56"],"","\uDBBA\uDD72",["meat_on_bone"],7,9],
			"1f357":[["\uD83C\uDF57"],"","\uDBBA\uDD76",["poultry_leg"],7,10],
			"1f358":[["\uD83C\uDF58"],"\uE33D","\uDBBA\uDD69",["rice_cracker"],7,11],
			"1f359":[["\uD83C\uDF59"],"\uE342","\uDBBA\uDD61",["rice_ball"],7,12],
			"1f35a":[["\uD83C\uDF5A"],"\uE33E","\uDBBA\uDD6A",["rice"],7,13],
			"1f35b":[["\uD83C\uDF5B"],"\uE341","\uDBBA\uDD6C",["curry"],7,14],
			"1f35c":[["\uD83C\uDF5C"],"\uE340","\uDBBA\uDD63",["ramen"],7,15],
			"1f35d":[["\uD83C\uDF5D"],"\uE33F","\uDBBA\uDD6B",["spaghetti"],7,16],
			"1f35e":[["\uD83C\uDF5E"],"\uE339","\uDBBA\uDD64",["bread"],7,17],
			"1f35f":[["\uD83C\uDF5F"],"\uE33B","\uDBBA\uDD67",["fries"],7,18],
			"1f360":[["\uD83C\uDF60"],"","\uDBBA\uDD74",["sweet_potato"],7,19],
			"1f361":[["\uD83C\uDF61"],"\uE33C","\uDBBA\uDD68",["dango"],7,20],
			"1f362":[["\uD83C\uDF62"],"\uE343","\uDBBA\uDD6D",["oden"],7,21],
			"1f363":[["\uD83C\uDF63"],"\uE344","\uDBBA\uDD6E",["sushi"],7,22],
			"1f364":[["\uD83C\uDF64"],"","\uDBBA\uDD7F",["fried_shrimp"],7,23],
			"1f365":[["\uD83C\uDF65"],"","\uDBBA\uDD73",["fish_cake"],7,24],
			"1f366":[["\uD83C\uDF66"],"\uE33A","\uDBBA\uDD66",["icecream"],7,25],
			"1f367":[["\uD83C\uDF67"],"\uE43F","\uDBBA\uDD71",["shaved_ice"],7,26],
			"1f368":[["\uD83C\uDF68"],"","\uDBBA\uDD77",["ice_cream"],7,27],
			"1f369":[["\uD83C\uDF69"],"","\uDBBA\uDD78",["doughnut"],7,28],
			"1f36a":[["\uD83C\uDF6A"],"","\uDBBA\uDD79",["cookie"],7,29],
			"1f36b":[["\uD83C\uDF6B"],"","\uDBBA\uDD7A",["chocolate_bar"],8,0],
			"1f36c":[["\uD83C\uDF6C"],"","\uDBBA\uDD7B",["candy"],8,1],
			"1f36d":[["\uD83C\uDF6D"],"","\uDBBA\uDD7C",["lollipop"],8,2],
			"1f36e":[["\uD83C\uDF6E"],"","\uDBBA\uDD7D",["custard"],8,3],
			"1f36f":[["\uD83C\uDF6F"],"","\uDBBA\uDD7E",["honey_pot"],8,4],
			"1f370":[["\uD83C\uDF70"],"\uE046","\uDBBA\uDD62",["cake"],8,5],
			"1f371":[["\uD83C\uDF71"],"\uE34C","\uDBBA\uDD6F",["bento"],8,6],
			"1f372":[["\uD83C\uDF72"],"\uE34D","\uDBBA\uDD70",["stew"],8,7],
			"1f373":[["\uD83C\uDF73"],"\uE147","\uDBBA\uDD65",["egg"],8,8],
			"1f374":[["\uD83C\uDF74"],"\uE043","\uDBBA\uDD80",["fork_and_knife"],8,9],
			"1f375":[["\uD83C\uDF75"],"\uE338","\uDBBA\uDD84",["tea"],8,10],
			"1f376":[["\uD83C\uDF76"],"\uE30B","\uDBBA\uDD85",["sake"],8,11],
			"1f377":[["\uD83C\uDF77"],"\uE044","\uDBBA\uDD86",["wine_glass"],8,12],
			"1f378":[["\uD83C\uDF78"],"\uE044","\uDBBA\uDD82",["cocktail"],8,13],
			"1f379":[["\uD83C\uDF79"],"\uE044","\uDBBA\uDD88",["tropical_drink"],8,14],
			"1f37a":[["\uD83C\uDF7A"],"\uE047","\uDBBA\uDD83",["beer"],8,15],
			"1f37b":[["\uD83C\uDF7B"],"\uE30C","\uDBBA\uDD87",["beers"],8,16],
			"1f37c":[["\uD83C\uDF7C"],"","",["baby_bottle"],8,17],
			"1f380":[["\uD83C\uDF80"],"\uE314","\uDBB9\uDD0F",["ribbon"],8,18],
			"1f381":[["\uD83C\uDF81"],"\uE112","\uDBB9\uDD10",["gift"],8,19],
			"1f382":[["\uD83C\uDF82"],"\uE34B","\uDBB9\uDD11",["birthday"],8,20],
			"1f383":[["\uD83C\uDF83"],"\uE445","\uDBB9\uDD1F",["jack_o_lantern"],8,21],
			"1f384":[["\uD83C\uDF84"],"\uE033","\uDBB9\uDD12",["christmas_tree"],8,22],
			"1f385":[["\uD83C\uDF85"],"\uE448","\uDBB9\uDD13",["santa"],8,23],
			"1f386":[["\uD83C\uDF86"],"\uE117","\uDBB9\uDD15",["fireworks"],8,24],
			"1f387":[["\uD83C\uDF87"],"\uE440","\uDBB9\uDD1D",["sparkler"],8,25],
			"1f388":[["\uD83C\uDF88"],"\uE310","\uDBB9\uDD16",["balloon"],8,26],
			"1f389":[["\uD83C\uDF89"],"\uE312","\uDBB9\uDD17",["tada"],8,27],
			"1f38a":[["\uD83C\uDF8A"],"","\uDBB9\uDD20",["confetti_ball"],8,28],
			"1f38b":[["\uD83C\uDF8B"],"","\uDBB9\uDD21",["tanabata_tree"],8,29],
			"1f38c":[["\uD83C\uDF8C"],"\uE143","\uDBB9\uDD14",["crossed_flags"],9,0],
			"1f38d":[["\uD83C\uDF8D"],"\uE436","\uDBB9\uDD18",["bamboo"],9,1],
			"1f38e":[["\uD83C\uDF8E"],"\uE438","\uDBB9\uDD19",["dolls"],9,2],
			"1f38f":[["\uD83C\uDF8F"],"\uE43B","\uDBB9\uDD1C",["flags"],9,3],
			"1f390":[["\uD83C\uDF90"],"\uE442","\uDBB9\uDD1E",["wind_chime"],9,4],
			"1f391":[["\uD83C\uDF91"],"\uE446","\uDBB8\uDC17",["rice_scene"],9,5],
			"1f392":[["\uD83C\uDF92"],"\uE43A","\uDBB9\uDD1B",["school_satchel"],9,6],
			"1f393":[["\uD83C\uDF93"],"\uE439","\uDBB9\uDD1A",["mortar_board"],9,7],
			"1f3a0":[["\uD83C\uDFA0"],"","\uDBB9\uDFFC",["carousel_horse"],9,8],
			"1f3a1":[["\uD83C\uDFA1"],"\uE124","\uDBB9\uDFFD",["ferris_wheel"],9,9],
			"1f3a2":[["\uD83C\uDFA2"],"\uE433","\uDBB9\uDFFE",["roller_coaster"],9,10],
			"1f3a3":[["\uD83C\uDFA3"],"\uE019","\uDBB9\uDFFF",["fishing_pole_and_fish"],9,11],
			"1f3a4":[["\uD83C\uDFA4"],"\uE03C","\uDBBA\uDC00",["microphone"],9,12],
			"1f3a5":[["\uD83C\uDFA5"],"\uE03D","\uDBBA\uDC01",["movie_camera"],9,13],
			"1f3a6":[["\uD83C\uDFA6"],"\uE507","\uDBBA\uDC02",["cinema"],9,14],
			"1f3a7":[["\uD83C\uDFA7"],"\uE30A","\uDBBA\uDC03",["headphones"],9,15],
			"1f3a8":[["\uD83C\uDFA8"],"\uE502","\uDBBA\uDC04",["art"],9,16],
			"1f3a9":[["\uD83C\uDFA9"],"\uE503","\uDBBA\uDC05",["tophat"],9,17],
			"1f3aa":[["\uD83C\uDFAA"],"","\uDBBA\uDC06",["circus_tent"],9,18],
			"1f3ab":[["\uD83C\uDFAB"],"\uE125","\uDBBA\uDC07",["ticket"],9,19],
			"1f3ac":[["\uD83C\uDFAC"],"\uE324","\uDBBA\uDC08",["clapper"],9,20],
			"1f3ad":[["\uD83C\uDFAD"],"\uE503","\uDBBA\uDC09",["performing_arts"],9,21],
			"1f3ae":[["\uD83C\uDFAE"],"","\uDBBA\uDC0A",["video_game"],9,22],
			"1f3af":[["\uD83C\uDFAF"],"\uE130","\uDBBA\uDC0C",["dart"],9,23],
			"1f3b0":[["\uD83C\uDFB0"],"\uE133","\uDBBA\uDC0D",["slot_machine"],9,24],
			"1f3b1":[["\uD83C\uDFB1"],"\uE42C","\uDBBA\uDC0E",["8ball"],9,25],
			"1f3b2":[["\uD83C\uDFB2"],"","\uDBBA\uDC0F",["game_die"],9,26],
			"1f3b3":[["\uD83C\uDFB3"],"","\uDBBA\uDC10",["bowling"],9,27],
			"1f3b4":[["\uD83C\uDFB4"],"","\uDBBA\uDC11",["flower_playing_cards"],9,28],
			"1f3b5":[["\uD83C\uDFB5"],"\uE03E","\uDBBA\uDC13",["musical_note"],9,29],
			"1f3b6":[["\uD83C\uDFB6"],"\uE326","\uDBBA\uDC14",["notes"],10,0],
			"1f3b7":[["\uD83C\uDFB7"],"\uE040","\uDBBA\uDC15",["saxophone"],10,1],
			"1f3b8":[["\uD83C\uDFB8"],"\uE041","\uDBBA\uDC16",["guitar"],10,2],
			"1f3b9":[["\uD83C\uDFB9"],"","\uDBBA\uDC17",["musical_keyboard"],10,3],
			"1f3ba":[["\uD83C\uDFBA"],"\uE042","\uDBBA\uDC18",["trumpet"],10,4],
			"1f3bb":[["\uD83C\uDFBB"],"","\uDBBA\uDC19",["violin"],10,5],
			"1f3bc":[["\uD83C\uDFBC"],"\uE326","\uDBBA\uDC1A",["musical_score"],10,6],
			"1f3bd":[["\uD83C\uDFBD"],"","\uDBB9\uDFD0",["running_shirt_with_sash"],10,7],
			"1f3be":[["\uD83C\uDFBE"],"\uE015","\uDBB9\uDFD3",["tennis"],10,8],
			"1f3bf":[["\uD83C\uDFBF"],"\uE013","\uDBB9\uDFD5",["ski"],10,9],
			"1f3c0":[["\uD83C\uDFC0"],"\uE42A","\uDBB9\uDFD6",["basketball"],10,10],
			"1f3c1":[["\uD83C\uDFC1"],"\uE132","\uDBB9\uDFD7",["checkered_flag"],10,11],
			"1f3c2":[["\uD83C\uDFC2"],"","\uDBB9\uDFD8",["snowboarder"],10,12],
			"1f3c3":[["\uD83C\uDFC3"],"\uE115","\uDBB9\uDFD9",["runner","running"],10,13],
			"1f3c4":[["\uD83C\uDFC4"],"\uE017","\uDBB9\uDFDA",["surfer"],10,14],
			"1f3c6":[["\uD83C\uDFC6"],"\uE131","\uDBB9\uDFDB",["trophy"],10,15],
			"1f3c7":[["\uD83C\uDFC7"],"","",["horse_racing"],10,16],
			"1f3c8":[["\uD83C\uDFC8"],"\uE42B","\uDBB9\uDFDD",["football"],10,17],
			"1f3c9":[["\uD83C\uDFC9"],"","",["rugby_football"],10,18],
			"1f3ca":[["\uD83C\uDFCA"],"\uE42D","\uDBB9\uDFDE",["swimmer"],10,19],
			"1f3e0":[["\uD83C\uDFE0"],"\uE036","\uDBB9\uDCB0",["house"],10,20],
			"1f3e1":[["\uD83C\uDFE1"],"\uE036","\uDBB9\uDCB1",["house_with_garden"],10,21],
			"1f3e2":[["\uD83C\uDFE2"],"\uE038","\uDBB9\uDCB2",["office"],10,22],
			"1f3e3":[["\uD83C\uDFE3"],"\uE153","\uDBB9\uDCB3",["post_office"],10,23],
			"1f3e4":[["\uD83C\uDFE4"],"","",["european_post_office"],10,24],
			"1f3e5":[["\uD83C\uDFE5"],"\uE155","\uDBB9\uDCB4",["hospital"],10,25],
			"1f3e6":[["\uD83C\uDFE6"],"\uE14D","\uDBB9\uDCB5",["bank"],10,26],
			"1f3e7":[["\uD83C\uDFE7"],"\uE154","\uDBB9\uDCB6",["atm"],10,27],
			"1f3e8":[["\uD83C\uDFE8"],"\uE158","\uDBB9\uDCB7",["hotel"],10,28],
			"1f3e9":[["\uD83C\uDFE9"],"\uE501","\uDBB9\uDCB8",["love_hotel"],10,29],
			"1f3ea":[["\uD83C\uDFEA"],"\uE156","\uDBB9\uDCB9",["convenience_store"],11,0],
			"1f3eb":[["\uD83C\uDFEB"],"\uE157","\uDBB9\uDCBA",["school"],11,1],
			"1f3ec":[["\uD83C\uDFEC"],"\uE504","\uDBB9\uDCBD",["department_store"],11,2],
			"1f3ed":[["\uD83C\uDFED"],"\uE508","\uDBB9\uDCC0",["factory"],11,3],
			"1f3ee":[["\uD83C\uDFEE"],"\uE30B","\uDBB9\uDCC2",["izakaya_lantern","lantern"],11,4],
			"1f3ef":[["\uD83C\uDFEF"],"\uE505","\uDBB9\uDCBE",["japanese_castle"],11,5],
			"1f3f0":[["\uD83C\uDFF0"],"\uE506","\uDBB9\uDCBF",["european_castle"],11,6],
			"1f400":[["\uD83D\uDC00"],"","",["rat"],11,7],
			"1f401":[["\uD83D\uDC01"],"","",["mouse2"],11,8],
			"1f402":[["\uD83D\uDC02"],"","",["ox"],11,9],
			"1f403":[["\uD83D\uDC03"],"","",["water_buffalo"],11,10],
			"1f404":[["\uD83D\uDC04"],"","",["cow2"],11,11],
			"1f405":[["\uD83D\uDC05"],"","",["tiger2"],11,12],
			"1f406":[["\uD83D\uDC06"],"","",["leopard"],11,13],
			"1f407":[["\uD83D\uDC07"],"","",["rabbit2"],11,14],
			"1f408":[["\uD83D\uDC08"],"","",["cat2"],11,15],
			"1f409":[["\uD83D\uDC09"],"","",["dragon"],11,16],
			"1f40a":[["\uD83D\uDC0A"],"","",["crocodile"],11,17],
			"1f40b":[["\uD83D\uDC0B"],"","",["whale2"],11,18],
			"1f40c":[["\uD83D\uDC0C"],"","\uDBB8\uDDB9",["snail"],11,19],
			"1f40d":[["\uD83D\uDC0D"],"\uE52D","\uDBB8\uDDD3",["snake"],11,20],
			"1f40e":[["\uD83D\uDC0E"],"\uE134","\uDBB9\uDFDC",["racehorse"],11,21],
			"1f40f":[["\uD83D\uDC0F"],"","",["ram"],11,22],
			"1f410":[["\uD83D\uDC10"],"","",["goat"],11,23],
			"1f411":[["\uD83D\uDC11"],"\uE529","\uDBB8\uDDCF",["sheep"],11,24],
			"1f412":[["\uD83D\uDC12"],"\uE528","\uDBB8\uDDCE",["monkey"],11,25],
			"1f413":[["\uD83D\uDC13"],"","",["rooster"],11,26],
			"1f414":[["\uD83D\uDC14"],"\uE52E","\uDBB8\uDDD4",["chicken"],11,27],
			"1f415":[["\uD83D\uDC15"],"","",["dog2"],11,28],
			"1f416":[["\uD83D\uDC16"],"","",["pig2"],11,29],
			"1f417":[["\uD83D\uDC17"],"\uE52F","\uDBB8\uDDD5",["boar"],12,0],
			"1f418":[["\uD83D\uDC18"],"\uE526","\uDBB8\uDDCC",["elephant"],12,1],
			"1f419":[["\uD83D\uDC19"],"\uE10A","\uDBB8\uDDC5",["octopus"],12,2],
			"1f41a":[["\uD83D\uDC1A"],"\uE441","\uDBB8\uDDC6",["shell"],12,3],
			"1f41b":[["\uD83D\uDC1B"],"\uE525","\uDBB8\uDDCB",["bug"],12,4],
			"1f41c":[["\uD83D\uDC1C"],"","\uDBB8\uDDDA",["ant"],12,5],
			"1f41d":[["\uD83D\uDC1D"],"","\uDBB8\uDDE1",["bee","honeybee"],12,6],
			"1f41e":[["\uD83D\uDC1E"],"","\uDBB8\uDDE2",["beetle"],12,7],
			"1f41f":[["\uD83D\uDC1F"],"\uE019","\uDBB8\uDDBD",["fish"],12,8],
			"1f420":[["\uD83D\uDC20"],"\uE522","\uDBB8\uDDC9",["tropical_fish"],12,9],
			"1f421":[["\uD83D\uDC21"],"\uE019","\uDBB8\uDDD9",["blowfish"],12,10],
			"1f422":[["\uD83D\uDC22"],"","\uDBB8\uDDDC",["turtle"],12,11],
			"1f423":[["\uD83D\uDC23"],"\uE523","\uDBB8\uDDDD",["hatching_chick"],12,12],
			"1f424":[["\uD83D\uDC24"],"\uE523","\uDBB8\uDDBA",["baby_chick"],12,13],
			"1f425":[["\uD83D\uDC25"],"\uE523","\uDBB8\uDDBB",["hatched_chick"],12,14],
			"1f426":[["\uD83D\uDC26"],"\uE521","\uDBB8\uDDC8",["bird"],12,15],
			"1f427":[["\uD83D\uDC27"],"\uE055","\uDBB8\uDDBC",["penguin"],12,16],
			"1f428":[["\uD83D\uDC28"],"\uE527","\uDBB8\uDDCD",["koala"],12,17],
			"1f429":[["\uD83D\uDC29"],"\uE052","\uDBB8\uDDD8",["poodle"],12,18],
			"1f42a":[["\uD83D\uDC2A"],"","",["dromedary_camel"],12,19],
			"1f42b":[["\uD83D\uDC2B"],"\uE530","\uDBB8\uDDD6",["camel"],12,20],
			"1f42c":[["\uD83D\uDC2C"],"\uE520","\uDBB8\uDDC7",["dolphin","flipper"],12,21],
			"1f42d":[["\uD83D\uDC2D"],"\uE053","\uDBB8\uDDC2",["mouse"],12,22],
			"1f42e":[["\uD83D\uDC2E"],"\uE52B","\uDBB8\uDDD1",["cow"],12,23],
			"1f42f":[["\uD83D\uDC2F"],"\uE050","\uDBB8\uDDC0",["tiger"],12,24],
			"1f430":[["\uD83D\uDC30"],"\uE52C","\uDBB8\uDDD2",["rabbit"],12,25],
			"1f431":[["\uD83D\uDC31"],"\uE04F","\uDBB8\uDDB8",["cat"],12,26],
			"1f432":[["\uD83D\uDC32"],"","\uDBB8\uDDDE",["dragon_face"],12,27],
			"1f433":[["\uD83D\uDC33"],"\uE054","\uDBB8\uDDC3",["whale"],12,28],
			"1f434":[["\uD83D\uDC34"],"\uE01A","\uDBB8\uDDBE",["horse"],12,29],
			"1f435":[["\uD83D\uDC35"],"\uE109","\uDBB8\uDDC4",["monkey_face"],13,0],
			"1f436":[["\uD83D\uDC36"],"\uE052","\uDBB8\uDDB7",["dog"],13,1],
			"1f437":[["\uD83D\uDC37"],"\uE10B","\uDBB8\uDDBF",["pig"],13,2],
			"1f438":[["\uD83D\uDC38"],"\uE531","\uDBB8\uDDD7",["frog"],13,3],
			"1f439":[["\uD83D\uDC39"],"\uE524","\uDBB8\uDDCA",["hamster"],13,4],
			"1f43a":[["\uD83D\uDC3A"],"\uE52A","\uDBB8\uDDD0",["wolf"],13,5],
			"1f43b":[["\uD83D\uDC3B"],"\uE051","\uDBB8\uDDC1",["bear"],13,6],
			"1f43c":[["\uD83D\uDC3C"],"","\uDBB8\uDDDF",["panda_face"],13,7],
			"1f43d":[["\uD83D\uDC3D"],"\uE10B","\uDBB8\uDDE0",["pig_nose"],13,8],
			"1f43e":[["\uD83D\uDC3E"],"\uE536","\uDBB8\uDDDB",["feet","paw_prints"],13,9],
			"1f440":[["\uD83D\uDC40"],"\uE419","\uDBB8\uDD90",["eyes"],13,10],
			"1f442":[["\uD83D\uDC42"],"\uE41B","\uDBB8\uDD91",["ear"],13,11],
			"1f443":[["\uD83D\uDC43"],"\uE41A","\uDBB8\uDD92",["nose"],13,12],
			"1f444":[["\uD83D\uDC44"],"\uE41C","\uDBB8\uDD93",["lips"],13,13],
			"1f445":[["\uD83D\uDC45"],"\uE409","\uDBB8\uDD94",["tongue"],13,14],
			"1f446":[["\uD83D\uDC46"],"\uE22E","\uDBBA\uDF99",["point_up_2"],13,15],
			"1f447":[["\uD83D\uDC47"],"\uE22F","\uDBBA\uDF9A",["point_down"],13,16],
			"1f448":[["\uD83D\uDC48"],"\uE230","\uDBBA\uDF9B",["point_left"],13,17],
			"1f449":[["\uD83D\uDC49"],"\uE231","\uDBBA\uDF9C",["point_right"],13,18],
			"1f44a":[["\uD83D\uDC4A"],"\uE00D","\uDBBA\uDF96",["facepunch","punch"],13,19],
			"1f44b":[["\uD83D\uDC4B"],"\uE41E","\uDBBA\uDF9D",["wave"],13,20],
			"1f44c":[["\uD83D\uDC4C"],"\uE420","\uDBBA\uDF9F",["ok_hand"],13,21],
			"1f44d":[["\uD83D\uDC4D"],"\uE00E","\uDBBA\uDF97",["+1","thumbsup"],13,22],
			"1f44e":[["\uD83D\uDC4E"],"\uE421","\uDBBA\uDFA0",["-1","thumbsdown"],13,23],
			"1f44f":[["\uD83D\uDC4F"],"\uE41F","\uDBBA\uDF9E",["clap"],13,24],
			"1f450":[["\uD83D\uDC50"],"\uE422","\uDBBA\uDFA1",["open_hands"],13,25],
			"1f451":[["\uD83D\uDC51"],"\uE10E","\uDBB9\uDCD1",["crown"],13,26],
			"1f452":[["\uD83D\uDC52"],"\uE318","\uDBB9\uDCD4",["womans_hat"],13,27],
			"1f453":[["\uD83D\uDC53"],"","\uDBB9\uDCCE",["eyeglasses"],13,28],
			"1f454":[["\uD83D\uDC54"],"\uE302","\uDBB9\uDCD3",["necktie"],13,29],
			"1f455":[["\uD83D\uDC55"],"\uE006","\uDBB9\uDCCF",["shirt","tshirt"],14,0],
			"1f456":[["\uD83D\uDC56"],"","\uDBB9\uDCD0",["jeans"],14,1],
			"1f457":[["\uD83D\uDC57"],"\uE319","\uDBB9\uDCD5",["dress"],14,2],
			"1f458":[["\uD83D\uDC58"],"\uE321","\uDBB9\uDCD9",["kimono"],14,3],
			"1f459":[["\uD83D\uDC59"],"\uE322","\uDBB9\uDCDA",["bikini"],14,4],
			"1f45a":[["\uD83D\uDC5A"],"\uE006","\uDBB9\uDCDB",["womans_clothes"],14,5],
			"1f45b":[["\uD83D\uDC5B"],"","\uDBB9\uDCDC",["purse"],14,6],
			"1f45c":[["\uD83D\uDC5C"],"\uE323","\uDBB9\uDCF0",["handbag"],14,7],
			"1f45d":[["\uD83D\uDC5D"],"","\uDBB9\uDCF1",["pouch"],14,8],
			"1f45e":[["\uD83D\uDC5E"],"\uE007","\uDBB9\uDCCC",["mans_shoe","shoe"],14,9],
			"1f45f":[["\uD83D\uDC5F"],"\uE007","\uDBB9\uDCCD",["athletic_shoe"],14,10],
			"1f460":[["\uD83D\uDC60"],"\uE13E","\uDBB9\uDCD6",["high_heel"],14,11],
			"1f461":[["\uD83D\uDC61"],"\uE31A","\uDBB9\uDCD7",["sandal"],14,12],
			"1f462":[["\uD83D\uDC62"],"\uE31B","\uDBB9\uDCD8",["boot"],14,13],
			"1f463":[["\uD83D\uDC63"],"\uE536","\uDBB9\uDD53",["footprints"],14,14],
			"1f464":[["\uD83D\uDC64"],"","\uDBB8\uDD9A",["bust_in_silhouette"],14,15],
			"1f465":[["\uD83D\uDC65"],"","",["busts_in_silhouette"],14,16],
			"1f466":[["\uD83D\uDC66"],"\uE001","\uDBB8\uDD9B",["boy"],14,17],
			"1f467":[["\uD83D\uDC67"],"\uE002","\uDBB8\uDD9C",["girl"],14,18],
			"1f468":[["\uD83D\uDC68"],"\uE004","\uDBB8\uDD9D",["man"],14,19],
			"1f469":[["\uD83D\uDC69"],"\uE005","\uDBB8\uDD9E",["woman"],14,20],
			"1f46a":[["\uD83D\uDC6A"],"","\uDBB8\uDD9F",["family"],14,21],
			"1f46b":[["\uD83D\uDC6B"],"\uE428","\uDBB8\uDDA0",["couple"],14,22],
			"1f46c":[["\uD83D\uDC6C"],"","",["two_men_holding_hands"],14,23],
			"1f46d":[["\uD83D\uDC6D"],"","",["two_women_holding_hands"],14,24],
			"1f46e":[["\uD83D\uDC6E"],"\uE152","\uDBB8\uDDA1",["cop"],14,25],
			"1f46f":[["\uD83D\uDC6F"],"\uE429","\uDBB8\uDDA2",["dancers"],14,26],
			"1f470":[["\uD83D\uDC70"],"","\uDBB8\uDDA3",["bride_with_veil"],14,27],
			"1f471":[["\uD83D\uDC71"],"\uE515","\uDBB8\uDDA4",["person_with_blond_hair"],14,28],
			"1f472":[["\uD83D\uDC72"],"\uE516","\uDBB8\uDDA5",["man_with_gua_pi_mao"],14,29],
			"1f473":[["\uD83D\uDC73"],"\uE517","\uDBB8\uDDA6",["man_with_turban"],15,0],
			"1f474":[["\uD83D\uDC74"],"\uE518","\uDBB8\uDDA7",["older_man"],15,1],
			"1f475":[["\uD83D\uDC75"],"\uE519","\uDBB8\uDDA8",["older_woman"],15,2],
			"1f476":[["\uD83D\uDC76"],"\uE51A","\uDBB8\uDDA9",["baby"],15,3],
			"1f477":[["\uD83D\uDC77"],"\uE51B","\uDBB8\uDDAA",["construction_worker"],15,4],
			"1f478":[["\uD83D\uDC78"],"\uE51C","\uDBB8\uDDAB",["princess"],15,5],
			"1f479":[["\uD83D\uDC79"],"","\uDBB8\uDDAC",["japanese_ogre"],15,6],
			"1f47a":[["\uD83D\uDC7A"],"","\uDBB8\uDDAD",["japanese_goblin"],15,7],
			"1f47b":[["\uD83D\uDC7B"],"\uE11B","\uDBB8\uDDAE",["ghost"],15,8],
			"1f47c":[["\uD83D\uDC7C"],"\uE04E","\uDBB8\uDDAF",["angel"],15,9],
			"1f47d":[["\uD83D\uDC7D"],"\uE10C","\uDBB8\uDDB0",["alien"],15,10],
			"1f47e":[["\uD83D\uDC7E"],"\uE12B","\uDBB8\uDDB1",["space_invader"],15,11],
			"1f47f":[["\uD83D\uDC7F"],"\uE11A","\uDBB8\uDDB2",["imp"],15,12],
			"1f480":[["\uD83D\uDC80"],"\uE11C","\uDBB8\uDDB3",["skull"],15,13],
			"1f481":[["\uD83D\uDC81"],"\uE253","\uDBB8\uDDB4",["information_desk_person"],15,14],
			"1f482":[["\uD83D\uDC82"],"\uE51E","\uDBB8\uDDB5",["guardsman"],15,15],
			"1f483":[["\uD83D\uDC83"],"\uE51F","\uDBB8\uDDB6",["dancer"],15,16],
			"1f484":[["\uD83D\uDC84"],"\uE31C","\uDBB8\uDD95",["lipstick"],15,17],
			"1f485":[["\uD83D\uDC85"],"\uE31D","\uDBB8\uDD96",["nail_care"],15,18],
			"1f486":[["\uD83D\uDC86"],"\uE31E","\uDBB8\uDD97",["massage"],15,19],
			"1f487":[["\uD83D\uDC87"],"\uE31F","\uDBB8\uDD98",["haircut"],15,20],
			"1f488":[["\uD83D\uDC88"],"\uE320","\uDBB8\uDD99",["barber"],15,21],
			"1f489":[["\uD83D\uDC89"],"\uE13B","\uDBB9\uDD09",["syringe"],15,22],
			"1f48a":[["\uD83D\uDC8A"],"\uE30F","\uDBB9\uDD0A",["pill"],15,23],
			"1f48b":[["\uD83D\uDC8B"],"\uE003","\uDBBA\uDC23",["kiss"],15,24],
			"1f48c":[["\uD83D\uDC8C"],"\uE103\uE328","\uDBBA\uDC24",["love_letter"],15,25],
			"1f48d":[["\uD83D\uDC8D"],"\uE034","\uDBBA\uDC25",["ring"],15,26],
			"1f48e":[["\uD83D\uDC8E"],"\uE035","\uDBBA\uDC26",["gem"],15,27],
			"1f48f":[["\uD83D\uDC8F"],"\uE111","\uDBBA\uDC27",["couplekiss"],15,28],
			"1f490":[["\uD83D\uDC90"],"\uE306","\uDBBA\uDC28",["bouquet"],15,29],
			"1f491":[["\uD83D\uDC91"],"\uE425","\uDBBA\uDC29",["couple_with_heart"],16,0],
			"1f492":[["\uD83D\uDC92"],"\uE43D","\uDBBA\uDC2A",["wedding"],16,1],
			"1f493":[["\uD83D\uDC93"],"\uE327","\uDBBA\uDF0D",["heartbeat"],16,2],
			"1f494":[["\uD83D\uDC94"],"\uE023","\uDBBA\uDF0E",["broken_heart"],16,3,"<\/3"],
			"1f495":[["\uD83D\uDC95"],"\uE327","\uDBBA\uDF0F",["two_hearts"],16,4],
			"1f496":[["\uD83D\uDC96"],"\uE327","\uDBBA\uDF10",["sparkling_heart"],16,5],
			"1f497":[["\uD83D\uDC97"],"\uE328","\uDBBA\uDF11",["heartpulse"],16,6],
			"1f498":[["\uD83D\uDC98"],"\uE329","\uDBBA\uDF12",["cupid"],16,7],
			"1f499":[["\uD83D\uDC99"],"\uE32A","\uDBBA\uDF13",["blue_heart"],16,8,"<3"],
			"1f49a":[["\uD83D\uDC9A"],"\uE32B","\uDBBA\uDF14",["green_heart"],16,9,"<3"],
			"1f49b":[["\uD83D\uDC9B"],"\uE32C","\uDBBA\uDF15",["yellow_heart"],16,10,"<3"],
			"1f49c":[["\uD83D\uDC9C"],"\uE32D","\uDBBA\uDF16",["purple_heart"],16,11,"<3"],
			"1f49d":[["\uD83D\uDC9D"],"\uE437","\uDBBA\uDF17",["gift_heart"],16,12],
			"1f49e":[["\uD83D\uDC9E"],"\uE327","\uDBBA\uDF18",["revolving_hearts"],16,13],
			"1f49f":[["\uD83D\uDC9F"],"\uE204","\uDBBA\uDF19",["heart_decoration"],16,14],
			"1f4a0":[["\uD83D\uDCA0"],"","\uDBBA\uDF55",["diamond_shape_with_a_dot_inside"],16,15],
			"1f4a1":[["\uD83D\uDCA1"],"\uE10F","\uDBBA\uDF56",["bulb"],16,16],
			"1f4a2":[["\uD83D\uDCA2"],"\uE334","\uDBBA\uDF57",["anger"],16,17],
			"1f4a3":[["\uD83D\uDCA3"],"\uE311","\uDBBA\uDF58",["bomb"],16,18],
			"1f4a4":[["\uD83D\uDCA4"],"\uE13C","\uDBBA\uDF59",["zzz"],16,19],
			"1f4a5":[["\uD83D\uDCA5"],"","\uDBBA\uDF5A",["boom","collision"],16,20],
			"1f4a6":[["\uD83D\uDCA6"],"\uE331","\uDBBA\uDF5B",["sweat_drops"],16,21],
			"1f4a7":[["\uD83D\uDCA7"],"\uE331","\uDBBA\uDF5C",["droplet"],16,22],
			"1f4a8":[["\uD83D\uDCA8"],"\uE330","\uDBBA\uDF5D",["dash"],16,23],
			"1f4a9":[["\uD83D\uDCA9"],"\uE05A","\uDBB9\uDCF4",["hankey","poop","shit"],16,24],
			"1f4aa":[["\uD83D\uDCAA"],"\uE14C","\uDBBA\uDF5E",["muscle"],16,25],
			"1f4ab":[["\uD83D\uDCAB"],"\uE407","\uDBBA\uDF5F",["dizzy"],16,26],
			"1f4ac":[["\uD83D\uDCAC"],"","\uDBB9\uDD32",["speech_balloon"],16,27],
			"1f4ad":[["\uD83D\uDCAD"],"","",["thought_balloon"],16,28],
			"1f4ae":[["\uD83D\uDCAE"],"","\uDBBA\uDF7A",["white_flower"],16,29],
			"1f4af":[["\uD83D\uDCAF"],"","\uDBBA\uDF7B",["100"],17,0],
			"1f4b0":[["\uD83D\uDCB0"],"\uE12F","\uDBB9\uDCDD",["moneybag"],17,1],
			"1f4b1":[["\uD83D\uDCB1"],"\uE149","\uDBB9\uDCDE",["currency_exchange"],17,2],
			"1f4b2":[["\uD83D\uDCB2"],"\uE12F","\uDBB9\uDCE0",["heavy_dollar_sign"],17,3],
			"1f4b3":[["\uD83D\uDCB3"],"","\uDBB9\uDCE1",["credit_card"],17,4],
			"1f4b4":[["\uD83D\uDCB4"],"","\uDBB9\uDCE2",["yen"],17,5],
			"1f4b5":[["\uD83D\uDCB5"],"\uE12F","\uDBB9\uDCE3",["dollar"],17,6],
			"1f4b6":[["\uD83D\uDCB6"],"","",["euro"],17,7],
			"1f4b7":[["\uD83D\uDCB7"],"","",["pound"],17,8],
			"1f4b8":[["\uD83D\uDCB8"],"","\uDBB9\uDCE4",["money_with_wings"],17,9],
			"1f4b9":[["\uD83D\uDCB9"],"\uE14A","\uDBB9\uDCDF",["chart"],17,10],
			"1f4ba":[["\uD83D\uDCBA"],"\uE11F","\uDBB9\uDD37",["seat"],17,11],
			"1f4bb":[["\uD83D\uDCBB"],"\uE00C","\uDBB9\uDD38",["computer"],17,12],
			"1f4bc":[["\uD83D\uDCBC"],"\uE11E","\uDBB9\uDD3B",["briefcase"],17,13],
			"1f4bd":[["\uD83D\uDCBD"],"\uE316","\uDBB9\uDD3C",["minidisc"],17,14],
			"1f4be":[["\uD83D\uDCBE"],"\uE316","\uDBB9\uDD3D",["floppy_disk"],17,15],
			"1f4bf":[["\uD83D\uDCBF"],"\uE126","\uDBBA\uDC1D",["cd"],17,16],
			"1f4c0":[["\uD83D\uDCC0"],"\uE127","\uDBBA\uDC1E",["dvd"],17,17],
			"1f4c1":[["\uD83D\uDCC1"],"","\uDBB9\uDD43",["file_folder"],17,18],
			"1f4c2":[["\uD83D\uDCC2"],"","\uDBB9\uDD44",["open_file_folder"],17,19],
			"1f4c3":[["\uD83D\uDCC3"],"\uE301","\uDBB9\uDD40",["page_with_curl"],17,20],
			"1f4c4":[["\uD83D\uDCC4"],"\uE301","\uDBB9\uDD41",["page_facing_up"],17,21],
			"1f4c5":[["\uD83D\uDCC5"],"","\uDBB9\uDD42",["date"],17,22],
			"1f4c6":[["\uD83D\uDCC6"],"","\uDBB9\uDD49",["calendar"],17,23],
			"1f4c7":[["\uD83D\uDCC7"],"\uE148","\uDBB9\uDD4D",["card_index"],17,24],
			"1f4c8":[["\uD83D\uDCC8"],"\uE14A","\uDBB9\uDD4B",["chart_with_upwards_trend"],17,25],
			"1f4c9":[["\uD83D\uDCC9"],"","\uDBB9\uDD4C",["chart_with_downwards_trend"],17,26],
			"1f4ca":[["\uD83D\uDCCA"],"\uE14A","\uDBB9\uDD4A",["bar_chart"],17,27],
			"1f4cb":[["\uD83D\uDCCB"],"\uE301","\uDBB9\uDD48",["clipboard"],17,28],
			"1f4cc":[["\uD83D\uDCCC"],"","\uDBB9\uDD4E",["pushpin"],17,29],
			"1f4cd":[["\uD83D\uDCCD"],"","\uDBB9\uDD3F",["round_pushpin"],18,0],
			"1f4ce":[["\uD83D\uDCCE"],"","\uDBB9\uDD3A",["paperclip"],18,1],
			"1f4cf":[["\uD83D\uDCCF"],"","\uDBB9\uDD50",["straight_ruler"],18,2],
			"1f4d0":[["\uD83D\uDCD0"],"","\uDBB9\uDD51",["triangular_ruler"],18,3],
			"1f4d1":[["\uD83D\uDCD1"],"\uE301","\uDBB9\uDD52",["bookmark_tabs"],18,4],
			"1f4d2":[["\uD83D\uDCD2"],"\uE148","\uDBB9\uDD4F",["ledger"],18,5],
			"1f4d3":[["\uD83D\uDCD3"],"\uE148","\uDBB9\uDD45",["notebook"],18,6],
			"1f4d4":[["\uD83D\uDCD4"],"\uE148","\uDBB9\uDD47",["notebook_with_decorative_cover"],18,7],
			"1f4d5":[["\uD83D\uDCD5"],"\uE148","\uDBB9\uDD02",["closed_book"],18,8],
			"1f4d6":[["\uD83D\uDCD6"],"\uE148","\uDBB9\uDD46",["book","open_book"],18,9],
			"1f4d7":[["\uD83D\uDCD7"],"\uE148","\uDBB9\uDCFF",["green_book"],18,10],
			"1f4d8":[["\uD83D\uDCD8"],"\uE148","\uDBB9\uDD00",["blue_book"],18,11],
			"1f4d9":[["\uD83D\uDCD9"],"\uE148","\uDBB9\uDD01",["orange_book"],18,12],
			"1f4da":[["\uD83D\uDCDA"],"\uE148","\uDBB9\uDD03",["books"],18,13],
			"1f4db":[["\uD83D\uDCDB"],"","\uDBB9\uDD04",["name_badge"],18,14],
			"1f4dc":[["\uD83D\uDCDC"],"","\uDBB9\uDCFD",["scroll"],18,15],
			"1f4dd":[["\uD83D\uDCDD"],"\uE301","\uDBB9\uDD27",["memo","pencil"],18,16],
			"1f4de":[["\uD83D\uDCDE"],"\uE009","\uDBB9\uDD24",["telephone_receiver"],18,17],
			"1f4df":[["\uD83D\uDCDF"],"","\uDBB9\uDD22",["pager"],18,18],
			"1f4e0":[["\uD83D\uDCE0"],"\uE00B","\uDBB9\uDD28",["fax"],18,19],
			"1f4e1":[["\uD83D\uDCE1"],"\uE14B","\uDBB9\uDD31",["satellite"],18,20],
			"1f4e2":[["\uD83D\uDCE2"],"\uE142","\uDBB9\uDD2F",["loudspeaker"],18,21],
			"1f4e3":[["\uD83D\uDCE3"],"\uE317","\uDBB9\uDD30",["mega"],18,22],
			"1f4e4":[["\uD83D\uDCE4"],"","\uDBB9\uDD33",["outbox_tray"],18,23],
			"1f4e5":[["\uD83D\uDCE5"],"","\uDBB9\uDD34",["inbox_tray"],18,24],
			"1f4e6":[["\uD83D\uDCE6"],"\uE112","\uDBB9\uDD35",["package"],18,25],
			"1f4e7":[["\uD83D\uDCE7"],"\uE103","\uDBBA\uDF92",["e-mail"],18,26],
			"1f4e8":[["\uD83D\uDCE8"],"\uE103","\uDBB9\uDD2A",["incoming_envelope"],18,27],
			"1f4e9":[["\uD83D\uDCE9"],"\uE103","\uDBB9\uDD2B",["envelope_with_arrow"],18,28],
			"1f4ea":[["\uD83D\uDCEA"],"\uE101","\uDBB9\uDD2C",["mailbox_closed"],18,29],
			"1f4eb":[["\uD83D\uDCEB"],"\uE101","\uDBB9\uDD2D",["mailbox"],19,0],
			"1f4ec":[["\uD83D\uDCEC"],"","",["mailbox_with_mail"],19,1],
			"1f4ed":[["\uD83D\uDCED"],"","",["mailbox_with_no_mail"],19,2],
			"1f4ee":[["\uD83D\uDCEE"],"\uE102","\uDBB9\uDD2E",["postbox"],19,3],
			"1f4ef":[["\uD83D\uDCEF"],"","",["postal_horn"],19,4],
			"1f4f0":[["\uD83D\uDCF0"],"","\uDBBA\uDC22",["newspaper"],19,5],
			"1f4f1":[["\uD83D\uDCF1"],"\uE00A","\uDBB9\uDD25",["iphone"],19,6],
			"1f4f2":[["\uD83D\uDCF2"],"\uE104","\uDBB9\uDD26",["calling"],19,7],
			"1f4f3":[["\uD83D\uDCF3"],"\uE250","\uDBBA\uDC39",["vibration_mode"],19,8],
			"1f4f4":[["\uD83D\uDCF4"],"\uE251","\uDBBA\uDC3A",["mobile_phone_off"],19,9],
			"1f4f5":[["\uD83D\uDCF5"],"","",["no_mobile_phones"],19,10],
			"1f4f6":[["\uD83D\uDCF6"],"\uE20B","\uDBBA\uDC38",["signal_strength"],19,11],
			"1f4f7":[["\uD83D\uDCF7"],"\uE008","\uDBB9\uDCEF",["camera"],19,12],
			"1f4f9":[["\uD83D\uDCF9"],"\uE03D","\uDBB9\uDCF9",["video_camera"],19,13],
			"1f4fa":[["\uD83D\uDCFA"],"\uE12A","\uDBBA\uDC1C",["tv"],19,14],
			"1f4fb":[["\uD83D\uDCFB"],"\uE128","\uDBBA\uDC1F",["radio"],19,15],
			"1f4fc":[["\uD83D\uDCFC"],"\uE129","\uDBBA\uDC20",["vhs"],19,16],
			"1f500":[["\uD83D\uDD00"],"","",["twisted_rightwards_arrows"],19,17],
			"1f501":[["\uD83D\uDD01"],"","",["repeat"],19,18],
			"1f502":[["\uD83D\uDD02"],"","",["repeat_one"],19,19],
			"1f503":[["\uD83D\uDD03"],"","\uDBBA\uDF91",["arrows_clockwise"],19,20],
			"1f504":[["\uD83D\uDD04"],"","",["arrows_counterclockwise"],19,21],
			"1f505":[["\uD83D\uDD05"],"","",["low_brightness"],19,22],
			"1f506":[["\uD83D\uDD06"],"","",["high_brightness"],19,23],
			"1f507":[["\uD83D\uDD07"],"","",["mute"],19,24],
			"1f508":[["\uD83D\uDD08"],"","",["speaker"],19,25],
			"1f509":[["\uD83D\uDD09"],"","",["sound"],19,26],
			"1f50a":[["\uD83D\uDD0A"],"\uE141","\uDBBA\uDC21",["loud_sound"],19,27],
			"1f50b":[["\uD83D\uDD0B"],"","\uDBB9\uDCFC",["battery"],19,28],
			"1f50c":[["\uD83D\uDD0C"],"","\uDBB9\uDCFE",["electric_plug"],19,29],
			"1f50d":[["\uD83D\uDD0D"],"\uE114","\uDBBA\uDF85",["mag"],20,0],
			"1f50e":[["\uD83D\uDD0E"],"\uE114","\uDBBA\uDF8D",["mag_right"],20,1],
			"1f50f":[["\uD83D\uDD0F"],"\uE144","\uDBBA\uDF90",["lock_with_ink_pen"],20,2],
			"1f510":[["\uD83D\uDD10"],"\uE144","\uDBBA\uDF8A",["closed_lock_with_key"],20,3],
			"1f511":[["\uD83D\uDD11"],"\uE03F","\uDBBA\uDF82",["key"],20,4],
			"1f512":[["\uD83D\uDD12"],"\uE144","\uDBBA\uDF86",["lock"],20,5],
			"1f513":[["\uD83D\uDD13"],"\uE145","\uDBBA\uDF87",["unlock"],20,6],
			"1f514":[["\uD83D\uDD14"],"\uE325","\uDBB9\uDCF2",["bell"],20,7],
			"1f515":[["\uD83D\uDD15"],"","",["no_bell"],20,8],
			"1f516":[["\uD83D\uDD16"],"","\uDBBA\uDF8F",["bookmark"],20,9],
			"1f517":[["\uD83D\uDD17"],"","\uDBBA\uDF4B",["link"],20,10],
			"1f518":[["\uD83D\uDD18"],"","\uDBBA\uDF8C",["radio_button"],20,11],
			"1f519":[["\uD83D\uDD19"],"\uE235","\uDBBA\uDF8E",["back"],20,12],
			"1f51a":[["\uD83D\uDD1A"],"","\uDBB8\uDC1A",["end"],20,13],
			"1f51b":[["\uD83D\uDD1B"],"","\uDBB8\uDC19",["on"],20,14],
			"1f51c":[["\uD83D\uDD1C"],"","\uDBB8\uDC18",["soon"],20,15],
			"1f51d":[["\uD83D\uDD1D"],"\uE24C","\uDBBA\uDF42",["top"],20,16],
			"1f51e":[["\uD83D\uDD1E"],"\uE207","\uDBBA\uDF25",["underage"],20,17],
			"1f51f":[["\uD83D\uDD1F"],"","\uDBBA\uDC3B",["keycap_ten"],20,18],
			"1f520":[["\uD83D\uDD20"],"","\uDBBA\uDF7C",["capital_abcd"],20,19],
			"1f521":[["\uD83D\uDD21"],"","\uDBBA\uDF7D",["abcd"],20,20],
			"1f522":[["\uD83D\uDD22"],"","\uDBBA\uDF7E",["1234"],20,21],
			"1f523":[["\uD83D\uDD23"],"","\uDBBA\uDF7F",["symbols"],20,22],
			"1f524":[["\uD83D\uDD24"],"","\uDBBA\uDF80",["abc"],20,23],
			"1f525":[["\uD83D\uDD25"],"\uE11D","\uDBB9\uDCF6",["fire"],20,24],
			"1f526":[["\uD83D\uDD26"],"","\uDBB9\uDCFB",["flashlight"],20,25],
			"1f527":[["\uD83D\uDD27"],"","\uDBB9\uDCC9",["wrench"],20,26],
			"1f528":[["\uD83D\uDD28"],"\uE116","\uDBB9\uDCCA",["hammer"],20,27],
			"1f529":[["\uD83D\uDD29"],"","\uDBB9\uDCCB",["nut_and_bolt"],20,28],
			"1f52a":[["\uD83D\uDD2A"],"","\uDBB9\uDCFA",["hocho","knife"],20,29],
			"1f52b":[["\uD83D\uDD2B"],"\uE113","\uDBB9\uDCF5",["gun"],21,0],
			"1f52c":[["\uD83D\uDD2C"],"","",["microscope"],21,1],
			"1f52d":[["\uD83D\uDD2D"],"","",["telescope"],21,2],
			"1f52e":[["\uD83D\uDD2E"],"\uE23E","\uDBB9\uDCF7",["crystal_ball"],21,3],
			"1f52f":[["\uD83D\uDD2F"],"\uE23E","\uDBB9\uDCF8",["six_pointed_star"],21,4],
			"1f530":[["\uD83D\uDD30"],"\uE209","\uDBB8\uDC44",["beginner"],21,5],
			"1f531":[["\uD83D\uDD31"],"\uE031","\uDBB9\uDCD2",["trident"],21,6],
			"1f532":[["\uD83D\uDD32"],"\uE21A","\uDBBA\uDF64",["black_square_button"],21,7],
			"1f533":[["\uD83D\uDD33"],"\uE21B","\uDBBA\uDF67",["white_square_button"],21,8],
			"1f534":[["\uD83D\uDD34"],"\uE219","\uDBBA\uDF63",["red_circle"],21,9],
			"1f535":[["\uD83D\uDD35"],"\uE21A","\uDBBA\uDF64",["large_blue_circle"],21,10],
			"1f536":[["\uD83D\uDD36"],"\uE21B","\uDBBA\uDF73",["large_orange_diamond"],21,11],
			"1f537":[["\uD83D\uDD37"],"\uE21B","\uDBBA\uDF74",["large_blue_diamond"],21,12],
			"1f538":[["\uD83D\uDD38"],"\uE21B","\uDBBA\uDF75",["small_orange_diamond"],21,13],
			"1f539":[["\uD83D\uDD39"],"\uE21B","\uDBBA\uDF76",["small_blue_diamond"],21,14],
			"1f53a":[["\uD83D\uDD3A"],"","\uDBBA\uDF78",["small_red_triangle"],21,15],
			"1f53b":[["\uD83D\uDD3B"],"","\uDBBA\uDF79",["small_red_triangle_down"],21,16],
			"1f53c":[["\uD83D\uDD3C"],"","\uDBBA\uDF01",["arrow_up_small"],21,17],
			"1f53d":[["\uD83D\uDD3D"],"","\uDBBA\uDF00",["arrow_down_small"],21,18],
			"1f550":[["\uD83D\uDD50"],"\uE024","\uDBB8\uDC1E",["clock1"],21,19],
			"1f551":[["\uD83D\uDD51"],"\uE025","\uDBB8\uDC1F",["clock2"],21,20],
			"1f552":[["\uD83D\uDD52"],"\uE026","\uDBB8\uDC20",["clock3"],21,21],
			"1f553":[["\uD83D\uDD53"],"\uE027","\uDBB8\uDC21",["clock4"],21,22],
			"1f554":[["\uD83D\uDD54"],"\uE028","\uDBB8\uDC22",["clock5"],21,23],
			"1f555":[["\uD83D\uDD55"],"\uE029","\uDBB8\uDC23",["clock6"],21,24],
			"1f556":[["\uD83D\uDD56"],"\uE02A","\uDBB8\uDC24",["clock7"],21,25],
			"1f557":[["\uD83D\uDD57"],"\uE02B","\uDBB8\uDC25",["clock8"],21,26],
			"1f558":[["\uD83D\uDD58"],"\uE02C","\uDBB8\uDC26",["clock9"],21,27],
			"1f559":[["\uD83D\uDD59"],"\uE02D","\uDBB8\uDC27",["clock10"],21,28],
			"1f55a":[["\uD83D\uDD5A"],"\uE02E","\uDBB8\uDC28",["clock11"],21,29],
			"1f55b":[["\uD83D\uDD5B"],"\uE02F","\uDBB8\uDC29",["clock12"],22,0],
			"1f55c":[["\uD83D\uDD5C"],"","",["clock130"],22,1],
			"1f55d":[["\uD83D\uDD5D"],"","",["clock230"],22,2],
			"1f55e":[["\uD83D\uDD5E"],"","",["clock330"],22,3],
			"1f55f":[["\uD83D\uDD5F"],"","",["clock430"],22,4],
			"1f560":[["\uD83D\uDD60"],"","",["clock530"],22,5],
			"1f561":[["\uD83D\uDD61"],"","",["clock630"],22,6],
			"1f562":[["\uD83D\uDD62"],"","",["clock730"],22,7],
			"1f563":[["\uD83D\uDD63"],"","",["clock830"],22,8],
			"1f564":[["\uD83D\uDD64"],"","",["clock930"],22,9],
			"1f565":[["\uD83D\uDD65"],"","",["clock1030"],22,10],
			"1f566":[["\uD83D\uDD66"],"","",["clock1130"],22,11],
			"1f567":[["\uD83D\uDD67"],"","",["clock1230"],22,12],
			"1f5fb":[["\uD83D\uDDFB"],"\uE03B","\uDBB9\uDCC3",["mount_fuji"],22,13],
			"1f5fc":[["\uD83D\uDDFC"],"\uE509","\uDBB9\uDCC4",["tokyo_tower"],22,14],
			"1f5fd":[["\uD83D\uDDFD"],"\uE51D","\uDBB9\uDCC6",["statue_of_liberty"],22,15],
			"1f5fe":[["\uD83D\uDDFE"],"","\uDBB9\uDCC7",["japan"],22,16],
			"1f5ff":[["\uD83D\uDDFF"],"","\uDBB9\uDCC8",["moyai"],22,17],
			"1f600":[["\uD83D\uDE00"],"","",["grinning"],22,18,":D"],
			"1f601":[["\uD83D\uDE01"],"\uE404","\uDBB8\uDF33",["grin"],22,19],
			"1f602":[["\uD83D\uDE02"],"\uE412","\uDBB8\uDF34",["joy"],22,20],
			"1f603":[["\uD83D\uDE03"],"\uE057","\uDBB8\uDF30",["smiley"],22,21,":)"],
			"1f604":[["\uD83D\uDE04"],"\uE415","\uDBB8\uDF38",["smile"],22,22,":)"],
			"1f605":[["\uD83D\uDE05"],"\uE415\uE331","\uDBB8\uDF31",["sweat_smile"],22,23],
			"1f606":[["\uD83D\uDE06"],"\uE40A","\uDBB8\uDF32",["laughing","satisfied"],22,24],
			"1f607":[["\uD83D\uDE07"],"","",["innocent"],22,25],
			"1f608":[["\uD83D\uDE08"],"","",["smiling_imp"],22,26],
			"1f609":[["\uD83D\uDE09"],"\uE405","\uDBB8\uDF47",["wink"],22,27,";)"],
			"1f60a":[["\uD83D\uDE0A"],"\uE056","\uDBB8\uDF35",["blush"],22,28],
			"1f60b":[["\uD83D\uDE0B"],"\uE056","\uDBB8\uDF2B",["yum"],22,29],
			"1f60c":[["\uD83D\uDE0C"],"\uE40A","\uDBB8\uDF3E",["relieved"],23,0],
			"1f60d":[["\uD83D\uDE0D"],"\uE106","\uDBB8\uDF27",["heart_eyes"],23,1],
			"1f60e":[["\uD83D\uDE0E"],"","",["sunglasses"],23,2],
			"1f60f":[["\uD83D\uDE0F"],"\uE402","\uDBB8\uDF43",["smirk"],23,3],
			"1f610":[["\uD83D\uDE10"],"","",["neutral_face"],23,4],
			"1f611":[["\uD83D\uDE11"],"","",["expressionless"],23,5],
			"1f612":[["\uD83D\uDE12"],"\uE40E","\uDBB8\uDF26",["unamused"],23,6],
			"1f613":[["\uD83D\uDE13"],"\uE108","\uDBB8\uDF44",["sweat"],23,7],
			"1f614":[["\uD83D\uDE14"],"\uE403","\uDBB8\uDF40",["pensive"],23,8],
			"1f615":[["\uD83D\uDE15"],"","",["confused"],23,9],
			"1f616":[["\uD83D\uDE16"],"\uE407","\uDBB8\uDF3F",["confounded"],23,10],
			"1f617":[["\uD83D\uDE17"],"","",["kissing"],23,11],
			"1f618":[["\uD83D\uDE18"],"\uE418","\uDBB8\uDF2C",["kissing_heart"],23,12],
			"1f619":[["\uD83D\uDE19"],"","",["kissing_smiling_eyes"],23,13],
			"1f61a":[["\uD83D\uDE1A"],"\uE417","\uDBB8\uDF2D",["kissing_closed_eyes"],23,14],
			"1f61b":[["\uD83D\uDE1B"],"","",["stuck_out_tongue"],23,15,":p"],
			"1f61c":[["\uD83D\uDE1C"],"\uE105","\uDBB8\uDF29",["stuck_out_tongue_winking_eye"],23,16,";p"],
			"1f61d":[["\uD83D\uDE1D"],"\uE409","\uDBB8\uDF2A",["stuck_out_tongue_closed_eyes"],23,17],
			"1f61e":[["\uD83D\uDE1E"],"\uE058","\uDBB8\uDF23",["disappointed"],23,18,":("],
			"1f61f":[["\uD83D\uDE1F"],"","",["worried"],23,19],
			"1f620":[["\uD83D\uDE20"],"\uE059","\uDBB8\uDF20",["angry"],23,20],
			"1f621":[["\uD83D\uDE21"],"\uE416","\uDBB8\uDF3D",["rage"],23,21],
			"1f622":[["\uD83D\uDE22"],"\uE413","\uDBB8\uDF39",["cry"],23,22,":'("],
			"1f623":[["\uD83D\uDE23"],"\uE406","\uDBB8\uDF3C",["persevere"],23,23],
			"1f624":[["\uD83D\uDE24"],"\uE404","\uDBB8\uDF28",["triumph"],23,24],
			"1f625":[["\uD83D\uDE25"],"\uE401","\uDBB8\uDF45",["disappointed_relieved"],23,25],
			"1f626":[["\uD83D\uDE26"],"","",["frowning"],23,26],
			"1f627":[["\uD83D\uDE27"],"","",["anguished"],23,27],
			"1f628":[["\uD83D\uDE28"],"\uE40B","\uDBB8\uDF3B",["fearful"],23,28],
			"1f629":[["\uD83D\uDE29"],"\uE403","\uDBB8\uDF21",["weary"],23,29],
			"1f62a":[["\uD83D\uDE2A"],"\uE408","\uDBB8\uDF42",["sleepy"],24,0],
			"1f62b":[["\uD83D\uDE2B"],"\uE406","\uDBB8\uDF46",["tired_face"],24,1],
			"1f62c":[["\uD83D\uDE2C"],"","",["grimacing"],24,2],
			"1f62d":[["\uD83D\uDE2D"],"\uE411","\uDBB8\uDF3A",["sob"],24,3,":'("],
			"1f62e":[["\uD83D\uDE2E"],"","",["open_mouth"],24,4],
			"1f62f":[["\uD83D\uDE2F"],"","",["hushed"],24,5],
			"1f630":[["\uD83D\uDE30"],"\uE40F","\uDBB8\uDF25",["cold_sweat"],24,6],
			"1f631":[["\uD83D\uDE31"],"\uE107","\uDBB8\uDF41",["scream"],24,7],
			"1f632":[["\uD83D\uDE32"],"\uE410","\uDBB8\uDF22",["astonished"],24,8],
			"1f633":[["\uD83D\uDE33"],"\uE40D","\uDBB8\uDF2F",["flushed"],24,9],
			"1f634":[["\uD83D\uDE34"],"","",["sleeping"],24,10],
			"1f635":[["\uD83D\uDE35"],"\uE406","\uDBB8\uDF24",["dizzy_face"],24,11],
			"1f636":[["\uD83D\uDE36"],"","",["no_mouth"],24,12],
			"1f637":[["\uD83D\uDE37"],"\uE40C","\uDBB8\uDF2E",["mask"],24,13],
			"1f638":[["\uD83D\uDE38"],"\uE404","\uDBB8\uDF49",["smile_cat"],24,14],
			"1f639":[["\uD83D\uDE39"],"\uE412","\uDBB8\uDF4A",["joy_cat"],24,15],
			"1f63a":[["\uD83D\uDE3A"],"\uE057","\uDBB8\uDF48",["smiley_cat"],24,16],
			"1f63b":[["\uD83D\uDE3B"],"\uE106","\uDBB8\uDF4C",["heart_eyes_cat"],24,17],
			"1f63c":[["\uD83D\uDE3C"],"\uE404","\uDBB8\uDF4F",["smirk_cat"],24,18],
			"1f63d":[["\uD83D\uDE3D"],"\uE418","\uDBB8\uDF4B",["kissing_cat"],24,19],
			"1f63e":[["\uD83D\uDE3E"],"\uE416","\uDBB8\uDF4E",["pouting_cat"],24,20],
			"1f63f":[["\uD83D\uDE3F"],"\uE413","\uDBB8\uDF4D",["crying_cat_face"],24,21],
			"1f640":[["\uD83D\uDE40"],"\uE403","\uDBB8\uDF50",["scream_cat"],24,22],
			"1f645":[["\uD83D\uDE45"],"\uE423","\uDBB8\uDF51",["no_good"],24,23],
			"1f646":[["\uD83D\uDE46"],"\uE424","\uDBB8\uDF52",["ok_woman"],24,24],
			"1f647":[["\uD83D\uDE47"],"\uE426","\uDBB8\uDF53",["bow"],24,25],
			"1f648":[["\uD83D\uDE48"],"","\uDBB8\uDF54",["see_no_evil"],24,26],
			"1f649":[["\uD83D\uDE49"],"","\uDBB8\uDF56",["hear_no_evil"],24,27],
			"1f64a":[["\uD83D\uDE4A"],"","\uDBB8\uDF55",["speak_no_evil"],24,28],
			"1f64b":[["\uD83D\uDE4B"],"\uE012","\uDBB8\uDF57",["raising_hand"],24,29],
			"1f64c":[["\uD83D\uDE4C"],"\uE427","\uDBB8\uDF58",["raised_hands"],25,0],
			"1f64d":[["\uD83D\uDE4D"],"\uE403","\uDBB8\uDF59",["person_frowning"],25,1],
			"1f64e":[["\uD83D\uDE4E"],"\uE416","\uDBB8\uDF5A",["person_with_pouting_face"],25,2],
			"1f64f":[["\uD83D\uDE4F"],"\uE41D","\uDBB8\uDF5B",["pray"],25,3],
			"1f680":[["\uD83D\uDE80"],"\uE10D","\uDBB9\uDFED",["rocket"],25,4],
			"1f681":[["\uD83D\uDE81"],"","",["helicopter"],25,5],
			"1f682":[["\uD83D\uDE82"],"","",["steam_locomotive"],25,6],
			"1f683":[["\uD83D\uDE83"],"\uE01E","\uDBB9\uDFDF",["railway_car"],25,7],
			"1f684":[["\uD83D\uDE84"],"\uE435","\uDBB9\uDFE2",["bullettrain_side"],25,8],
			"1f685":[["\uD83D\uDE85"],"\uE01F","\uDBB9\uDFE3",["bullettrain_front"],25,9],
			"1f686":[["\uD83D\uDE86"],"","",["train2"],25,10],
			"1f687":[["\uD83D\uDE87"],"\uE434","\uDBB9\uDFE0",["metro"],25,11],
			"1f688":[["\uD83D\uDE88"],"","",["light_rail"],25,12],
			"1f689":[["\uD83D\uDE89"],"\uE039","\uDBB9\uDFEC",["station"],25,13],
			"1f68a":[["\uD83D\uDE8A"],"","",["tram"],25,14],
			"1f68b":[["\uD83D\uDE8B"],"","",["train"],25,15],
			"1f68c":[["\uD83D\uDE8C"],"\uE159","\uDBB9\uDFE6",["bus"],25,16],
			"1f68d":[["\uD83D\uDE8D"],"","",["oncoming_bus"],25,17],
			"1f68e":[["\uD83D\uDE8E"],"","",["trolleybus"],25,18],
			"1f68f":[["\uD83D\uDE8F"],"\uE150","\uDBB9\uDFE7",["busstop"],25,19],
			"1f690":[["\uD83D\uDE90"],"","",["minibus"],25,20],
			"1f691":[["\uD83D\uDE91"],"\uE431","\uDBB9\uDFF3",["ambulance"],25,21],
			"1f692":[["\uD83D\uDE92"],"\uE430","\uDBB9\uDFF2",["fire_engine"],25,22],
			"1f693":[["\uD83D\uDE93"],"\uE432","\uDBB9\uDFF4",["police_car"],25,23],
			"1f694":[["\uD83D\uDE94"],"","",["oncoming_police_car"],25,24],
			"1f695":[["\uD83D\uDE95"],"\uE15A","\uDBB9\uDFEF",["taxi"],25,25],
			"1f696":[["\uD83D\uDE96"],"","",["oncoming_taxi"],25,26],
			"1f697":[["\uD83D\uDE97"],"\uE01B","\uDBB9\uDFE4",["car","red_car"],25,27],
			"1f698":[["\uD83D\uDE98"],"","",["oncoming_automobile"],25,28],
			"1f699":[["\uD83D\uDE99"],"\uE42E","\uDBB9\uDFE5",["blue_car"],25,29],
			"1f69a":[["\uD83D\uDE9A"],"\uE42F","\uDBB9\uDFF1",["truck"],26,0],
			"1f69b":[["\uD83D\uDE9B"],"","",["articulated_lorry"],26,1],
			"1f69c":[["\uD83D\uDE9C"],"","",["tractor"],26,2],
			"1f69d":[["\uD83D\uDE9D"],"","",["monorail"],26,3],
			"1f69e":[["\uD83D\uDE9E"],"","",["mountain_railway"],26,4],
			"1f69f":[["\uD83D\uDE9F"],"","",["suspension_railway"],26,5],
			"1f6a0":[["\uD83D\uDEA0"],"","",["mountain_cableway"],26,6],
			"1f6a1":[["\uD83D\uDEA1"],"","",["aerial_tramway"],26,7],
			"1f6a2":[["\uD83D\uDEA2"],"\uE202","\uDBB9\uDFE8",["ship"],26,8],
			"1f6a3":[["\uD83D\uDEA3"],"","",["rowboat"],26,9],
			"1f6a4":[["\uD83D\uDEA4"],"\uE135","\uDBB9\uDFEE",["speedboat"],26,10],
			"1f6a5":[["\uD83D\uDEA5"],"\uE14E","\uDBB9\uDFF7",["traffic_light"],26,11],
			"1f6a6":[["\uD83D\uDEA6"],"","",["vertical_traffic_light"],26,12],
			"1f6a7":[["\uD83D\uDEA7"],"\uE137","\uDBB9\uDFF8",["construction"],26,13],
			"1f6a8":[["\uD83D\uDEA8"],"\uE432","\uDBB9\uDFF9",["rotating_light"],26,14],
			"1f6a9":[["\uD83D\uDEA9"],"","\uDBBA\uDF22",["triangular_flag_on_post"],26,15],
			"1f6aa":[["\uD83D\uDEAA"],"","\uDBB9\uDCF3",["door"],26,16],
			"1f6ab":[["\uD83D\uDEAB"],"","\uDBBA\uDF48",["no_entry_sign"],26,17],
			"1f6ac":[["\uD83D\uDEAC"],"\uE30E","\uDBBA\uDF1E",["smoking"],26,18],
			"1f6ad":[["\uD83D\uDEAD"],"\uE208","\uDBBA\uDF1F",["no_smoking"],26,19],
			"1f6ae":[["\uD83D\uDEAE"],"","",["put_litter_in_its_place"],26,20],
			"1f6af":[["\uD83D\uDEAF"],"","",["do_not_litter"],26,21],
			"1f6b0":[["\uD83D\uDEB0"],"","",["potable_water"],26,22],
			"1f6b1":[["\uD83D\uDEB1"],"","",["non-potable_water"],26,23],
			"1f6b2":[["\uD83D\uDEB2"],"\uE136","\uDBB9\uDFEB",["bike"],26,24],
			"1f6b3":[["\uD83D\uDEB3"],"","",["no_bicycles"],26,25],
			"1f6b4":[["\uD83D\uDEB4"],"","",["bicyclist"],26,26],
			"1f6b5":[["\uD83D\uDEB5"],"","",["mountain_bicyclist"],26,27],
			"1f6b6":[["\uD83D\uDEB6"],"\uE201","\uDBB9\uDFF0",["walking"],26,28],
			"1f6b7":[["\uD83D\uDEB7"],"","",["no_pedestrians"],26,29],
			"1f6b8":[["\uD83D\uDEB8"],"","",["children_crossing"],27,0],
			"1f6b9":[["\uD83D\uDEB9"],"\uE138","\uDBBA\uDF33",["mens"],27,1],
			"1f6ba":[["\uD83D\uDEBA"],"\uE139","\uDBBA\uDF34",["womens"],27,2],
			"1f6bb":[["\uD83D\uDEBB"],"\uE151","\uDBB9\uDD06",["restroom"],27,3],
			"1f6bc":[["\uD83D\uDEBC"],"\uE13A","\uDBBA\uDF35",["baby_symbol"],27,4],
			"1f6bd":[["\uD83D\uDEBD"],"\uE140","\uDBB9\uDD07",["toilet"],27,5],
			"1f6be":[["\uD83D\uDEBE"],"\uE309","\uDBB9\uDD08",["wc"],27,6],
			"1f6bf":[["\uD83D\uDEBF"],"","",["shower"],27,7],
			"1f6c0":[["\uD83D\uDEC0"],"\uE13F","\uDBB9\uDD05",["bath"],27,8],
			"1f6c1":[["\uD83D\uDEC1"],"","",["bathtub"],27,9],
			"1f6c2":[["\uD83D\uDEC2"],"","",["passport_control"],27,10],
			"1f6c3":[["\uD83D\uDEC3"],"","",["customs"],27,11],
			"1f6c4":[["\uD83D\uDEC4"],"","",["baggage_claim"],27,12],
			"1f6c5":[["\uD83D\uDEC5"],"","",["left_luggage"],27,13],
			"0023-20e3":[["\u0023\uFE0F\u20E3","\u0023\u20E3"],"\uE210","\uDBBA\uDC2C",["hash"],27,14],
			"0030-20e3":[["\u0030\uFE0F\u20E3","\u0030\u20E3"],"\uE225","\uDBBA\uDC37",["zero"],27,15],
			"0031-20e3":[["\u0031\uFE0F\u20E3","\u0031\u20E3"],"\uE21C","\uDBBA\uDC2E",["one"],27,16],
			"0032-20e3":[["\u0032\uFE0F\u20E3","\u0032\u20E3"],"\uE21D","\uDBBA\uDC2F",["two"],27,17],
			"0033-20e3":[["\u0033\uFE0F\u20E3","\u0033\u20E3"],"\uE21E","\uDBBA\uDC30",["three"],27,18],
			"0034-20e3":[["\u0034\uFE0F\u20E3","\u0034\u20E3"],"\uE21F","\uDBBA\uDC31",["four"],27,19],
			"0035-20e3":[["\u0035\uFE0F\u20E3","\u0035\u20E3"],"\uE220","\uDBBA\uDC32",["five"],27,20],
			"0036-20e3":[["\u0036\uFE0F\u20E3","\u0036\u20E3"],"\uE221","\uDBBA\uDC33",["six"],27,21],
			"0037-20e3":[["\u0037\uFE0F\u20E3","\u0037\u20E3"],"\uE222","\uDBBA\uDC34",["seven"],27,22],
			"0038-20e3":[["\u0038\uFE0F\u20E3","\u0038\u20E3"],"\uE223","\uDBBA\uDC35",["eight"],27,23],
			"0039-20e3":[["\u0039\uFE0F\u20E3","\u0039\u20E3"],"\uE224","\uDBBA\uDC36",["nine"],27,24],
			"1f1e8-1f1f3":[["\uD83C\uDDE8\uD83C\uDDF3"],"\uE513","\uDBB9\uDCED",["cn"],27,25],
			"1f1e9-1f1ea":[["\uD83C\uDDE9\uD83C\uDDEA"],"\uE50E","\uDBB9\uDCE8",["de"],27,26],
			"1f1ea-1f1f8":[["\uD83C\uDDEA\uD83C\uDDF8"],"\uE511","\uDBB9\uDCEB",["es"],27,27],
			"1f1eb-1f1f7":[["\uD83C\uDDEB\uD83C\uDDF7"],"\uE50D","\uDBB9\uDCE7",["fr"],27,28],
			"1f1ec-1f1e7":[["\uD83C\uDDEC\uD83C\uDDE7"],"\uE510","\uDBB9\uDCEA",["gb","uk"],27,29],
			"1f1ee-1f1f9":[["\uD83C\uDDEE\uD83C\uDDF9"],"\uE50F","\uDBB9\uDCE9",["it"],28,0],
			"1f1ef-1f1f5":[["\uD83C\uDDEF\uD83C\uDDF5"],"\uE50B","\uDBB9\uDCE5",["jp"],28,1],
			"1f1f0-1f1f7":[["\uD83C\uDDF0\uD83C\uDDF7"],"\uE514","\uDBB9\uDCEE",["kr"],28,2],
			"1f1f7-1f1fa":[["\uD83C\uDDF7\uD83C\uDDFA"],"\uE512","\uDBB9\uDCEC",["ru"],28,3],
			"1f1fa-1f1f8":[["\uD83C\uDDFA\uD83C\uDDF8"],"\uE50C","\uDBB9\uDCE6",["us"],28,4]
		};
		emoji.emoticons_data = {
			"<3":"heart",
			"<\/3":"broken_heart",
			":)":"blush",
			"(:":"blush",
			":-)":"blush",
			"C:":"smile",
			"c:":"smile",
			":D":"smile",
			":-D":"smile",
			";)":"wink",
			";-)":"wink",
			"):":"disappointed",
			":(":"disappointed",
			":-(":"disappointed",
			":'(":"cry",
			"=)":"smiley",
			"=-)":"smiley",
			":*":"kiss",
			":-*":"kiss",
			":>":"laughing",
			":->":"laughing",
			"8)":"sunglasses",
			":\\\\":"confused",
			":-\\\\":"confused",
			":\/":"confused",
			":-\/":"confused",
			":|":"neutral_face",
			":-|":"neutral_face",
			":o":"open_mouth",
			":-o":"open_mouth",
			">:(":"angry",
			">:-(":"angry",
			":p":"stuck_out_tongue",
			":-p":"stuck_out_tongue",
			":P":"stuck_out_tongue",
			":-P":"stuck_out_tongue",
			":b":"stuck_out_tongue",
			":-b":"stuck_out_tongue",
			";p":"stuck_out_tongue_winking_eye",
			";-p":"stuck_out_tongue_winking_eye",
			";b":"stuck_out_tongue_winking_eye",
			";-b":"stuck_out_tongue_winking_eye",
			";P":"stuck_out_tongue_winking_eye",
			";-P":"stuck_out_tongue_winking_eye",
			":o)":"monkey_face",
			"D:":"anguished"
		};

	if (true) {
	  module.exports = emoji;
	} else if (typeof define === 'function' && define.amd) {
	  define(function() { return emoji; });
	} else {
	  this.emoji = emoji;
	}

	}).call(function() {
	  return this || (typeof window !== 'undefined' ? window : global);
	}());

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Emitter = __webpack_require__(41);
	var template = __webpack_require__(29);
	var events = __webpack_require__(101);
	var render = __webpack_require__(133);

	module.exports = ItemList;

	function ItemList(options) {
		Emitter.call(this);
		this.template = options.template;
		this.selector = options.selector + ', .item .name, .item .icon, .item .unread, .item .room-info, .item';
		this.items = [];
		this.selected = null;
		this.redraw = this.redraw.bind(this);
		this.redraw();
	}

	ItemList.prototype = Object.create(Emitter.prototype);

	ItemList.prototype.redraw = function ItemList_redraw() {
		var vdom = template(this.template, {
			items: this.items,
			selected: this.selected
		});
		render(this, vdom);
	};

	ItemList.prototype.setItems = function ItemList_setItems(items) {
		var self = this;
		this.selected = null;
		this.items = items;
		this.redraw();
	};

	ItemList.prototype.selectItem = function ItemList_selectItem(item) {
		this.selected = item;
		this.redraw();
	};



/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var v = __webpack_require__(34);

	module.exports = render;

	function render(obj, vdom) {
		if (!obj.vdom || !obj.el) {
			obj.vdom = vdom;
			obj.el = v.toDOM(vdom);
			return;
		}
		var diff = v.diff(obj.vdom, vdom);
		v.applyPatch(obj.el, diff);
		obj.vdom = vdom;
	}



/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @overview NPM Module index: include all the core modules, I18n files will be loaded on the fly.
	 * @author Gregory Wild-Smith <gregory@wild-smith.com>
	 */
	__webpack_require__(135);
	__webpack_require__(293);
	__webpack_require__(294);
	__webpack_require__(295);
	__webpack_require__(296);
	__webpack_require__(297);
	__webpack_require__(298);
	__webpack_require__(299);
	__webpack_require__(300);
	__webpack_require__(301);
	__webpack_require__(302);
	/*
	 * Notice that there is no model.export or exports. This is not required as it modifies the Date object and it's prototypes.
	 */

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
		var $D = Date;
		var lang = Date.CultureStrings ? Date.CultureStrings.lang : null;
		var loggedKeys = {}; // for debug purposes.
		var getText = {
			getFromKey: function (key, countryCode) {
				var output;
				if (Date.CultureStrings && Date.CultureStrings[countryCode] && Date.CultureStrings[countryCode][key]) {
					output = Date.CultureStrings[countryCode][key];
				} else {
					output = getText.buildFromDefault(key);
				}
				if (key.charAt(0) === "/") { // Assume it's a regex
					output = getText.buildFromRegex(key, countryCode);
				}
				return output;
			},
			getFromObjectValues: function (obj, countryCode) {
				var key, output = {};
				for(key in obj) {
					if (obj.hasOwnProperty(key)) {
						output[key] = getText.getFromKey(obj[key], countryCode);
					}
				}
				return output;
			},
			getFromObjectKeys: function (obj, countryCode) {
				var key, output = {};
				for(key in obj) {
					if (obj.hasOwnProperty(key)) {
						output[getText.getFromKey(key, countryCode)] = obj[key];
					}
				}
				return output;
			},
			getFromArray: function (arr, countryCode) {
				var output = [];
				for (var i=0; i < arr.length; i++){
					if (i in arr) {
						output[i] = getText.getFromKey(arr[i], countryCode);
					}
				}
				return output;
			},
			buildFromDefault: function (key) {
				var output, length, split, last;
				switch(key) {
					case "name":
						output = "en-US";
						break;
					case "englishName":
						output = "English (United States)";
						break;
					case "nativeName":
						output = "English (United States)";
						break;
					case "twoDigitYearMax":
						output = 2049;
						break;
					case "firstDayOfWeek":
						output = 0;
						break;
					default:
						output = key;
						split = key.split("_");
						length = split.length;
						if (length > 1 && key.charAt(0) !== "/") {
							// if the key isn't a regex and it has a split.
							last = split[(length - 1)].toLowerCase();
							if (last === "initial" || last === "abbr") {
								output = split[0];
							}
						}
						break;
				}
				return output;
			},
			buildFromRegex: function (key, countryCode) {
				var output;
				if (Date.CultureStrings && Date.CultureStrings[countryCode] && Date.CultureStrings[countryCode][key]) {
					output = new RegExp(Date.CultureStrings[countryCode][key], "i");
				} else {
					output = new RegExp(key.replace(new RegExp("/", "g"),""), "i");
				}
				return output;
			}
		};

		var shallowMerge = function (obj1, obj2) {
			for (var attrname in obj2) {
				if (obj2.hasOwnProperty(attrname)) {
					obj1[attrname] = obj2[attrname];
				}
			}
		};

		var __ = function (key, language) {
			var countryCode = (language) ? language : lang;
			loggedKeys[key] = key;
			if (typeof key === "object") {
				if (key instanceof Array) {
					return getText.getFromArray(key, countryCode);
				} else {
					return getText.getFromObjectKeys(key, countryCode);
				}
			} else {
				return getText.getFromKey(key, countryCode);
			}
		};
		
		var loadI18nScript = function (code) {
			// paatterned after jQuery's getScript.
			var url = Date.Config.i18n + code + ".js";
			var head = document.getElementsByTagName("head")[0] || document.documentElement;
			var script = document.createElement("script");
			script.src = url;

			var completed = false;
			var events = {
				done: function (){} // placeholder function
			};
			// Attach handlers for all browsers
			script.onload = script.onreadystatechange = function() {
				if ( !completed && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete") ) {
					events.done();
					head.removeChild(script);
				}
			};

			setTimeout(function() {
				head.insertBefore(script, head.firstChild);
			}, 0); // allows return to execute first
			
			return {
				done: function (cb) {
					events.done = function() {
						if (cb) {
							setTimeout(cb,0);
						}
					};
				}
			};
		};

		var buildInfo = {
			buildFromMethodHash: function (obj) {
				var key;
				for(key in obj) {
					if (obj.hasOwnProperty(key)) {
						obj[key] = buildInfo[obj[key]]();
					}
				}
				return obj;
			},
			timeZoneDST: function () {
				var DST = {
					"CHADT": "+1345",
					"NZDT": "+1300",
					"AEDT": "+1100",
					"ACDT": "+1030",
					"AZST": "+0500",
					"IRDT": "+0430",
					"EEST": "+0300",
					"CEST": "+0200",
					"BST": "+0100",
					"PMDT": "-0200",
					"ADT": "-0300",
					"NDT": "-0230",
					"EDT": "-0400",
					"CDT": "-0500",
					"MDT": "-0600",
					"PDT": "-0700",
					"AKDT": "-0800",
					"HADT": "-0900"
				};
				return __(DST);
			},
			timeZoneStandard: function () {
				var standard = {
					"LINT": "+1400",
					"TOT": "+1300",
					"CHAST": "+1245",
					"NZST": "+1200",
					"NFT": "+1130",
					"SBT": "+1100",
					"AEST": "+1000",
					"ACST": "+0930",
					"JST": "+0900",
					"CWST": "+0845",
					"CT": "+0800",
					"ICT": "+0700",
					"MMT": "+0630",
					"BST": "+0600",
					"NPT": "+0545",
					"IST": "+0530",
					"PKT": "+0500",
					"AFT": "+0430",
					"MSK": "+0400",
					"IRST": "+0330",
					"FET": "+0300",
					"EET": "+0200",
					"CET": "+0100",
					"GMT": "+0000",
					"UTC": "+0000",
					"CVT": "-0100",
					"GST": "-0200",
					"BRT": "-0300",
					"NST": "-0330",
					"AST": "-0400",
					"EST": "-0500",
					"CST": "-0600",
					"MST": "-0700",
					"PST": "-0800",
					"AKST": "-0900",
					"MIT": "-0930",
					"HST": "-1000",
					"SST": "-1100",
					"BIT": "-1200"
				};
				return __(standard);
			},
			timeZones: function (data) {
				var zone;
				data.timezones = [];
				for (zone in data.abbreviatedTimeZoneStandard) {
					if (data.abbreviatedTimeZoneStandard.hasOwnProperty(zone)) {
						data.timezones.push({ name: zone, offset: data.abbreviatedTimeZoneStandard[zone]});
					}
				}
				for (zone in data.abbreviatedTimeZoneDST) {
					if (data.abbreviatedTimeZoneDST.hasOwnProperty(zone)) {
						data.timezones.push({ name: zone, offset: data.abbreviatedTimeZoneDST[zone], dst: true});
					}
				}
				return data.timezones;
			},
			days: function () {
				return __(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
			},
			dayAbbr: function () {
				return __(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
			},
			dayShortNames: function () {
				return __(["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]);
			},
			dayFirstLetters: function () {
				return __(["S_Sun_Initial", "M_Mon_Initial", "T_Tues_Initial", "W_Wed_Initial", "T_Thu_Initial", "F_Fri_Initial", "S_Sat_Initial"]);
			},
			months: function () {
				return __(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
			},
			monthAbbr: function () {
				return __(["Jan_Abbr", "Feb_Abbr", "Mar_Abbr", "Apr_Abbr", "May_Abbr", "Jun_Abbr", "Jul_Abbr", "Aug_Abbr", "Sep_Abbr", "Oct_Abbr", "Nov_Abbr", "Dec_Abbr"]);
			},
			formatPatterns: function () {
				return getText.getFromObjectValues({
					shortDate: "M/d/yyyy",
					longDate: "dddd, MMMM dd, yyyy",
					shortTime: "h:mm tt",
					longTime: "h:mm:ss tt",
					fullDateTime: "dddd, MMMM dd, yyyy h:mm:ss tt",
					sortableDateTime: "yyyy-MM-ddTHH:mm:ss",
					universalSortableDateTime: "yyyy-MM-dd HH:mm:ssZ",
					rfc1123: "ddd, dd MMM yyyy HH:mm:ss",
					monthDay: "MMMM dd",
					yearMonth: "MMMM, yyyy"
				}, Date.i18n.currentLanguage());
			},
			regex: function () {
				return getText.getFromObjectValues({
					inTheMorning: "/( in the )(morn(ing)?)\\b/",
					thisMorning: "/(this )(morn(ing)?)\\b/",
					amThisMorning: "/(\b\\d(am)? )(this )(morn(ing)?)/",
					inTheEvening: "/( in the )(even(ing)?)\\b/",
					thisEvening: "/(this )(even(ing)?)\\b/",
					pmThisEvening: "/(\b\\d(pm)? )(this )(even(ing)?)/",
					jan: "/jan(uary)?/",
					feb: "/feb(ruary)?/",
					mar: "/mar(ch)?/",
					apr: "/apr(il)?/",
					may: "/may/",
					jun: "/jun(e)?/",
					jul: "/jul(y)?/",
					aug: "/aug(ust)?/",
					sep: "/sep(t(ember)?)?/",
					oct: "/oct(ober)?/",
					nov: "/nov(ember)?/",
					dec: "/dec(ember)?/",
					sun: "/^su(n(day)?)?/",
					mon: "/^mo(n(day)?)?/",
					tue: "/^tu(e(s(day)?)?)?/",
					wed: "/^we(d(nesday)?)?/",
					thu: "/^th(u(r(s(day)?)?)?)?/",
					fri: "/fr(i(day)?)?/",
					sat: "/^sa(t(urday)?)?/",
					future: "/^next/",
					past: "/^last|past|prev(ious)?/",
					add: "/^(\\+|aft(er)?|from|hence)/",
					subtract: "/^(\\-|bef(ore)?|ago)/",
					yesterday: "/^yes(terday)?/",
					today: "/^t(od(ay)?)?/",
					tomorrow: "/^tom(orrow)?/",
					now: "/^n(ow)?/",
					millisecond: "/^ms|milli(second)?s?/",
					second: "/^sec(ond)?s?/",
					minute: "/^mn|min(ute)?s?/",
					hour: "/^h(our)?s?/",
					week: "/^w(eek)?s?/",
					month: "/^m(onth)?s?/",
					day: "/^d(ay)?s?/",
					year: "/^y(ear)?s?/",
					shortMeridian: "/^(a|p)/",
					longMeridian: "/^(a\\.?m?\\.?|p\\.?m?\\.?)/",
					timezone: "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/",
					ordinalSuffix: "/^\\s*(st|nd|rd|th)/",
					timeContext: "/^\\s*(\\:|a(?!u|p)|p)/"
				}, Date.i18n.currentLanguage());
			}
		};

		var CultureInfo = function () {
			var info = getText.getFromObjectValues({
				name: "name",
				englishName: "englishName",
				nativeName: "nativeName",
				amDesignator: "AM",
				pmDesignator: "PM",
				firstDayOfWeek: "firstDayOfWeek",
				twoDigitYearMax: "twoDigitYearMax",
				dateElementOrder: "mdy"
			}, Date.i18n.currentLanguage());

			var constructedInfo = buildInfo.buildFromMethodHash({
				dayNames: "days",
				abbreviatedDayNames: "dayAbbr",
				shortestDayNames: "dayShortNames",
				firstLetterDayNames: "dayFirstLetters",
				monthNames: "months",
				abbreviatedMonthNames: "monthAbbr",
				formatPatterns: "formatPatterns",
				regexPatterns: "regex",
				abbreviatedTimeZoneDST: "timeZoneDST",
				abbreviatedTimeZoneStandard: "timeZoneStandard"
			});

			shallowMerge(info, constructedInfo);
			buildInfo.timeZones(info);
			return info;
		};

		$D.i18n = {
			__: function (key, lang) {
				return __(key, lang);
			},
			currentLanguage: function () {
				return lang || "en-US";
			},
			setLanguage: function (code, force, cb) {
				var async = false;
				if (force || code === "en-US" || (!!Date.CultureStrings && !!Date.CultureStrings[code])) {
					lang = code;
					Date.CultureStrings = Date.CultureStrings || {};
					Date.CultureStrings.lang = code;
					Date.CultureInfo = new CultureInfo();
				} else {
					if (!(!!Date.CultureStrings && !!Date.CultureStrings[code])) {
						if (typeof exports !== "undefined" && this.exports !== exports) {
							// we're in a Node enviroment, load it using require
							try {
								__webpack_require__(136)("./" + code + ".js");
								lang = code;
								Date.CultureStrings.lang = code;
								Date.CultureInfo = new CultureInfo();
							} catch (e) {
								// var str = "The language for '" + code + "' could not be loaded by Node. It likely does not exist.";
								throw new Error("The DateJS IETF language tag '" + code + "' could not be loaded by Node. It likely does not exist.");
							}
						} else if (Date.Config && Date.Config.i18n) {
							// we know the location of the files, so lets load them
							async = true;
							loadI18nScript(code).done(function(){
								lang = code;
								Date.CultureStrings = Date.CultureStrings || {};
								Date.CultureStrings.lang = code;
								Date.CultureInfo = new CultureInfo();
								$D.Parsing.Normalizer.buildReplaceData(); // because this is async
								if ($D.Grammar) {
									$D.Grammar.buildGrammarFormats(); // so we can parse those strings...
								}
								if (cb) {
									setTimeout(cb,0);
								}
							});
						} else {
							Date.console.error("The DateJS IETF language tag '" + code + "' is not available and has not been loaded.");
						}
					}
				}
				$D.Parsing.Normalizer.buildReplaceData(); // rebuild normalizer strings
				if ($D.Grammar) {
					$D.Grammar.buildGrammarFormats(); // so we can parse those strings...
				}
				if (!async && cb) {
					setTimeout(cb,0);
				}
			},
			getLoggedKeys: function () {
				return loggedKeys;
			},
			updateCultureInfo: function () {
				Date.CultureInfo = new CultureInfo();
			}
		};
		$D.i18n.updateCultureInfo(); // run automatically
	}());

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af-ZA.js": 137,
		"./ar-AE.js": 138,
		"./ar-BH.js": 139,
		"./ar-DZ.js": 140,
		"./ar-EG.js": 141,
		"./ar-IQ.js": 142,
		"./ar-JO.js": 143,
		"./ar-KW.js": 144,
		"./ar-LB.js": 145,
		"./ar-LY.js": 146,
		"./ar-MA.js": 147,
		"./ar-OM.js": 148,
		"./ar-QA.js": 149,
		"./ar-SA.js": 150,
		"./ar-SY.js": 151,
		"./ar-TN.js": 152,
		"./ar-YE.js": 153,
		"./az-Cyrl-AZ.js": 154,
		"./az-Latn-AZ.js": 155,
		"./be-BY.js": 156,
		"./bg-BG.js": 157,
		"./bs-Latn-BA.js": 158,
		"./ca-ES.js": 159,
		"./cs-CZ.js": 160,
		"./cy-GB.js": 161,
		"./da-DK.js": 162,
		"./de-AT.js": 163,
		"./de-CH.js": 164,
		"./de-DE.js": 165,
		"./de-LI.js": 166,
		"./de-LU.js": 167,
		"./dv-MV.js": 168,
		"./el-GR.js": 169,
		"./en-029.js": 170,
		"./en-AU.js": 171,
		"./en-BZ.js": 172,
		"./en-CA.js": 173,
		"./en-GB.js": 174,
		"./en-IE.js": 175,
		"./en-JM.js": 176,
		"./en-NZ.js": 177,
		"./en-PH.js": 178,
		"./en-TT.js": 179,
		"./en-ZA.js": 180,
		"./en-ZW.js": 181,
		"./es-AR.js": 182,
		"./es-BO.js": 183,
		"./es-CL.js": 184,
		"./es-CO.js": 185,
		"./es-CR.js": 186,
		"./es-DO.js": 187,
		"./es-EC.js": 188,
		"./es-ES.js": 189,
		"./es-GT.js": 190,
		"./es-HN.js": 191,
		"./es-MX.js": 192,
		"./es-NI.js": 193,
		"./es-PA.js": 194,
		"./es-PE.js": 195,
		"./es-PR.js": 196,
		"./es-PY.js": 197,
		"./es-SV.js": 198,
		"./es-UY.js": 199,
		"./es-VE.js": 200,
		"./et-EE.js": 201,
		"./eu-ES.js": 202,
		"./fa-IR.js": 203,
		"./fi-FI.js": 204,
		"./fo-FO.js": 205,
		"./fr-BE.js": 206,
		"./fr-CA.js": 207,
		"./fr-CH.js": 208,
		"./fr-FR.js": 209,
		"./fr-LU.js": 210,
		"./fr-MC.js": 211,
		"./gl-ES.js": 212,
		"./gu-IN.js": 213,
		"./he-IL.js": 214,
		"./hi-IN.js": 215,
		"./hr-BA.js": 216,
		"./hr-HR.js": 217,
		"./hu-HU.js": 218,
		"./hy-AM.js": 219,
		"./id-ID.js": 220,
		"./is-IS.js": 221,
		"./it-CH.js": 222,
		"./it-IT.js": 223,
		"./ja-JP.js": 224,
		"./ka-GE.js": 225,
		"./kk-KZ.js": 226,
		"./kn-IN.js": 227,
		"./ko-KR.js": 228,
		"./kok-IN.js": 229,
		"./ky-KG.js": 230,
		"./lt-LT.js": 231,
		"./lv-LV.js": 232,
		"./mi-NZ.js": 233,
		"./mk-MK.js": 234,
		"./mn-MN.js": 235,
		"./mr-IN.js": 236,
		"./ms-BN.js": 237,
		"./ms-MY.js": 238,
		"./mt-MT.js": 239,
		"./nb-NO.js": 240,
		"./nl-BE.js": 241,
		"./nl-NL.js": 242,
		"./nn-NO.js": 243,
		"./ns-ZA.js": 244,
		"./pa-IN.js": 245,
		"./pl-PL.js": 246,
		"./pt-BR.js": 247,
		"./pt-PT.js": 248,
		"./quz-BO.js": 249,
		"./quz-EC.js": 250,
		"./quz-PE.js": 251,
		"./ro-RO.js": 252,
		"./ru-RU.js": 253,
		"./sa-IN.js": 254,
		"./se-FI.js": 255,
		"./se-NO.js": 256,
		"./se-SE.js": 257,
		"./sk-SK.js": 258,
		"./sl-SI.js": 259,
		"./sma-NO.js": 260,
		"./sma-SE.js": 261,
		"./smj-NO.js": 262,
		"./smj-SE.js": 263,
		"./smn-FI.js": 264,
		"./sms-FI.js": 265,
		"./sq-AL.js": 266,
		"./sr-Cyrl-BA.js": 267,
		"./sr-Cyrl-CS.js": 268,
		"./sr-Latn-BA.js": 269,
		"./sr-Latn-CS.js": 270,
		"./sv-FI.js": 271,
		"./sv-SE.js": 272,
		"./sw-KE.js": 273,
		"./syr-SY.js": 274,
		"./ta-IN.js": 275,
		"./te-IN.js": 276,
		"./th-TH.js": 277,
		"./tn-ZA.js": 278,
		"./tr-TR.js": 279,
		"./tt-RU.js": 280,
		"./uk-UA.js": 281,
		"./ur-PK.js": 282,
		"./uz-Cyrl-UZ.js": 283,
		"./uz-Latn-UZ.js": 284,
		"./vi-VN.js": 285,
		"./xh-ZA.js": 286,
		"./zh-CN.js": 287,
		"./zh-HK.js": 288,
		"./zh-MO.js": 289,
		"./zh-SG.js": 290,
		"./zh-TW.js": 291,
		"./zu-ZA.js": 292
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 136;


/***/ },
/* 137 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: af-ZA
	 * Name: Afrikaans (South Africa)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["af-ZA"] = {
	        "name": "af-ZA",
	        "englishName": "Afrikaans (South Africa)",
	        "nativeName": "Afrikaans (Suid Afrika)",
	        "Sunday": "Sondag",
	        "Monday": "Maandag",
	        "Tuesday": "Dinsdag",
	        "Wednesday": "Woensdag",
	        "Thursday": "Donderdag",
	        "Friday": "Vrydag",
	        "Saturday": "Saterdag",
	        "Sun": "Son",
	        "Mon": "Maan",
	        "Tue": "Dins",
	        "Wed": "Woen",
	        "Thu": "Dond",
	        "Fri": "Vry",
	        "Sat": "Sat",
	        "Su": "So",
	        "Mo": "Ma",
	        "Tu": "Di",
	        "We": "Wo",
	        "Th": "Do",
	        "Fr": "Vr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "D",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "D",
	        "F_Fri_Initial": "V",
	        "S_Sat_Initial": "S",
	        "January": "Januarie",
	        "February": "Februarie",
	        "March": "Maart",
	        "April": "April",
	        "May": "Mei",
	        "June": "Junie",
	        "July": "Julie",
	        "August": "Augustus",
	        "September": "September",
	        "October": "Oktober",
	        "November": "November",
	        "December": "Desember",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mei",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Des",
	        "AM": "",
	        "PM": "nm",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/MM/dd",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uarie)?",
	        "/feb(ruary)?/": "feb(ruarie)?",
	        "/mar(ch)?/": "maart",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mei",
	        "/jun(e)?/": "jun(ie)?",
	        "/jul(y)?/": "jul(ie)?",
	        "/aug(ust)?/": "aug(ustus)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "des(ember)?",
	        "/^su(n(day)?)?/": "^so(n(dag)?)?",
	        "/^mo(n(day)?)?/": "^ma(an(dag)?)?",
	        "/^tu(e(s(day)?)?)?/": "^di(ns(dag)?)?",
	        "/^we(d(nesday)?)?/": "^wo(en(sdag)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^do(nd(erdag)?)?",
	        "/^fr(i(day)?)?/": "^vr(y(dag)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(erdag)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "af-ZA";


/***/ },
/* 138 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-AE
	 * Name: Arabic (U.A.E.)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-AE"] = {
	        "name": "ar-AE",
	        "englishName": "Arabic (U.A.E.)",
	        "nativeName": "العربية (الإمارات العربية المتحدة)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "يناير",
	        "February": "فبراير",
	        "March": "مارس",
	        "April": "ابريل",
	        "May": "مايو",
	        "June": "يونيو",
	        "July": "يوليو",
	        "August": "اغسطس",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "يناير",
	        "Feb_Abbr": "فبراير",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "ابريل",
	        "May_Abbr": "مايو",
	        "Jun_Abbr": "يونيو",
	        "Jul_Abbr": "يوليو",
	        "Aug_Abbr": "اغسطس",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "يناير",
	        "/feb(ruary)?/": "فبراير",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "ابريل",
	        "/may/": "مايو",
	        "/jun(e)?/": "يونيو",
	        "/jul(y)?/": "يوليو",
	        "/aug(ust)?/": "اغسطس",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-AE";


/***/ },
/* 139 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-BH
	 * Name: Arabic (Bahrain)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-BH"] = {
	        "name": "ar-BH",
	        "englishName": "Arabic (Bahrain)",
	        "nativeName": "العربية (البحرين)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "يناير",
	        "February": "فبراير",
	        "March": "مارس",
	        "April": "ابريل",
	        "May": "مايو",
	        "June": "يونيو",
	        "July": "يوليو",
	        "August": "اغسطس",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "يناير",
	        "Feb_Abbr": "فبراير",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "ابريل",
	        "May_Abbr": "مايو",
	        "Jun_Abbr": "يونيو",
	        "Jul_Abbr": "يوليو",
	        "Aug_Abbr": "اغسطس",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "يناير",
	        "/feb(ruary)?/": "فبراير",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "ابريل",
	        "/may/": "مايو",
	        "/jun(e)?/": "يونيو",
	        "/jul(y)?/": "يوليو",
	        "/aug(ust)?/": "اغسطس",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-BH";


/***/ },
/* 140 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-DZ
	 * Name: Arabic (Algeria)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-DZ"] = {
	        "name": "ar-DZ",
	        "englishName": "Arabic (Algeria)",
	        "nativeName": "العربية (الجزائر)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "جانفييه",
	        "February": "فيفرييه",
	        "March": "مارس",
	        "April": "أفريل",
	        "May": "مي",
	        "June": "جوان",
	        "July": "جوييه",
	        "August": "أوت",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "جانفييه",
	        "Feb_Abbr": "فيفرييه",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "أفريل",
	        "May_Abbr": "مي",
	        "Jun_Abbr": "جوان",
	        "Jul_Abbr": "جوييه",
	        "Aug_Abbr": "أوت",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "جانفييه",
	        "/feb(ruary)?/": "فيفرييه",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "أفريل",
	        "/may/": "مي",
	        "/jun(e)?/": "جوان",
	        "/jul(y)?/": "جوييه",
	        "/aug(ust)?/": "أوت",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-DZ";


/***/ },
/* 141 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-EG
	 * Name: Arabic (Egypt)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-EG"] = {
	        "name": "ar-EG",
	        "englishName": "Arabic (Egypt)",
	        "nativeName": "العربية (مصر)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "يناير",
	        "February": "فبراير",
	        "March": "مارس",
	        "April": "ابريل",
	        "May": "مايو",
	        "June": "يونيو",
	        "July": "يوليو",
	        "August": "اغسطس",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "يناير",
	        "Feb_Abbr": "فبراير",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "ابريل",
	        "May_Abbr": "مايو",
	        "Jun_Abbr": "يونيو",
	        "Jul_Abbr": "يوليو",
	        "Aug_Abbr": "اغسطس",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "يناير",
	        "/feb(ruary)?/": "فبراير",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "ابريل",
	        "/may/": "مايو",
	        "/jun(e)?/": "يونيو",
	        "/jul(y)?/": "يوليو",
	        "/aug(ust)?/": "اغسطس",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-EG";


/***/ },
/* 142 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-IQ
	 * Name: Arabic (Iraq)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-IQ"] = {
	        "name": "ar-IQ",
	        "englishName": "Arabic (Iraq)",
	        "nativeName": "العربية (العراق)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "كانون الثاني",
	        "February": "شباط",
	        "March": "آذار",
	        "April": "نيسان",
	        "May": "أيار",
	        "June": "حزيران",
	        "July": "تموز",
	        "August": "آب",
	        "September": "أيلول",
	        "October": "تشرين الأول",
	        "November": "تشرين الثاني",
	        "December": "كانون الأول",
	        "Jan_Abbr": "كانون الثاني",
	        "Feb_Abbr": "شباط",
	        "Mar_Abbr": "آذار",
	        "Apr_Abbr": "نيسان",
	        "May_Abbr": "أيار",
	        "Jun_Abbr": "حزيران",
	        "Jul_Abbr": "تموز",
	        "Aug_Abbr": "آب",
	        "Sep_Abbr": "أيلول",
	        "Oct_Abbr": "تشرين الأول",
	        "Nov_Abbr": "تشرين الثاني",
	        "Dec_Abbr": "كانون الأول",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "كانون الثاني",
	        "/feb(ruary)?/": "شباط",
	        "/mar(ch)?/": "آذار",
	        "/apr(il)?/": "نيسان",
	        "/may/": "أيار",
	        "/jun(e)?/": "حزيران",
	        "/jul(y)?/": "تموز",
	        "/aug(ust)?/": "آب",
	        "/sep(t(ember)?)?/": "أيلول",
	        "/oct(ober)?/": "تشرين الأول",
	        "/nov(ember)?/": "تشرين الثاني",
	        "/dec(ember)?/": "كانون الأول",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-IQ";


/***/ },
/* 143 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-JO
	 * Name: Arabic (Jordan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-JO"] = {
	        "name": "ar-JO",
	        "englishName": "Arabic (Jordan)",
	        "nativeName": "العربية (الأردن)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "كانون الثاني",
	        "February": "شباط",
	        "March": "آذار",
	        "April": "نيسان",
	        "May": "أيار",
	        "June": "حزيران",
	        "July": "تموز",
	        "August": "آب",
	        "September": "أيلول",
	        "October": "تشرين الأول",
	        "November": "تشرين الثاني",
	        "December": "كانون الأول",
	        "Jan_Abbr": "كانون الثاني",
	        "Feb_Abbr": "شباط",
	        "Mar_Abbr": "آذار",
	        "Apr_Abbr": "نيسان",
	        "May_Abbr": "أيار",
	        "Jun_Abbr": "حزيران",
	        "Jul_Abbr": "تموز",
	        "Aug_Abbr": "آب",
	        "Sep_Abbr": "أيلول",
	        "Oct_Abbr": "تشرين الأول",
	        "Nov_Abbr": "تشرين الثاني",
	        "Dec_Abbr": "كانون الأول",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "كانون الثاني",
	        "/feb(ruary)?/": "شباط",
	        "/mar(ch)?/": "آذار",
	        "/apr(il)?/": "نيسان",
	        "/may/": "أيار",
	        "/jun(e)?/": "حزيران",
	        "/jul(y)?/": "تموز",
	        "/aug(ust)?/": "آب",
	        "/sep(t(ember)?)?/": "أيلول",
	        "/oct(ober)?/": "تشرين الأول",
	        "/nov(ember)?/": "تشرين الثاني",
	        "/dec(ember)?/": "كانون الأول",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-JO";


/***/ },
/* 144 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-KW
	 * Name: Arabic (Kuwait)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-KW"] = {
	        "name": "ar-KW",
	        "englishName": "Arabic (Kuwait)",
	        "nativeName": "العربية (الكويت)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "يناير",
	        "February": "فبراير",
	        "March": "مارس",
	        "April": "ابريل",
	        "May": "مايو",
	        "June": "يونيو",
	        "July": "يوليو",
	        "August": "اغسطس",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "يناير",
	        "Feb_Abbr": "فبراير",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "ابريل",
	        "May_Abbr": "مايو",
	        "Jun_Abbr": "يونيو",
	        "Jul_Abbr": "يوليو",
	        "Aug_Abbr": "اغسطس",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "يناير",
	        "/feb(ruary)?/": "فبراير",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "ابريل",
	        "/may/": "مايو",
	        "/jun(e)?/": "يونيو",
	        "/jul(y)?/": "يوليو",
	        "/aug(ust)?/": "اغسطس",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-KW";


/***/ },
/* 145 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-LB
	 * Name: Arabic (Lebanon)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-LB"] = {
	        "name": "ar-LB",
	        "englishName": "Arabic (Lebanon)",
	        "nativeName": "العربية (لبنان)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "كانون الثاني",
	        "February": "شباط",
	        "March": "آذار",
	        "April": "نيسان",
	        "May": "أيار",
	        "June": "حزيران",
	        "July": "تموز",
	        "August": "آب",
	        "September": "أيلول",
	        "October": "تشرين الأول",
	        "November": "تشرين الثاني",
	        "December": "كانون الأول",
	        "Jan_Abbr": "كانون الثاني",
	        "Feb_Abbr": "شباط",
	        "Mar_Abbr": "آذار",
	        "Apr_Abbr": "نيسان",
	        "May_Abbr": "أيار",
	        "Jun_Abbr": "حزيران",
	        "Jul_Abbr": "تموز",
	        "Aug_Abbr": "آب",
	        "Sep_Abbr": "أيلول",
	        "Oct_Abbr": "تشرين الأول",
	        "Nov_Abbr": "تشرين الثاني",
	        "Dec_Abbr": "كانون الأول",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "كانون الثاني",
	        "/feb(ruary)?/": "شباط",
	        "/mar(ch)?/": "آذار",
	        "/apr(il)?/": "نيسان",
	        "/may/": "أيار",
	        "/jun(e)?/": "حزيران",
	        "/jul(y)?/": "تموز",
	        "/aug(ust)?/": "آب",
	        "/sep(t(ember)?)?/": "أيلول",
	        "/oct(ober)?/": "تشرين الأول",
	        "/nov(ember)?/": "تشرين الثاني",
	        "/dec(ember)?/": "كانون الأول",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-LB";


/***/ },
/* 146 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-LY
	 * Name: Arabic (Libya)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-LY"] = {
	        "name": "ar-LY",
	        "englishName": "Arabic (Libya)",
	        "nativeName": "العربية (ليبيا)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "يناير",
	        "February": "فبراير",
	        "March": "مارس",
	        "April": "ابريل",
	        "May": "مايو",
	        "June": "يونيو",
	        "July": "يوليو",
	        "August": "اغسطس",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "يناير",
	        "Feb_Abbr": "فبراير",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "ابريل",
	        "May_Abbr": "مايو",
	        "Jun_Abbr": "يونيو",
	        "Jul_Abbr": "يوليو",
	        "Aug_Abbr": "اغسطس",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "يناير",
	        "/feb(ruary)?/": "فبراير",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "ابريل",
	        "/may/": "مايو",
	        "/jun(e)?/": "يونيو",
	        "/jul(y)?/": "يوليو",
	        "/aug(ust)?/": "اغسطس",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-LY";


/***/ },
/* 147 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-MA
	 * Name: Arabic (Morocco)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-MA"] = {
	        "name": "ar-MA",
	        "englishName": "Arabic (Morocco)",
	        "nativeName": "العربية (المملكة المغربية)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "يناير",
	        "February": "فبراير",
	        "March": "مارس",
	        "April": "ابريل",
	        "May": "ماي",
	        "June": "يونيو",
	        "July": "يوليوز",
	        "August": "غشت",
	        "September": "شتنبر",
	        "October": "اكتوبر",
	        "November": "نونبر",
	        "December": "دجنبر",
	        "Jan_Abbr": "يناير",
	        "Feb_Abbr": "فبراير",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "ابريل",
	        "May_Abbr": "ماي",
	        "Jun_Abbr": "يونيو",
	        "Jul_Abbr": "يوليوز",
	        "Aug_Abbr": "غشت",
	        "Sep_Abbr": "شتنبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نونبر",
	        "Dec_Abbr": "دجنبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "يناير",
	        "/feb(ruary)?/": "فبراير",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "ابريل",
	        "/may/": "ماي",
	        "/jun(e)?/": "يونيو",
	        "/jul(y)?/": "يوليوز",
	        "/aug(ust)?/": "غشت",
	        "/sep(t(ember)?)?/": "شتنبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نونبر",
	        "/dec(ember)?/": "دجنبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-MA";


/***/ },
/* 148 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-OM
	 * Name: Arabic (Oman)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-OM"] = {
	        "name": "ar-OM",
	        "englishName": "Arabic (Oman)",
	        "nativeName": "العربية (عمان)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "يناير",
	        "February": "فبراير",
	        "March": "مارس",
	        "April": "ابريل",
	        "May": "مايو",
	        "June": "يونيو",
	        "July": "يوليو",
	        "August": "اغسطس",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "يناير",
	        "Feb_Abbr": "فبراير",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "ابريل",
	        "May_Abbr": "مايو",
	        "Jun_Abbr": "يونيو",
	        "Jul_Abbr": "يوليو",
	        "Aug_Abbr": "اغسطس",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "يناير",
	        "/feb(ruary)?/": "فبراير",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "ابريل",
	        "/may/": "مايو",
	        "/jun(e)?/": "يونيو",
	        "/jul(y)?/": "يوليو",
	        "/aug(ust)?/": "اغسطس",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-OM";


/***/ },
/* 149 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-QA
	 * Name: Arabic (Qatar)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-QA"] = {
	        "name": "ar-QA",
	        "englishName": "Arabic (Qatar)",
	        "nativeName": "العربية (قطر)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "يناير",
	        "February": "فبراير",
	        "March": "مارس",
	        "April": "ابريل",
	        "May": "مايو",
	        "June": "يونيو",
	        "July": "يوليو",
	        "August": "اغسطس",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "يناير",
	        "Feb_Abbr": "فبراير",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "ابريل",
	        "May_Abbr": "مايو",
	        "Jun_Abbr": "يونيو",
	        "Jul_Abbr": "يوليو",
	        "Aug_Abbr": "اغسطس",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "يناير",
	        "/feb(ruary)?/": "فبراير",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "ابريل",
	        "/may/": "مايو",
	        "/jun(e)?/": "يونيو",
	        "/jul(y)?/": "يوليو",
	        "/aug(ust)?/": "اغسطس",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-QA";


/***/ },
/* 150 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-SA
	 * Name: Arabic (Saudi Arabia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-SA"] = {
	        "name": "ar-SA",
	        "englishName": "Arabic (Saudi Arabia)",
	        "nativeName": "العربية (المملكة العربية السعودية)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "ح",
	        "Mo": "ن",
	        "Tu": "ث",
	        "We": "ر",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "ح",
	        "M_Mon_Initial": "ن",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "ر",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "محرم",
	        "February": "صفر",
	        "March": "ربيع الأول",
	        "April": "ربيع الثاني",
	        "May": "جمادى الأولى",
	        "June": "جمادى الثانية",
	        "July": "رجب",
	        "August": "شعبان",
	        "September": "رمضان",
	        "October": "شوال",
	        "November": "ذو القعدة",
	        "December": "ذو الحجة",
	        "Jan_Abbr": "محرم",
	        "Feb_Abbr": "صفر",
	        "Mar_Abbr": "ربيع الاول",
	        "Apr_Abbr": "ربيع الثاني",
	        "May_Abbr": "جمادى الاولى",
	        "Jun_Abbr": "جمادى الثانية",
	        "Jul_Abbr": "رجب",
	        "Aug_Abbr": "شعبان",
	        "Sep_Abbr": "رمضان",
	        "Oct_Abbr": "شوال",
	        "Nov_Abbr": "ذو القعدة",
	        "Dec_Abbr": "ذو الحجة",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 1451,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yy",
	        "dddd, MMMM dd, yyyy": "dd/MMMM/yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd/MMMM/yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "محرم",
	        "/feb(ruary)?/": "صفر",
	        "/mar(ch)?/": "ربيع الأول",
	        "/apr(il)?/": "ربيع الثاني",
	        "/may/": "جمادى الأولى",
	        "/jun(e)?/": "جمادى الثانية",
	        "/jul(y)?/": "رجب",
	        "/aug(ust)?/": "شعبان",
	        "/sep(t(ember)?)?/": "رمضان",
	        "/oct(ober)?/": "شوال",
	        "/nov(ember)?/": "ذو القعدة",
	        "/dec(ember)?/": "ذو الحجة",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^الاثنين",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-SA";


/***/ },
/* 151 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-SY
	 * Name: Arabic (Syria)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-SY"] = {
	        "name": "ar-SY",
	        "englishName": "Arabic (Syria)",
	        "nativeName": "العربية (سوريا)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "كانون الثاني",
	        "February": "شباط",
	        "March": "آذار",
	        "April": "نيسان",
	        "May": "أيار",
	        "June": "حزيران",
	        "July": "تموز",
	        "August": "آب",
	        "September": "أيلول",
	        "October": "تشرين الأول",
	        "November": "تشرين الثاني",
	        "December": "كانون الأول",
	        "Jan_Abbr": "كانون الثاني",
	        "Feb_Abbr": "شباط",
	        "Mar_Abbr": "آذار",
	        "Apr_Abbr": "نيسان",
	        "May_Abbr": "أيار",
	        "Jun_Abbr": "حزيران",
	        "Jul_Abbr": "تموز",
	        "Aug_Abbr": "آب",
	        "Sep_Abbr": "أيلول",
	        "Oct_Abbr": "تشرين الأول",
	        "Nov_Abbr": "تشرين الثاني",
	        "Dec_Abbr": "كانون الأول",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "كانون الثاني",
	        "/feb(ruary)?/": "شباط",
	        "/mar(ch)?/": "آذار",
	        "/apr(il)?/": "نيسان",
	        "/may/": "أيار",
	        "/jun(e)?/": "حزيران",
	        "/jul(y)?/": "تموز",
	        "/aug(ust)?/": "آب",
	        "/sep(t(ember)?)?/": "أيلول",
	        "/oct(ober)?/": "تشرين الأول",
	        "/nov(ember)?/": "تشرين الثاني",
	        "/dec(ember)?/": "كانون الأول",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-SY";


/***/ },
/* 152 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-TN
	 * Name: Arabic (Tunisia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-TN"] = {
	        "name": "ar-TN",
	        "englishName": "Arabic (Tunisia)",
	        "nativeName": "العربية (تونس)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "جانفي",
	        "February": "فيفري",
	        "March": "مارس",
	        "April": "افريل",
	        "May": "ماي",
	        "June": "جوان",
	        "July": "جويلية",
	        "August": "اوت",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "جانفي",
	        "Feb_Abbr": "فيفري",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "افريل",
	        "May_Abbr": "ماي",
	        "Jun_Abbr": "جوان",
	        "Jul_Abbr": "جويلية",
	        "Aug_Abbr": "اوت",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "جانفي",
	        "/feb(ruary)?/": "فيفري",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "افريل",
	        "/may/": "ماي",
	        "/jun(e)?/": "جوان",
	        "/jul(y)?/": "جويلية",
	        "/aug(ust)?/": "اوت",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-TN";


/***/ },
/* 153 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ar-YE
	 * Name: Arabic (Yemen)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ar-YE"] = {
	        "name": "ar-YE",
	        "englishName": "Arabic (Yemen)",
	        "nativeName": "العربية (اليمن)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "أ",
	        "Mo": "ا",
	        "Tu": "ث",
	        "We": "أ",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "أ",
	        "M_Mon_Initial": "ا",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "أ",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "يناير",
	        "February": "فبراير",
	        "March": "مارس",
	        "April": "ابريل",
	        "May": "مايو",
	        "June": "يونيو",
	        "July": "يوليو",
	        "August": "اغسطس",
	        "September": "سبتمبر",
	        "October": "اكتوبر",
	        "November": "نوفمبر",
	        "December": "ديسمبر",
	        "Jan_Abbr": "يناير",
	        "Feb_Abbr": "فبراير",
	        "Mar_Abbr": "مارس",
	        "Apr_Abbr": "ابريل",
	        "May_Abbr": "مايو",
	        "Jun_Abbr": "يونيو",
	        "Jul_Abbr": "يوليو",
	        "Aug_Abbr": "اغسطس",
	        "Sep_Abbr": "سبتمبر",
	        "Oct_Abbr": "اكتوبر",
	        "Nov_Abbr": "نوفمبر",
	        "Dec_Abbr": "ديسمبر",
	        "AM": "ص",
	        "PM": "م",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "يناير",
	        "/feb(ruary)?/": "فبراير",
	        "/mar(ch)?/": "مارس",
	        "/apr(il)?/": "ابريل",
	        "/may/": "مايو",
	        "/jun(e)?/": "يونيو",
	        "/jul(y)?/": "يوليو",
	        "/aug(ust)?/": "اغسطس",
	        "/sep(t(ember)?)?/": "سبتمبر",
	        "/oct(ober)?/": "اكتوبر",
	        "/nov(ember)?/": "نوفمبر",
	        "/dec(ember)?/": "ديسمبر",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^ا(1)?",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ar-YE";


/***/ },
/* 154 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: az-Cyrl-AZ
	 * Name: Azeri (Cyrillic, Azerbaijan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["az-Cyrl-AZ"] = {
	        "name": "az-Cyrl-AZ",
	        "englishName": "Azeri (Cyrillic, Azerbaijan)",
	        "nativeName": "Азәрбајҹан (Азәрбајҹан)",
	        "Sunday": "Базар",
	        "Monday": "Базар ертәси",
	        "Tuesday": "Чәршәнбә ахшамы",
	        "Wednesday": "Чәршәнбә",
	        "Thursday": "Ҹүмә ахшамы",
	        "Friday": "Ҹүмә",
	        "Saturday": "Шәнбә",
	        "Sun": "Б",
	        "Mon": "Бе",
	        "Tue": "Ча",
	        "Wed": "Ч",
	        "Thu": "Ҹа",
	        "Fri": "Ҹ",
	        "Sat": "Ш",
	        "Su": "Б",
	        "Mo": "Бе",
	        "Tu": "Ча",
	        "We": "Ч",
	        "Th": "Ҹа",
	        "Fr": "Ҹ",
	        "Sa": "Ш",
	        "S_Sun_Initial": "Б",
	        "M_Mon_Initial": "Б",
	        "T_Tue_Initial": "Ч",
	        "W_Wed_Initial": "Ч",
	        "T_Thu_Initial": "Ҹ",
	        "F_Fri_Initial": "Ҹ",
	        "S_Sat_Initial": "Ш",
	        "January": "Јанвар",
	        "February": "Феврал",
	        "March": "Март",
	        "April": "Апрел",
	        "May": "Мај",
	        "June": "Ијун",
	        "July": "Ијул",
	        "August": "Август",
	        "September": "Сентјабр",
	        "October": "Октјабр",
	        "November": "Нојабр",
	        "December": "Декабр",
	        "Jan_Abbr": "Јан",
	        "Feb_Abbr": "Фев",
	        "Mar_Abbr": "Мар",
	        "Apr_Abbr": "Апр",
	        "May_Abbr": "Мај",
	        "Jun_Abbr": "Ијун",
	        "Jul_Abbr": "Ијул",
	        "Aug_Abbr": "Авг",
	        "Sep_Abbr": "Сен",
	        "Oct_Abbr": "Окт",
	        "Nov_Abbr": "Ноя",
	        "Dec_Abbr": "Дек",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "јан(вар)?",
	        "/feb(ruary)?/": "фев(рал)?",
	        "/mar(ch)?/": "мар(т)?",
	        "/apr(il)?/": "апр(ел)?",
	        "/may/": "мај",
	        "/jun(e)?/": "ијун",
	        "/jul(y)?/": "ијул",
	        "/aug(ust)?/": "авг(уст)?",
	        "/sep(t(ember)?)?/": "сен(тјабр)?",
	        "/oct(ober)?/": "окт(јабр)?",
	        "/nov(ember)?/": "нојабр",
	        "/dec(ember)?/": "дек(абр)?",
	        "/^su(n(day)?)?/": "^базар",
	        "/^mo(n(day)?)?/": "^базар ертәси",
	        "/^tu(e(s(day)?)?)?/": "^чәршәнбә ахшамы",
	        "/^we(d(nesday)?)?/": "^чәршәнбә",
	        "/^th(u(r(s(day)?)?)?)?/": "^ҹүмә ахшамы",
	        "/^fr(i(day)?)?/": "^ҹүмә",
	        "/^sa(t(urday)?)?/": "^шәнбә",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "az-Cyrl-AZ";


/***/ },
/* 155 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: az-Latn-AZ
	 * Name: Azeri (Latin, Azerbaijan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["az-Latn-AZ"] = {
	        "name": "az-Latn-AZ",
	        "englishName": "Azeri (Latin, Azerbaijan)",
	        "nativeName": "Azərbaycan­ılı (Azərbaycanca)",
	        "Sunday": "Bazar",
	        "Monday": "Bazar ertəsi",
	        "Tuesday": "Çərşənbə axşamı",
	        "Wednesday": "Çərşənbə",
	        "Thursday": "Cümə axşamı",
	        "Friday": "Cümə",
	        "Saturday": "Şənbə",
	        "Sun": "B",
	        "Mon": "Be",
	        "Tue": "Ça",
	        "Wed": "Ç",
	        "Thu": "Ca",
	        "Fri": "C",
	        "Sat": "Ş",
	        "Su": "B",
	        "Mo": "Be",
	        "Tu": "Ça",
	        "We": "Ç",
	        "Th": "Ca",
	        "Fr": "C",
	        "Sa": "Ş",
	        "S_Sun_Initial": "B",
	        "M_Mon_Initial": "B",
	        "T_Tue_Initial": "Ç",
	        "W_Wed_Initial": "Ç",
	        "T_Thu_Initial": "C",
	        "F_Fri_Initial": "C",
	        "S_Sat_Initial": "Ş",
	        "January": "Yanvar",
	        "February": "Fevral",
	        "March": "Mart",
	        "April": "Aprel",
	        "May": "May",
	        "June": "İyun",
	        "July": "İyul",
	        "August": "Avgust",
	        "September": "Sentyabr",
	        "October": "Oktyabr",
	        "November": "Noyabr",
	        "December": "Dekabr",
	        "Jan_Abbr": "Yan",
	        "Feb_Abbr": "Fev",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "İyun",
	        "Jul_Abbr": "İyul",
	        "Aug_Abbr": "Avg",
	        "Sep_Abbr": "Sen",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Noy",
	        "Dec_Abbr": "Dek",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "yan(var)?",
	        "/feb(ruary)?/": "fev(ral)?",
	        "/mar(ch)?/": "mar(t)?",
	        "/apr(il)?/": "apr(el)?",
	        "/may/": "may",
	        "/jun(e)?/": "iyun",
	        "/jul(y)?/": "iyul",
	        "/aug(ust)?/": "avg(ust)?",
	        "/sep(t(ember)?)?/": "sen(tyabr)?",
	        "/oct(ober)?/": "okt(yabr)?",
	        "/nov(ember)?/": "noy(abr)?",
	        "/dec(ember)?/": "dek(abr)?",
	        "/^su(n(day)?)?/": "^bazar",
	        "/^mo(n(day)?)?/": "^bazar ertəsi",
	        "/^tu(e(s(day)?)?)?/": "^çərşənbə axşamı",
	        "/^we(d(nesday)?)?/": "^çərşənbə",
	        "/^th(u(r(s(day)?)?)?)?/": "^cümə axşamı",
	        "/^fr(i(day)?)?/": "^cümə",
	        "/^sa(t(urday)?)?/": "^şənbə",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "az-Latn-AZ";


/***/ },
/* 156 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: be-BY
	 * Name: Belarusian (Belarus)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["be-BY"] = {
	        "name": "be-BY",
	        "englishName": "Belarusian (Belarus)",
	        "nativeName": "Беларускі (Беларусь)",
	        "Sunday": "нядзеля",
	        "Monday": "панядзелак",
	        "Tuesday": "аўторак",
	        "Wednesday": "серада",
	        "Thursday": "чацвер",
	        "Friday": "пятніца",
	        "Saturday": "субота",
	        "Sun": "нд",
	        "Mon": "пн",
	        "Tue": "аў",
	        "Wed": "ср",
	        "Thu": "чц",
	        "Fri": "пт",
	        "Sat": "сб",
	        "Su": "нд",
	        "Mo": "пн",
	        "Tu": "аў",
	        "We": "ср",
	        "Th": "чц",
	        "Fr": "пт",
	        "Sa": "сб",
	        "S_Sun_Initial": "н",
	        "M_Mon_Initial": "п",
	        "T_Tue_Initial": "а",
	        "W_Wed_Initial": "с",
	        "T_Thu_Initial": "ч",
	        "F_Fri_Initial": "п",
	        "S_Sat_Initial": "с",
	        "January": "Студзень",
	        "February": "Люты",
	        "March": "Сакавік",
	        "April": "Красавік",
	        "May": "Май",
	        "June": "Чэрвень",
	        "July": "Ліпень",
	        "August": "Жнівень",
	        "September": "Верасень",
	        "October": "Кастрычнік",
	        "November": "Лістапад",
	        "December": "Снежань",
	        "Jan_Abbr": "Сту",
	        "Feb_Abbr": "Лют",
	        "Mar_Abbr": "Сак",
	        "Apr_Abbr": "Кра",
	        "May_Abbr": "Май",
	        "Jun_Abbr": "Чэр",
	        "Jul_Abbr": "Ліп",
	        "Aug_Abbr": "Жні",
	        "Sep_Abbr": "Вер",
	        "Oct_Abbr": "Кас",
	        "Nov_Abbr": "Ліс",
	        "Dec_Abbr": "Сне",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "сту(дзень)?",
	        "/feb(ruary)?/": "лют(ы)?",
	        "/mar(ch)?/": "сак(авік)?",
	        "/apr(il)?/": "кра(савік)?",
	        "/may/": "май",
	        "/jun(e)?/": "чэр(вень)?",
	        "/jul(y)?/": "ліп(ень)?",
	        "/aug(ust)?/": "жні(вень)?",
	        "/sep(t(ember)?)?/": "вер(асень)?",
	        "/oct(ober)?/": "кас(трычнік)?",
	        "/nov(ember)?/": "ліс(тапад)?",
	        "/dec(ember)?/": "сне(жань)?",
	        "/^su(n(day)?)?/": "^нядзеля",
	        "/^mo(n(day)?)?/": "^панядзелак",
	        "/^tu(e(s(day)?)?)?/": "^аўторак",
	        "/^we(d(nesday)?)?/": "^серада",
	        "/^th(u(r(s(day)?)?)?)?/": "^чацвер",
	        "/^fr(i(day)?)?/": "^пятніца",
	        "/^sa(t(urday)?)?/": "^субота",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "be-BY";


/***/ },
/* 157 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: bg-BG
	 * Name: Bulgarian (Bulgaria)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["bg-BG"] = {
	        "name": "bg-BG",
	        "englishName": "Bulgarian (Bulgaria)",
	        "nativeName": "български (България)",
	        "Sunday": "неделя",
	        "Monday": "понеделник",
	        "Tuesday": "вторник",
	        "Wednesday": "сряда",
	        "Thursday": "четвъртък",
	        "Friday": "петък",
	        "Saturday": "събота",
	        "Sun": "Нд",
	        "Mon": "Пн",
	        "Tue": "Вт",
	        "Wed": "Ср",
	        "Thu": "Чт",
	        "Fri": "Пт",
	        "Sat": "Сб",
	        "Su": "не",
	        "Mo": "по",
	        "Tu": "вт",
	        "We": "ср",
	        "Th": "че",
	        "Fr": "пе",
	        "Sa": "съ",
	        "S_Sun_Initial": "н",
	        "M_Mon_Initial": "п",
	        "T_Tue_Initial": "в",
	        "W_Wed_Initial": "с",
	        "T_Thu_Initial": "ч",
	        "F_Fri_Initial": "п",
	        "S_Sat_Initial": "с",
	        "January": "Януари",
	        "February": "Февруари",
	        "March": "Март",
	        "April": "Април",
	        "May": "Май",
	        "June": "Юни",
	        "July": "Юли",
	        "August": "Август",
	        "September": "Септември",
	        "October": "Октомври",
	        "November": "Ноември",
	        "December": "Декември",
	        "Jan_Abbr": "Януари",
	        "Feb_Abbr": "Февруари",
	        "Mar_Abbr": "Март",
	        "Apr_Abbr": "Април",
	        "May_Abbr": "Май",
	        "Jun_Abbr": "Юни",
	        "Jul_Abbr": "Юли",
	        "Aug_Abbr": "Август",
	        "Sep_Abbr": "Септември",
	        "Oct_Abbr": "Октомври",
	        "Nov_Abbr": "Ноември",
	        "Dec_Abbr": "Декември",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.M.yyyy 'г.'",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy 'г.'",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy 'г.' HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy 'г.'",
	        "/jan(uary)?/": "януари",
	        "/feb(ruary)?/": "февруари",
	        "/mar(ch)?/": "март",
	        "/apr(il)?/": "април",
	        "/may/": "май",
	        "/jun(e)?/": "юни",
	        "/jul(y)?/": "юли",
	        "/aug(ust)?/": "август",
	        "/sep(t(ember)?)?/": "септември",
	        "/oct(ober)?/": "октомври",
	        "/nov(ember)?/": "ноември",
	        "/dec(ember)?/": "декември",
	        "/^su(n(day)?)?/": "^не((деля)?)?",
	        "/^mo(n(day)?)?/": "^по((неделник)?)?",
	        "/^tu(e(s(day)?)?)?/": "^вторник",
	        "/^we(d(nesday)?)?/": "^сряда",
	        "/^th(u(r(s(day)?)?)?)?/": "^че((твъртък)?)?",
	        "/^fr(i(day)?)?/": "^пе((тък)?)?",
	        "/^sa(t(urday)?)?/": "^съ((бота)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "bg-BG";


/***/ },
/* 158 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: bs-Latn-BA
	 * Name: Bosnian (Bosnia and Herzegovina)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["bs-Latn-BA"] = {
	        "name": "bs-Latn-BA",
	        "englishName": "Bosnian (Bosnia and Herzegovina)",
	        "nativeName": "bosanski (Bosna i Hercegovina)",
	        "Sunday": "nedjelja",
	        "Monday": "ponedjeljak",
	        "Tuesday": "utorak",
	        "Wednesday": "srijeda",
	        "Thursday": "četvrtak",
	        "Friday": "petak",
	        "Saturday": "subota",
	        "Sun": "ned",
	        "Mon": "pon",
	        "Tue": "uto",
	        "Wed": "sri",
	        "Thu": "čet",
	        "Fri": "pet",
	        "Sat": "sub",
	        "Su": "ned",
	        "Mo": "pon",
	        "Tu": "uto",
	        "We": "sri",
	        "Th": "čet",
	        "Fr": "pet",
	        "Sa": "sub",
	        "S_Sun_Initial": "n",
	        "M_Mon_Initial": "p",
	        "T_Tue_Initial": "u",
	        "W_Wed_Initial": "s",
	        "T_Thu_Initial": "č",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "s",
	        "January": "januar",
	        "February": "februar",
	        "March": "mart",
	        "April": "april",
	        "May": "maj",
	        "June": "jun",
	        "July": "jul",
	        "August": "avgust",
	        "September": "septembar",
	        "October": "oktobar",
	        "November": "novembar",
	        "December": "decembar",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "maj",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "avg",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm:ss",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "mar(t)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "maj",
	        "/jun(e)?/": "jun",
	        "/jul(y)?/": "jul",
	        "/aug(ust)?/": "avg(ust)?",
	        "/sep(t(ember)?)?/": "sep(tembar)?",
	        "/oct(ober)?/": "okt(obar)?",
	        "/nov(ember)?/": "nov(embar)?",
	        "/dec(ember)?/": "dec(embar)?",
	        "/^su(n(day)?)?/": "^nedjelja",
	        "/^mo(n(day)?)?/": "^ponedjeljak",
	        "/^tu(e(s(day)?)?)?/": "^utorak",
	        "/^we(d(nesday)?)?/": "^srijeda",
	        "/^th(u(r(s(day)?)?)?)?/": "^četvrtak",
	        "/^fr(i(day)?)?/": "^petak",
	        "/^sa(t(urday)?)?/": "^subota",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "bs-Latn-BA";


/***/ },
/* 159 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ca-ES
	 * Name: Catalan (Catalan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ca-ES"] = {
	        "name": "ca-ES",
	        "englishName": "Catalan (Catalan)",
	        "nativeName": "català (català)",
	        "Sunday": "diumenge",
	        "Monday": "dilluns",
	        "Tuesday": "dimarts",
	        "Wednesday": "dimecres",
	        "Thursday": "dijous",
	        "Friday": "divendres",
	        "Saturday": "dissabte",
	        "Sun": "dg.",
	        "Mon": "dl.",
	        "Tue": "dt.",
	        "Wed": "dc.",
	        "Thu": "dj.",
	        "Fri": "dv.",
	        "Sat": "ds.",
	        "Su": "dg",
	        "Mo": "dl",
	        "Tu": "dt",
	        "We": "dc",
	        "Th": "dj",
	        "Fr": "dv",
	        "Sa": "ds",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "d",
	        "T_Tue_Initial": "d",
	        "W_Wed_Initial": "d",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "d",
	        "S_Sat_Initial": "d",
	        "January": "gener",
	        "February": "febrer",
	        "March": "març",
	        "April": "abril",
	        "May": "maig",
	        "June": "juny",
	        "July": "juliol",
	        "August": "agost",
	        "September": "setembre",
	        "October": "octubre",
	        "November": "novembre",
	        "December": "desembre",
	        "Jan_Abbr": "gen",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "març",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "maig",
	        "Jun_Abbr": "juny",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ag",
	        "Sep_Abbr": "set",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "des",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d' / 'MMMM' / 'yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d' / 'MMMM' / 'yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' / 'yyyy",
	        "/jan(uary)?/": "gen(er)?",
	        "/feb(ruary)?/": "feb(rer)?",
	        "/mar(ch)?/": "març",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "maig",
	        "/jun(e)?/": "juny",
	        "/jul(y)?/": "jul(iol)?",
	        "/aug(ust)?/": "ag(ost)?",
	        "/sep(t(ember)?)?/": "set(embre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(embre)?",
	        "/dec(ember)?/": "des(embre)?",
	        "/^su(n(day)?)?/": "^dg((.(umenge)?)?)?",
	        "/^mo(n(day)?)?/": "^dl((.(lluns)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^dt((.(marts)?)?)?",
	        "/^we(d(nesday)?)?/": "^dc((.(mecres)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^dj((.(jous)?)?)?",
	        "/^fr(i(day)?)?/": "^dv((.(vendres)?)?)?",
	        "/^sa(t(urday)?)?/": "^ds((.(ssabte)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ca-ES";


/***/ },
/* 160 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: cs-CZ
	 * Name: Czech (Czech Republic)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["cs-CZ"] = {
	        "name": "cs-CZ",
	        "englishName": "Czech (Czech Republic)",
	        "nativeName": "čeština (Česká republika)",
	        "Sunday": "neděle",
	        "Monday": "pondělí",
	        "Tuesday": "úterý",
	        "Wednesday": "středa",
	        "Thursday": "čtvrtek",
	        "Friday": "pátek",
	        "Saturday": "sobota",
	        "Sun": "ne",
	        "Mon": "po",
	        "Tue": "út",
	        "Wed": "st",
	        "Thu": "čt",
	        "Fri": "pá",
	        "Sat": "so",
	        "Su": "ne",
	        "Mo": "po",
	        "Tu": "út",
	        "We": "st",
	        "Th": "čt",
	        "Fr": "pá",
	        "Sa": "so",
	        "S_Sun_Initial": "n",
	        "M_Mon_Initial": "p",
	        "T_Tue_Initial": "ú",
	        "W_Wed_Initial": "s",
	        "T_Thu_Initial": "č",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "s",
	        "January": "leden",
	        "February": "únor",
	        "March": "březen",
	        "April": "duben",
	        "May": "květen",
	        "June": "červen",
	        "July": "červenec",
	        "August": "srpen",
	        "September": "září",
	        "October": "říjen",
	        "November": "listopad",
	        "December": "prosinec",
	        "Jan_Abbr": "I",
	        "Feb_Abbr": "II",
	        "Mar_Abbr": "III",
	        "Apr_Abbr": "IV",
	        "May_Abbr": "V",
	        "Jun_Abbr": "VI",
	        "Jul_Abbr": "VII",
	        "Aug_Abbr": "VIII",
	        "Sep_Abbr": "IX",
	        "Oct_Abbr": "X",
	        "Nov_Abbr": "XI",
	        "Dec_Abbr": "XII",
	        "AM": "dop.",
	        "PM": "odp.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "leden",
	        "/feb(ruary)?/": "únor",
	        "/mar(ch)?/": "březen",
	        "/apr(il)?/": "duben",
	        "/may/": "květen",
	        "/jun(e)?/": "červen",
	        "/jul(y)?/": "červenec",
	        "/aug(ust)?/": "srpen",
	        "/sep(t(ember)?)?/": "září",
	        "/oct(ober)?/": "říjen",
	        "/nov(ember)?/": "listopad",
	        "/dec(ember)?/": "prosinec",
	        "/^su(n(day)?)?/": "^neděle",
	        "/^mo(n(day)?)?/": "^pondělí",
	        "/^tu(e(s(day)?)?)?/": "^úterý",
	        "/^we(d(nesday)?)?/": "^středa",
	        "/^th(u(r(s(day)?)?)?)?/": "^čtvrtek",
	        "/^fr(i(day)?)?/": "^pátek",
	        "/^sa(t(urday)?)?/": "^sobota",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "cs-CZ";


/***/ },
/* 161 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: cy-GB
	 * Name: Welsh (United Kingdom)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["cy-GB"] = {
	        "name": "cy-GB",
	        "englishName": "Welsh (United Kingdom)",
	        "nativeName": "Cymraeg (y Deyrnas Unedig)",
	        "Sunday": "Dydd Sul",
	        "Monday": "Dydd Llun",
	        "Tuesday": "Dydd Mawrth",
	        "Wednesday": "Dydd Mercher",
	        "Thursday": "Dydd Iau",
	        "Friday": "Dydd Gwener",
	        "Saturday": "Dydd Sadwrn",
	        "Sun": "Sul",
	        "Mon": "Llun",
	        "Tue": "Maw",
	        "Wed": "Mer",
	        "Thu": "Iau",
	        "Fri": "Gwe",
	        "Sat": "Sad",
	        "Su": "Sul",
	        "Mo": "Llun",
	        "Tu": "Maw",
	        "We": "Mer",
	        "Th": "Iau",
	        "Fr": "Gwe",
	        "Sa": "Sad",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "L",
	        "T_Tue_Initial": "M",
	        "W_Wed_Initial": "M",
	        "T_Thu_Initial": "I",
	        "F_Fri_Initial": "G",
	        "S_Sat_Initial": "S",
	        "January": "Ionawr",
	        "February": "Chwefror",
	        "March": "Mawrth",
	        "April": "Ebrill",
	        "May": "Mai",
	        "June": "Mehefin",
	        "July": "Gorffennaf",
	        "August": "Awst",
	        "September": "Medi",
	        "October": "Hydref",
	        "November": "Tachwedd",
	        "December": "Rhagfyr",
	        "Jan_Abbr": "Ion",
	        "Feb_Abbr": "Chwe",
	        "Mar_Abbr": "Maw",
	        "Apr_Abbr": "Ebr",
	        "May_Abbr": "Mai",
	        "Jun_Abbr": "Meh",
	        "Jul_Abbr": "Gor",
	        "Aug_Abbr": "Aws",
	        "Sep_Abbr": "Med",
	        "Oct_Abbr": "Hyd",
	        "Nov_Abbr": "Tach",
	        "Dec_Abbr": "Rhag",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm:ss",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ion(awr)?",
	        "/feb(ruary)?/": "chwe(fror)?",
	        "/mar(ch)?/": "maw(rth)?",
	        "/apr(il)?/": "ebr(ill)?",
	        "/may/": "mai",
	        "/jun(e)?/": "meh(efin)?",
	        "/jul(y)?/": "gor(ffennaf)?",
	        "/aug(ust)?/": "aws(t)?",
	        "/sep(t(ember)?)?/": "med(i)?",
	        "/oct(ober)?/": "hyd(ref)?",
	        "/nov(ember)?/": "tach(wedd)?",
	        "/dec(ember)?/": "rhag(fyr)?",
	        "/^su(n(day)?)?/": "^dydd sul",
	        "/^mo(n(day)?)?/": "^dydd llun",
	        "/^tu(e(s(day)?)?)?/": "^dydd mawrth",
	        "/^we(d(nesday)?)?/": "^dydd mercher",
	        "/^th(u(r(s(day)?)?)?)?/": "^dydd iau",
	        "/^fr(i(day)?)?/": "^dydd gwener",
	        "/^sa(t(urday)?)?/": "^dydd sadwrn",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "cy-GB";


/***/ },
/* 162 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: da-DK
	 * Name: Danish (Denmark)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["da-DK"] = {
	        "name": "da-DK",
	        "englishName": "Danish (Denmark)",
	        "nativeName": "dansk (Danmark)",
	        "Sunday": "søndag",
	        "Monday": "mandag",
	        "Tuesday": "tirsdag",
	        "Wednesday": "onsdag",
	        "Thursday": "torsdag",
	        "Friday": "fredag",
	        "Saturday": "lørdag",
	        "Sun": "sø",
	        "Mon": "ma",
	        "Tue": "ti",
	        "Wed": "on",
	        "Thu": "to",
	        "Fri": "fr",
	        "Sat": "lø",
	        "Su": "sø",
	        "Mo": "ma",
	        "Tu": "ti",
	        "We": "on",
	        "Th": "to",
	        "Fr": "fr",
	        "Sa": "lø",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "t",
	        "W_Wed_Initial": "o",
	        "T_Thu_Initial": "t",
	        "F_Fri_Initial": "f",
	        "S_Sat_Initial": "l",
	        "January": "januar",
	        "February": "februar",
	        "March": "marts",
	        "April": "april",
	        "May": "maj",
	        "June": "juni",
	        "July": "juli",
	        "August": "august",
	        "September": "september",
	        "October": "oktober",
	        "November": "november",
	        "December": "december",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "maj",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "aug",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "mar(ts)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "maj",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^søndag",
	        "/^mo(n(day)?)?/": "^mandag",
	        "/^tu(e(s(day)?)?)?/": "^tirsdag",
	        "/^we(d(nesday)?)?/": "^onsdag",
	        "/^th(u(r(s(day)?)?)?)?/": "^torsdag",
	        "/^fr(i(day)?)?/": "^fredag",
	        "/^sa(t(urday)?)?/": "^lørdag",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "da-DK";


/***/ },
/* 163 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: de-AT
	 * Name: German (Austria)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["de-AT"] = {
	        "name": "de-AT",
	        "englishName": "German (Austria)",
	        "nativeName": "Deutsch (Österreich)",
	        "Sunday": "Sonntag",
	        "Monday": "Montag",
	        "Tuesday": "Dienstag",
	        "Wednesday": "Mittwoch",
	        "Thursday": "Donnerstag",
	        "Friday": "Freitag",
	        "Saturday": "Samstag",
	        "Sun": "Son",
	        "Mon": "Mon",
	        "Tue": "Die",
	        "Wed": "Mit",
	        "Thu": "Don",
	        "Fri": "Fre",
	        "Sat": "Sam",
	        "Su": "So",
	        "Mo": "Mo",
	        "Tu": "Di",
	        "We": "Mi",
	        "Th": "Do",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "D",
	        "W_Wed_Initial": "M",
	        "T_Thu_Initial": "D",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "Jänner",
	        "February": "Februar",
	        "March": "März",
	        "April": "April",
	        "May": "Mai",
	        "June": "Juni",
	        "July": "Juli",
	        "August": "August",
	        "September": "September",
	        "October": "Oktober",
	        "November": "November",
	        "December": "Dezember",
	        "Jan_Abbr": "J(ä|a)n",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "(M(a|ä)r|Mrz)",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mai",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dez",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jän(ner)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "mär(z)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mai",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dez(ember)?",
	        "/^su(n(day)?)?/": "^sonntag",
	        "/^mo(n(day)?)?/": "^montag",
	        "/^tu(e(s(day)?)?)?/": "^dienstag",
	        "/^we(d(nesday)?)?/": "^mittwoch",
	        "/^th(u(r(s(day)?)?)?)?/": "^donnerstag",
	        "/^fr(i(day)?)?/": "^freitag",
	        "/^sa(t(urday)?)?/": "^samstag",
	        "/^next/": "^nächste(r|s|n)?",
	        "/^last|past|prev(ious)?/": "^letzte(r|s|n)?|vergangene(r|s|n)?|vorherige(r|s|n)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|(da)?nach(er)?|von|daher|in)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|(be|zu)?vor|früher)",
	        "/^yes(terday)?/": "^gestern",
	        "/^t(od(ay)?)?/": "^heute",
	        "/^tom(orrow)?/": "^morgen",
	        "/^n(ow)?/": "^jetzt|sofort|gleich",
	        "/^ms|milli(second)?s?/": "^ms|milli(sekunde(n)?)?",
	        "/^sec(ond)?s?/": "^sek(unde(n)?)?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute(n)?)?",
	        "/^h(our)?s?/": "^h|st(d|unde(n)?)?",
	        "/^w(eek)?s?/": "^w(oche(n)?)?",
	        "/^m(onth)?s?/": "^m(onat(e)?)?",
	        "/^d(ay)?s?/": "^d|t(ag(en)?)?",
	        "/^y(ear)?s?/": "^y|j(ahr(en)?)?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "de-AT";


/***/ },
/* 164 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: de-CH
	 * Name: German (Switzerland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["de-CH"] = {
	        "name": "de-CH",
	        "englishName": "German (Switzerland)",
	        "nativeName": "Deutsch (Schweiz)",
	        "Sunday": "Sonntag",
	        "Monday": "Montag",
	        "Tuesday": "Dienstag",
	        "Wednesday": "Mittwoch",
	        "Thursday": "Donnerstag",
	        "Friday": "Freitag",
	        "Saturday": "Samstag",
	        "Sun": "Son",
	        "Mon": "Mon",
	        "Tue": "Die",
	        "Wed": "Mit",
	        "Thu": "Don",
	        "Fri": "Fre",
	        "Sat": "Sam",
	        "Su": "So",
	        "Mo": "Mo",
	        "Tu": "Di",
	        "We": "Mi",
	        "Th": "Do",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "D",
	        "W_Wed_Initial": "M",
	        "T_Thu_Initial": "D",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "Januar",
	        "February": "Februar",
	        "March": "März",
	        "April": "April",
	        "May": "Mai",
	        "June": "Juni",
	        "July": "Juli",
	        "August": "August",
	        "September": "September",
	        "October": "Oktober",
	        "November": "November",
	        "December": "Dezember",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mrz",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mai",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dez",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "märz",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mai",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dez(ember)?",
	        "/^su(n(day)?)?/": "^sonntag",
	        "/^mo(n(day)?)?/": "^montag",
	        "/^tu(e(s(day)?)?)?/": "^dienstag",
	        "/^we(d(nesday)?)?/": "^mittwoch",
	        "/^th(u(r(s(day)?)?)?)?/": "^donnerstag",
	        "/^fr(i(day)?)?/": "^freitag",
	        "/^sa(t(urday)?)?/": "^samstag",
	        "/^next/": "^nächste(r|s|n)?",
	        "/^last|past|prev(ious)?/": "^letzte(r|s|n)?|vergangene(r|s|n)?|vorherige(r|s|n)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|(da)?nach(er)?|von|daher|in)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|(be|zu)?vor|früher)",
	        "/^yes(terday)?/": "^gestern",
	        "/^t(od(ay)?)?/": "^heute",
	        "/^tom(orrow)?/": "^morgen",
	        "/^n(ow)?/": "^jetzt|sofort|gleich",
	        "/^ms|milli(second)?s?/": "^ms|milli(sekunde(n)?)?",
	        "/^sec(ond)?s?/": "^sek(unde(n)?)?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute(n)?)?",
	        "/^h(our)?s?/": "^h|st(d|unde(n)?)?",
	        "/^w(eek)?s?/": "^w(oche(n)?)?",
	        "/^m(onth)?s?/": "^m(onat(e)?)?",
	        "/^d(ay)?s?/": "^d|t(ag(en)?)?",
	        "/^y(ear)?s?/": "^y|j(ahr(en)?)?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "de-CH";


/***/ },
/* 165 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: de-DE
	 * Name: German (Germany)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["de-DE"] = {
	        "name": "de-DE",
	        "englishName": "German (Germany)",
	        "nativeName": "Deutsch (Deutschland)",
	        "Sunday": "Sonntag",
	        "Monday": "Montag",
	        "Tuesday": "Dienstag",
	        "Wednesday": "Mittwoch",
	        "Thursday": "Donnerstag",
	        "Friday": "Freitag",
	        "Saturday": "Samstag",
	        "Sun": "Son",
	        "Mon": "Mon",
	        "Tue": "Die",
	        "Wed": "Mit",
	        "Thu": "Don",
	        "Fri": "Fre",
	        "Sat": "Sam",
	        "Su": "So",
	        "Mo": "Mo",
	        "Tu": "Di",
	        "We": "Mi",
	        "Th": "Do",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "D",
	        "W_Wed_Initial": "M",
	        "T_Thu_Initial": "D",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "Januar",
	        "February": "Februar",
	        "March": "März",
	        "April": "April",
	        "May": "Mai",
	        "June": "Juni",
	        "July": "Juli",
	        "August": "August",
	        "September": "September",
	        "October": "Oktober",
	        "November": "November",
	        "December": "Dezember",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mrz",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mai",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dez",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "märz",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mai",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dez(ember)?",
	        "/^su(n(day)?)?/": "^sonntag",
	        "/^mo(n(day)?)?/": "^montag",
	        "/^tu(e(s(day)?)?)?/": "^dienstag",
	        "/^we(d(nesday)?)?/": "^mittwoch",
	        "/^th(u(r(s(day)?)?)?)?/": "^donnerstag",
	        "/^fr(i(day)?)?/": "^freitag",
	        "/^sa(t(urday)?)?/": "^samstag",
	        "/^next/": "^nächste(r|s|n)?",
	        "/^last|past|prev(ious)?/": "^letzte(r|s|n)?|vergangene(r|s|n)?|vorherige(r|s|n)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|(da)?nach(er)?|von|daher|in)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|(be|zu)?vor|früher)",
	        "/^yes(terday)?/": "^gestern",
	        "/^t(od(ay)?)?/": "^heute",
	        "/^tom(orrow)?/": "^morgen",
	        "/^n(ow)?/": "^jetzt|sofort|gleich",
	        "/^ms|milli(second)?s?/": "^ms|milli(sekunde(n)?)?",
	        "/^sec(ond)?s?/": "^sek(unde(n)?)?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute(n)?)?",
	        "/^h(our)?s?/": "^h|st(d|unde(n)?)?",
	        "/^w(eek)?s?/": "^w(oche(n)?)?",
	        "/^m(onth)?s?/": "^m(onat(e)?)?",
	        "/^d(ay)?s?/": "^d|t(ag(en)?)?",
	        "/^y(ear)?s?/": "^y|j(ahr(en)?)?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "de-DE";


/***/ },
/* 166 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: de-LI
	 * Name: German (Liechtenstein)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["de-LI"] = {
	        "name": "de-LI",
	        "englishName": "German (Liechtenstein)",
	        "nativeName": "Deutsch (Liechtenstein)",
	        "Sunday": "Sonntag",
	        "Monday": "Montag",
	        "Tuesday": "Dienstag",
	        "Wednesday": "Mittwoch",
	        "Thursday": "Donnerstag",
	        "Friday": "Freitag",
	        "Saturday": "Samstag",
	        "Sun": "Son",
	        "Mon": "Mon",
	        "Tue": "Die",
	        "Wed": "Mit",
	        "Thu": "Don",
	        "Fri": "Fre",
	        "Sat": "Sam",
	        "Su": "So",
	        "Mo": "Mo",
	        "Tu": "Di",
	        "We": "Mi",
	        "Th": "Do",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "D",
	        "W_Wed_Initial": "M",
	        "T_Thu_Initial": "D",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "Januar",
	        "February": "Februar",
	        "March": "März",
	        "April": "April",
	        "May": "Mai",
	        "June": "Juni",
	        "July": "Juli",
	        "August": "August",
	        "September": "September",
	        "October": "Oktober",
	        "November": "November",
	        "December": "Dezember",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mrz",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mai",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dez",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "märz",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mai",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dez(ember)?",
	        "/^su(n(day)?)?/": "^sonntag",
	        "/^mo(n(day)?)?/": "^montag",
	        "/^tu(e(s(day)?)?)?/": "^dienstag",
	        "/^we(d(nesday)?)?/": "^mittwoch",
	        "/^th(u(r(s(day)?)?)?)?/": "^donnerstag",
	        "/^fr(i(day)?)?/": "^freitag",
	        "/^sa(t(urday)?)?/": "^samstag",
	        "/^next/": "^nächste(r|s|n)?",
	        "/^last|past|prev(ious)?/": "^letzte(r|s|n)?|vergangene(r|s|n)?|vorherige(r|s|n)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|(da)?nach(er)?|von|daher|in)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|(be|zu)?vor|früher)",
	        "/^yes(terday)?/": "^gestern",
	        "/^t(od(ay)?)?/": "^heute",
	        "/^tom(orrow)?/": "^morgen",
	        "/^n(ow)?/": "^jetzt|sofort|gleich",
	        "/^ms|milli(second)?s?/": "^ms|milli(sekunde(n)?)?",
	        "/^sec(ond)?s?/": "^sek(unde(n)?)?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute(n)?)?",
	        "/^h(our)?s?/": "^h|st(d|unde(n)?)?",
	        "/^w(eek)?s?/": "^w(oche(n)?)?",
	        "/^m(onth)?s?/": "^m(onat(e)?)?",
	        "/^d(ay)?s?/": "^d|t(ag(en)?)?",
	        "/^y(ear)?s?/": "^y|j(ahr(en)?)?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "de-LI";


/***/ },
/* 167 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: de-LU
	 * Name: German (Luxembourg)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["de-LU"] = {
	        "name": "de-LU",
	        "englishName": "German (Luxembourg)",
	        "nativeName": "Deutsch (Luxemburg)",
	        "Sunday": "Sonntag",
	        "Monday": "Montag",
	        "Tuesday": "Dienstag",
	        "Wednesday": "Mittwoch",
	        "Thursday": "Donnerstag",
	        "Friday": "Freitag",
	        "Saturday": "Samstag",
	        "Sun": "Son",
	        "Mon": "Mon",
	        "Tue": "Die",
	        "Wed": "Mit",
	        "Thu": "Don",
	        "Fri": "Fre",
	        "Sat": "Sam",
	        "Su": "So",
	        "Mo": "Mo",
	        "Tu": "Di",
	        "We": "Mi",
	        "Th": "Do",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "D",
	        "W_Wed_Initial": "M",
	        "T_Thu_Initial": "D",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "Januar",
	        "February": "Februar",
	        "March": "März",
	        "April": "April",
	        "May": "Mai",
	        "June": "Juni",
	        "July": "Juli",
	        "August": "August",
	        "September": "September",
	        "October": "Oktober",
	        "November": "November",
	        "December": "Dezember",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mrz",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mai",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dez",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "märz",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mai",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dez(ember)?",
	        "/^su(n(day)?)?/": "^sonntag",
	        "/^mo(n(day)?)?/": "^montag",
	        "/^tu(e(s(day)?)?)?/": "^dienstag",
	        "/^we(d(nesday)?)?/": "^mittwoch",
	        "/^th(u(r(s(day)?)?)?)?/": "^donnerstag",
	        "/^fr(i(day)?)?/": "^freitag",
	        "/^sa(t(urday)?)?/": "^samstag",
	        "/^next/": "^nächste(r|s|n)?",
	        "/^last|past|prev(ious)?/": "^letzte(r|s|n)?|vergangene(r|s|n)?|vorherige(r|s|n)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|(da)?nach(er)?|von|daher|in)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|(be|zu)?vor|früher)",
	        "/^yes(terday)?/": "^gestern",
	        "/^t(od(ay)?)?/": "^heute",
	        "/^tom(orrow)?/": "^morgen",
	        "/^n(ow)?/": "^jetzt|sofort|gleich",
	        "/^ms|milli(second)?s?/": "^ms|milli(sekunde(n)?)?",
	        "/^sec(ond)?s?/": "^sek(unde(n)?)?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute(n)?)?",
	        "/^h(our)?s?/": "^h|st(d|unde(n)?)?",
	        "/^w(eek)?s?/": "^w(oche(n)?)?",
	        "/^m(onth)?s?/": "^m(onat(e)?)?",
	        "/^d(ay)?s?/": "^d|t(ag(en)?)?",
	        "/^y(ear)?s?/": "^y|j(ahr(en)?)?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "de-LU";


/***/ },
/* 168 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: dv-MV
	 * Name: Divehi (Maldives)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["dv-MV"] = {
	        "name": "dv-MV",
	        "englishName": "Divehi (Maldives)",
	        "nativeName": "ދިވެހިބަސް (ދިވެހި ރާއްޖެ)",
	        "Sunday": "الاحد",
	        "Monday": "الاثنين",
	        "Tuesday": "الثلاثاء",
	        "Wednesday": "الاربعاء",
	        "Thursday": "الخميس",
	        "Friday": "الجمعة",
	        "Saturday": "السبت",
	        "Sun": "الاحد",
	        "Mon": "الاثنين",
	        "Tue": "الثلاثاء",
	        "Wed": "الاربعاء",
	        "Thu": "الخميس",
	        "Fri": "الجمعة",
	        "Sat": "السبت",
	        "Su": "ح",
	        "Mo": "ن",
	        "Tu": "ث",
	        "We": "ر",
	        "Th": "خ",
	        "Fr": "ج",
	        "Sa": "س",
	        "S_Sun_Initial": "ح",
	        "M_Mon_Initial": "ن",
	        "T_Tue_Initial": "ث",
	        "W_Wed_Initial": "ر",
	        "T_Thu_Initial": "خ",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "س",
	        "January": "محرم",
	        "February": "صفر",
	        "March": "ربيع الأول",
	        "April": "ربيع الثاني",
	        "May": "جمادى الأولى",
	        "June": "جمادى الثانية",
	        "July": "رجب",
	        "August": "شعبان",
	        "September": "رمضان",
	        "October": "شوال",
	        "November": "ذو القعدة",
	        "December": "ذو الحجة",
	        "Jan_Abbr": "محرم",
	        "Feb_Abbr": "صفر",
	        "Mar_Abbr": "ربيع الاول",
	        "Apr_Abbr": "ربيع الثاني",
	        "May_Abbr": "جمادى الاولى",
	        "Jun_Abbr": "جمادى الثانية",
	        "Jul_Abbr": "رجب",
	        "Aug_Abbr": "شعبان",
	        "Sep_Abbr": "رمضان",
	        "Oct_Abbr": "شوال",
	        "Nov_Abbr": "ذو القعدة",
	        "Dec_Abbr": "ذو الحجة",
	        "AM": "މކ",
	        "PM": "މފ",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 1451,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yy",
	        "dddd, MMMM dd, yyyy": "dd/MMMM/yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd/MMMM/yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "محرم",
	        "/feb(ruary)?/": "صفر",
	        "/mar(ch)?/": "ربيع الأول",
	        "/apr(il)?/": "ربيع الثاني",
	        "/may/": "جمادى الأولى",
	        "/jun(e)?/": "جمادى الثانية",
	        "/jul(y)?/": "رجب",
	        "/aug(ust)?/": "شعبان",
	        "/sep(t(ember)?)?/": "رمضان",
	        "/oct(ober)?/": "شوال",
	        "/nov(ember)?/": "ذو القعدة",
	        "/dec(ember)?/": "ذو الحجة",
	        "/^su(n(day)?)?/": "^الاحد",
	        "/^mo(n(day)?)?/": "^الاثنين",
	        "/^tu(e(s(day)?)?)?/": "^الثلاثاء",
	        "/^we(d(nesday)?)?/": "^الاربعاء",
	        "/^th(u(r(s(day)?)?)?)?/": "^الخميس",
	        "/^fr(i(day)?)?/": "^الجمعة",
	        "/^sa(t(urday)?)?/": "^السبت",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "dv-MV";


/***/ },
/* 169 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: el-GR
	 * Name: Greek (Greece)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["el-GR"] = {
	        "name": "el-GR",
	        "englishName": "Greek (Greece)",
	        "nativeName": "ελληνικά (Ελλάδα)",
	        "Sunday": "Κυριακή",
	        "Monday": "Δευτέρα",
	        "Tuesday": "Τρίτη",
	        "Wednesday": "Τετάρτη",
	        "Thursday": "Πέμπτη",
	        "Friday": "Παρασκευή",
	        "Saturday": "Σάββατο",
	        "Sun": "Κυρ",
	        "Mon": "Δευ",
	        "Tue": "Τρι",
	        "Wed": "Τετ",
	        "Thu": "Πεμ",
	        "Fri": "Παρ",
	        "Sat": "Σαβ",
	        "Su": "Κυ",
	        "Mo": "Δε",
	        "Tu": "Τρ",
	        "We": "Τε",
	        "Th": "Πε",
	        "Fr": "Πα",
	        "Sa": "Σά",
	        "S_Sun_Initial": "Κ",
	        "M_Mon_Initial": "Δ",
	        "T_Tue_Initial": "Τ",
	        "W_Wed_Initial": "Τ",
	        "T_Thu_Initial": "Π",
	        "F_Fri_Initial": "Π",
	        "S_Sat_Initial": "Σ",
	        "January": "Ιανουάριος",
	        "February": "Φεβρουάριος",
	        "March": "Μάρτιος",
	        "April": "Απρίλιος",
	        "May": "Μάιος",
	        "June": "Ιούνιος",
	        "July": "Ιούλιος",
	        "August": "Αύγουστος",
	        "September": "Σεπτέμβριος",
	        "October": "Οκτώβριος",
	        "November": "Νοέμβριος",
	        "December": "Δεκέμβριος",
	        "Jan_Abbr": "Ιαν",
	        "Feb_Abbr": "Φεβ",
	        "Mar_Abbr": "Μαρ",
	        "Apr_Abbr": "Απρ",
	        "May_Abbr": "Μαϊ",
	        "Jun_Abbr": "Ιουν",
	        "Jul_Abbr": "Ιουλ",
	        "Aug_Abbr": "Αυγ",
	        "Sep_Abbr": "Σεπ",
	        "Oct_Abbr": "Οκτ",
	        "Nov_Abbr": "Νοε",
	        "Dec_Abbr": "Δεκ",
	        "AM": "πμ",
	        "PM": "μμ",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/M/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d MMMM yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d MMMM yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ιαν(ουάριος)?",
	        "/feb(ruary)?/": "φεβ(ρουάριος)?",
	        "/mar(ch)?/": "μάρτιος",
	        "/apr(il)?/": "απρ(ίλιος)?",
	        "/may/": "μάιος",
	        "/jun(e)?/": "ιούνιος",
	        "/jul(y)?/": "ιούλιος",
	        "/aug(ust)?/": "αύγουστος",
	        "/sep(t(ember)?)?/": "σεπ(τέμβριος)?",
	        "/oct(ober)?/": "οκτ(ώβριος)?",
	        "/nov(ember)?/": "νοέμβριος",
	        "/dec(ember)?/": "δεκ(έμβριος)?",
	        "/^su(n(day)?)?/": "^κυ(ρ(ιακή)?)?",
	        "/^mo(n(day)?)?/": "^δε(υ(τέρα)?)?",
	        "/^tu(e(s(day)?)?)?/": "^τρ(ι(τη)?)?",
	        "/^we(d(nesday)?)?/": "^τε(τ(άρτη)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^πε(μ(πτη)?)?",
	        "/^fr(i(day)?)?/": "^πα(ρ(ασκευή)?)?",
	        "/^sa(t(urday)?)?/": "^σά(β(βατο)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "el-GR";


/***/ },
/* 170 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-029
	 * Name: English (Caribbean)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-029"] = {
	        "name": "en-029",
	        "englishName": "English (Caribbean)",
	        "nativeName": "English (Caribbean)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "mdy",
	        "M/d/yyyy": "MM/dd/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, MMMM dd, yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, MMMM dd, yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-029";


/***/ },
/* 171 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-AU
	 * Name: English (Australia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-AU"] = {
	        "name": "en-AU",
	        "englishName": "English (Australia)",
	        "nativeName": "English (Australia)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d MMMM yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d MMMM yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-AU";


/***/ },
/* 172 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-BZ
	 * Name: English (Belize)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-BZ"] = {
	        "name": "en-BZ",
	        "englishName": "English (Belize)",
	        "nativeName": "English (Belize)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd MMMM yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd MMMM yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-BZ";


/***/ },
/* 173 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-CA
	 * Name: English (Canada)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-CA"] = {
	        "name": "en-CA",
	        "englishName": "English (Canada)",
	        "nativeName": "English (Canada)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "MMMM d, yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d, yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-CA";


/***/ },
/* 174 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-GB
	 * Name: English (United Kingdom)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-GB"] = {
	        "name": "en-GB",
	        "englishName": "English (United Kingdom)",
	        "nativeName": "English (United Kingdom)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-GB";


/***/ },
/* 175 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-IE
	 * Name: English (Ireland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-IE"] = {
	        "name": "en-IE",
	        "englishName": "English (Ireland)",
	        "nativeName": "English (Eire)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-IE";


/***/ },
/* 176 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-JM
	 * Name: English (Jamaica)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-JM"] = {
	        "name": "en-JM",
	        "englishName": "English (Jamaica)",
	        "nativeName": "English (Jamaica)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, MMMM dd, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, MMMM dd, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-JM";


/***/ },
/* 177 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-NZ
	 * Name: English (New Zealand)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-NZ"] = {
	        "name": "en-NZ",
	        "englishName": "English (New Zealand)",
	        "nativeName": "English (New Zealand)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d MMMM yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d MMMM yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-NZ";


/***/ },
/* 178 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-PH
	 * Name: English (Republic of the Philippines)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-PH"] = {
	        "name": "en-PH",
	        "englishName": "English (Republic of the Philippines)",
	        "nativeName": "English (Philippines)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "mdy",
	        "M/d/yyyy": "M/d/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, MMMM dd, yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, MMMM dd, yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-PH";


/***/ },
/* 179 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-TT
	 * Name: English (Trinidad and Tobago)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-TT"] = {
	        "name": "en-TT",
	        "englishName": "English (Trinidad and Tobago)",
	        "nativeName": "English (Trinidad y Tobago)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd MMMM yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd MMMM yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-TT";


/***/ },
/* 180 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-ZA
	 * Name: English (South Africa)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-ZA"] = {
	        "name": "en-ZA",
	        "englishName": "English (South Africa)",
	        "nativeName": "English (South Africa)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/MM/dd",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-ZA";


/***/ },
/* 181 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: en-ZW
	 * Name: English (Zimbabwe)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["en-ZW"] = {
	        "name": "en-ZW",
	        "englishName": "English (Zimbabwe)",
	        "nativeName": "English (Zimbabwe)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "mdy",
	        "M/d/yyyy": "M/d/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, MMMM dd, yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, MMMM dd, yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "en-ZW";


/***/ },
/* 182 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-AR
	 * Name: Spanish (Argentina)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-AR"] = {
	        "name": "es-AR",
	        "englishName": "Spanish (Argentina)",
	        "nativeName": "Español (Argentina)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-AR";


/***/ },
/* 183 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-BO
	 * Name: Spanish (Bolivia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-BO"] = {
	        "name": "es-BO",
	        "englishName": "Spanish (Bolivia)",
	        "nativeName": "Español (Bolivia)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-BO";


/***/ },
/* 184 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-CL
	 * Name: Spanish (Chile)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-CL"] = {
	        "name": "es-CL",
	        "englishName": "Spanish (Chile)",
	        "nativeName": "Español (Chile)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-CL";


/***/ },
/* 185 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-CO
	 * Name: Spanish (Colombia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-CO"] = {
	        "name": "es-CO",
	        "englishName": "Spanish (Colombia)",
	        "nativeName": "Español (Colombia)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-CO";


/***/ },
/* 186 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-CR
	 * Name: Spanish (Costa Rica)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-CR"] = {
	        "name": "es-CR",
	        "englishName": "Spanish (Costa Rica)",
	        "nativeName": "Español (Costa Rica)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-CR";


/***/ },
/* 187 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-DO
	 * Name: Spanish (Dominican Republic)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-DO"] = {
	        "name": "es-DO",
	        "englishName": "Spanish (Dominican Republic)",
	        "nativeName": "Español (República Dominicana)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-DO";


/***/ },
/* 188 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-EC
	 * Name: Spanish (Ecuador)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-EC"] = {
	        "name": "es-EC",
	        "englishName": "Spanish (Ecuador)",
	        "nativeName": "Español (Ecuador)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-EC";


/***/ },
/* 189 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-ES
	 * Name: Spanish (Spain)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-ES"] = {
	        "name": "es-ES",
	        "englishName": "Spanish (Spain)",
	        "nativeName": "español (España)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-ES";


/***/ },
/* 190 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-GT
	 * Name: Spanish (Guatemala)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-GT"] = {
	        "name": "es-GT",
	        "englishName": "Spanish (Guatemala)",
	        "nativeName": "Español (Guatemala)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-GT";


/***/ },
/* 191 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-HN
	 * Name: Spanish (Honduras)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-HN"] = {
	        "name": "es-HN",
	        "englishName": "Spanish (Honduras)",
	        "nativeName": "Español (Honduras)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-HN";


/***/ },
/* 192 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-MX
	 * Name: Spanish (Mexico)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-MX"] = {
	        "name": "es-MX",
	        "englishName": "Spanish (Mexico)",
	        "nativeName": "Español (México)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-MX";


/***/ },
/* 193 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-NI
	 * Name: Spanish (Nicaragua)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-NI"] = {
	        "name": "es-NI",
	        "englishName": "Spanish (Nicaragua)",
	        "nativeName": "Español (Nicaragua)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-NI";


/***/ },
/* 194 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-PA
	 * Name: Spanish (Panama)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-PA"] = {
	        "name": "es-PA",
	        "englishName": "Spanish (Panama)",
	        "nativeName": "Español (Panamá)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "mdy",
	        "M/d/yyyy": "MM/dd/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-PA";


/***/ },
/* 195 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-PE
	 * Name: Spanish (Peru)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-PE"] = {
	        "name": "es-PE",
	        "englishName": "Spanish (Peru)",
	        "nativeName": "Español (Perú)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-PE";


/***/ },
/* 196 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-PR
	 * Name: Spanish (Puerto Rico)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-PR"] = {
	        "name": "es-PR",
	        "englishName": "Spanish (Puerto Rico)",
	        "nativeName": "Español (Puerto Rico)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-PR";


/***/ },
/* 197 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-PY
	 * Name: Spanish (Paraguay)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-PY"] = {
	        "name": "es-PY",
	        "englishName": "Spanish (Paraguay)",
	        "nativeName": "Español (Paraguay)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-PY";


/***/ },
/* 198 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-SV
	 * Name: Spanish (El Salvador)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-SV"] = {
	        "name": "es-SV",
	        "englishName": "Spanish (El Salvador)",
	        "nativeName": "Español (El Salvador)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-SV";


/***/ },
/* 199 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-UY
	 * Name: Spanish (Uruguay)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-UY"] = {
	        "name": "es-UY",
	        "englishName": "Spanish (Uruguay)",
	        "nativeName": "Español (Uruguay)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-UY";


/***/ },
/* 200 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: es-VE
	 * Name: Spanish (Venezuela)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["es-VE"] = {
	        "name": "es-VE",
	        "englishName": "Spanish (Venezuela)",
	        "nativeName": "Español (Republica Bolivariana de Venezuela)",
	        "Sunday": "domingo",
	        "Monday": "lunes",
	        "Tuesday": "martes",
	        "Wednesday": "miércoles",
	        "Thursday": "jueves",
	        "Friday": "viernes",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mié",
	        "Thu": "jue",
	        "Fri": "vie",
	        "Sat": "sáb",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mi",
	        "Th": "ju",
	        "Fr": "vi",
	        "Sa": "sá",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "enero",
	        "February": "febrero",
	        "March": "marzo",
	        "April": "abril",
	        "May": "mayo",
	        "June": "junio",
	        "July": "julio",
	        "August": "agosto",
	        "September": "septiembre",
	        "October": "octubre",
	        "November": "noviembre",
	        "December": "diciembre",
	        "Jan_Abbr": "ene",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "may",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "oct",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "ene(ro)?",
	        "/feb(ruary)?/": "feb(rero)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "may(o)?",
	        "/jun(e)?/": "jun(io)?",
	        "/jul(y)?/": "jul(io)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "sep(tiembre)?",
	        "/oct(ober)?/": "oct(ubre)?",
	        "/nov(ember)?/": "nov(iembre)?",
	        "/dec(ember)?/": "dic(iembre)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(es)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mi(é(rcoles)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ju(e(ves)?)?",
	        "/^fr(i(day)?)?/": "^vi(e(rnes)?)?",
	        "/^sa(t(urday)?)?/": "^sá(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "es-VE";


/***/ },
/* 201 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: et-EE
	 * Name: Estonian (Estonia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["et-EE"] = {
	        "name": "et-EE",
	        "englishName": "Estonian (Estonia)",
	        "nativeName": "eesti (Eesti)",
	        "Sunday": "pühapäev",
	        "Monday": "esmaspäev",
	        "Tuesday": "teisipäev",
	        "Wednesday": "kolmapäev",
	        "Thursday": "neljapäev",
	        "Friday": "reede",
	        "Saturday": "laupäev",
	        "Sun": "P",
	        "Mon": "E",
	        "Tue": "T",
	        "Wed": "K",
	        "Thu": "N",
	        "Fri": "R",
	        "Sat": "L",
	        "Su": "P",
	        "Mo": "E",
	        "Tu": "T",
	        "We": "K",
	        "Th": "N",
	        "Fr": "R",
	        "Sa": "L",
	        "S_Sun_Initial": "P",
	        "M_Mon_Initial": "E",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "K",
	        "T_Thu_Initial": "N",
	        "F_Fri_Initial": "R",
	        "S_Sat_Initial": "L",
	        "January": "jaanuar",
	        "February": "veebruar",
	        "March": "märts",
	        "April": "aprill",
	        "May": "mai",
	        "June": "juuni",
	        "July": "juuli",
	        "August": "august",
	        "September": "september",
	        "October": "oktoober",
	        "November": "november",
	        "December": "detsember",
	        "Jan_Abbr": "jaan",
	        "Feb_Abbr": "veebr",
	        "Mar_Abbr": "märts",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "juuni",
	        "Jul_Abbr": "juuli",
	        "Aug_Abbr": "aug",
	        "Sep_Abbr": "sept",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dets",
	        "AM": "EL",
	        "PM": "PL",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy'. a.'",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy'. a.' H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy'. a.'",
	        "/jan(uary)?/": "jaan(uar)?",
	        "/feb(ruary)?/": "veebr(uar)?",
	        "/mar(ch)?/": "märts",
	        "/apr(il)?/": "apr(ill)?",
	        "/may/": "mai",
	        "/jun(e)?/": "juuni",
	        "/jul(y)?/": "juuli",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(oober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dets(ember)?",
	        "/^su(n(day)?)?/": "^pühapäev",
	        "/^mo(n(day)?)?/": "^esmaspäev",
	        "/^tu(e(s(day)?)?)?/": "^teisipäev",
	        "/^we(d(nesday)?)?/": "^kolmapäev",
	        "/^th(u(r(s(day)?)?)?)?/": "^neljapäev",
	        "/^fr(i(day)?)?/": "^reede",
	        "/^sa(t(urday)?)?/": "^laupäev",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "et-EE";


/***/ },
/* 202 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: eu-ES
	 * Name: Basque (Basque)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["eu-ES"] = {
	        "name": "eu-ES",
	        "englishName": "Basque (Basque)",
	        "nativeName": "euskara (euskara)",
	        "Sunday": "igandea",
	        "Monday": "astelehena",
	        "Tuesday": "asteartea",
	        "Wednesday": "asteazkena",
	        "Thursday": "osteguna",
	        "Friday": "ostirala",
	        "Saturday": "larunbata",
	        "Sun": "ig.",
	        "Mon": "al.",
	        "Tue": "as.",
	        "Wed": "az.",
	        "Thu": "og.",
	        "Fri": "or.",
	        "Sat": "lr.",
	        "Su": "ig",
	        "Mo": "al",
	        "Tu": "as",
	        "We": "az",
	        "Th": "og",
	        "Fr": "or",
	        "Sa": "lr",
	        "S_Sun_Initial": "i",
	        "M_Mon_Initial": "a",
	        "T_Tue_Initial": "a",
	        "W_Wed_Initial": "a",
	        "T_Thu_Initial": "o",
	        "F_Fri_Initial": "o",
	        "S_Sat_Initial": "l",
	        "January": "urtarrila",
	        "February": "otsaila",
	        "March": "martxoa",
	        "April": "apirila",
	        "May": "maiatza",
	        "June": "ekaina",
	        "July": "uztaila",
	        "August": "abuztua",
	        "September": "iraila",
	        "October": "urria",
	        "November": "azaroa",
	        "December": "abendua",
	        "Jan_Abbr": "urt.",
	        "Feb_Abbr": "ots.",
	        "Mar_Abbr": "mar.",
	        "Apr_Abbr": "api.",
	        "May_Abbr": "mai.",
	        "Jun_Abbr": "eka.",
	        "Jul_Abbr": "uzt.",
	        "Aug_Abbr": "abu.",
	        "Sep_Abbr": "ira.",
	        "Oct_Abbr": "urr.",
	        "Nov_Abbr": "aza.",
	        "Dec_Abbr": "abe.",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/MM/dd",
	        "dddd, MMMM dd, yyyy": "dddd, yyyy.'eko' MMMM'k 'd",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, yyyy.'eko' MMMM'k 'd HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "yyyy.'eko' MMMM",
	        "/jan(uary)?/": "urt(.(arrila)?)?",
	        "/feb(ruary)?/": "ots(.(aila)?)?",
	        "/mar(ch)?/": "mar(.(txoa)?)?",
	        "/apr(il)?/": "api(.(rila)?)?",
	        "/may/": "mai(.(atza)?)?",
	        "/jun(e)?/": "eka(.(ina)?)?",
	        "/jul(y)?/": "uzt(.(aila)?)?",
	        "/aug(ust)?/": "abu(.(ztua)?)?",
	        "/sep(t(ember)?)?/": "ira(.(ila)?)?",
	        "/oct(ober)?/": "urr(.(ia)?)?",
	        "/nov(ember)?/": "aza(.(roa)?)?",
	        "/dec(ember)?/": "abe(.(ndua)?)?",
	        "/^su(n(day)?)?/": "^ig((.(andea)?)?)?",
	        "/^mo(n(day)?)?/": "^al((.(telehena)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^as((.(teartea)?)?)?",
	        "/^we(d(nesday)?)?/": "^az((.(teazkena)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^og((.(teguna)?)?)?",
	        "/^fr(i(day)?)?/": "^or((.(tirala)?)?)?",
	        "/^sa(t(urday)?)?/": "^lr((.(runbata)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "eu-ES";


/***/ },
/* 203 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: fa-IR
	 * Name: Persian (Iran)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["fa-IR"] = {
	        "name": "fa-IR",
	        "englishName": "Persian (Iran)",
	        "nativeName": "فارسى (ايران)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "ق.ظ",
	        "PM": "ب.ظ",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "mdy",
	        "M/d/yyyy": "M/d/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, MMMM dd, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, MMMM dd, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "fa-IR";


/***/ },
/* 204 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: fi-FI
	 * Name: Finnish (Finland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["fi-FI"] = {
	        "name": "fi-FI",
	        "englishName": "Finnish (Finland)",
	        "nativeName": "suomi (Suomi)",
	        "Sunday": "sunnuntai",
	        "Monday": "maanantai",
	        "Tuesday": "tiistai",
	        "Wednesday": "keskiviikko",
	        "Thursday": "torstai",
	        "Friday": "perjantai",
	        "Saturday": "lauantai",
	        "Sun": "su",
	        "Mon": "ma",
	        "Tue": "ti",
	        "Wed": "ke",
	        "Thu": "to",
	        "Fri": "pe",
	        "Sat": "la",
	        "Su": "su",
	        "Mo": "ma",
	        "Tu": "ti",
	        "We": "ke",
	        "Th": "to",
	        "Fr": "pe",
	        "Sa": "la",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "t",
	        "W_Wed_Initial": "k",
	        "T_Thu_Initial": "t",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "l",
	        "January": "tammikuu",
	        "February": "helmikuu",
	        "March": "maaliskuu",
	        "April": "huhtikuu",
	        "May": "toukokuu",
	        "June": "kesäkuu",
	        "July": "heinäkuu",
	        "August": "elokuu",
	        "September": "syyskuu",
	        "October": "lokakuu",
	        "November": "marraskuu",
	        "December": "joulukuu",
	        "Jan_Abbr": "tammi",
	        "Feb_Abbr": "helmi",
	        "Mar_Abbr": "maalis",
	        "Apr_Abbr": "huhti",
	        "May_Abbr": "touko",
	        "Jun_Abbr": "kesä",
	        "Jul_Abbr": "heinä",
	        "Aug_Abbr": "elo",
	        "Sep_Abbr": "syys",
	        "Oct_Abbr": "loka",
	        "Nov_Abbr": "marras",
	        "Dec_Abbr": "joulu",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM'ta 'yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM'ta 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM'ta'",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "tammi(kuu)?",
	        "/feb(ruary)?/": "helmi(kuu)?",
	        "/mar(ch)?/": "maalis(kuu)?",
	        "/apr(il)?/": "huhti(kuu)?",
	        "/may/": "touko(kuu)?",
	        "/jun(e)?/": "kesä(kuu)?",
	        "/jul(y)?/": "heinä(kuu)?",
	        "/aug(ust)?/": "elo(kuu)?",
	        "/sep(t(ember)?)?/": "syys(kuu)?",
	        "/oct(ober)?/": "loka(kuu)?",
	        "/nov(ember)?/": "marras(kuu)?",
	        "/dec(ember)?/": "joulu(kuu)?",
	        "/^su(n(day)?)?/": "^sunnuntai",
	        "/^mo(n(day)?)?/": "^maanantai",
	        "/^tu(e(s(day)?)?)?/": "^tiistai",
	        "/^we(d(nesday)?)?/": "^keskiviikko",
	        "/^th(u(r(s(day)?)?)?)?/": "^torstai",
	        "/^fr(i(day)?)?/": "^perjantai",
	        "/^sa(t(urday)?)?/": "^lauantai",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "fi-FI";


/***/ },
/* 205 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: fo-FO
	 * Name: Faroese (Faroe Islands)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["fo-FO"] = {
	        "name": "fo-FO",
	        "englishName": "Faroese (Faroe Islands)",
	        "nativeName": "føroyskt (Føroyar)",
	        "Sunday": "sunnudagur",
	        "Monday": "mánadagur",
	        "Tuesday": "týsdagur",
	        "Wednesday": "mikudagur",
	        "Thursday": "hósdagur",
	        "Friday": "fríggjadagur",
	        "Saturday": "leygardagur",
	        "Sun": "sun",
	        "Mon": "mán",
	        "Tue": "týs",
	        "Wed": "mik",
	        "Thu": "hós",
	        "Fri": "frí",
	        "Sat": "leyg",
	        "Su": "su",
	        "Mo": "má",
	        "Tu": "tý",
	        "We": "mi",
	        "Th": "hó",
	        "Fr": "fr",
	        "Sa": "ley",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "t",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "h",
	        "F_Fri_Initial": "f",
	        "S_Sat_Initial": "l",
	        "January": "januar",
	        "February": "februar",
	        "March": "mars",
	        "April": "apríl",
	        "May": "mai",
	        "June": "juni",
	        "July": "juli",
	        "August": "august",
	        "September": "september",
	        "October": "oktober",
	        "November": "november",
	        "December": "desember",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "aug",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "des",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "HH.mm",
	        "h:mm:ss tt": "HH.mm.ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy HH.mm.ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "mar(s)?",
	        "/apr(il)?/": "apr(íl)?",
	        "/may/": "mai",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "des(ember)?",
	        "/^su(n(day)?)?/": "^su(n(nudagur)?)?",
	        "/^mo(n(day)?)?/": "^má(n(adagur)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tý(s(dagur)?)?",
	        "/^we(d(nesday)?)?/": "^mi(k(udagur)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^hó(s(dagur)?)?",
	        "/^fr(i(day)?)?/": "^fr(í(ggjadagur)?)?",
	        "/^sa(t(urday)?)?/": "^ley(g(ardagur)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "fo-FO";


/***/ },
/* 206 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: fr-BE
	 * Name: French (Belgium)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["fr-BE"] = {
	        "name": "fr-BE",
	        "englishName": "French (Belgium)",
	        "nativeName": "français (Belgique)",
	        "Sunday": "dimanche",
	        "Monday": "lundi",
	        "Tuesday": "mardi",
	        "Wednesday": "mercredi",
	        "Thursday": "jeudi",
	        "Friday": "vendredi",
	        "Saturday": "samedi",
	        "Sun": "dim.",
	        "Mon": "lun.",
	        "Tue": "mar.",
	        "Wed": "mer.",
	        "Thu": "jeu.",
	        "Fri": "ven.",
	        "Sat": "sam.",
	        "Su": "di",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "me",
	        "Th": "je",
	        "Fr": "ve",
	        "Sa": "sa",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "janvier",
	        "February": "février",
	        "March": "mars",
	        "April": "avril",
	        "May": "mai",
	        "June": "juin",
	        "July": "juillet",
	        "August": "août",
	        "September": "septembre",
	        "October": "octobre",
	        "November": "novembre",
	        "December": "décembre",
	        "Jan_Abbr": "janv.",
	        "Feb_Abbr": "févr.",
	        "Mar_Abbr": "mars",
	        "Apr_Abbr": "avr.",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "juin",
	        "Jul_Abbr": "juil.",
	        "Aug_Abbr": "août",
	        "Sep_Abbr": "sept.",
	        "Oct_Abbr": "oct.",
	        "Nov_Abbr": "nov.",
	        "Dec_Abbr": "déc.",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd d MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd d MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "janv(.(ier)?)?",
	        "/feb(ruary)?/": "févr(.(ier)?)?",
	        "/mar(ch)?/": "mars",
	        "/apr(il)?/": "avr(.(il)?)?",
	        "/may/": "mai",
	        "/jun(e)?/": "juin",
	        "/jul(y)?/": "juil(.(let)?)?",
	        "/aug(ust)?/": "août",
	        "/sep(t(ember)?)?/": "sept(.(embre)?)?",
	        "/oct(ober)?/": "oct(.(obre)?)?",
	        "/nov(ember)?/": "nov(.(embre)?)?",
	        "/dec(ember)?/": "déc(.(embre)?)?",
	        "/^su(n(day)?)?/": "^di(m(.(anche)?)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(.(di)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(.(di)?)?)?",
	        "/^we(d(nesday)?)?/": "^me(r(.(credi)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^je(u(.(di)?)?)?",
	        "/^fr(i(day)?)?/": "^ve(n(.(dredi)?)?)?",
	        "/^sa(t(urday)?)?/": "^sa(m(.(edi)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "fr-BE";


/***/ },
/* 207 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: fr-CA
	 * Name: French (Canada)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["fr-CA"] = {
	        "name": "fr-CA",
	        "englishName": "French (Canada)",
	        "nativeName": "français (Canada)",
	        "Sunday": "dimanche",
	        "Monday": "lundi",
	        "Tuesday": "mardi",
	        "Wednesday": "mercredi",
	        "Thursday": "jeudi",
	        "Friday": "vendredi",
	        "Saturday": "samedi",
	        "Sun": "dim.",
	        "Mon": "lun.",
	        "Tue": "mar.",
	        "Wed": "mer.",
	        "Thu": "jeu.",
	        "Fri": "ven.",
	        "Sat": "sam.",
	        "Su": "di",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "me",
	        "Th": "je",
	        "Fr": "ve",
	        "Sa": "sa",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "janvier",
	        "February": "février",
	        "March": "mars",
	        "April": "avril",
	        "May": "mai",
	        "June": "juin",
	        "July": "juillet",
	        "August": "août",
	        "September": "septembre",
	        "October": "octobre",
	        "November": "novembre",
	        "December": "décembre",
	        "Jan_Abbr": "janv.",
	        "Feb_Abbr": "févr.",
	        "Mar_Abbr": "mars",
	        "Apr_Abbr": "avr.",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "juin",
	        "Jul_Abbr": "juil.",
	        "Aug_Abbr": "août",
	        "Sep_Abbr": "sept.",
	        "Oct_Abbr": "oct.",
	        "Nov_Abbr": "nov.",
	        "Dec_Abbr": "déc.",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy-MM-dd",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "janv((ier)?)?",
	        "/feb(ruary)?/": "févr((ier)?)?",
	        "/mar(ch)?/": "mars",
	        "/apr(il)?/": "avr((il)?)?",
	        "/may/": "mai",
	        "/jun(e)?/": "juin",
	        "/jul(y)?/": "juil((let)?)?",
	        "/aug(ust)?/": "août",
	        "/sep(t(ember)?)?/": "sept((embre)?)?",
	        "/oct(ober)?/": "oct((obre)?)?",
	        "/nov(ember)?/": "nov((embre)?)?",
	        "/dec(ember)?/": "déc((embre)?)?",
	        "/^su(n(day)?)?/": "^di(m((anche)?)?)?",
	        "/^mo(n(day)?)?/": "^lu(n((di)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r((di)?)?)?",
	        "/^we(d(nesday)?)?/": "^me(r((credi)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^je(u((di)?)?)?",
	        "/^fr(i(day)?)?/": "^ve(n((dredi)?)?)?",
	        "/^sa(t(urday)?)?/": "^sa(m((edi)?)?)?",
	        "/^next/": "^prochain",
	        "/^last|past|prev(ious)?/": "^dernier",
	        "/^(\\+|aft(er)?|from|hence)/": "^précédant",
	        "/^(\\-|bef(ore)?|ago)/": "^succédant",
	        "/^yes(terday)?/": "^hier",
	        "/^t(od(ay)?)?/": "^aujourd\'hui",
	        "/^tom(orrow)?/": "^demain",
	        "/^n(ow)?/": "^maintenant",
	        "/^ms|milli(second)?s?/": "^ms|milli(seconde)?s?",
	        "/^sec(ond)?s?/": "^sec(onde)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(eure)?s?",
	        "/^w(eek)?s?/": "^sem(aine)?s?",
	        "/^m(onth)?s?/": "^m(ois)?",
	        "/^d(ay)?s?/": "^j(our)?s?",
	        "/^y(ear)?s?/": "^a(nnée)?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "fr-CA";


/***/ },
/* 208 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: fr-CH
	 * Name: French (Switzerland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["fr-CH"] = {
	        "name": "fr-CH",
	        "englishName": "French (Switzerland)",
	        "nativeName": "français (Suisse)",
	        "Sunday": "dimanche",
	        "Monday": "lundi",
	        "Tuesday": "mardi",
	        "Wednesday": "mercredi",
	        "Thursday": "jeudi",
	        "Friday": "vendredi",
	        "Saturday": "samedi",
	        "Sun": "dim.",
	        "Mon": "lun.",
	        "Tue": "mar.",
	        "Wed": "mer.",
	        "Thu": "jeu.",
	        "Fri": "ven.",
	        "Sat": "sam.",
	        "Su": "di",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "me",
	        "Th": "je",
	        "Fr": "ve",
	        "Sa": "sa",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "janvier",
	        "February": "février",
	        "March": "mars",
	        "April": "avril",
	        "May": "mai",
	        "June": "juin",
	        "July": "juillet",
	        "August": "août",
	        "September": "septembre",
	        "October": "octobre",
	        "November": "novembre",
	        "December": "décembre",
	        "Jan_Abbr": "janv.",
	        "Feb_Abbr": "févr.",
	        "Mar_Abbr": "mars",
	        "Apr_Abbr": "avr.",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "juin",
	        "Jul_Abbr": "juil.",
	        "Aug_Abbr": "août",
	        "Sep_Abbr": "sept.",
	        "Oct_Abbr": "oct.",
	        "Nov_Abbr": "nov.",
	        "Dec_Abbr": "déc.",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "janv(.(ier)?)?",
	        "/feb(ruary)?/": "févr(.(ier)?)?",
	        "/mar(ch)?/": "mars",
	        "/apr(il)?/": "avr(.(il)?)?",
	        "/may/": "mai",
	        "/jun(e)?/": "juin",
	        "/jul(y)?/": "juil(.(let)?)?",
	        "/aug(ust)?/": "août",
	        "/sep(t(ember)?)?/": "sept(.(embre)?)?",
	        "/oct(ober)?/": "oct(.(obre)?)?",
	        "/nov(ember)?/": "nov(.(embre)?)?",
	        "/dec(ember)?/": "déc(.(embre)?)?",
	        "/^su(n(day)?)?/": "^di(m(.(anche)?)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(.(di)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(.(di)?)?)?",
	        "/^we(d(nesday)?)?/": "^me(r(.(credi)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^je(u(.(di)?)?)?",
	        "/^fr(i(day)?)?/": "^ve(n(.(dredi)?)?)?",
	        "/^sa(t(urday)?)?/": "^sa(m(.(edi)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "fr-CH";


/***/ },
/* 209 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: fr-FR
	 * Name: French (France)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["fr-FR"] = {
	        "name": "fr-FR",
	        "englishName": "French (France)",
	        "nativeName": "français (France)",
	        "Sunday": "dimanche",
	        "Monday": "lundi",
	        "Tuesday": "mardi",
	        "Wednesday": "mercredi",
	        "Thursday": "jeudi",
	        "Friday": "vendredi",
	        "Saturday": "samedi",
	        "Sun": "dim.",
	        "Mon": "lun.",
	        "Tue": "mar.",
	        "Wed": "mer.",
	        "Thu": "jeu.",
	        "Fri": "ven.",
	        "Sat": "sam.",
	        "Su": "di",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "me",
	        "Th": "je",
	        "Fr": "ve",
	        "Sa": "sa",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "janvier",
	        "February": "février",
	        "March": "mars",
	        "April": "avril",
	        "May": "mai",
	        "June": "juin",
	        "July": "juillet",
	        "August": "août",
	        "September": "septembre",
	        "October": "octobre",
	        "November": "novembre",
	        "December": "décembre",
	        "Jan_Abbr": "janv.",
	        "Feb_Abbr": "févr.",
	        "Mar_Abbr": "mars",
	        "Apr_Abbr": "avr.",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "juin",
	        "Jul_Abbr": "juil.",
	        "Aug_Abbr": "août",
	        "Sep_Abbr": "sept.",
	        "Oct_Abbr": "oct.",
	        "Nov_Abbr": "nov.",
	        "Dec_Abbr": "déc.",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd d MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd d MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "janv(.(ier)?)?",
	        "/feb(ruary)?/": "févr(.(ier)?)?",
	        "/mar(ch)?/": "mars",
	        "/apr(il)?/": "avr(.(il)?)?",
	        "/may/": "mai",
	        "/jun(e)?/": "juin",
	        "/jul(y)?/": "juil(.(let)?)?",
	        "/aug(ust)?/": "août",
	        "/sep(t(ember)?)?/": "sept(.(embre)?)?",
	        "/oct(ober)?/": "oct(.(obre)?)?",
	        "/nov(ember)?/": "nov(.(embre)?)?",
	        "/dec(ember)?/": "déc(.(embre)?)?",
	        "/^su(n(day)?)?/": "^di(m(.(anche)?)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(.(di)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(.(di)?)?)?",
	        "/^we(d(nesday)?)?/": "^me(r(.(credi)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^je(u(.(di)?)?)?",
	        "/^fr(i(day)?)?/": "^ve(n(.(dredi)?)?)?",
	        "/^sa(t(urday)?)?/": "^sa(m(.(edi)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "fr-FR";


/***/ },
/* 210 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: fr-LU
	 * Name: French (Luxembourg)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["fr-LU"] = {
	        "name": "fr-LU",
	        "englishName": "French (Luxembourg)",
	        "nativeName": "français (Luxembourg)",
	        "Sunday": "dimanche",
	        "Monday": "lundi",
	        "Tuesday": "mardi",
	        "Wednesday": "mercredi",
	        "Thursday": "jeudi",
	        "Friday": "vendredi",
	        "Saturday": "samedi",
	        "Sun": "dim.",
	        "Mon": "lun.",
	        "Tue": "mar.",
	        "Wed": "mer.",
	        "Thu": "jeu.",
	        "Fri": "ven.",
	        "Sat": "sam.",
	        "Su": "di",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "me",
	        "Th": "je",
	        "Fr": "ve",
	        "Sa": "sa",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "janvier",
	        "February": "février",
	        "March": "mars",
	        "April": "avril",
	        "May": "mai",
	        "June": "juin",
	        "July": "juillet",
	        "August": "août",
	        "September": "septembre",
	        "October": "octobre",
	        "November": "novembre",
	        "December": "décembre",
	        "Jan_Abbr": "janv.",
	        "Feb_Abbr": "févr.",
	        "Mar_Abbr": "mars",
	        "Apr_Abbr": "avr.",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "juin",
	        "Jul_Abbr": "juil.",
	        "Aug_Abbr": "août",
	        "Sep_Abbr": "sept.",
	        "Oct_Abbr": "oct.",
	        "Nov_Abbr": "nov.",
	        "Dec_Abbr": "déc.",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd d MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd d MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "janv(.(ier)?)?",
	        "/feb(ruary)?/": "févr(.(ier)?)?",
	        "/mar(ch)?/": "mars",
	        "/apr(il)?/": "avr(.(il)?)?",
	        "/may/": "mai",
	        "/jun(e)?/": "juin",
	        "/jul(y)?/": "juil(.(let)?)?",
	        "/aug(ust)?/": "août",
	        "/sep(t(ember)?)?/": "sept(.(embre)?)?",
	        "/oct(ober)?/": "oct(.(obre)?)?",
	        "/nov(ember)?/": "nov(.(embre)?)?",
	        "/dec(ember)?/": "déc(.(embre)?)?",
	        "/^su(n(day)?)?/": "^di(m(.(anche)?)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(.(di)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(.(di)?)?)?",
	        "/^we(d(nesday)?)?/": "^me(r(.(credi)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^je(u(.(di)?)?)?",
	        "/^fr(i(day)?)?/": "^ve(n(.(dredi)?)?)?",
	        "/^sa(t(urday)?)?/": "^sa(m(.(edi)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "fr-LU";


/***/ },
/* 211 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: fr-MC
	 * Name: French (Principality of Monaco)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["fr-MC"] = {
	        "name": "fr-MC",
	        "englishName": "French (Principality of Monaco)",
	        "nativeName": "français (Principauté de Monaco)",
	        "Sunday": "dimanche",
	        "Monday": "lundi",
	        "Tuesday": "mardi",
	        "Wednesday": "mercredi",
	        "Thursday": "jeudi",
	        "Friday": "vendredi",
	        "Saturday": "samedi",
	        "Sun": "dim.",
	        "Mon": "lun.",
	        "Tue": "mar.",
	        "Wed": "mer.",
	        "Thu": "jeu.",
	        "Fri": "ven.",
	        "Sat": "sam.",
	        "Su": "di",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "me",
	        "Th": "je",
	        "Fr": "ve",
	        "Sa": "sa",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "j",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "janvier",
	        "February": "février",
	        "March": "mars",
	        "April": "avril",
	        "May": "mai",
	        "June": "juin",
	        "July": "juillet",
	        "August": "août",
	        "September": "septembre",
	        "October": "octobre",
	        "November": "novembre",
	        "December": "décembre",
	        "Jan_Abbr": "janv.",
	        "Feb_Abbr": "févr.",
	        "Mar_Abbr": "mars",
	        "Apr_Abbr": "avr.",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "juin",
	        "Jul_Abbr": "juil.",
	        "Aug_Abbr": "août",
	        "Sep_Abbr": "sept.",
	        "Oct_Abbr": "oct.",
	        "Nov_Abbr": "nov.",
	        "Dec_Abbr": "déc.",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd d MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd d MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "janv(.(ier)?)?",
	        "/feb(ruary)?/": "févr(.(ier)?)?",
	        "/mar(ch)?/": "mars",
	        "/apr(il)?/": "avr(.(il)?)?",
	        "/may/": "mai",
	        "/jun(e)?/": "juin",
	        "/jul(y)?/": "juil(.(let)?)?",
	        "/aug(ust)?/": "août",
	        "/sep(t(ember)?)?/": "sept(.(embre)?)?",
	        "/oct(ober)?/": "oct(.(obre)?)?",
	        "/nov(ember)?/": "nov(.(embre)?)?",
	        "/dec(ember)?/": "déc(.(embre)?)?",
	        "/^su(n(day)?)?/": "^di(m(.(anche)?)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(.(di)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(.(di)?)?)?",
	        "/^we(d(nesday)?)?/": "^me(r(.(credi)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^je(u(.(di)?)?)?",
	        "/^fr(i(day)?)?/": "^ve(n(.(dredi)?)?)?",
	        "/^sa(t(urday)?)?/": "^sa(m(.(edi)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "fr-MC";


/***/ },
/* 212 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: gl-ES
	 * Name: Galician (Galician)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["gl-ES"] = {
	        "name": "gl-ES",
	        "englishName": "Galician (Galician)",
	        "nativeName": "galego (galego)",
	        "Sunday": "domingo",
	        "Monday": "luns",
	        "Tuesday": "martes",
	        "Wednesday": "mércores",
	        "Thursday": "xoves",
	        "Friday": "venres",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "luns",
	        "Tue": "mar",
	        "Wed": "mér",
	        "Thu": "xov",
	        "Fri": "ven",
	        "Sat": "sab",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "mé",
	        "Th": "xo",
	        "Fr": "ve",
	        "Sa": "sa",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "x",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "xaneiro",
	        "February": "febreiro",
	        "March": "marzo",
	        "April": "abril",
	        "May": "maio",
	        "June": "xuño",
	        "July": "xullo",
	        "August": "agosto",
	        "September": "setembro",
	        "October": "outubro",
	        "November": "novembro",
	        "December": "decembro",
	        "Jan_Abbr": "xan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "maio",
	        "Jun_Abbr": "xuñ",
	        "Jul_Abbr": "xull",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "set",
	        "Oct_Abbr": "out",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dec",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "xan(eiro)?",
	        "/feb(ruary)?/": "feb(reiro)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "maio",
	        "/jun(e)?/": "xuñ(o)?",
	        "/jul(y)?/": "xull(o)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "set(embro)?",
	        "/oct(ober)?/": "out(ubro)?",
	        "/nov(ember)?/": "nov(embro)?",
	        "/dec(ember)?/": "dec(embro)?",
	        "/^su(n(day)?)?/": "^do(m(ingo)?)?",
	        "/^mo(n(day)?)?/": "^lu(1)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tes)?)?",
	        "/^we(d(nesday)?)?/": "^mé(r(cores)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^xo(v(es)?)?",
	        "/^fr(i(day)?)?/": "^ve(n(res)?)?",
	        "/^sa(t(urday)?)?/": "^sa(b(ado)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "gl-ES";


/***/ },
/* 213 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: gu-IN
	 * Name: Gujarati (India)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["gu-IN"] = {
	        "name": "gu-IN",
	        "englishName": "Gujarati (India)",
	        "nativeName": "ગુજરાતી (ભારત)",
	        "Sunday": "રવિવાર",
	        "Monday": "સોમવાર",
	        "Tuesday": "મંગળવાર",
	        "Wednesday": "બુધવાર",
	        "Thursday": "ગુરુવાર",
	        "Friday": "શુક્રવાર",
	        "Saturday": "શનિવાર",
	        "Sun": "રવિ",
	        "Mon": "સોમ",
	        "Tue": "મંગળ",
	        "Wed": "બુધ",
	        "Thu": "ગુરુ",
	        "Fri": "શુક્ર",
	        "Sat": "શનિ",
	        "Su": "ર",
	        "Mo": "સ",
	        "Tu": "મ",
	        "We": "બ",
	        "Th": "ગ",
	        "Fr": "શ",
	        "Sa": "શ",
	        "S_Sun_Initial": "ર",
	        "M_Mon_Initial": "સ",
	        "T_Tue_Initial": "મ",
	        "W_Wed_Initial": "બ",
	        "T_Thu_Initial": "ગ",
	        "F_Fri_Initial": "શ",
	        "S_Sat_Initial": "શ",
	        "January": "જાન્યુઆરી",
	        "February": "ફેબ્રુઆરી",
	        "March": "માર્ચ",
	        "April": "એપ્રિલ",
	        "May": "મે",
	        "June": "જૂન",
	        "July": "જુલાઈ",
	        "August": "ઑગસ્ટ",
	        "September": "સપ્ટેમ્બર",
	        "October": "ઑક્ટ્બર",
	        "November": "નવેમ્બર",
	        "December": "ડિસેમ્બર",
	        "Jan_Abbr": "જાન્યુ",
	        "Feb_Abbr": "ફેબ્રુ",
	        "Mar_Abbr": "માર્ચ",
	        "Apr_Abbr": "એપ્રિલ",
	        "May_Abbr": "મે",
	        "Jun_Abbr": "જૂન",
	        "Jul_Abbr": "જુલાઈ",
	        "Aug_Abbr": "ઑગસ્ટ",
	        "Sep_Abbr": "સપ્ટે",
	        "Oct_Abbr": "ઑક્ટો",
	        "Nov_Abbr": "નવે",
	        "Dec_Abbr": "ડિસે",
	        "AM": "પૂર્વ મધ્યાહ્ન",
	        "PM": "ઉત્તર મધ્યાહ્ન",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "જાન્યુ(આરી)?",
	        "/feb(ruary)?/": "ફેબ્રુ(આરી)?",
	        "/mar(ch)?/": "માર્ચ",
	        "/apr(il)?/": "એપ્રિલ",
	        "/may/": "મે",
	        "/jun(e)?/": "જૂન",
	        "/jul(y)?/": "જુલાઈ",
	        "/aug(ust)?/": "ઑગસ્ટ",
	        "/sep(t(ember)?)?/": "સપ્ટે(મ્બર)?",
	        "/oct(ober)?/": "ઑક્ટ્બર",
	        "/nov(ember)?/": "નવે(મ્બર)?",
	        "/dec(ember)?/": "ડિસે(મ્બર)?",
	        "/^su(n(day)?)?/": "^ર(વિ(વાર)?)?",
	        "/^mo(n(day)?)?/": "^સ(ોમ(વાર)?)?",
	        "/^tu(e(s(day)?)?)?/": "^મ(ંગળ(વાર)?)?",
	        "/^we(d(nesday)?)?/": "^બ(ુધ(વાર)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ગ(ુરુ(વાર)?)?",
	        "/^fr(i(day)?)?/": "^શ(ુક્ર(વાર)?)?",
	        "/^sa(t(urday)?)?/": "^શ(નિ(વાર)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "gu-IN";


/***/ },
/* 214 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: he-IL
	 * Name: Hebrew (Israel)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["he-IL"] = {
	        "name": "he-IL",
	        "englishName": "Hebrew (Israel)",
	        "nativeName": "עברית (ישראל)",
	        "Sunday": "יום ראשון",
	        "Monday": "יום שני",
	        "Tuesday": "יום שלישי",
	        "Wednesday": "יום רביעי",
	        "Thursday": "יום חמישי",
	        "Friday": "יום שישי",
	        "Saturday": "שבת",
	        "Sun": "יום א",
	        "Mon": "יום ב",
	        "Tue": "יום ג",
	        "Wed": "יום ד",
	        "Thu": "יום ה",
	        "Fri": "יום ו",
	        "Sat": "שבת",
	        "Su": "א",
	        "Mo": "ב",
	        "Tu": "ג",
	        "We": "ד",
	        "Th": "ה",
	        "Fr": "ו",
	        "Sa": "ש",
	        "S_Sun_Initial": "א",
	        "M_Mon_Initial": "ב",
	        "T_Tue_Initial": "ג",
	        "W_Wed_Initial": "ד",
	        "T_Thu_Initial": "ה",
	        "F_Fri_Initial": "ו",
	        "S_Sat_Initial": "ש",
	        "January": "ינואר",
	        "February": "פברואר",
	        "March": "מרץ",
	        "April": "אפריל",
	        "May": "מאי",
	        "June": "יוני",
	        "July": "יולי",
	        "August": "אוגוסט",
	        "September": "ספטמבר",
	        "October": "אוקטובר",
	        "November": "נובמבר",
	        "December": "דצמבר",
	        "Jan_Abbr": "ינו",
	        "Feb_Abbr": "פבר",
	        "Mar_Abbr": "מרץ",
	        "Apr_Abbr": "אפר",
	        "May_Abbr": "מאי",
	        "Jun_Abbr": "יונ",
	        "Jul_Abbr": "יול",
	        "Aug_Abbr": "אוג",
	        "Sep_Abbr": "ספט",
	        "Oct_Abbr": "אוק",
	        "Nov_Abbr": "נוב",
	        "Dec_Abbr": "דצמ",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ינו(אר)?",
	        "/feb(ruary)?/": "פבר(ואר)?",
	        "/mar(ch)?/": "מרץ",
	        "/apr(il)?/": "אפר(יל)?",
	        "/may/": "מאי",
	        "/jun(e)?/": "יונ(י)?",
	        "/jul(y)?/": "יול(י)?",
	        "/aug(ust)?/": "אוג(וסט)?",
	        "/sep(t(ember)?)?/": "ספט(מבר)?",
	        "/oct(ober)?/": "אוק(טובר)?",
	        "/nov(ember)?/": "נוב(מבר)?",
	        "/dec(ember)?/": "דצמ(בר)?",
	        "/^su(n(day)?)?/": "^א(ום א(אשון)?)?",
	        "/^mo(n(day)?)?/": "^ב(ום ב(ני)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ג(ום ג(לישי)?)?",
	        "/^we(d(nesday)?)?/": "^ד(ום ד(ביעי)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ה(ום ה(מישי)?)?",
	        "/^fr(i(day)?)?/": "^ו(ום ו(ישי)?)?",
	        "/^sa(t(urday)?)?/": "^ש(1)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "he-IL";


/***/ },
/* 215 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: hi-IN
	 * Name: Hindi (India)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["hi-IN"] = {
	        "name": "hi-IN",
	        "englishName": "Hindi (India)",
	        "nativeName": "हिंदी (भारत)",
	        "Sunday": "रविवार",
	        "Monday": "सोमवार",
	        "Tuesday": "मंगलवार",
	        "Wednesday": "बुधवार",
	        "Thursday": "गुरुवार",
	        "Friday": "शुक्रवार",
	        "Saturday": "शनिवार",
	        "Sun": "रवि.",
	        "Mon": "सोम.",
	        "Tue": "मंगल.",
	        "Wed": "बुध.",
	        "Thu": "गुरु.",
	        "Fri": "शुक्र.",
	        "Sat": "शनि.",
	        "Su": "र",
	        "Mo": "स",
	        "Tu": "म",
	        "We": "ब",
	        "Th": "ग",
	        "Fr": "श",
	        "Sa": "श",
	        "S_Sun_Initial": "र",
	        "M_Mon_Initial": "स",
	        "T_Tue_Initial": "म",
	        "W_Wed_Initial": "ब",
	        "T_Thu_Initial": "ग",
	        "F_Fri_Initial": "श",
	        "S_Sat_Initial": "श",
	        "January": "जनवरी",
	        "February": "फरवरी",
	        "March": "मार्च",
	        "April": "अप्रैल",
	        "May": "मई",
	        "June": "जून",
	        "July": "जुलाई",
	        "August": "अगस्त",
	        "September": "सितम्बर",
	        "October": "अक्तूबर",
	        "November": "नवम्बर",
	        "December": "दिसम्बर",
	        "Jan_Abbr": "जनवरी",
	        "Feb_Abbr": "फरवरी",
	        "Mar_Abbr": "मार्च",
	        "Apr_Abbr": "अप्रैल",
	        "May_Abbr": "मई",
	        "Jun_Abbr": "जून",
	        "Jul_Abbr": "जुलाई",
	        "Aug_Abbr": "अगस्त",
	        "Sep_Abbr": "सितम्बर",
	        "Oct_Abbr": "अक्तूबर",
	        "Nov_Abbr": "नवम्बर",
	        "Dec_Abbr": "दिसम्बर",
	        "AM": "पूर्वाह्न",
	        "PM": "अपराह्न",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "जनवरी",
	        "/feb(ruary)?/": "फरवरी",
	        "/mar(ch)?/": "मार्च",
	        "/apr(il)?/": "अप्रैल",
	        "/may/": "मई",
	        "/jun(e)?/": "जून",
	        "/jul(y)?/": "जुलाई",
	        "/aug(ust)?/": "अगस्त",
	        "/sep(t(ember)?)?/": "सितम्बर",
	        "/oct(ober)?/": "अक्तूबर",
	        "/nov(ember)?/": "नवम्बर",
	        "/dec(ember)?/": "दिसम्बर",
	        "/^su(n(day)?)?/": "^र(वि(.(वार)?)?)?",
	        "/^mo(n(day)?)?/": "^स(ोम(.(वार)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^म(ंगल(.(वार)?)?)?",
	        "/^we(d(nesday)?)?/": "^ब(ुध(.(वार)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ग(ुरु(.(वार)?)?)?",
	        "/^fr(i(day)?)?/": "^श(ुक्र(.(वार)?)?)?",
	        "/^sa(t(urday)?)?/": "^श(नि(.(वार)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "hi-IN";


/***/ },
/* 216 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: hr-BA
	 * Name: Croatian (Bosnia and Herzegovina)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["hr-BA"] = {
	        "name": "hr-BA",
	        "englishName": "Croatian (Bosnia and Herzegovina)",
	        "nativeName": "hrvatski (Bosna i Hercegovina)",
	        "Sunday": "nedjelja",
	        "Monday": "ponedjeljak",
	        "Tuesday": "utorak",
	        "Wednesday": "srijeda",
	        "Thursday": "četvrtak",
	        "Friday": "petak",
	        "Saturday": "subota",
	        "Sun": "ned",
	        "Mon": "pon",
	        "Tue": "uto",
	        "Wed": "sri",
	        "Thu": "čet",
	        "Fri": "pet",
	        "Sat": "sub",
	        "Su": "ned",
	        "Mo": "pon",
	        "Tu": "uto",
	        "We": "sri",
	        "Th": "čet",
	        "Fr": "pet",
	        "Sa": "sub",
	        "S_Sun_Initial": "n",
	        "M_Mon_Initial": "p",
	        "T_Tue_Initial": "u",
	        "W_Wed_Initial": "s",
	        "T_Thu_Initial": "č",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "s",
	        "January": "siječanj",
	        "February": "veljača",
	        "March": "ožujak",
	        "April": "travanj",
	        "May": "svibanj",
	        "June": "lipanj",
	        "July": "srpanj",
	        "August": "kolovoz",
	        "September": "rujan",
	        "October": "listopad",
	        "November": "studeni",
	        "December": "prosinac",
	        "Jan_Abbr": "sij",
	        "Feb_Abbr": "vlj",
	        "Mar_Abbr": "ožu",
	        "Apr_Abbr": "tra",
	        "May_Abbr": "svi",
	        "Jun_Abbr": "lip",
	        "Jul_Abbr": "srp",
	        "Aug_Abbr": "kol",
	        "Sep_Abbr": "ruj",
	        "Oct_Abbr": "lis",
	        "Nov_Abbr": "stu",
	        "Dec_Abbr": "pro",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm:ss",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "sij(ečanj)?",
	        "/feb(ruary)?/": "veljača",
	        "/mar(ch)?/": "ožu(jak)?",
	        "/apr(il)?/": "tra(vanj)?",
	        "/may/": "svi(banj)?",
	        "/jun(e)?/": "lip(anj)?",
	        "/jul(y)?/": "srp(anj)?",
	        "/aug(ust)?/": "kol(ovoz)?",
	        "/sep(t(ember)?)?/": "ruj(an)?",
	        "/oct(ober)?/": "lis(topad)?",
	        "/nov(ember)?/": "stu(deni)?",
	        "/dec(ember)?/": "pro(sinac)?",
	        "/^su(n(day)?)?/": "^nedjelja",
	        "/^mo(n(day)?)?/": "^ponedjeljak",
	        "/^tu(e(s(day)?)?)?/": "^utorak",
	        "/^we(d(nesday)?)?/": "^srijeda",
	        "/^th(u(r(s(day)?)?)?)?/": "^četvrtak",
	        "/^fr(i(day)?)?/": "^petak",
	        "/^sa(t(urday)?)?/": "^subota",
	        "/^next/": "^slijedeć(i|e|eg)",
	        "/^last|past|prev(ious)?/": "^zadnji|posljednji|prethodni",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|pos(lije)?|od|odsad(a)?)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|pr(ije)?pred)",
	        "/^yes(terday)?/": "^jučer",
	        "/^t(od(ay)?)?/": "^danas",
	        "/^tom(orrow)?/": "^sutra",
	        "/^n(ow)?/": "^sad(a)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sek(und(a|e|i)?)?",
	        "/^mn|min(ute)?s?/": "^mn|min(ut(a|e|i)?)?",
	        "/^h(our)?s?/": "^s(at(a|i)?)?",
	        "/^w(eek)?s?/": "^tj(edan(a|i)?)?",
	        "/^m(onth)?s?/": "^mj(esec(a|i)?)?",
	        "/^d(ay)?s?/": "^dan(a|i)?",
	        "/^y(ear)?s?/": "^god(in(a|e|i|u))?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "hr-BA";


/***/ },
/* 217 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: hr-HR
	 * Name: Croatian (Croatia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["hr-HR"] = {
	        "name": "hr-HR",
	        "englishName": "Croatian (Croatia)",
	        "nativeName": "hrvatski (Hrvatska)",
	        "Sunday": "nedjelja",
	        "Monday": "ponedjeljak",
	        "Tuesday": "utorak",
	        "Wednesday": "srijeda",
	        "Thursday": "četvrtak",
	        "Friday": "petak",
	        "Saturday": "subota",
	        "Sun": "ned",
	        "Mon": "pon",
	        "Tue": "uto",
	        "Wed": "sri",
	        "Thu": "čet",
	        "Fri": "pet",
	        "Sat": "sub",
	        "Su": "ne",
	        "Mo": "po",
	        "Tu": "ut",
	        "We": "sr",
	        "Th": "če",
	        "Fr": "pe",
	        "Sa": "su",
	        "S_Sun_Initial": "n",
	        "M_Mon_Initial": "p",
	        "T_Tue_Initial": "u",
	        "W_Wed_Initial": "s",
	        "T_Thu_Initial": "č",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "s",
	        "January": "siječanj",
	        "February": "veljača",
	        "March": "ožujak",
	        "April": "travanj",
	        "May": "svibanj",
	        "June": "lipanj",
	        "July": "srpanj",
	        "August": "kolovoz",
	        "September": "rujan",
	        "October": "listopad",
	        "November": "studeni",
	        "December": "prosinac",
	        "Jan_Abbr": "sij",
	        "Feb_Abbr": "vlj",
	        "Mar_Abbr": "ožu",
	        "Apr_Abbr": "tra",
	        "May_Abbr": "svi",
	        "Jun_Abbr": "lip",
	        "Jul_Abbr": "srp",
	        "Aug_Abbr": "kol",
	        "Sep_Abbr": "ruj",
	        "Oct_Abbr": "lis",
	        "Nov_Abbr": "stu",
	        "Dec_Abbr": "pro",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "sij(ečanj)?",
	        "/feb(ruary)?/": "veljača",
	        "/mar(ch)?/": "ožu(jak)?",
	        "/apr(il)?/": "tra(vanj)?",
	        "/may/": "svi(banj)?",
	        "/jun(e)?/": "lip(anj)?",
	        "/jul(y)?/": "srp(anj)?",
	        "/aug(ust)?/": "kol(ovoz)?",
	        "/sep(t(ember)?)?/": "ruj(an)?",
	        "/oct(ober)?/": "lis(topad)?",
	        "/nov(ember)?/": "stu(deni)?",
	        "/dec(ember)?/": "pro(sinac)?",
	        "/^su(n(day)?)?/": "^ne(d(jelja)?)?",
	        "/^mo(n(day)?)?/": "^po(n(edjeljak)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ut(o(rak)?)?",
	        "/^we(d(nesday)?)?/": "^sr(i(jeda)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^če(t(vrtak)?)?",
	        "/^fr(i(day)?)?/": "^pe(t(ak)?)?",
	        "/^sa(t(urday)?)?/": "^su(b(ota)?)?",
	        "/^next/": "^slijedeć(i|e|eg)",
	        "/^last|past|prev(ious)?/": "^zadnji|posljednji|prethodni",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|pos(lije)?|od|odsad(a)?)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|pr(ije)?pred)",
	        "/^yes(terday)?/": "^jučer",
	        "/^t(od(ay)?)?/": "^danas",
	        "/^tom(orrow)?/": "^sutra",
	        "/^n(ow)?/": "^sad(a)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sek(und(a|e|i)?)?",
	        "/^mn|min(ute)?s?/": "^mn|min(ut(a|e|i)?)?",
	        "/^h(our)?s?/": "^s(at(a|i)?)?",
	        "/^w(eek)?s?/": "^tj(edan(a|i)?)?",
	        "/^m(onth)?s?/": "^mj(esec(a|i)?)?",
	        "/^d(ay)?s?/": "^dan(a|i)?",
	        "/^y(ear)?s?/": "^god(in(a|e|i|u))?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "hr-HR";


/***/ },
/* 218 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: hu-HU
	 * Name: Hungarian (Hungary)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["hu-HU"] = {
	        "name": "hu-HU",
	        "englishName": "Hungarian (Hungary)",
	        "nativeName": "magyar (Magyarország)",
	        "Sunday": "vasárnap",
	        "Monday": "hétfő",
	        "Tuesday": "kedd",
	        "Wednesday": "szerda",
	        "Thursday": "csütörtök",
	        "Friday": "péntek",
	        "Saturday": "szombat",
	        "Sun": "V",
	        "Mon": "H",
	        "Tue": "K",
	        "Wed": "Sze",
	        "Thu": "Cs",
	        "Fri": "P",
	        "Sat": "Szo",
	        "Su": "V",
	        "Mo": "H",
	        "Tu": "K",
	        "We": "Sze",
	        "Th": "Cs",
	        "Fr": "P",
	        "Sa": "Szo",
	        "S_Sun_Initial": "V",
	        "M_Mon_Initial": "H",
	        "T_Tue_Initial": "K",
	        "W_Wed_Initial": "S",
	        "T_Thu_Initial": "C",
	        "F_Fri_Initial": "P",
	        "S_Sat_Initial": "S",
	        "January": "január",
	        "February": "február",
	        "March": "március",
	        "April": "április",
	        "May": "május",
	        "June": "június",
	        "July": "július",
	        "August": "augusztus",
	        "September": "szeptember",
	        "October": "október",
	        "November": "november",
	        "December": "december",
	        "Jan_Abbr": "jan.",
	        "Feb_Abbr": "febr.",
	        "Mar_Abbr": "márc.",
	        "Apr_Abbr": "ápr.",
	        "May_Abbr": "máj.",
	        "Jun_Abbr": "jún.",
	        "Jul_Abbr": "júl.",
	        "Aug_Abbr": "aug.",
	        "Sep_Abbr": "szept.",
	        "Oct_Abbr": "okt.",
	        "Nov_Abbr": "nov.",
	        "Dec_Abbr": "dec.",
	        "AM": "de.",
	        "PM": "du.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy. MM. dd.",
	        "dddd, MMMM dd, yyyy": "yyyy. MMMM d.",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy. MMMM d. H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM d.",
	        "MMMM, yyyy": "yyyy. MMMM",
	        "/jan(uary)?/": "jan(.(uár)?)?",
	        "/feb(ruary)?/": "febr(.(uár)?)?",
	        "/mar(ch)?/": "márc(.(ius)?)?",
	        "/apr(il)?/": "ápr(.(ilis)?)?",
	        "/may/": "máj(.(us)?)?",
	        "/jun(e)?/": "jún(.(ius)?)?",
	        "/jul(y)?/": "júl(.(ius)?)?",
	        "/aug(ust)?/": "aug(.(usztus)?)?",
	        "/sep(t(ember)?)?/": "szept(.(ember)?)?",
	        "/oct(ober)?/": "okt(.(óber)?)?",
	        "/nov(ember)?/": "nov(.(ember)?)?",
	        "/dec(ember)?/": "dec(.(ember)?)?",
	        "/^su(n(day)?)?/": "^vasárnap",
	        "/^mo(n(day)?)?/": "^hétfő",
	        "/^tu(e(s(day)?)?)?/": "^kedd",
	        "/^we(d(nesday)?)?/": "^szerda",
	        "/^th(u(r(s(day)?)?)?)?/": "^csütörtök",
	        "/^fr(i(day)?)?/": "^péntek",
	        "/^sa(t(urday)?)?/": "^szombat",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "hu-HU";


/***/ },
/* 219 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: hy-AM
	 * Name: Armenian (Armenia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["hy-AM"] = {
	        "name": "hy-AM",
	        "englishName": "Armenian (Armenia)",
	        "nativeName": "Հայերեն (Հայաստան)",
	        "Sunday": "Կիրակի",
	        "Monday": "Երկուշաբթի",
	        "Tuesday": "Երեքշաբթի",
	        "Wednesday": "Չորեքշաբթի",
	        "Thursday": "Հինգշաբթի",
	        "Friday": "ՈՒրբաթ",
	        "Saturday": "Շաբաթ",
	        "Sun": "Կիր",
	        "Mon": "Երկ",
	        "Tue": "Երք",
	        "Wed": "Չրք",
	        "Thu": "Հնգ",
	        "Fri": "ՈՒր",
	        "Sat": "Շբթ",
	        "Su": "Կ",
	        "Mo": "Ե",
	        "Tu": "Ե",
	        "We": "Չ",
	        "Th": "Հ",
	        "Fr": "Ո",
	        "Sa": "Շ",
	        "S_Sun_Initial": "Կ",
	        "M_Mon_Initial": "Ե",
	        "T_Tue_Initial": "Ե",
	        "W_Wed_Initial": "Չ",
	        "T_Thu_Initial": "Հ",
	        "F_Fri_Initial": "Ո",
	        "S_Sat_Initial": "Շ",
	        "January": "Հունվար",
	        "February": "Փետրվար",
	        "March": "Մարտ",
	        "April": "Ապրիլ",
	        "May": "Մայիս",
	        "June": "Հունիս",
	        "July": "Հուլիս",
	        "August": "Օգոստոս",
	        "September": "Սեպտեմբեր",
	        "October": "Հոկտեմբեր",
	        "November": "Նոյեմբեր",
	        "December": "Դեկտեմբեր",
	        "Jan_Abbr": "ՀՆՎ",
	        "Feb_Abbr": "ՓՏՎ",
	        "Mar_Abbr": "ՄՐՏ",
	        "Apr_Abbr": "ԱՊՐ",
	        "May_Abbr": "ՄՅՍ",
	        "Jun_Abbr": "ՀՆՍ",
	        "Jul_Abbr": "ՀԼՍ",
	        "Aug_Abbr": "ՕԳՍ",
	        "Sep_Abbr": "ՍԵՊ",
	        "Oct_Abbr": "ՀՈԿ",
	        "Nov_Abbr": "ՆՈՅ",
	        "Dec_Abbr": "ԴԵԿ",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM, yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM, yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "հունվար",
	        "/feb(ruary)?/": "փետրվար",
	        "/mar(ch)?/": "մարտ",
	        "/apr(il)?/": "ապր(իլ)?",
	        "/may/": "մայիս",
	        "/jun(e)?/": "հունիս",
	        "/jul(y)?/": "հուլիս",
	        "/aug(ust)?/": "օգոստոս",
	        "/sep(t(ember)?)?/": "սեպ(տեմբեր)?",
	        "/oct(ober)?/": "հոկ(տեմբեր)?",
	        "/nov(ember)?/": "նոյ(եմբեր)?",
	        "/dec(ember)?/": "դեկ(տեմբեր)?",
	        "/^su(n(day)?)?/": "^կ(իր(ակի)?)?",
	        "/^mo(n(day)?)?/": "^ե(րկ(ուշաբթի)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ե(րք(քշաբթի)?)?",
	        "/^we(d(nesday)?)?/": "^չ(րք(եքշաբթի)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^հ(նգ(գշաբթի)?)?",
	        "/^fr(i(day)?)?/": "^ո(ւր(բաթ)?)?",
	        "/^sa(t(urday)?)?/": "^շ(բթ(աթ)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "hy-AM";


/***/ },
/* 220 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: id-ID
	 * Name: Indonesian (Indonesia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["id-ID"] = {
	        "name": "id-ID",
	        "englishName": "Indonesian (Indonesia)",
	        "nativeName": "Bahasa Indonesia (Indonesia)",
	        "Sunday": "Minggu",
	        "Monday": "Senin",
	        "Tuesday": "Selasa",
	        "Wednesday": "Rabu",
	        "Thursday": "Kamis",
	        "Friday": "Jumat",
	        "Saturday": "Sabtu",
	        "Sun": "Minggu",
	        "Mon": "Sen",
	        "Tue": "Sel",
	        "Wed": "Rabu",
	        "Thu": "Kamis",
	        "Fri": "Jumat",
	        "Sat": "Sabtu",
	        "Su": "M",
	        "Mo": "S",
	        "Tu": "S",
	        "We": "R",
	        "Th": "K",
	        "Fr": "J",
	        "Sa": "S",
	        "S_Sun_Initial": "M",
	        "M_Mon_Initial": "S",
	        "T_Tue_Initial": "S",
	        "W_Wed_Initial": "R",
	        "T_Thu_Initial": "K",
	        "F_Fri_Initial": "J",
	        "S_Sat_Initial": "S",
	        "January": "Januari",
	        "February": "Februari",
	        "March": "Maret",
	        "April": "April",
	        "May": "Mei",
	        "June": "Juni",
	        "July": "Juli",
	        "August": "Agustus",
	        "September": "September",
	        "October": "Oktober",
	        "November": "Nopember",
	        "December": "Desember",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mei",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Agust",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nop",
	        "Dec_Abbr": "Des",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uari)?",
	        "/feb(ruary)?/": "feb(ruari)?",
	        "/mar(ch)?/": "mar(et)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mei",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "agust(us)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nop(ember)?",
	        "/dec(ember)?/": "des(ember)?",
	        "/^su(n(day)?)?/": "^m(1)?",
	        "/^mo(n(day)?)?/": "^s(en(in)?)?",
	        "/^tu(e(s(day)?)?)?/": "^s(el(asa)?)?",
	        "/^we(d(nesday)?)?/": "^r(1)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^k(1)?",
	        "/^fr(i(day)?)?/": "^j(1)?",
	        "/^sa(t(urday)?)?/": "^s(1)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "id-ID";


/***/ },
/* 221 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: is-IS
	 * Name: Icelandic (Iceland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["is-IS"] = {
	        "name": "is-IS",
	        "englishName": "Icelandic (Iceland)",
	        "nativeName": "íslenska (Ísland)",
	        "Sunday": "sunnudagur",
	        "Monday": "mánudagur",
	        "Tuesday": "þriðjudagur",
	        "Wednesday": "miðvikudagur",
	        "Thursday": "fimmtudagur",
	        "Friday": "föstudagur",
	        "Saturday": "laugardagur",
	        "Sun": "sun.",
	        "Mon": "mán.",
	        "Tue": "þri.",
	        "Wed": "mið.",
	        "Thu": "fim.",
	        "Fri": "fös.",
	        "Sat": "lau.",
	        "Su": "su",
	        "Mo": "má",
	        "Tu": "þr",
	        "We": "mi",
	        "Th": "fi",
	        "Fr": "fö",
	        "Sa": "la",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "þ",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "f",
	        "F_Fri_Initial": "f",
	        "S_Sat_Initial": "l",
	        "January": "janúar",
	        "February": "febrúar",
	        "March": "mars",
	        "April": "apríl",
	        "May": "maí",
	        "June": "júní",
	        "July": "júlí",
	        "August": "ágúst",
	        "September": "september",
	        "October": "október",
	        "November": "nóvember",
	        "December": "desember",
	        "Jan_Abbr": "jan.",
	        "Feb_Abbr": "feb.",
	        "Mar_Abbr": "mar.",
	        "Apr_Abbr": "apr.",
	        "May_Abbr": "maí",
	        "Jun_Abbr": "jún.",
	        "Jul_Abbr": "júl.",
	        "Aug_Abbr": "ágú.",
	        "Sep_Abbr": "sep.",
	        "Oct_Abbr": "okt.",
	        "Nov_Abbr": "nóv.",
	        "Dec_Abbr": "des.",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(.(úar)?)?",
	        "/feb(ruary)?/": "feb(.(rúar)?)?",
	        "/mar(ch)?/": "mar(.(s)?)?",
	        "/apr(il)?/": "apr(.(íl)?)?",
	        "/may/": "maí",
	        "/jun(e)?/": "jún(.(í)?)?",
	        "/jul(y)?/": "júl(.(í)?)?",
	        "/aug(ust)?/": "ágú(.(st)?)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(.(óber)?)?",
	        "/nov(ember)?/": "nóv(.(ember)?)?",
	        "/dec(ember)?/": "des(.(ember)?)?",
	        "/^su(n(day)?)?/": "^su(n(.(nudagur)?)?)?",
	        "/^mo(n(day)?)?/": "^má(n(.(udagur)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^þr(i(.(ðjudagur)?)?)?",
	        "/^we(d(nesday)?)?/": "^mi(ð(.(vikudagur)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^fi(m(.(mtudagur)?)?)?",
	        "/^fr(i(day)?)?/": "^fö(s(.(tudagur)?)?)?",
	        "/^sa(t(urday)?)?/": "^la(u(.(gardagur)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "is-IS";


/***/ },
/* 222 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: it-CH
	 * Name: Italian (Switzerland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["it-CH"] = {
	        "name": "it-CH",
	        "englishName": "Italian (Switzerland)",
	        "nativeName": "italiano (Svizzera)",
	        "Sunday": "domenica",
	        "Monday": "lunedì",
	        "Tuesday": "martedì",
	        "Wednesday": "mercoledì",
	        "Thursday": "giovedì",
	        "Friday": "venerdì",
	        "Saturday": "sabato",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mer",
	        "Thu": "gio",
	        "Fri": "ven",
	        "Sat": "sab",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "me",
	        "Th": "gi",
	        "Fr": "ve",
	        "Sa": "sa",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "g",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "gennaio",
	        "February": "febbraio",
	        "March": "marzo",
	        "April": "aprile",
	        "May": "maggio",
	        "June": "giugno",
	        "July": "luglio",
	        "August": "agosto",
	        "September": "settembre",
	        "October": "ottobre",
	        "November": "novembre",
	        "December": "dicembre",
	        "Jan_Abbr": "gen",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "mag",
	        "Jun_Abbr": "gio",
	        "Jul_Abbr": "lug",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "set",
	        "Oct_Abbr": "ott",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "gen(naio)?",
	        "/feb(ruary)?/": "feb(braio)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "apr(ile)?",
	        "/may/": "mag(gio)?",
	        "/jun(e)?/": "giugno",
	        "/jul(y)?/": "lug(lio)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "set(tembre)?",
	        "/oct(ober)?/": "ott(obre)?",
	        "/nov(ember)?/": "nov(embre)?",
	        "/dec(ember)?/": "dic(embre)?",
	        "/^su(n(day)?)?/": "^do(m(enica)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(edì)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tedì)?)?",
	        "/^we(d(nesday)?)?/": "^me(r(coledì)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^gi(o(vedì)?)?",
	        "/^fr(i(day)?)?/": "^ve(n(erdì)?)?",
	        "/^sa(t(urday)?)?/": "^sa(b(ato)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "it-CH";


/***/ },
/* 223 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: it-IT
	 * Name: Italian (Italy)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["it-IT"] = {
	        "name": "it-IT",
	        "englishName": "Italian (Italy)",
	        "nativeName": "italiano (Italia)",
	        "Sunday": "domenica",
	        "Monday": "lunedì",
	        "Tuesday": "martedì",
	        "Wednesday": "mercoledì",
	        "Thursday": "giovedì",
	        "Friday": "venerdì",
	        "Saturday": "sabato",
	        "Sun": "dom",
	        "Mon": "lun",
	        "Tue": "mar",
	        "Wed": "mer",
	        "Thu": "gio",
	        "Fri": "ven",
	        "Sat": "sab",
	        "Su": "do",
	        "Mo": "lu",
	        "Tu": "ma",
	        "We": "me",
	        "Th": "gi",
	        "Fr": "ve",
	        "Sa": "sa",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "l",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "m",
	        "T_Thu_Initial": "g",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "s",
	        "January": "gennaio",
	        "February": "febbraio",
	        "March": "marzo",
	        "April": "aprile",
	        "May": "maggio",
	        "June": "giugno",
	        "July": "luglio",
	        "August": "agosto",
	        "September": "settembre",
	        "October": "ottobre",
	        "November": "novembre",
	        "December": "dicembre",
	        "Jan_Abbr": "gen",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "mag",
	        "Jun_Abbr": "giu",
	        "Jul_Abbr": "lug",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "set",
	        "Oct_Abbr": "ott",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dic",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd d MMMM yyyy",
	        "h:mm tt": "H.mm",
	        "h:mm:ss tt": "H.mm.ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd d MMMM yyyy H.mm.ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "gen(naio)?",
	        "/feb(ruary)?/": "feb(braio)?",
	        "/mar(ch)?/": "mar(zo)?",
	        "/apr(il)?/": "apr(ile)?",
	        "/may/": "mag(gio)?",
	        "/jun(e)?/": "giu(gno)?",
	        "/jul(y)?/": "lug(lio)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "set(tembre)?",
	        "/oct(ober)?/": "ott(obre)?",
	        "/nov(ember)?/": "nov(embre)?",
	        "/dec(ember)?/": "dic(embre)?",
	        "/^su(n(day)?)?/": "^do(m(enica)?)?",
	        "/^mo(n(day)?)?/": "^lu(n(edì)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(tedì)?)?",
	        "/^we(d(nesday)?)?/": "^me(r(coledì)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^gi(o(vedì)?)?",
	        "/^fr(i(day)?)?/": "^ve(n(erdì)?)?",
	        "/^sa(t(urday)?)?/": "^sa(b(ato)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "it-IT";


/***/ },
/* 224 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ja-JP
	 * Name: Japanese (Japan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ja-JP"] = {
	        "name": "ja-JP",
	        "englishName": "Japanese (Japan)",
	        "nativeName": "日本語 (日本)",
	        "Sunday": "日曜日",
	        "Monday": "月曜日",
	        "Tuesday": "火曜日",
	        "Wednesday": "水曜日",
	        "Thursday": "木曜日",
	        "Friday": "金曜日",
	        "Saturday": "土曜日",
	        "Sun": "日",
	        "Mon": "月",
	        "Tue": "火",
	        "Wed": "水",
	        "Thu": "木",
	        "Fri": "金",
	        "Sat": "土",
	        "Su": "日",
	        "Mo": "月",
	        "Tu": "火",
	        "We": "水",
	        "Th": "木",
	        "Fr": "金",
	        "Sa": "土",
	        "S_Sun_Initial": "日",
	        "M_Mon_Initial": "月",
	        "T_Tue_Initial": "火",
	        "W_Wed_Initial": "水",
	        "T_Thu_Initial": "木",
	        "F_Fri_Initial": "金",
	        "S_Sat_Initial": "土",
	        "January": "1月",
	        "February": "2月",
	        "March": "3月",
	        "April": "4月",
	        "May": "5月",
	        "June": "6月",
	        "July": "7月",
	        "August": "8月",
	        "September": "9月",
	        "October": "10月",
	        "November": "11月",
	        "December": "12月",
	        "Jan_Abbr": "1",
	        "Feb_Abbr": "2",
	        "Mar_Abbr": "3",
	        "Apr_Abbr": "4",
	        "May_Abbr": "5",
	        "Jun_Abbr": "6",
	        "Jul_Abbr": "7",
	        "Aug_Abbr": "8",
	        "Sep_Abbr": "9",
	        "Oct_Abbr": "10",
	        "Nov_Abbr": "11",
	        "Dec_Abbr": "12",
	        "AM": "午前",
	        "PM": "午後",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/MM/dd",
	        "dddd, MMMM dd, yyyy": "yyyy'年'M'月'd'日'",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy'年'M'月'd'日' H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "M'月'd'日'",
	        "MMMM, yyyy": "yyyy'年'M'月'",
	        "/jan(uary)?/": "1(月)?",
	        "/feb(ruary)?/": "2(月)?",
	        "/mar(ch)?/": "3(月)?",
	        "/apr(il)?/": "4(月)?",
	        "/may/": "5(月)?",
	        "/jun(e)?/": "6(月)?",
	        "/jul(y)?/": "7(月)?",
	        "/aug(ust)?/": "8(月)?",
	        "/sep(t(ember)?)?/": "9(月)?",
	        "/oct(ober)?/": "10(月)?",
	        "/nov(ember)?/": "11(月)?",
	        "/dec(ember)?/": "12(月)?",
	        "/^su(n(day)?)?/": "^日曜日",
	        "/^mo(n(day)?)?/": "^月曜日",
	        "/^tu(e(s(day)?)?)?/": "^火曜日",
	        "/^we(d(nesday)?)?/": "^水曜日",
	        "/^th(u(r(s(day)?)?)?)?/": "^木曜日",
	        "/^fr(i(day)?)?/": "^金曜日",
	        "/^sa(t(urday)?)?/": "^土曜日",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ja-JP";


/***/ },
/* 225 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ka-GE
	 * Name: Georgian (Georgia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ka-GE"] = {
	        "name": "ka-GE",
	        "englishName": "Georgian (Georgia)",
	        "nativeName": "ქართული (საქართველო)",
	        "Sunday": "კვირა",
	        "Monday": "ორშაბათი",
	        "Tuesday": "სამშაბათი",
	        "Wednesday": "ოთხშაბათი",
	        "Thursday": "ხუთშაბათი",
	        "Friday": "პარასკევი",
	        "Saturday": "შაბათი",
	        "Sun": "კვირა",
	        "Mon": "ორშაბათი",
	        "Tue": "სამშაბათი",
	        "Wed": "ოთხშაბათი",
	        "Thu": "ხუთშაბათი",
	        "Fri": "პარასკევი",
	        "Sat": "შაბათი",
	        "Su": "კ",
	        "Mo": "ო",
	        "Tu": "ს",
	        "We": "ო",
	        "Th": "ხ",
	        "Fr": "პ",
	        "Sa": "შ",
	        "S_Sun_Initial": "კ",
	        "M_Mon_Initial": "ო",
	        "T_Tue_Initial": "ს",
	        "W_Wed_Initial": "ო",
	        "T_Thu_Initial": "ხ",
	        "F_Fri_Initial": "პ",
	        "S_Sat_Initial": "შ",
	        "January": "იანვარი",
	        "February": "თებერვალი",
	        "March": "მარტი",
	        "April": "აპრილი",
	        "May": "მაისი",
	        "June": "ივნისი",
	        "July": "ივლისი",
	        "August": "აგვისტო",
	        "September": "სექტემბერი",
	        "October": "ოქტომბერი",
	        "November": "ნოემბერი",
	        "December": "დეკემბერი",
	        "Jan_Abbr": "იან",
	        "Feb_Abbr": "თებ",
	        "Mar_Abbr": "მარ",
	        "Apr_Abbr": "აპრ",
	        "May_Abbr": "მაის",
	        "Jun_Abbr": "ივნ",
	        "Jul_Abbr": "ივლ",
	        "Aug_Abbr": "აგვ",
	        "Sep_Abbr": "სექ",
	        "Oct_Abbr": "ოქტ",
	        "Nov_Abbr": "ნოემ",
	        "Dec_Abbr": "დეკ",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "yyyy 'წლის' dd MM, dddd",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy 'წლის' dd MM, dddd H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "იან(ვარი)?",
	        "/feb(ruary)?/": "თებ(ერვალი)?",
	        "/mar(ch)?/": "მარ(ტი)?",
	        "/apr(il)?/": "აპრ(ილი)?",
	        "/may/": "მაის(ი)?",
	        "/jun(e)?/": "ივნ(ისი)?",
	        "/jul(y)?/": "ივლ(ისი)?",
	        "/aug(ust)?/": "აგვ(ისტო)?",
	        "/sep(t(ember)?)?/": "სექ(ტემბერი)?",
	        "/oct(ober)?/": "ოქტ(ომბერი)?",
	        "/nov(ember)?/": "ნოემ(ბერი)?",
	        "/dec(ember)?/": "დეკ(ემბერი)?",
	        "/^su(n(day)?)?/": "^კ(1)?",
	        "/^mo(n(day)?)?/": "^ო(1)?",
	        "/^tu(e(s(day)?)?)?/": "^ს(1)?",
	        "/^we(d(nesday)?)?/": "^ო(1)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ხ(1)?",
	        "/^fr(i(day)?)?/": "^პ(1)?",
	        "/^sa(t(urday)?)?/": "^შ(1)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ka-GE";


/***/ },
/* 226 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: kk-KZ
	 * Name: Kazakh (Kazakhstan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["kk-KZ"] = {
	        "name": "kk-KZ",
	        "englishName": "Kazakh (Kazakhstan)",
	        "nativeName": "Қазақ (Қазақстан)",
	        "Sunday": "Жексенбі",
	        "Monday": "Дүйсенбі",
	        "Tuesday": "Сейсенбі",
	        "Wednesday": "Сәрсенбі",
	        "Thursday": "Бейсенбі",
	        "Friday": "Жұма",
	        "Saturday": "Сенбі",
	        "Sun": "Жк",
	        "Mon": "Дс",
	        "Tue": "Сс",
	        "Wed": "Ср",
	        "Thu": "Бс",
	        "Fri": "Жм",
	        "Sat": "Сн",
	        "Su": "Жк",
	        "Mo": "Дс",
	        "Tu": "Сс",
	        "We": "Ср",
	        "Th": "Бс",
	        "Fr": "Жм",
	        "Sa": "Сн",
	        "S_Sun_Initial": "Ж",
	        "M_Mon_Initial": "Д",
	        "T_Tue_Initial": "С",
	        "W_Wed_Initial": "С",
	        "T_Thu_Initial": "Б",
	        "F_Fri_Initial": "Ж",
	        "S_Sat_Initial": "С",
	        "January": "қаңтар",
	        "February": "ақпан",
	        "March": "наурыз",
	        "April": "сәуір",
	        "May": "мамыр",
	        "June": "маусым",
	        "July": "шілде",
	        "August": "тамыз",
	        "September": "қыркүйек",
	        "October": "қазан",
	        "November": "қараша",
	        "December": "желтоқсан",
	        "Jan_Abbr": "Қаң",
	        "Feb_Abbr": "Ақп",
	        "Mar_Abbr": "Нау",
	        "Apr_Abbr": "Сәу",
	        "May_Abbr": "Мам",
	        "Jun_Abbr": "Мау",
	        "Jul_Abbr": "Шіл",
	        "Aug_Abbr": "Там",
	        "Sep_Abbr": "Қыр",
	        "Oct_Abbr": "Қаз",
	        "Nov_Abbr": "Қар",
	        "Dec_Abbr": "Жел",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy 'ж.'",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy 'ж.' H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "қаң(тар)?",
	        "/feb(ruary)?/": "ақп(ан)?",
	        "/mar(ch)?/": "нау(рыз)?",
	        "/apr(il)?/": "сәу(ір)?",
	        "/may/": "мам(ыр)?",
	        "/jun(e)?/": "мау(сым)?",
	        "/jul(y)?/": "шіл(де)?",
	        "/aug(ust)?/": "там(ыз)?",
	        "/sep(t(ember)?)?/": "қыр(күйек)?",
	        "/oct(ober)?/": "қаз(ан)?",
	        "/nov(ember)?/": "қар(аша)?",
	        "/dec(ember)?/": "жел(тоқсан)?",
	        "/^su(n(day)?)?/": "^жексенбі",
	        "/^mo(n(day)?)?/": "^дүйсенбі",
	        "/^tu(e(s(day)?)?)?/": "^сейсенбі",
	        "/^we(d(nesday)?)?/": "^сәрсенбі",
	        "/^th(u(r(s(day)?)?)?)?/": "^бейсенбі",
	        "/^fr(i(day)?)?/": "^жұма",
	        "/^sa(t(urday)?)?/": "^сенбі",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "kk-KZ";


/***/ },
/* 227 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: kn-IN
	 * Name: Kannada (India)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["kn-IN"] = {
	        "name": "kn-IN",
	        "englishName": "Kannada (India)",
	        "nativeName": "ಕನ್ನಡ (ಭಾರತ)",
	        "Sunday": "ಭಾನುವಾರ",
	        "Monday": "ಸೋಮವಾರ",
	        "Tuesday": "ಮಂಗಳವಾರ",
	        "Wednesday": "ಬುಧವಾರ",
	        "Thursday": "ಗುರುವಾರ",
	        "Friday": "ಶುಕ್ರವಾರ",
	        "Saturday": "ಶನಿವಾರ",
	        "Sun": "ಭಾನು.",
	        "Mon": "ಸೋಮ.",
	        "Tue": "ಮಂಗಳ.",
	        "Wed": "ಬುಧ.",
	        "Thu": "ಗುರು.",
	        "Fri": "ಶುಕ್ರ.",
	        "Sat": "ಶನಿ.",
	        "Su": "ರ",
	        "Mo": "ಸ",
	        "Tu": "ಮ",
	        "We": "ಬ",
	        "Th": "ಗ",
	        "Fr": "ಶ",
	        "Sa": "ಶ",
	        "S_Sun_Initial": "ರ",
	        "M_Mon_Initial": "ಸ",
	        "T_Tue_Initial": "ಮ",
	        "W_Wed_Initial": "ಬ",
	        "T_Thu_Initial": "ಗ",
	        "F_Fri_Initial": "ಶ",
	        "S_Sat_Initial": "ಶ",
	        "January": "ಜನವರಿ",
	        "February": "ಫೆಬ್ರವರಿ",
	        "March": "ಮಾರ್ಚ್",
	        "April": "ಎಪ್ರಿಲ್",
	        "May": "ಮೇ",
	        "June": "ಜೂನ್",
	        "July": "ಜುಲೈ",
	        "August": "ಆಗಸ್ಟ್",
	        "September": "ಸೆಪ್ಟಂಬರ್",
	        "October": "ಅಕ್ಟೋಬರ್",
	        "November": "ನವೆಂಬರ್",
	        "December": "ಡಿಸೆಂಬರ್",
	        "Jan_Abbr": "ಜನವರಿ",
	        "Feb_Abbr": "ಫೆಬ್ರವರಿ",
	        "Mar_Abbr": "ಮಾರ್ಚ್",
	        "Apr_Abbr": "ಎಪ್ರಿಲ್",
	        "May_Abbr": "ಮೇ",
	        "Jun_Abbr": "ಜೂನ್",
	        "Jul_Abbr": "ಜುಲೈ",
	        "Aug_Abbr": "ಆಗಸ್ಟ್",
	        "Sep_Abbr": "ಸೆಪ್ಟಂಬರ್",
	        "Oct_Abbr": "ಅಕ್ಟೋಬರ್",
	        "Nov_Abbr": "ನವೆಂಬರ್",
	        "Dec_Abbr": "ಡಿಸೆಂಬರ್",
	        "AM": "ಪೂರ್ವಾಹ್ನ",
	        "PM": "ಅಪರಾಹ್ನ",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "ಜನವರಿ",
	        "/feb(ruary)?/": "ಫೆಬ್ರವರಿ",
	        "/mar(ch)?/": "ಮಾರ್ಚ್",
	        "/apr(il)?/": "ಎಪ್ರಿಲ್",
	        "/may/": "ಮೇ",
	        "/jun(e)?/": "ಜೂನ್",
	        "/jul(y)?/": "ಜುಲೈ",
	        "/aug(ust)?/": "ಆಗಸ್ಟ್",
	        "/sep(t(ember)?)?/": "ಸೆಪ್ಟಂಬರ್",
	        "/oct(ober)?/": "ಅಕ್ಟೋಬರ್",
	        "/nov(ember)?/": "ನವೆಂಬರ್",
	        "/dec(ember)?/": "ಡಿಸೆಂಬರ್",
	        "/^su(n(day)?)?/": "^ರ(ಾನು(.(ವಾರ)?)?)?",
	        "/^mo(n(day)?)?/": "^ಸ(ೋಮ(.(ವಾರ)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ಮ(ಂಗಳ(.(ವಾರ)?)?)?",
	        "/^we(d(nesday)?)?/": "^ಬ(ುಧ(.(ವಾರ)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ಗ(ುರು(.(ವಾರ)?)?)?",
	        "/^fr(i(day)?)?/": "^ಶ(ುಕ್ರ(.(ವಾರ)?)?)?",
	        "/^sa(t(urday)?)?/": "^ಶ(ನಿ(.(ವಾರ)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "kn-IN";


/***/ },
/* 228 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ko-KR
	 * Name: Korean (Korea)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ko-KR"] = {
	        "name": "ko-KR",
	        "englishName": "Korean (Korea)",
	        "nativeName": "한국어 (대한민국)",
	        "Sunday": "일요일",
	        "Monday": "월요일",
	        "Tuesday": "화요일",
	        "Wednesday": "수요일",
	        "Thursday": "목요일",
	        "Friday": "금요일",
	        "Saturday": "토요일",
	        "Sun": "일",
	        "Mon": "월",
	        "Tue": "화",
	        "Wed": "수",
	        "Thu": "목",
	        "Fri": "금",
	        "Sat": "토",
	        "Su": "일",
	        "Mo": "월",
	        "Tu": "화",
	        "We": "수",
	        "Th": "목",
	        "Fr": "금",
	        "Sa": "토",
	        "S_Sun_Initial": "일",
	        "M_Mon_Initial": "월",
	        "T_Tue_Initial": "화",
	        "W_Wed_Initial": "수",
	        "T_Thu_Initial": "목",
	        "F_Fri_Initial": "금",
	        "S_Sat_Initial": "토",
	        "January": "1월",
	        "February": "2월",
	        "March": "3월",
	        "April": "4월",
	        "May": "5월",
	        "June": "6월",
	        "July": "7월",
	        "August": "8월",
	        "September": "9월",
	        "October": "10월",
	        "November": "11월",
	        "December": "12월",
	        "Jan_Abbr": "1",
	        "Feb_Abbr": "2",
	        "Mar_Abbr": "3",
	        "Apr_Abbr": "4",
	        "May_Abbr": "5",
	        "Jun_Abbr": "6",
	        "Jul_Abbr": "7",
	        "Aug_Abbr": "8",
	        "Sep_Abbr": "9",
	        "Oct_Abbr": "10",
	        "Nov_Abbr": "11",
	        "Dec_Abbr": "12",
	        "AM": "오전",
	        "PM": "오후",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy-MM-dd",
	        "dddd, MMMM dd, yyyy": "yyyy'년' M'월' d'일' dddd",
	        "h:mm tt": "tt h:mm",
	        "h:mm:ss tt": "tt h:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy'년' M'월' d'일' dddd tt h:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "M'월' d'일'",
	        "MMMM, yyyy": "yyyy'년' M'월'",
	        "/jan(uary)?/": "1(월)?",
	        "/feb(ruary)?/": "2(월)?",
	        "/mar(ch)?/": "3(월)?",
	        "/apr(il)?/": "4(월)?",
	        "/may/": "5(월)?",
	        "/jun(e)?/": "6(월)?",
	        "/jul(y)?/": "7(월)?",
	        "/aug(ust)?/": "8(월)?",
	        "/sep(t(ember)?)?/": "9(월)?",
	        "/oct(ober)?/": "10(월)?",
	        "/nov(ember)?/": "11(월)?",
	        "/dec(ember)?/": "12(월)?",
	        "/^su(n(day)?)?/": "^일요일",
	        "/^mo(n(day)?)?/": "^월요일",
	        "/^tu(e(s(day)?)?)?/": "^화요일",
	        "/^we(d(nesday)?)?/": "^수요일",
	        "/^th(u(r(s(day)?)?)?)?/": "^목요일",
	        "/^fr(i(day)?)?/": "^금요일",
	        "/^sa(t(urday)?)?/": "^토요일",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ko-KR";


/***/ },
/* 229 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: kok-IN
	 * Name: Konkani (India)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["kok-IN"] = {
	        "name": "kok-IN",
	        "englishName": "Konkani (India)",
	        "nativeName": "कोंकणी (भारत)",
	        "Sunday": "आयतार",
	        "Monday": "सोमार",
	        "Tuesday": "मंगळार",
	        "Wednesday": "बुधवार",
	        "Thursday": "बिरेस्तार",
	        "Friday": "सुक्रार",
	        "Saturday": "शेनवार",
	        "Sun": "आय.",
	        "Mon": "सोम.",
	        "Tue": "मंगळ.",
	        "Wed": "बुध.",
	        "Thu": "बिरे.",
	        "Fri": "सुक्र.",
	        "Sat": "शेन.",
	        "Su": "आ",
	        "Mo": "स",
	        "Tu": "म",
	        "We": "ब",
	        "Th": "ब",
	        "Fr": "स",
	        "Sa": "श",
	        "S_Sun_Initial": "आ",
	        "M_Mon_Initial": "स",
	        "T_Tue_Initial": "म",
	        "W_Wed_Initial": "ब",
	        "T_Thu_Initial": "ब",
	        "F_Fri_Initial": "स",
	        "S_Sat_Initial": "श",
	        "January": "जानेवारी",
	        "February": "फेब्रुवारी",
	        "March": "मार्च",
	        "April": "एप्रिल",
	        "May": "मे",
	        "June": "जून",
	        "July": "जुलै",
	        "August": "ऑगस्ट",
	        "September": "सप्टेंबर",
	        "October": "ऑक्टोबर",
	        "November": "नोवेम्बर",
	        "December": "डिसेंबर",
	        "Jan_Abbr": "जानेवारी",
	        "Feb_Abbr": "फेब्रुवारी",
	        "Mar_Abbr": "मार्च",
	        "Apr_Abbr": "एप्रिल",
	        "May_Abbr": "मे",
	        "Jun_Abbr": "जून",
	        "Jul_Abbr": "जुलै",
	        "Aug_Abbr": "ऑगस्ट",
	        "Sep_Abbr": "सप्टेंबर",
	        "Oct_Abbr": "ऑक्टोबर",
	        "Nov_Abbr": "नोवेम्बर",
	        "Dec_Abbr": "डिसेंबर",
	        "AM": "म.पू.",
	        "PM": "म.नं.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "जानेवारी",
	        "/feb(ruary)?/": "फेब्रुवारी",
	        "/mar(ch)?/": "मार्च",
	        "/apr(il)?/": "एप्रिल",
	        "/may/": "मे",
	        "/jun(e)?/": "जून",
	        "/jul(y)?/": "जुलै",
	        "/aug(ust)?/": "ऑगस्ट",
	        "/sep(t(ember)?)?/": "सप्टेंबर",
	        "/oct(ober)?/": "ऑक्टोबर",
	        "/nov(ember)?/": "नोवेम्बर",
	        "/dec(ember)?/": "डिसेंबर",
	        "/^su(n(day)?)?/": "^आ(य(.(तार)?)?)?",
	        "/^mo(n(day)?)?/": "^स(ोम(.(ार)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^म(ंगळ(.(ार)?)?)?",
	        "/^we(d(nesday)?)?/": "^ब(ुध(.(वार)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ब(िरे(.(स्तार)?)?)?",
	        "/^fr(i(day)?)?/": "^स(ुक्र(.(ार)?)?)?",
	        "/^sa(t(urday)?)?/": "^श(ेन(.(वार)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "kok-IN";


/***/ },
/* 230 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ky-KG
	 * Name: Kyrgyz (Kyrgyzstan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ky-KG"] = {
	        "name": "ky-KG",
	        "englishName": "Kyrgyz (Kyrgyzstan)",
	        "nativeName": "Кыргыз (Кыргызстан)",
	        "Sunday": "Жекшемби",
	        "Monday": "Дүйшөмбү",
	        "Tuesday": "Шейшемби",
	        "Wednesday": "Шаршемби",
	        "Thursday": "Бейшемби",
	        "Friday": "Жума",
	        "Saturday": "Ишемби",
	        "Sun": "Жш",
	        "Mon": "Дш",
	        "Tue": "Шш",
	        "Wed": "Шр",
	        "Thu": "Бш",
	        "Fri": "Жм",
	        "Sat": "Иш",
	        "Su": "Жш",
	        "Mo": "Дш",
	        "Tu": "Шш",
	        "We": "Шр",
	        "Th": "Бш",
	        "Fr": "Жм",
	        "Sa": "Иш",
	        "S_Sun_Initial": "Ж",
	        "M_Mon_Initial": "Д",
	        "T_Tue_Initial": "Ш",
	        "W_Wed_Initial": "Ш",
	        "T_Thu_Initial": "Б",
	        "F_Fri_Initial": "Ж",
	        "S_Sat_Initial": "И",
	        "January": "Январь",
	        "February": "Февраль",
	        "March": "Март",
	        "April": "Апрель",
	        "May": "Май",
	        "June": "Июнь",
	        "July": "Июль",
	        "August": "Август",
	        "September": "Сентябрь",
	        "October": "Октябрь",
	        "November": "Ноябрь",
	        "December": "Декабрь",
	        "Jan_Abbr": "Янв",
	        "Feb_Abbr": "Фев",
	        "Mar_Abbr": "Мар",
	        "Apr_Abbr": "Апр",
	        "May_Abbr": "Май",
	        "Jun_Abbr": "Июн",
	        "Jul_Abbr": "Июл",
	        "Aug_Abbr": "Авг",
	        "Sep_Abbr": "Сен",
	        "Oct_Abbr": "Окт",
	        "Nov_Abbr": "Ноя",
	        "Dec_Abbr": "Дек",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yy",
	        "dddd, MMMM dd, yyyy": "d'-'MMMM yyyy'-ж.'",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d'-'MMMM yyyy'-ж.' H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy'-ж.'",
	        "/jan(uary)?/": "янв(арь)?",
	        "/feb(ruary)?/": "фев(раль)?",
	        "/mar(ch)?/": "мар(т)?",
	        "/apr(il)?/": "апр(ель)?",
	        "/may/": "май",
	        "/jun(e)?/": "июн(ь)?",
	        "/jul(y)?/": "июл(ь)?",
	        "/aug(ust)?/": "авг(уст)?",
	        "/sep(t(ember)?)?/": "сен(тябрь)?",
	        "/oct(ober)?/": "окт(ябрь)?",
	        "/nov(ember)?/": "ноя(брь)?",
	        "/dec(ember)?/": "дек(абрь)?",
	        "/^su(n(day)?)?/": "^жекшемби",
	        "/^mo(n(day)?)?/": "^дүйшөмбү",
	        "/^tu(e(s(day)?)?)?/": "^шейшемби",
	        "/^we(d(nesday)?)?/": "^шаршемби",
	        "/^th(u(r(s(day)?)?)?)?/": "^бейшемби",
	        "/^fr(i(day)?)?/": "^жума",
	        "/^sa(t(urday)?)?/": "^ишемби",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ky-KG";


/***/ },
/* 231 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: lt-LT
	 * Name: Lithuanian (Lithuania)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["lt-LT"] = {
	        "name": "lt-LT",
	        "englishName": "Lithuanian (Lithuania)",
	        "nativeName": "lietuvių (Lietuva)",
	        "Sunday": "sekmadienis",
	        "Monday": "pirmadienis",
	        "Tuesday": "antradienis",
	        "Wednesday": "trečiadienis",
	        "Thursday": "ketvirtadienis",
	        "Friday": "penktadienis",
	        "Saturday": "šeštadienis",
	        "Sun": "Sk",
	        "Mon": "Pr",
	        "Tue": "An",
	        "Wed": "Tr",
	        "Thu": "Kt",
	        "Fri": "Pn",
	        "Sat": "Št",
	        "Su": "S",
	        "Mo": "P",
	        "Tu": "A",
	        "We": "T",
	        "Th": "K",
	        "Fr": "Pn",
	        "Sa": "Š",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "P",
	        "T_Tue_Initial": "A",
	        "W_Wed_Initial": "T",
	        "T_Thu_Initial": "K",
	        "F_Fri_Initial": "P",
	        "S_Sat_Initial": "Š",
	        "January": "sausis",
	        "February": "vasaris",
	        "March": "kovas",
	        "April": "balandis",
	        "May": "gegužė",
	        "June": "birželis",
	        "July": "liepa",
	        "August": "rugpjūtis",
	        "September": "rugsėjis",
	        "October": "spalis",
	        "November": "lapkritis",
	        "December": "gruodis",
	        "Jan_Abbr": "Sau",
	        "Feb_Abbr": "Vas",
	        "Mar_Abbr": "Kov",
	        "Apr_Abbr": "Bal",
	        "May_Abbr": "Geg",
	        "Jun_Abbr": "Bir",
	        "Jul_Abbr": "Lie",
	        "Aug_Abbr": "Rgp",
	        "Sep_Abbr": "Rgs",
	        "Oct_Abbr": "Spl",
	        "Nov_Abbr": "Lap",
	        "Dec_Abbr": "Grd",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy.MM.dd",
	        "dddd, MMMM dd, yyyy": "yyyy 'm.' MMMM d 'd.'",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy 'm.' MMMM d 'd.' HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM d 'd.'",
	        "MMMM, yyyy": "yyyy 'm.' MMMM",
	        "/jan(uary)?/": "sau(sis)?",
	        "/feb(ruary)?/": "vas(aris)?",
	        "/mar(ch)?/": "kov(as)?",
	        "/apr(il)?/": "bal(andis)?",
	        "/may/": "geg(užė)?",
	        "/jun(e)?/": "bir(želis)?",
	        "/jul(y)?/": "lie(pa)?",
	        "/aug(ust)?/": "rugpjūtis",
	        "/sep(t(ember)?)?/": "rugsėjis",
	        "/oct(ober)?/": "spalis",
	        "/nov(ember)?/": "lap(kritis)?",
	        "/dec(ember)?/": "gruodis",
	        "/^su(n(day)?)?/": "^s(k(kmadienis)?)?",
	        "/^mo(n(day)?)?/": "^p(r(rmadienis)?)?",
	        "/^tu(e(s(day)?)?)?/": "^a(n(tradienis)?)?",
	        "/^we(d(nesday)?)?/": "^t(r(ečiadienis)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^k(t(tvirtadienis)?)?",
	        "/^fr(i(day)?)?/": "^penktadienis",
	        "/^sa(t(urday)?)?/": "^š(t(štadienis)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "lt-LT";


/***/ },
/* 232 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: lv-LV
	 * Name: Latvian (Latvia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["lv-LV"] = {
	        "name": "lv-LV",
	        "englishName": "Latvian (Latvia)",
	        "nativeName": "latviešu (Latvija)",
	        "Sunday": "svētdiena",
	        "Monday": "pirmdiena",
	        "Tuesday": "otrdiena",
	        "Wednesday": "trešdiena",
	        "Thursday": "ceturtdiena",
	        "Friday": "piektdiena",
	        "Saturday": "sestdiena",
	        "Sun": "Sv",
	        "Mon": "Pr",
	        "Tue": "Ot",
	        "Wed": "Tr",
	        "Thu": "Ce",
	        "Fri": "Pk",
	        "Sat": "Se",
	        "Su": "Sv",
	        "Mo": "Pr",
	        "Tu": "Ot",
	        "We": "Tr",
	        "Th": "Ce",
	        "Fr": "Pk",
	        "Sa": "Se",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "P",
	        "T_Tue_Initial": "O",
	        "W_Wed_Initial": "T",
	        "T_Thu_Initial": "C",
	        "F_Fri_Initial": "P",
	        "S_Sat_Initial": "S",
	        "January": "janvāris",
	        "February": "februāris",
	        "March": "marts",
	        "April": "aprīlis",
	        "May": "maijs",
	        "June": "jūnijs",
	        "July": "jūlijs",
	        "August": "augusts",
	        "September": "septembris",
	        "October": "oktobris",
	        "November": "novembris",
	        "December": "decembris",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mai",
	        "Jun_Abbr": "Jūn",
	        "Jul_Abbr": "Jūl",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy.MM.dd.",
	        "dddd, MMMM dd, yyyy": "dddd, yyyy'. gada 'd. MMMM",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, yyyy'. gada 'd. MMMM H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "yyyy. MMMM",
	        "/jan(uary)?/": "jan(vāris)?",
	        "/feb(ruary)?/": "feb(ruāris)?",
	        "/mar(ch)?/": "mar(ts)?",
	        "/apr(il)?/": "apr(īlis)?",
	        "/may/": "mai(js)?",
	        "/jun(e)?/": "jūn(ijs)?",
	        "/jul(y)?/": "jūl(ijs)?",
	        "/aug(ust)?/": "aug(usts)?",
	        "/sep(t(ember)?)?/": "sep(tembris)?",
	        "/oct(ober)?/": "okt(obris)?",
	        "/nov(ember)?/": "nov(embris)?",
	        "/dec(ember)?/": "dec(embris)?",
	        "/^su(n(day)?)?/": "^svētdiena",
	        "/^mo(n(day)?)?/": "^pirmdiena",
	        "/^tu(e(s(day)?)?)?/": "^otrdiena",
	        "/^we(d(nesday)?)?/": "^trešdiena",
	        "/^th(u(r(s(day)?)?)?)?/": "^ceturtdiena",
	        "/^fr(i(day)?)?/": "^piektdiena",
	        "/^sa(t(urday)?)?/": "^sestdiena",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "lv-LV";


/***/ },
/* 233 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: mi-NZ
	 * Name: Maori (New Zealand)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["mi-NZ"] = {
	        "name": "mi-NZ",
	        "englishName": "Maori (New Zealand)",
	        "nativeName": "Reo Māori (Aotearoa)",
	        "Sunday": "Rātapu",
	        "Monday": "Mane",
	        "Tuesday": "Tūrei",
	        "Wednesday": "Wenerei",
	        "Thursday": "Tāite",
	        "Friday": "Paraire",
	        "Saturday": "Hātarei",
	        "Sun": "Ta",
	        "Mon": "Ma",
	        "Tue": "Tū",
	        "Wed": "We",
	        "Thu": "Tāi",
	        "Fri": "Pa",
	        "Sat": "Hā",
	        "Su": "Ta",
	        "Mo": "Ma",
	        "Tu": "Tū",
	        "We": "We",
	        "Th": "Tāi",
	        "Fr": "Pa",
	        "Sa": "Hā",
	        "S_Sun_Initial": "T",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "P",
	        "S_Sat_Initial": "H",
	        "January": "Kohi-tātea",
	        "February": "Hui-tanguru",
	        "March": "Poutū-te-rangi",
	        "April": "Paenga-whāwhā",
	        "May": "Haratua",
	        "June": "Pipiri",
	        "July": "Hōngoingoi",
	        "August": "Here-turi-kōkā",
	        "September": "Mahuru",
	        "October": "Whiringa-ā-nuku",
	        "November": "Whiringa-ā-rangi",
	        "December": "Hakihea",
	        "Jan_Abbr": "Kohi",
	        "Feb_Abbr": "Hui",
	        "Mar_Abbr": "Pou",
	        "Apr_Abbr": "Pae",
	        "May_Abbr": "Hara",
	        "Jun_Abbr": "Pipi",
	        "Jul_Abbr": "Hōngoi",
	        "Aug_Abbr": "Here",
	        "Sep_Abbr": "Mahu",
	        "Oct_Abbr": "Whi-nu",
	        "Nov_Abbr": "Whi-ra",
	        "Dec_Abbr": "Haki",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d MMMM yyyy",
	        "h:mm tt": "h:mm:ss tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d MMMM yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "kohi(-tātea)?",
	        "/feb(ruary)?/": "hui(-tanguru)?",
	        "/mar(ch)?/": "pou(tū-te-rangi)?",
	        "/apr(il)?/": "pae(nga-whāwhā)?",
	        "/may/": "hara(tua)?",
	        "/jun(e)?/": "pipi(ri)?",
	        "/jul(y)?/": "hōngoi(ngoi)?",
	        "/aug(ust)?/": "here(-turi-kōkā)?",
	        "/sep(t(ember)?)?/": "mahu(ru)?",
	        "/oct(ober)?/": "whiringa-ā-nuku",
	        "/nov(ember)?/": "whiringa-ā-rangi",
	        "/dec(ember)?/": "haki(hea)?",
	        "/^su(n(day)?)?/": "^rātapu",
	        "/^mo(n(day)?)?/": "^mane",
	        "/^tu(e(s(day)?)?)?/": "^tūrei",
	        "/^we(d(nesday)?)?/": "^wenerei",
	        "/^th(u(r(s(day)?)?)?)?/": "^tāite",
	        "/^fr(i(day)?)?/": "^paraire",
	        "/^sa(t(urday)?)?/": "^hātarei",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "mi-NZ";


/***/ },
/* 234 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: mk-MK
	 * Name: Macedonian (Former Yugoslav Republic of Macedonia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["mk-MK"] = {
	        "name": "mk-MK",
	        "englishName": "Macedonian (Former Yugoslav Republic of Macedonia)",
	        "nativeName": "македонски јазик (Македонија)",
	        "Sunday": "недела",
	        "Monday": "понеделник",
	        "Tuesday": "вторник",
	        "Wednesday": "среда",
	        "Thursday": "четврток",
	        "Friday": "петок",
	        "Saturday": "сабота",
	        "Sun": "нед",
	        "Mon": "пон",
	        "Tue": "втр",
	        "Wed": "срд",
	        "Thu": "чет",
	        "Fri": "пет",
	        "Sat": "саб",
	        "Su": "не",
	        "Mo": "по",
	        "Tu": "вт",
	        "We": "ср",
	        "Th": "че",
	        "Fr": "пе",
	        "Sa": "са",
	        "S_Sun_Initial": "н",
	        "M_Mon_Initial": "п",
	        "T_Tue_Initial": "в",
	        "W_Wed_Initial": "с",
	        "T_Thu_Initial": "ч",
	        "F_Fri_Initial": "п",
	        "S_Sat_Initial": "с",
	        "January": "јануари",
	        "February": "февруари",
	        "March": "март",
	        "April": "април",
	        "May": "мај",
	        "June": "јуни",
	        "July": "јули",
	        "August": "август",
	        "September": "септември",
	        "October": "октомври",
	        "November": "ноември",
	        "December": "декември",
	        "Jan_Abbr": "јан",
	        "Feb_Abbr": "фев",
	        "Mar_Abbr": "мар",
	        "Apr_Abbr": "апр",
	        "May_Abbr": "мај",
	        "Jun_Abbr": "јун",
	        "Jul_Abbr": "јул",
	        "Aug_Abbr": "авг",
	        "Sep_Abbr": "сеп",
	        "Oct_Abbr": "окт",
	        "Nov_Abbr": "ное",
	        "Dec_Abbr": "дек",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "јан(уари)?",
	        "/feb(ruary)?/": "фев(руари)?",
	        "/mar(ch)?/": "мар(т)?",
	        "/apr(il)?/": "апр(ил)?",
	        "/may/": "мај",
	        "/jun(e)?/": "јун(и)?",
	        "/jul(y)?/": "јул(и)?",
	        "/aug(ust)?/": "авг(уст)?",
	        "/sep(t(ember)?)?/": "сеп(тември)?",
	        "/oct(ober)?/": "окт(омври)?",
	        "/nov(ember)?/": "ное(мври)?",
	        "/dec(ember)?/": "дек(ември)?",
	        "/^su(n(day)?)?/": "^не(д(ела)?)?",
	        "/^mo(n(day)?)?/": "^по(н(еделник)?)?",
	        "/^tu(e(s(day)?)?)?/": "^вт(р(рник)?)?",
	        "/^we(d(nesday)?)?/": "^ср(д(да)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^че(т(врток)?)?",
	        "/^fr(i(day)?)?/": "^пе(т(ок)?)?",
	        "/^sa(t(urday)?)?/": "^са(б(ота)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "mk-MK";


/***/ },
/* 235 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: mn-MN
	 * Name: Mongolian (Cyrillic, Mongolia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["mn-MN"] = {
	        "name": "mn-MN",
	        "englishName": "Mongolian (Cyrillic, Mongolia)",
	        "nativeName": "Монгол хэл (Монгол улс)",
	        "Sunday": "Ням",
	        "Monday": "Даваа",
	        "Tuesday": "Мягмар",
	        "Wednesday": "Лхагва",
	        "Thursday": "Пүрэв",
	        "Friday": "Баасан",
	        "Saturday": "Бямба",
	        "Sun": "Ня",
	        "Mon": "Да",
	        "Tue": "Мя",
	        "Wed": "Лх",
	        "Thu": "Пү",
	        "Fri": "Ба",
	        "Sat": "Бя",
	        "Su": "Ня",
	        "Mo": "Да",
	        "Tu": "Мя",
	        "We": "Лх",
	        "Th": "Пү",
	        "Fr": "Ба",
	        "Sa": "Бя",
	        "S_Sun_Initial": "Н",
	        "M_Mon_Initial": "Д",
	        "T_Tue_Initial": "М",
	        "W_Wed_Initial": "Л",
	        "T_Thu_Initial": "П",
	        "F_Fri_Initial": "Б",
	        "S_Sat_Initial": "Б",
	        "January": "1 дүгээр сар",
	        "February": "2 дугаар сар",
	        "March": "3 дугаар сар",
	        "April": "4 дүгээр сар",
	        "May": "5 дугаар сар",
	        "June": "6 дугаар сар",
	        "July": "7 дугаар сар",
	        "August": "8 дугаар сар",
	        "September": "9 дүгээр сар",
	        "October": "10 дугаар сар",
	        "November": "11 дүгээр сар",
	        "December": "12 дугаар сар",
	        "Jan_Abbr": "I",
	        "Feb_Abbr": "II",
	        "Mar_Abbr": "III",
	        "Apr_Abbr": "IV",
	        "May_Abbr": "V",
	        "Jun_Abbr": "VI",
	        "Jul_Abbr": "VII",
	        "Aug_Abbr": "VШ",
	        "Sep_Abbr": "IX",
	        "Oct_Abbr": "X",
	        "Nov_Abbr": "XI",
	        "Dec_Abbr": "XII",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yy.MM.dd",
	        "dddd, MMMM dd, yyyy": "yyyy 'оны' MMMM d",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy 'оны' MMMM d H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "yyyy 'он' MMMM",
	        "/jan(uary)?/": "1 дүгээр сар",
	        "/feb(ruary)?/": "2 дугаар сар",
	        "/mar(ch)?/": "3 дугаар сар",
	        "/apr(il)?/": "4 дүгээр сар",
	        "/may/": "5 дугаар сар",
	        "/jun(e)?/": "6 дугаар сар",
	        "/jul(y)?/": "7 дугаар сар",
	        "/aug(ust)?/": "8 дугаар сар",
	        "/sep(t(ember)?)?/": "9 дүгээр сар",
	        "/oct(ober)?/": "10 дугаар сар",
	        "/nov(ember)?/": "11 дүгээр сар",
	        "/dec(ember)?/": "12 дугаар сар",
	        "/^su(n(day)?)?/": "^ням",
	        "/^mo(n(day)?)?/": "^даваа",
	        "/^tu(e(s(day)?)?)?/": "^мягмар",
	        "/^we(d(nesday)?)?/": "^лхагва",
	        "/^th(u(r(s(day)?)?)?)?/": "^пүрэв",
	        "/^fr(i(day)?)?/": "^баасан",
	        "/^sa(t(urday)?)?/": "^бямба",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "mn-MN";


/***/ },
/* 236 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: mr-IN
	 * Name: Marathi (India)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["mr-IN"] = {
	        "name": "mr-IN",
	        "englishName": "Marathi (India)",
	        "nativeName": "मराठी (भारत)",
	        "Sunday": "रविवार",
	        "Monday": "सोमवार",
	        "Tuesday": "मंगळवार",
	        "Wednesday": "बुधवार",
	        "Thursday": "गुरुवार",
	        "Friday": "शुक्रवार",
	        "Saturday": "शनिवार",
	        "Sun": "रवि.",
	        "Mon": "सोम.",
	        "Tue": "मंगळ.",
	        "Wed": "बुध.",
	        "Thu": "गुरु.",
	        "Fri": "शुक्र.",
	        "Sat": "शनि.",
	        "Su": "र",
	        "Mo": "स",
	        "Tu": "म",
	        "We": "ब",
	        "Th": "ग",
	        "Fr": "श",
	        "Sa": "श",
	        "S_Sun_Initial": "र",
	        "M_Mon_Initial": "स",
	        "T_Tue_Initial": "म",
	        "W_Wed_Initial": "ब",
	        "T_Thu_Initial": "ग",
	        "F_Fri_Initial": "श",
	        "S_Sat_Initial": "श",
	        "January": "जानेवारी",
	        "February": "फेब्रुवारी",
	        "March": "मार्च",
	        "April": "एप्रिल",
	        "May": "मे",
	        "June": "जून",
	        "July": "जुलै",
	        "August": "ऑगस्ट",
	        "September": "सप्टेंबर",
	        "October": "ऑक्टोबर",
	        "November": "नोव्हेंबर",
	        "December": "डिसेंबर",
	        "Jan_Abbr": "जाने.",
	        "Feb_Abbr": "फेब्रु.",
	        "Mar_Abbr": "मार्च",
	        "Apr_Abbr": "एप्रिल",
	        "May_Abbr": "मे",
	        "Jun_Abbr": "जून",
	        "Jul_Abbr": "जुलै",
	        "Aug_Abbr": "ऑगस्ट",
	        "Sep_Abbr": "सप्टें.",
	        "Oct_Abbr": "ऑक्टो.",
	        "Nov_Abbr": "नोव्हें.",
	        "Dec_Abbr": "डिसें.",
	        "AM": "म.पू.",
	        "PM": "म.नं.",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "जाने(.(वारी)?)?",
	        "/feb(ruary)?/": "फेब्रु(.(वारी)?)?",
	        "/mar(ch)?/": "मार्च",
	        "/apr(il)?/": "एप्रिल",
	        "/may/": "मे",
	        "/jun(e)?/": "जून",
	        "/jul(y)?/": "जुलै",
	        "/aug(ust)?/": "ऑगस्ट",
	        "/sep(t(ember)?)?/": "सप्टें(.(बर)?)?",
	        "/oct(ober)?/": "ऑक्टो(.(बर)?)?",
	        "/nov(ember)?/": "नोव्हें(.(बर)?)?",
	        "/dec(ember)?/": "डिसें(.(बर)?)?",
	        "/^su(n(day)?)?/": "^र(वि(.(वार)?)?)?",
	        "/^mo(n(day)?)?/": "^स(ोम(.(वार)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^म(ंगळ(.(वार)?)?)?",
	        "/^we(d(nesday)?)?/": "^ब(ुध(.(वार)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ग(ुरु(.(वार)?)?)?",
	        "/^fr(i(day)?)?/": "^श(ुक्र(.(वार)?)?)?",
	        "/^sa(t(urday)?)?/": "^श(नि(.(वार)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "mr-IN";


/***/ },
/* 237 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ms-BN
	 * Name: Malay (Brunei Darussalam)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ms-BN"] = {
	        "name": "ms-BN",
	        "englishName": "Malay (Brunei Darussalam)",
	        "nativeName": "Bahasa Malaysia (Brunei Darussalam)",
	        "Sunday": "Ahad",
	        "Monday": "Isnin",
	        "Tuesday": "Selasa",
	        "Wednesday": "Rabu",
	        "Thursday": "Khamis",
	        "Friday": "Jumaat",
	        "Saturday": "Sabtu",
	        "Sun": "Ahad",
	        "Mon": "Isnin",
	        "Tue": "Sel",
	        "Wed": "Rabu",
	        "Thu": "Khamis",
	        "Fri": "Jumaat",
	        "Sat": "Sabtu",
	        "Su": "A",
	        "Mo": "I",
	        "Tu": "S",
	        "We": "R",
	        "Th": "K",
	        "Fr": "J",
	        "Sa": "S",
	        "S_Sun_Initial": "A",
	        "M_Mon_Initial": "I",
	        "T_Tue_Initial": "S",
	        "W_Wed_Initial": "R",
	        "T_Thu_Initial": "K",
	        "F_Fri_Initial": "J",
	        "S_Sat_Initial": "S",
	        "January": "Januari",
	        "February": "Februari",
	        "March": "Mac",
	        "April": "April",
	        "May": "Mei",
	        "June": "Jun",
	        "July": "Julai",
	        "August": "Ogos",
	        "September": "September",
	        "October": "Oktober",
	        "November": "November",
	        "December": "Disember",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mac",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mei",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Ogos",
	        "Sep_Abbr": "Sept",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dis",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uari)?",
	        "/feb(ruary)?/": "feb(ruari)?",
	        "/mar(ch)?/": "mac",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mei",
	        "/jun(e)?/": "jun",
	        "/jul(y)?/": "jul(ai)?",
	        "/aug(ust)?/": "ogos",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dis(ember)?",
	        "/^su(n(day)?)?/": "^a(1)?",
	        "/^mo(n(day)?)?/": "^i(1)?",
	        "/^tu(e(s(day)?)?)?/": "^s(el(asa)?)?",
	        "/^we(d(nesday)?)?/": "^r(1)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^k(1)?",
	        "/^fr(i(day)?)?/": "^j(1)?",
	        "/^sa(t(urday)?)?/": "^s(1)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ms-BN";


/***/ },
/* 238 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ms-MY
	 * Name: Malay (Malaysia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ms-MY"] = {
	        "name": "ms-MY",
	        "englishName": "Malay (Malaysia)",
	        "nativeName": "Bahasa Malaysia (Malaysia)",
	        "Sunday": "Ahad",
	        "Monday": "Isnin",
	        "Tuesday": "Selasa",
	        "Wednesday": "Rabu",
	        "Thursday": "Khamis",
	        "Friday": "Jumaat",
	        "Saturday": "Sabtu",
	        "Sun": "Ahad",
	        "Mon": "Isnin",
	        "Tue": "Sel",
	        "Wed": "Rabu",
	        "Thu": "Khamis",
	        "Fri": "Jumaat",
	        "Sat": "Sabtu",
	        "Su": "A",
	        "Mo": "I",
	        "Tu": "S",
	        "We": "R",
	        "Th": "K",
	        "Fr": "J",
	        "Sa": "S",
	        "S_Sun_Initial": "A",
	        "M_Mon_Initial": "I",
	        "T_Tue_Initial": "S",
	        "W_Wed_Initial": "R",
	        "T_Thu_Initial": "K",
	        "F_Fri_Initial": "J",
	        "S_Sat_Initial": "S",
	        "January": "Januari",
	        "February": "Februari",
	        "March": "Mac",
	        "April": "April",
	        "May": "Mei",
	        "June": "Jun",
	        "July": "Julai",
	        "August": "Ogos",
	        "September": "September",
	        "October": "Oktober",
	        "November": "November",
	        "December": "Disember",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mac",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mei",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Ogos",
	        "Sep_Abbr": "Sept",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dis",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uari)?",
	        "/feb(ruary)?/": "feb(ruari)?",
	        "/mar(ch)?/": "mac",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mei",
	        "/jun(e)?/": "jun",
	        "/jul(y)?/": "jul(ai)?",
	        "/aug(ust)?/": "ogos",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dis(ember)?",
	        "/^su(n(day)?)?/": "^a(1)?",
	        "/^mo(n(day)?)?/": "^i(1)?",
	        "/^tu(e(s(day)?)?)?/": "^s(el(asa)?)?",
	        "/^we(d(nesday)?)?/": "^r(1)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^k(1)?",
	        "/^fr(i(day)?)?/": "^j(1)?",
	        "/^sa(t(urday)?)?/": "^s(1)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ms-MY";


/***/ },
/* 239 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: mt-MT
	 * Name: Maltese (Malta)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["mt-MT"] = {
	        "name": "mt-MT",
	        "englishName": "Maltese (Malta)",
	        "nativeName": "Malti (Malta)",
	        "Sunday": "Il-Ħadd",
	        "Monday": "It-Tnejn",
	        "Tuesday": "It-Tlieta",
	        "Wednesday": "L-Erbgħa",
	        "Thursday": "Il-Ħamis",
	        "Friday": "Il-Ġimgħa",
	        "Saturday": "Is-Sibt",
	        "Sun": "Ħad",
	        "Mon": "Tne",
	        "Tue": "Tli",
	        "Wed": "Erb",
	        "Thu": "Ħam",
	        "Fri": "Ġim",
	        "Sat": "Sib",
	        "Su": "Ħad",
	        "Mo": "Tne",
	        "Tu": "Tli",
	        "We": "Erb",
	        "Th": "Ħam",
	        "Fr": "Ġim",
	        "Sa": "Sib",
	        "S_Sun_Initial": "Ħ",
	        "M_Mon_Initial": "T",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "E",
	        "T_Thu_Initial": "Ħ",
	        "F_Fri_Initial": "Ġ",
	        "S_Sat_Initial": "S",
	        "January": "Jannar",
	        "February": "Frar",
	        "March": "Marzu",
	        "April": "April",
	        "May": "Mejju",
	        "June": "Ġunju",
	        "July": "Lulju",
	        "August": "Awissu",
	        "September": "Settembru",
	        "October": "Ottubru",
	        "November": "Novembru",
	        "December": "Diċembru",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Fra",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Mej",
	        "Jun_Abbr": "Ġun",
	        "Jul_Abbr": "Lul",
	        "Aug_Abbr": "Awi",
	        "Sep_Abbr": "Set",
	        "Oct_Abbr": "Ott",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Diċ",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d' ta' 'MMMM yyyy",
	        "h:mm tt": "HH:mm:ss",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d' ta' 'MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(nar)?",
	        "/feb(ruary)?/": "fra(r)?",
	        "/mar(ch)?/": "mar(zu)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mej(ju)?",
	        "/jun(e)?/": "ġun(ju)?",
	        "/jul(y)?/": "lul(ju)?",
	        "/aug(ust)?/": "awi(ssu)?",
	        "/sep(t(ember)?)?/": "set(tembru)?",
	        "/oct(ober)?/": "ott(ubru)?",
	        "/nov(ember)?/": "nov(embru)?",
	        "/dec(ember)?/": "diċ(embru)?",
	        "/^su(n(day)?)?/": "^il-ħadd",
	        "/^mo(n(day)?)?/": "^it-tnejn",
	        "/^tu(e(s(day)?)?)?/": "^it-tlieta",
	        "/^we(d(nesday)?)?/": "^l-erbgħa",
	        "/^th(u(r(s(day)?)?)?)?/": "^il-ħamis",
	        "/^fr(i(day)?)?/": "^il-ġimgħa",
	        "/^sa(t(urday)?)?/": "^is-sibt",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "mt-MT";


/***/ },
/* 240 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: nb-NO
	 * Name: Norwegian, Bokmål (Norway)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["nb-NO"] = {
	        "name": "nb-NO",
	        "englishName": "Norwegian, Bokmål (Norway)",
	        "nativeName": "norsk, bokmål (Norge)",
	        "Sunday": "søndag",
	        "Monday": "mandag",
	        "Tuesday": "tirsdag",
	        "Wednesday": "onsdag",
	        "Thursday": "torsdag",
	        "Friday": "fredag",
	        "Saturday": "lørdag",
	        "Sun": "sø",
	        "Mon": "ma",
	        "Tue": "ti",
	        "Wed": "on",
	        "Thu": "to",
	        "Fri": "fr",
	        "Sat": "lø",
	        "Su": "sø",
	        "Mo": "ma",
	        "Tu": "ti",
	        "We": "on",
	        "Th": "to",
	        "Fr": "fr",
	        "Sa": "lø",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "t",
	        "W_Wed_Initial": "o",
	        "T_Thu_Initial": "t",
	        "F_Fri_Initial": "f",
	        "S_Sat_Initial": "l",
	        "January": "januar",
	        "February": "februar",
	        "March": "mars",
	        "April": "april",
	        "May": "mai",
	        "June": "juni",
	        "July": "juli",
	        "August": "august",
	        "September": "september",
	        "October": "oktober",
	        "November": "november",
	        "December": "desember",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "aug",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "des",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "mar(s)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mai",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "des(ember)?",
	        "/^su(n(day)?)?/": "^søndag",
	        "/^mo(n(day)?)?/": "^mandag",
	        "/^tu(e(s(day)?)?)?/": "^tirsdag",
	        "/^we(d(nesday)?)?/": "^onsdag",
	        "/^th(u(r(s(day)?)?)?)?/": "^torsdag",
	        "/^fr(i(day)?)?/": "^fredag",
	        "/^sa(t(urday)?)?/": "^lørdag",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "nb-NO";


/***/ },
/* 241 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: nl-BE
	 * Name: Dutch (Belgium)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["nl-BE"] = {
	        "name": "nl-BE",
	        "englishName": "Dutch (Belgium)",
	        "nativeName": "Nederlands (België)",
	        "Sunday": "zondag",
	        "Monday": "maandag",
	        "Tuesday": "dinsdag",
	        "Wednesday": "woensdag",
	        "Thursday": "donderdag",
	        "Friday": "vrijdag",
	        "Saturday": "zaterdag",
	        "Sun": "zo",
	        "Mon": "ma",
	        "Tue": "di",
	        "Wed": "wo",
	        "Thu": "do",
	        "Fri": "vr",
	        "Sat": "za",
	        "Su": "zo",
	        "Mo": "ma",
	        "Tu": "di",
	        "We": "wo",
	        "Th": "do",
	        "Fr": "vr",
	        "Sa": "za",
	        "S_Sun_Initial": "z",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "d",
	        "W_Wed_Initial": "w",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "z",
	        "January": "januari",
	        "February": "februari",
	        "March": "maart",
	        "April": "april",
	        "May": "mei",
	        "June": "juni",
	        "July": "juli",
	        "August": "augustus",
	        "September": "september",
	        "October": "oktober",
	        "November": "november",
	        "December": "december",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mrt",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "mei",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "aug",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd d MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd d MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uari)?",
	        "/feb(ruary)?/": "feb(ruari)?",
	        "/mar(ch)?/": "maart",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mei",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ustus)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^zondag",
	        "/^mo(n(day)?)?/": "^maandag",
	        "/^tu(e(s(day)?)?)?/": "^dinsdag",
	        "/^we(d(nesday)?)?/": "^woensdag",
	        "/^th(u(r(s(day)?)?)?)?/": "^donderdag",
	        "/^fr(i(day)?)?/": "^vrijdag",
	        "/^sa(t(urday)?)?/": "^zaterdag",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "nl-BE";


/***/ },
/* 242 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: nl-NL
	 * Name: Dutch (Netherlands)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["nl-NL"] = {
	        "name": "nl-NL",
	        "englishName": "Dutch (Netherlands)",
	        "nativeName": "Nederlands (Nederland)",
	        "Sunday": "zondag",
	        "Monday": "maandag",
	        "Tuesday": "dinsdag",
	        "Wednesday": "woensdag",
	        "Thursday": "donderdag",
	        "Friday": "vrijdag",
	        "Saturday": "zaterdag",
	        "Sun": "zo",
	        "Mon": "ma",
	        "Tue": "di",
	        "Wed": "wo",
	        "Thu": "do",
	        "Fri": "vr",
	        "Sat": "za",
	        "Su": "zo",
	        "Mo": "ma",
	        "Tu": "di",
	        "We": "wo",
	        "Th": "do",
	        "Fr": "vr",
	        "Sa": "za",
	        "S_Sun_Initial": "z",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "d",
	        "W_Wed_Initial": "w",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "z",
	        "January": "januari",
	        "February": "februari",
	        "March": "maart",
	        "April": "april",
	        "May": "mei",
	        "June": "juni",
	        "July": "juli",
	        "August": "augustus",
	        "September": "september",
	        "October": "oktober",
	        "November": "november",
	        "December": "december",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mrt",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "mei",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "aug",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d-M-yyyy",
	        "dddd, MMMM dd, yyyy": "dddd d MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd d MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uari)?",
	        "/feb(ruary)?/": "feb(ruari)?",
	        "/mar(ch)?/": "maart",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mei",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ustus)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^zondag",
	        "/^mo(n(day)?)?/": "^maandag",
	        "/^tu(e(s(day)?)?)?/": "^dinsdag",
	        "/^we(d(nesday)?)?/": "^woensdag",
	        "/^th(u(r(s(day)?)?)?)?/": "^donderdag",
	        "/^fr(i(day)?)?/": "^vrijdag",
	        "/^sa(t(urday)?)?/": "^zaterdag",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "nl-NL";


/***/ },
/* 243 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: nn-NO
	 * Name: Norwegian, Nynorsk (Norway)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["nn-NO"] = {
	        "name": "nn-NO",
	        "englishName": "Norwegian, Nynorsk (Norway)",
	        "nativeName": "norsk, nynorsk (Noreg)",
	        "Sunday": "søndag",
	        "Monday": "måndag",
	        "Tuesday": "tysdag",
	        "Wednesday": "onsdag",
	        "Thursday": "torsdag",
	        "Friday": "fredag",
	        "Saturday": "laurdag",
	        "Sun": "sø",
	        "Mon": "må",
	        "Tue": "ty",
	        "Wed": "on",
	        "Thu": "to",
	        "Fri": "fr",
	        "Sat": "la",
	        "Su": "sø",
	        "Mo": "må",
	        "Tu": "ty",
	        "We": "on",
	        "Th": "to",
	        "Fr": "fr",
	        "Sa": "la",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "t",
	        "W_Wed_Initial": "o",
	        "T_Thu_Initial": "t",
	        "F_Fri_Initial": "f",
	        "S_Sat_Initial": "l",
	        "January": "januar",
	        "February": "februar",
	        "March": "mars",
	        "April": "april",
	        "May": "mai",
	        "June": "juni",
	        "July": "juli",
	        "August": "august",
	        "September": "september",
	        "October": "oktober",
	        "November": "november",
	        "December": "desember",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "aug",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "des",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "mar(s)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "mai",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "des(ember)?",
	        "/^su(n(day)?)?/": "^søndag",
	        "/^mo(n(day)?)?/": "^måndag",
	        "/^tu(e(s(day)?)?)?/": "^tysdag",
	        "/^we(d(nesday)?)?/": "^onsdag",
	        "/^th(u(r(s(day)?)?)?)?/": "^torsdag",
	        "/^fr(i(day)?)?/": "^fredag",
	        "/^sa(t(urday)?)?/": "^laurdag",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "nn-NO";


/***/ },
/* 244 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ns-ZA
	 * Name: Northern Sotho (South Africa)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ns-ZA"] = {
	        "name": "ns-ZA",
	        "englishName": "Northern Sotho (South Africa)",
	        "nativeName": "Sesotho sa Leboa (Afrika Borwa)",
	        "Sunday": "Lamorena",
	        "Monday": "Mošupologo",
	        "Tuesday": "Labobedi",
	        "Wednesday": "Laboraro",
	        "Thursday": "Labone",
	        "Friday": "Labohlano",
	        "Saturday": "Mokibelo",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Sun",
	        "Mo": "Mon",
	        "Tu": "Tue",
	        "We": "Wed",
	        "Th": "Thu",
	        "Fr": "Fri",
	        "Sa": "Sat",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "Pherekgong",
	        "February": "Hlakola",
	        "March": "Mopitlo",
	        "April": "Moranang",
	        "May": "Mosegamanye",
	        "June": "Ngoatobošego",
	        "July": "Phuphu",
	        "August": "Phato",
	        "September": "Lewedi",
	        "October": "Diphalana",
	        "November": "Dibatsela",
	        "December": "Manthole",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/MM/dd",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "hh:mm:ss tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "pherekgong",
	        "/feb(ruary)?/": "hlakola",
	        "/mar(ch)?/": "mopitlo",
	        "/apr(il)?/": "moranang",
	        "/may/": "mosegamanye",
	        "/jun(e)?/": "ngoatobošego",
	        "/jul(y)?/": "phuphu",
	        "/aug(ust)?/": "phato",
	        "/sep(t(ember)?)?/": "lewedi",
	        "/oct(ober)?/": "diphalana",
	        "/nov(ember)?/": "dibatsela",
	        "/dec(ember)?/": "manthole",
	        "/^su(n(day)?)?/": "^lamorena",
	        "/^mo(n(day)?)?/": "^mošupologo",
	        "/^tu(e(s(day)?)?)?/": "^labobedi",
	        "/^we(d(nesday)?)?/": "^laboraro",
	        "/^th(u(r(s(day)?)?)?)?/": "^labone",
	        "/^fr(i(day)?)?/": "^labohlano",
	        "/^sa(t(urday)?)?/": "^mokibelo",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ns-ZA";


/***/ },
/* 245 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: pa-IN
	 * Name: Punjabi (India)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["pa-IN"] = {
	        "name": "pa-IN",
	        "englishName": "Punjabi (India)",
	        "nativeName": "ਪੰਜਾਬੀ (ਭਾਰਤ)",
	        "Sunday": "ਐਤਵਾਰ",
	        "Monday": "ਸੋਮਵਾਰ",
	        "Tuesday": "ਮੰਗਲਵਾਰ",
	        "Wednesday": "ਬੁਧਵਾਰ",
	        "Thursday": "ਵੀਰਵਾਰ",
	        "Friday": "ਸ਼ੁੱਕਰਵਾਰ",
	        "Saturday": "ਸ਼ਨੀਚਰਵਾਰ",
	        "Sun": "ਐਤ.",
	        "Mon": "ਸੋਮ.",
	        "Tue": "ਮੰਗਲ.",
	        "Wed": "ਬੁਧ.",
	        "Thu": "ਵੀਰ.",
	        "Fri": "ਸ਼ੁਕਰ.",
	        "Sat": "ਸ਼ਨੀ.",
	        "Su": "ਐ",
	        "Mo": "ਸ",
	        "Tu": "ਮ",
	        "We": "ਬ",
	        "Th": "ਵ",
	        "Fr": "ਸ਼",
	        "Sa": "ਸ਼",
	        "S_Sun_Initial": "ਐ",
	        "M_Mon_Initial": "ਸ",
	        "T_Tue_Initial": "ਮ",
	        "W_Wed_Initial": "ਬ",
	        "T_Thu_Initial": "ਵ",
	        "F_Fri_Initial": "ਸ਼",
	        "S_Sat_Initial": "ਸ਼",
	        "January": "ਜਨਵਰੀ",
	        "February": "ਫ਼ਰਵਰੀ",
	        "March": "ਮਾਰਚ",
	        "April": "ਅਪ੍ਰੈਲ",
	        "May": "ਮਈ",
	        "June": "ਜੂਨ",
	        "July": "ਜੁਲਾਈ",
	        "August": "ਅਗਸਤ",
	        "September": "ਸਤੰਬਰ",
	        "October": "ਅਕਤੂਬਰ",
	        "November": "ਨਵੰਬਰ",
	        "December": "ਦਸੰਬਰ",
	        "Jan_Abbr": "ਜਨਵਰੀ",
	        "Feb_Abbr": "ਫ਼ਰਵਰੀ",
	        "Mar_Abbr": "ਮਾਰਚ",
	        "Apr_Abbr": "ਅਪ੍ਰੈਲ",
	        "May_Abbr": "ਮਈ",
	        "Jun_Abbr": "ਜੂਨ",
	        "Jul_Abbr": "ਜੁਲਾਈ",
	        "Aug_Abbr": "ਅਗਸਤ",
	        "Sep_Abbr": "ਸਤੰਬਰ",
	        "Oct_Abbr": "ਅਕਤੂਬਰ",
	        "Nov_Abbr": "ਨਵੰਬਰ",
	        "Dec_Abbr": "ਦਸੰਬਰ",
	        "AM": "ਸਵੇਰੇ",
	        "PM": "ਸ਼ਾਮ",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy dddd",
	        "h:mm tt": "tt hh:mm",
	        "h:mm:ss tt": "tt hh:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy dddd tt hh:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "ਜਨਵਰੀ",
	        "/feb(ruary)?/": "ਫ਼ਰਵਰੀ",
	        "/mar(ch)?/": "ਮਾਰਚ",
	        "/apr(il)?/": "ਅਪ੍ਰੈਲ",
	        "/may/": "ਮਈ",
	        "/jun(e)?/": "ਜੂਨ",
	        "/jul(y)?/": "ਜੁਲਾਈ",
	        "/aug(ust)?/": "ਅਗਸਤ",
	        "/sep(t(ember)?)?/": "ਸਤੰਬਰ",
	        "/oct(ober)?/": "ਅਕਤੂਬਰ",
	        "/nov(ember)?/": "ਨਵੰਬਰ",
	        "/dec(ember)?/": "ਦਸੰਬਰ",
	        "/^su(n(day)?)?/": "^ਐ(ਤ(.(ਵਾਰ)?)?)?",
	        "/^mo(n(day)?)?/": "^ਸ(ੋਮ(.(ਵਾਰ)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ਮ(ੰਗਲ(.(ਵਾਰ)?)?)?",
	        "/^we(d(nesday)?)?/": "^ਬ(ੁਧ(.(ਵਾਰ)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ਵ(ੀਰ(.(ਵਾਰ)?)?)?",
	        "/^fr(i(day)?)?/": "^ਸ਼(ੁਕਰ(.(ਰਵਾਰ)?)?)?",
	        "/^sa(t(urday)?)?/": "^ਸ਼(ਨੀ(.(ਚਰਵਾਰ)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "pa-IN";


/***/ },
/* 246 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: pl-PL
	 * Name: Polish (Poland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["pl-PL"] = {
	        "name": "pl-PL",
	        "englishName": "Polish (Poland)",
	        "nativeName": "polski (Polska)",
	        "Sunday": "niedziela",
	        "Monday": "poniedziałek",
	        "Tuesday": "wtorek",
	        "Wednesday": "środa",
	        "Thursday": "czwartek",
	        "Friday": "piątek",
	        "Saturday": "sobota",
	        "Sun": "N",
	        "Mon": "Pn",
	        "Tue": "Wt",
	        "Wed": "Śr",
	        "Thu": "Cz",
	        "Fri": "Pt",
	        "Sat": "So",
	        "Su": "N",
	        "Mo": "Pn",
	        "Tu": "Wt",
	        "We": "Śr",
	        "Th": "Cz",
	        "Fr": "Pt",
	        "Sa": "So",
	        "S_Sun_Initial": "N",
	        "M_Mon_Initial": "P",
	        "T_Tue_Initial": "W",
	        "W_Wed_Initial": "Ś",
	        "T_Thu_Initial": "C",
	        "F_Fri_Initial": "P",
	        "S_Sat_Initial": "S",
	        "January": "styczeń",
	        "February": "luty",
	        "March": "marzec",
	        "April": "kwiecień",
	        "May": "maj",
	        "June": "czerwiec",
	        "July": "lipiec",
	        "August": "sierpień",
	        "September": "wrzesień",
	        "October": "październik",
	        "November": "listopad",
	        "December": "grudzień",
	        "Jan_Abbr": "sty",
	        "Feb_Abbr": "lut",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "kwi",
	        "May_Abbr": "maj",
	        "Jun_Abbr": "cze",
	        "Jul_Abbr": "lip",
	        "Aug_Abbr": "sie",
	        "Sep_Abbr": "wrz",
	        "Oct_Abbr": "paź",
	        "Nov_Abbr": "lis",
	        "Dec_Abbr": "gru",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy-MM-dd",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "sty(czeń)?",
	        "/feb(ruary)?/": "lut(y)?",
	        "/mar(ch)?/": "mar(zec)?",
	        "/apr(il)?/": "kwi(ecień)?",
	        "/may/": "maj",
	        "/jun(e)?/": "cze(rwiec)?",
	        "/jul(y)?/": "lip(iec)?",
	        "/aug(ust)?/": "sie(rpień)?",
	        "/sep(t(ember)?)?/": "wrz(esień)?",
	        "/oct(ober)?/": "paź(dziernik)?",
	        "/nov(ember)?/": "lis(topad)?",
	        "/dec(ember)?/": "gru(dzień)?",
	        "/^su(n(day)?)?/": "^niedziela",
	        "/^mo(n(day)?)?/": "^poniedziałek",
	        "/^tu(e(s(day)?)?)?/": "^wtorek",
	        "/^we(d(nesday)?)?/": "^środa",
	        "/^th(u(r(s(day)?)?)?)?/": "^czwartek",
	        "/^fr(i(day)?)?/": "^piątek",
	        "/^sa(t(urday)?)?/": "^sobota",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "pl-PL";


/***/ },
/* 247 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: pt-BR
	 * Name: Portuguese (Brazil)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["pt-BR"] = {
	        "name": "pt-BR",
	        "englishName": "Portuguese (Brazil)",
	        "nativeName": "Português (Brasil)",
	        "Sunday": "domingo",
	        "Monday": "segunda-feira",
	        "Tuesday": "terça-feira",
	        "Wednesday": "quarta-feira",
	        "Thursday": "quinta-feira",
	        "Friday": "sexta-feira",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "seg",
	        "Tue": "ter",
	        "Wed": "qua",
	        "Thu": "qui",
	        "Fri": "sex",
	        "Sat": "sáb",
	        "Su": "dom",
	        "Mo": "seg",
	        "Tu": "ter",
	        "We": "qua",
	        "Th": "qui",
	        "Fr": "sex",
	        "Sa": "sáb",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "s",
	        "T_Tue_Initial": "t",
	        "W_Wed_Initial": "q",
	        "T_Thu_Initial": "q",
	        "F_Fri_Initial": "s",
	        "S_Sat_Initial": "s",
	        "January": "janeiro",
	        "February": "fevereiro",
	        "March": "março",
	        "April": "abril",
	        "May": "maio",
	        "June": "junho",
	        "July": "julho",
	        "August": "agosto",
	        "September": "setembro",
	        "October": "outubro",
	        "November": "novembro",
	        "December": "dezembro",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "fev",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "abr",
	        "May_Abbr": "mai",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "ago",
	        "Sep_Abbr": "set",
	        "Oct_Abbr": "out",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dez",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/M/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d' de 'MMMM' de 'yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d' de 'MMMM' de 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd' de 'MMMM",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "jan(eiro)?",
	        "/feb(ruary)?/": "fev(ereiro)?",
	        "/mar(ch)?/": "mar(ço)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "mai(o)?",
	        "/jun(e)?/": "jun(ho)?",
	        "/jul(y)?/": "jul(ho)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "set(embro)?",
	        "/oct(ober)?/": "out(ubro)?",
	        "/nov(ember)?/": "nov(embro)?",
	        "/dec(ember)?/": "dez(embro)?",
	        "/^su(n(day)?)?/": "^domingo",
	        "/^mo(n(day)?)?/": "^segunda-feira",
	        "/^tu(e(s(day)?)?)?/": "^terça-feira",
	        "/^we(d(nesday)?)?/": "^quarta-feira",
	        "/^th(u(r(s(day)?)?)?)?/": "^quinta-feira",
	        "/^fr(i(day)?)?/": "^sexta-feira",
	        "/^sa(t(urday)?)?/": "^sábado",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "pt-BR";


/***/ },
/* 248 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: pt-PT
	 * Name: Portuguese (Portugal)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["pt-PT"] = {
	        "name": "pt-PT",
	        "englishName": "Portuguese (Portugal)",
	        "nativeName": "Português (Portugal)",
	        "Sunday": "domingo",
	        "Monday": "segunda-feira",
	        "Tuesday": "terça-feira",
	        "Wednesday": "quarta-feira",
	        "Thursday": "quinta-feira",
	        "Friday": "sexta-feira",
	        "Saturday": "sábado",
	        "Sun": "dom",
	        "Mon": "seg",
	        "Tue": "ter",
	        "Wed": "qua",
	        "Thu": "qui",
	        "Fri": "sex",
	        "Sat": "sáb",
	        "Su": "dom",
	        "Mo": "seg",
	        "Tu": "ter",
	        "We": "qua",
	        "Th": "qui",
	        "Fr": "sex",
	        "Sa": "sáb",
	        "S_Sun_Initial": "d",
	        "M_Mon_Initial": "s",
	        "T_Tue_Initial": "t",
	        "W_Wed_Initial": "q",
	        "T_Thu_Initial": "q",
	        "F_Fri_Initial": "s",
	        "S_Sat_Initial": "s",
	        "January": "Janeiro",
	        "February": "Fevereiro",
	        "March": "Março",
	        "April": "Abril",
	        "May": "Maio",
	        "June": "Junho",
	        "July": "Julho",
	        "August": "Agosto",
	        "September": "Setembro",
	        "October": "Outubro",
	        "November": "Novembro",
	        "December": "Dezembro",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Fev",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Abr",
	        "May_Abbr": "Mai",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Ago",
	        "Sep_Abbr": "Set",
	        "Oct_Abbr": "Out",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dez",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d' de 'MMMM' de 'yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d' de 'MMMM' de 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d/M",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "jan(eiro)?",
	        "/feb(ruary)?/": "fev(ereiro)?",
	        "/mar(ch)?/": "mar(ço)?",
	        "/apr(il)?/": "abr(il)?",
	        "/may/": "mai(o)?",
	        "/jun(e)?/": "jun(ho)?",
	        "/jul(y)?/": "jul(ho)?",
	        "/aug(ust)?/": "ago(sto)?",
	        "/sep(t(ember)?)?/": "set(embro)?",
	        "/oct(ober)?/": "out(ubro)?",
	        "/nov(ember)?/": "nov(embro)?",
	        "/dec(ember)?/": "dez(embro)?",
	        "/^su(n(day)?)?/": "^domingo",
	        "/^mo(n(day)?)?/": "^segunda-feira",
	        "/^tu(e(s(day)?)?)?/": "^terça-feira",
	        "/^we(d(nesday)?)?/": "^quarta-feira",
	        "/^th(u(r(s(day)?)?)?)?/": "^quinta-feira",
	        "/^fr(i(day)?)?/": "^sexta-feira",
	        "/^sa(t(urday)?)?/": "^sábado",
	        "/^next/": "^prox(im(o(s)?|a(s)?))?",
	        "/^last|past|prev(ious)?/": "^ant(erior(es)?)?|ult(im(o(s)?|a(s)?))?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|depois)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|antes)",
	        "/^yes(terday)?/": "^ontem",
	        "/^t(od(ay)?)?/": "^h(oje)?",
	        "/^tom(orrow)?/": "^amanha",
	        "/^n(ow)?/": "^a(gora)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(segundo)?s?",
	        "/^sec(ond)?s?/": "^s(egundo)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(uto)?s?",
	        "/^h(our)?s?/": "^h(ora)?s?",
	        "/^w(eek)?s?/": "^sem(ana)?s?",
	        "/^m(onth)?s?/": "^m(e(se)?s?)?",
	        "/^d(ay)?s?/": "^d(ia(s)?s?)?",
	        "/^y(ear)?s?/": "^an((o)?s?)?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "pt-PT";


/***/ },
/* 249 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: quz-BO
	 * Name: Quechua (Bolivia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["quz-BO"] = {
	        "name": "quz-BO",
	        "englishName": "Quechua (Bolivia)",
	        "nativeName": "runasimi (Bolivia Suyu)",
	        "Sunday": "intichaw",
	        "Monday": "killachaw",
	        "Tuesday": "atipachaw",
	        "Wednesday": "quyllurchaw",
	        "Thursday": "Ch' askachaw",
	        "Friday": "Illapachaw",
	        "Saturday": "k'uychichaw",
	        "Sun": "int",
	        "Mon": "kil",
	        "Tue": "ati",
	        "Wed": "quy",
	        "Thu": "Ch",
	        "Fri": "Ill",
	        "Sat": "k'u",
	        "Su": "int",
	        "Mo": "kil",
	        "Tu": "ati",
	        "We": "quy",
	        "Th": "Ch",
	        "Fr": "Ill",
	        "Sa": "k'u",
	        "S_Sun_Initial": "i",
	        "M_Mon_Initial": "k",
	        "T_Tue_Initial": "a",
	        "W_Wed_Initial": "q",
	        "T_Thu_Initial": "C",
	        "F_Fri_Initial": "I",
	        "S_Sat_Initial": "k",
	        "January": "Qulla puquy",
	        "February": "Hatun puquy",
	        "March": "Pauqar waray",
	        "April": "ayriwa",
	        "May": "Aymuray",
	        "June": "Inti raymi",
	        "July": "Anta Sitwa",
	        "August": "Qhapaq Sitwa",
	        "September": "Uma raymi",
	        "October": "Kantaray",
	        "November": "Ayamarq'a",
	        "December": "Kapaq Raymi",
	        "Jan_Abbr": "Qul",
	        "Feb_Abbr": "Hat",
	        "Mar_Abbr": "Pau",
	        "Apr_Abbr": "ayr",
	        "May_Abbr": "Aym",
	        "Jun_Abbr": "Int",
	        "Jul_Abbr": "Ant",
	        "Aug_Abbr": "Qha",
	        "Sep_Abbr": "Uma",
	        "Oct_Abbr": "Kan",
	        "Nov_Abbr": "Aya",
	        "Dec_Abbr": "Kap",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm:ss tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "qul(la puquy)?",
	        "/feb(ruary)?/": "hat(un puquy)?",
	        "/mar(ch)?/": "pau(qar waray)?",
	        "/apr(il)?/": "ayr(iwa)?",
	        "/may/": "aym(uray)?",
	        "/jun(e)?/": "int(i raymi)?",
	        "/jul(y)?/": "ant(a sitwa)?",
	        "/aug(ust)?/": "qha(paq sitwa)?",
	        "/sep(t(ember)?)?/": "uma( raymi)?",
	        "/oct(ober)?/": "kan(taray)?",
	        "/nov(ember)?/": "aya(marq'a)?",
	        "/dec(ember)?/": "kap(aq raymi)?",
	        "/^su(n(day)?)?/": "^intichaw",
	        "/^mo(n(day)?)?/": "^killachaw",
	        "/^tu(e(s(day)?)?)?/": "^atipachaw",
	        "/^we(d(nesday)?)?/": "^quyllurchaw",
	        "/^th(u(r(s(day)?)?)?)?/": "^ch' askachaw",
	        "/^fr(i(day)?)?/": "^illapachaw",
	        "/^sa(t(urday)?)?/": "^k'uychichaw",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "quz-BO";


/***/ },
/* 250 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: quz-EC
	 * Name: Quechua (Ecuador)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["quz-EC"] = {
	        "name": "quz-EC",
	        "englishName": "Quechua (Ecuador)",
	        "nativeName": "runasimi (Ecuador Suyu)",
	        "Sunday": "intichaw",
	        "Monday": "killachaw",
	        "Tuesday": "atipachaw",
	        "Wednesday": "quyllurchaw",
	        "Thursday": "Ch' askachaw",
	        "Friday": "Illapachaw",
	        "Saturday": "k'uychichaw",
	        "Sun": "int",
	        "Mon": "kil",
	        "Tue": "ati",
	        "Wed": "quy",
	        "Thu": "Ch",
	        "Fri": "Ill",
	        "Sat": "k'u",
	        "Su": "int",
	        "Mo": "kil",
	        "Tu": "ati",
	        "We": "quy",
	        "Th": "Ch",
	        "Fr": "Ill",
	        "Sa": "k'u",
	        "S_Sun_Initial": "i",
	        "M_Mon_Initial": "k",
	        "T_Tue_Initial": "a",
	        "W_Wed_Initial": "q",
	        "T_Thu_Initial": "C",
	        "F_Fri_Initial": "I",
	        "S_Sat_Initial": "k",
	        "January": "Qulla puquy",
	        "February": "Hatun puquy",
	        "March": "Pauqar waray",
	        "April": "ayriwa",
	        "May": "Aymuray",
	        "June": "Inti raymi",
	        "July": "Anta Sitwa",
	        "August": "Qhapaq Sitwa",
	        "September": "Uma raymi",
	        "October": "Kantaray",
	        "November": "Ayamarq'a",
	        "December": "Kapaq Raymi",
	        "Jan_Abbr": "Qul",
	        "Feb_Abbr": "Hat",
	        "Mar_Abbr": "Pau",
	        "Apr_Abbr": "ayr",
	        "May_Abbr": "Aym",
	        "Jun_Abbr": "Int",
	        "Jul_Abbr": "Ant",
	        "Aug_Abbr": "Qha",
	        "Sep_Abbr": "Uma",
	        "Oct_Abbr": "Kan",
	        "Nov_Abbr": "Aya",
	        "Dec_Abbr": "Kap",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "H:mm:ss",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "qul(la puquy)?",
	        "/feb(ruary)?/": "hat(un puquy)?",
	        "/mar(ch)?/": "pau(qar waray)?",
	        "/apr(il)?/": "ayr(iwa)?",
	        "/may/": "aym(uray)?",
	        "/jun(e)?/": "int(i raymi)?",
	        "/jul(y)?/": "ant(a sitwa)?",
	        "/aug(ust)?/": "qha(paq sitwa)?",
	        "/sep(t(ember)?)?/": "uma( raymi)?",
	        "/oct(ober)?/": "kan(taray)?",
	        "/nov(ember)?/": "aya(marq'a)?",
	        "/dec(ember)?/": "kap(aq raymi)?",
	        "/^su(n(day)?)?/": "^intichaw",
	        "/^mo(n(day)?)?/": "^killachaw",
	        "/^tu(e(s(day)?)?)?/": "^atipachaw",
	        "/^we(d(nesday)?)?/": "^quyllurchaw",
	        "/^th(u(r(s(day)?)?)?)?/": "^ch' askachaw",
	        "/^fr(i(day)?)?/": "^illapachaw",
	        "/^sa(t(urday)?)?/": "^k'uychichaw",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "quz-EC";


/***/ },
/* 251 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: quz-PE
	 * Name: Quechua (Peru)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["quz-PE"] = {
	        "name": "quz-PE",
	        "englishName": "Quechua (Peru)",
	        "nativeName": "runasimi (Peru Suyu)",
	        "Sunday": "intichaw",
	        "Monday": "killachaw",
	        "Tuesday": "atipachaw",
	        "Wednesday": "quyllurchaw",
	        "Thursday": "Ch' askachaw",
	        "Friday": "Illapachaw",
	        "Saturday": "k'uychichaw",
	        "Sun": "int",
	        "Mon": "kil",
	        "Tue": "ati",
	        "Wed": "quy",
	        "Thu": "Ch",
	        "Fri": "Ill",
	        "Sat": "k'u",
	        "Su": "int",
	        "Mo": "kil",
	        "Tu": "ati",
	        "We": "quy",
	        "Th": "Ch",
	        "Fr": "Ill",
	        "Sa": "k'u",
	        "S_Sun_Initial": "i",
	        "M_Mon_Initial": "k",
	        "T_Tue_Initial": "a",
	        "W_Wed_Initial": "q",
	        "T_Thu_Initial": "C",
	        "F_Fri_Initial": "I",
	        "S_Sat_Initial": "k",
	        "January": "Qulla puquy",
	        "February": "Hatun puquy",
	        "March": "Pauqar waray",
	        "April": "ayriwa",
	        "May": "Aymuray",
	        "June": "Inti raymi",
	        "July": "Anta Sitwa",
	        "August": "Qhapaq Sitwa",
	        "September": "Uma raymi",
	        "October": "Kantaray",
	        "November": "Ayamarq'a",
	        "December": "Kapaq Raymi",
	        "Jan_Abbr": "Qul",
	        "Feb_Abbr": "Hat",
	        "Mar_Abbr": "Pau",
	        "Apr_Abbr": "ayr",
	        "May_Abbr": "Aym",
	        "Jun_Abbr": "Int",
	        "Jul_Abbr": "Ant",
	        "Aug_Abbr": "Qha",
	        "Sep_Abbr": "Uma",
	        "Oct_Abbr": "Kan",
	        "Nov_Abbr": "Aya",
	        "Dec_Abbr": "Kap",
	        "AM": "a.m.",
	        "PM": "p.m.",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, dd' de 'MMMM' de 'yyyy",
	        "h:mm tt": "hh:mm:ss tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM' de 'yyyy",
	        "/jan(uary)?/": "qul(la puquy)?",
	        "/feb(ruary)?/": "hat(un puquy)?",
	        "/mar(ch)?/": "pau(qar waray)?",
	        "/apr(il)?/": "ayr(iwa)?",
	        "/may/": "aym(uray)?",
	        "/jun(e)?/": "int(i raymi)?",
	        "/jul(y)?/": "ant(a sitwa)?",
	        "/aug(ust)?/": "qha(paq sitwa)?",
	        "/sep(t(ember)?)?/": "uma( raymi)?",
	        "/oct(ober)?/": "kan(taray)?",
	        "/nov(ember)?/": "aya(marq'a)?",
	        "/dec(ember)?/": "kap(aq raymi)?",
	        "/^su(n(day)?)?/": "^intichaw",
	        "/^mo(n(day)?)?/": "^killachaw",
	        "/^tu(e(s(day)?)?)?/": "^atipachaw",
	        "/^we(d(nesday)?)?/": "^quyllurchaw",
	        "/^th(u(r(s(day)?)?)?)?/": "^ch' askachaw",
	        "/^fr(i(day)?)?/": "^illapachaw",
	        "/^sa(t(urday)?)?/": "^k'uychichaw",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "quz-PE";


/***/ },
/* 252 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ro-RO
	 * Name: Romanian (Romania)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ro-RO"] = {
	        "name": "ro-RO",
	        "englishName": "Romanian (Romania)",
	        "nativeName": "română (România)",
	        "Sunday": "duminică",
	        "Monday": "luni",
	        "Tuesday": "marţi",
	        "Wednesday": "miercuri",
	        "Thursday": "joi",
	        "Friday": "vineri",
	        "Saturday": "sâmbătă",
	        "Sun": "D",
	        "Mon": "L",
	        "Tue": "Ma",
	        "Wed": "Mi",
	        "Thu": "J",
	        "Fri": "V",
	        "Sat": "S",
	        "Su": "D",
	        "Mo": "L",
	        "Tu": "Ma",
	        "We": "Mi",
	        "Th": "J",
	        "Fr": "V",
	        "Sa": "S",
	        "S_Sun_Initial": "D",
	        "M_Mon_Initial": "L",
	        "T_Tue_Initial": "M",
	        "W_Wed_Initial": "M",
	        "T_Thu_Initial": "J",
	        "F_Fri_Initial": "V",
	        "S_Sat_Initial": "S",
	        "January": "ianuarie",
	        "February": "februarie",
	        "March": "martie",
	        "April": "aprilie",
	        "May": "mai",
	        "June": "iunie",
	        "July": "iulie",
	        "August": "august",
	        "September": "septembrie",
	        "October": "octombrie",
	        "November": "noiembrie",
	        "December": "decembrie",
	        "Jan_Abbr": "ian.",
	        "Feb_Abbr": "feb.",
	        "Mar_Abbr": "mar.",
	        "Apr_Abbr": "apr.",
	        "May_Abbr": "mai.",
	        "Jun_Abbr": "iun.",
	        "Jul_Abbr": "iul.",
	        "Aug_Abbr": "aug.",
	        "Sep_Abbr": "sep.",
	        "Oct_Abbr": "oct.",
	        "Nov_Abbr": "nov.",
	        "Dec_Abbr": "dec.",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ian(.(uarie)?)?",
	        "/feb(ruary)?/": "feb(.(ruarie)?)?",
	        "/mar(ch)?/": "mar(.(tie)?)?",
	        "/apr(il)?/": "apr(.(ilie)?)?",
	        "/may/": "mai(.()?)?",
	        "/jun(e)?/": "iun(.(ie)?)?",
	        "/jul(y)?/": "iul(.(ie)?)?",
	        "/aug(ust)?/": "aug(.(ust)?)?",
	        "/sep(t(ember)?)?/": "sep(.(tembrie)?)?",
	        "/oct(ober)?/": "oct(.(ombrie)?)?",
	        "/nov(ember)?/": "noiembrie",
	        "/dec(ember)?/": "dec(.(embrie)?)?",
	        "/^su(n(day)?)?/": "^duminică",
	        "/^mo(n(day)?)?/": "^luni",
	        "/^tu(e(s(day)?)?)?/": "^marţi",
	        "/^we(d(nesday)?)?/": "^miercuri",
	        "/^th(u(r(s(day)?)?)?)?/": "^joi",
	        "/^fr(i(day)?)?/": "^vineri",
	        "/^sa(t(urday)?)?/": "^sâmbătă",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ro-RO";


/***/ },
/* 253 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ru-RU
	 * Name: Russian (Russia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ru-RU"] = {
	        "name": "ru-RU",
	        "englishName": "Russian (Russia)",
	        "nativeName": "Pусский (Россия)",
	        "Sunday": "воскресенье",
	        "Monday": "понедельник",
	        "Tuesday": "вторник",
	        "Wednesday": "среда",
	        "Thursday": "четверг",
	        "Friday": "пятница",
	        "Saturday": "суббота",
	        "Sun": "Вс",
	        "Mon": "Пн",
	        "Tue": "Вт",
	        "Wed": "Ср",
	        "Thu": "Чт",
	        "Fri": "Пт",
	        "Sat": "Сб",
	        "Su": "Вс",
	        "Mo": "Пн",
	        "Tu": "Вт",
	        "We": "Ср",
	        "Th": "Чт",
	        "Fr": "Пт",
	        "Sa": "Сб",
	        "S_Sun_Initial": "В",
	        "M_Mon_Initial": "П",
	        "T_Tue_Initial": "В",
	        "W_Wed_Initial": "С",
	        "T_Thu_Initial": "Ч",
	        "F_Fri_Initial": "П",
	        "S_Sat_Initial": "С",
	        "January": "Январь",
	        "February": "Февраль",
	        "March": "Март",
	        "April": "Апрель",
	        "May": "Май",
	        "June": "Июнь",
	        "July": "Июль",
	        "August": "Август",
	        "September": "Сентябрь",
	        "October": "Октябрь",
	        "November": "Ноябрь",
	        "December": "Декабрь",
	        "Jan_Abbr": "янв",
	        "Feb_Abbr": "фев",
	        "Mar_Abbr": "мар",
	        "Apr_Abbr": "апр",
	        "May_Abbr": "май",
	        "Jun_Abbr": "июн",
	        "Jul_Abbr": "июл",
	        "Aug_Abbr": "авг",
	        "Sep_Abbr": "сен",
	        "Oct_Abbr": "окт",
	        "Nov_Abbr": "ноя",
	        "Dec_Abbr": "дек",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy 'г.'",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy 'г.' H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy 'г.'",
	        "/jan(uary)?/": "янв(арь)?",
	        "/feb(ruary)?/": "фев(раль)?",
	        "/mar(ch)?/": "мар(т)?",
	        "/apr(il)?/": "апр(ель)?",
	        "/may/": "май",
	        "/jun(e)?/": "июн(ь)?",
	        "/jul(y)?/": "июл(ь)?",
	        "/aug(ust)?/": "авг(уст)?",
	        "/sep(t(ember)?)?/": "сен(тябрь)?",
	        "/oct(ober)?/": "окт(ябрь)?",
	        "/nov(ember)?/": "ноя(брь)?",
	        "/dec(ember)?/": "дек(абрь)?",
	        "/^su(n(day)?)?/": "^воскресенье",
	        "/^mo(n(day)?)?/": "^понедельник",
	        "/^tu(e(s(day)?)?)?/": "^вторник",
	        "/^we(d(nesday)?)?/": "^среда",
	        "/^th(u(r(s(day)?)?)?)?/": "^четверг",
	        "/^fr(i(day)?)?/": "^пятница",
	        "/^sa(t(urday)?)?/": "^суббота",
	        "/^next/": "^след|завтра",
	        "/^last|past|prev(ious)?/": "^пред|вчера",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|через|после|вперед|и|следую?щ(ая|ий|ее)?)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|за|до|поза|пе?ред((ыдущ|шев?ствующ)(ая|ий|ее))|назад)",
	        "/^yes(terday)?/": "^вчера",
	        "/^t(od(ay)?)?/": "^сегодня",
	        "/^tom(orrow)?/": "^завтра",
	        "/^n(ow)?/": "^сейчас|сечас|щас",
	        "/^ms|milli(second)?s?/": "^мс|мили(секунд)?s?",
	        "/^sec(ond)?s?/": "^с(ек(унд)?)?",
	        "/^mn|min(ute)?s?/": "^м(ин(ут)?)?",
	        "/^h(our)?s?/": "^ч((ас)?ов)?",
	        "/^w(eek)?s?/": "^н(ед(ель)?)?",
	        "/^m(onth)?s?/": "^мес(яцев)?",
	        "/^d(ay)?s?/": "^д(ень|ней|ня)?",
	        "/^y(ear)?s?/": "^г(ода?)?|л(ет)?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ru-RU";


/***/ },
/* 254 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sa-IN
	 * Name: Sanskrit (India)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sa-IN"] = {
	        "name": "sa-IN",
	        "englishName": "Sanskrit (India)",
	        "nativeName": "संस्कृत (भारतम्)",
	        "Sunday": "रविवासरः",
	        "Monday": "सोमवासरः",
	        "Tuesday": "मङ्गलवासरः",
	        "Wednesday": "बुधवासरः",
	        "Thursday": "गुरुवासरः",
	        "Friday": "शुक्रवासरः",
	        "Saturday": "शनिवासरः",
	        "Sun": "रविवासरः",
	        "Mon": "सोमवासरः",
	        "Tue": "मङ्गलवासरः",
	        "Wed": "बुधवासरः",
	        "Thu": "गुरुवासरः",
	        "Fri": "शुक्रवासरः",
	        "Sat": "शनिवासरः",
	        "Su": "र",
	        "Mo": "स",
	        "Tu": "म",
	        "We": "ब",
	        "Th": "ग",
	        "Fr": "श",
	        "Sa": "श",
	        "S_Sun_Initial": "र",
	        "M_Mon_Initial": "स",
	        "T_Tue_Initial": "म",
	        "W_Wed_Initial": "ब",
	        "T_Thu_Initial": "ग",
	        "F_Fri_Initial": "श",
	        "S_Sat_Initial": "श",
	        "January": "जनवरी",
	        "February": "फरवरी",
	        "March": "मार्च",
	        "April": "अप्रैल",
	        "May": "मई",
	        "June": "जून",
	        "July": "जुलाई",
	        "August": "अगस्त",
	        "September": "सितम्बर",
	        "October": "अक्तूबर",
	        "November": "नवम्बर",
	        "December": "दिसम्बर",
	        "Jan_Abbr": "जनवरी",
	        "Feb_Abbr": "फरवरी",
	        "Mar_Abbr": "मार्च",
	        "Apr_Abbr": "अप्रैल",
	        "May_Abbr": "मई",
	        "Jun_Abbr": "जून",
	        "Jul_Abbr": "जुलाई",
	        "Aug_Abbr": "अगस्त",
	        "Sep_Abbr": "सितम्बर",
	        "Oct_Abbr": "अक्तूबर",
	        "Nov_Abbr": "नवम्बर",
	        "Dec_Abbr": "दिसम्बर",
	        "AM": "पूर्वाह्न",
	        "PM": "अपराह्न",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy dddd",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy dddd HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "जनवरी",
	        "/feb(ruary)?/": "फरवरी",
	        "/mar(ch)?/": "मार्च",
	        "/apr(il)?/": "अप्रैल",
	        "/may/": "मई",
	        "/jun(e)?/": "जून",
	        "/jul(y)?/": "जुलाई",
	        "/aug(ust)?/": "अगस्त",
	        "/sep(t(ember)?)?/": "सितम्बर",
	        "/oct(ober)?/": "अक्तूबर",
	        "/nov(ember)?/": "नवम्बर",
	        "/dec(ember)?/": "दिसम्बर",
	        "/^su(n(day)?)?/": "^र(1)?",
	        "/^mo(n(day)?)?/": "^स(1)?",
	        "/^tu(e(s(day)?)?)?/": "^म(1)?",
	        "/^we(d(nesday)?)?/": "^ब(1)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ग(1)?",
	        "/^fr(i(day)?)?/": "^श(1)?",
	        "/^sa(t(urday)?)?/": "^श(1)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sa-IN";


/***/ },
/* 255 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: se-FI
	 * Name: Sami (Northern) (Finland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["se-FI"] = {
	        "name": "se-FI",
	        "englishName": "Sami (Northern) (Finland)",
	        "nativeName": "davvisámegiella (Suopma)",
	        "Sunday": "sotnabeaivi",
	        "Monday": "vuossárga",
	        "Tuesday": "maŋŋebárga",
	        "Wednesday": "gaskavahkku",
	        "Thursday": "duorastat",
	        "Friday": "bearjadat",
	        "Saturday": "lávvardat",
	        "Sun": "sotn",
	        "Mon": "vuos",
	        "Tue": "maŋ",
	        "Wed": "gask",
	        "Thu": "duor",
	        "Fri": "bear",
	        "Sat": "láv",
	        "Su": "sotn",
	        "Mo": "vuos",
	        "Tu": "maŋ",
	        "We": "gask",
	        "Th": "duor",
	        "Fr": "bear",
	        "Sa": "láv",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "v",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "g",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "b",
	        "S_Sat_Initial": "l",
	        "January": "ođđajagemánnu",
	        "February": "guovvamánnu",
	        "March": "njukčamánnu",
	        "April": "cuoŋománnu",
	        "May": "miessemánnu",
	        "June": "geassemánnu",
	        "July": "suoidnemánnu",
	        "August": "borgemánnu",
	        "September": "čakčamánnu",
	        "October": "golggotmánnu",
	        "November": "skábmamánnu",
	        "December": "juovlamánnu",
	        "Jan_Abbr": "ođđj",
	        "Feb_Abbr": "guov",
	        "Mar_Abbr": "njuk",
	        "Apr_Abbr": "cuo",
	        "May_Abbr": "mies",
	        "Jun_Abbr": "geas",
	        "Jul_Abbr": "suoi",
	        "Aug_Abbr": "borg",
	        "Sep_Abbr": "čakč",
	        "Oct_Abbr": "golg",
	        "Nov_Abbr": "skáb",
	        "Dec_Abbr": "juov",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "MMMM d'. b. 'yyyy",
	        "h:mm tt": "H:mm:ss",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d'. b. 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ođđajagemánnu",
	        "/feb(ruary)?/": "guov(vamánnu)?",
	        "/mar(ch)?/": "njuk(čamánnu)?",
	        "/apr(il)?/": "cuo(ŋománnu)?",
	        "/may/": "mies(semánnu)?",
	        "/jun(e)?/": "geas(semánnu)?",
	        "/jul(y)?/": "suoi(dnemánnu)?",
	        "/aug(ust)?/": "borg(emánnu)?",
	        "/sep(t(ember)?)?/": "čakč(amánnu)?",
	        "/oct(ober)?/": "golg(gotmánnu)?",
	        "/nov(ember)?/": "skáb(mamánnu)?",
	        "/dec(ember)?/": "juov(lamánnu)?",
	        "/^su(n(day)?)?/": "^sotnabeaivi",
	        "/^mo(n(day)?)?/": "^vuossárga",
	        "/^tu(e(s(day)?)?)?/": "^maŋŋebárga",
	        "/^we(d(nesday)?)?/": "^gaskavahkku",
	        "/^th(u(r(s(day)?)?)?)?/": "^duorastat",
	        "/^fr(i(day)?)?/": "^bearjadat",
	        "/^sa(t(urday)?)?/": "^lávvardat",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "se-FI";


/***/ },
/* 256 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: se-NO
	 * Name: Sami (Northern) (Norway)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["se-NO"] = {
	        "name": "se-NO",
	        "englishName": "Sami (Northern) (Norway)",
	        "nativeName": "davvisámegiella (Norga)",
	        "Sunday": "sotnabeaivi",
	        "Monday": "vuossárga",
	        "Tuesday": "maŋŋebárga",
	        "Wednesday": "gaskavahkku",
	        "Thursday": "duorastat",
	        "Friday": "bearjadat",
	        "Saturday": "lávvardat",
	        "Sun": "sotn",
	        "Mon": "vuos",
	        "Tue": "maŋ",
	        "Wed": "gask",
	        "Thu": "duor",
	        "Fri": "bear",
	        "Sat": "láv",
	        "Su": "sotn",
	        "Mo": "vuos",
	        "Tu": "maŋ",
	        "We": "gask",
	        "Th": "duor",
	        "Fr": "bear",
	        "Sa": "láv",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "v",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "g",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "b",
	        "S_Sat_Initial": "l",
	        "January": "ođđajagemánnu",
	        "February": "guovvamánnu",
	        "March": "njukčamánnu",
	        "April": "cuoŋománnu",
	        "May": "miessemánnu",
	        "June": "geassemánnu",
	        "July": "suoidnemánnu",
	        "August": "borgemánnu",
	        "September": "čakčamánnu",
	        "October": "golggotmánnu",
	        "November": "skábmamánnu",
	        "December": "juovlamánnu",
	        "Jan_Abbr": "ođđj",
	        "Feb_Abbr": "guov",
	        "Mar_Abbr": "njuk",
	        "Apr_Abbr": "cuo",
	        "May_Abbr": "mies",
	        "Jun_Abbr": "geas",
	        "Jul_Abbr": "suoi",
	        "Aug_Abbr": "borg",
	        "Sep_Abbr": "čakč",
	        "Oct_Abbr": "golg",
	        "Nov_Abbr": "skáb",
	        "Dec_Abbr": "juov",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "MMMM d'. b. 'yyyy",
	        "h:mm tt": "HH:mm:ss",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d'. b. 'yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ođđajagemánnu",
	        "/feb(ruary)?/": "guov(vamánnu)?",
	        "/mar(ch)?/": "njuk(čamánnu)?",
	        "/apr(il)?/": "cuo(ŋománnu)?",
	        "/may/": "mies(semánnu)?",
	        "/jun(e)?/": "geas(semánnu)?",
	        "/jul(y)?/": "suoi(dnemánnu)?",
	        "/aug(ust)?/": "borg(emánnu)?",
	        "/sep(t(ember)?)?/": "čakč(amánnu)?",
	        "/oct(ober)?/": "golg(gotmánnu)?",
	        "/nov(ember)?/": "skáb(mamánnu)?",
	        "/dec(ember)?/": "juov(lamánnu)?",
	        "/^su(n(day)?)?/": "^sotnabeaivi",
	        "/^mo(n(day)?)?/": "^vuossárga",
	        "/^tu(e(s(day)?)?)?/": "^maŋŋebárga",
	        "/^we(d(nesday)?)?/": "^gaskavahkku",
	        "/^th(u(r(s(day)?)?)?)?/": "^duorastat",
	        "/^fr(i(day)?)?/": "^bearjadat",
	        "/^sa(t(urday)?)?/": "^lávvardat",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "se-NO";


/***/ },
/* 257 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: se-SE
	 * Name: Sami (Northern) (Sweden)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["se-SE"] = {
	        "name": "se-SE",
	        "englishName": "Sami (Northern) (Sweden)",
	        "nativeName": "davvisámegiella (Ruoŧŧa)",
	        "Sunday": "sotnabeaivi",
	        "Monday": "mánnodat",
	        "Tuesday": "disdat",
	        "Wednesday": "gaskavahkku",
	        "Thursday": "duorastat",
	        "Friday": "bearjadat",
	        "Saturday": "lávvardat",
	        "Sun": "sotn",
	        "Mon": "mán",
	        "Tue": "dis",
	        "Wed": "gask",
	        "Thu": "duor",
	        "Fri": "bear",
	        "Sat": "láv",
	        "Su": "sotn",
	        "Mo": "mán",
	        "Tu": "dis",
	        "We": "gask",
	        "Th": "duor",
	        "Fr": "bear",
	        "Sa": "láv",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "d",
	        "W_Wed_Initial": "g",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "b",
	        "S_Sat_Initial": "l",
	        "January": "ođđajagemánnu",
	        "February": "guovvamánnu",
	        "March": "njukčamánnu",
	        "April": "cuoŋománnu",
	        "May": "miessemánnu",
	        "June": "geassemánnu",
	        "July": "suoidnemánnu",
	        "August": "borgemánnu",
	        "September": "čakčamánnu",
	        "October": "golggotmánnu",
	        "November": "skábmamánnu",
	        "December": "juovlamánnu",
	        "Jan_Abbr": "ođđj",
	        "Feb_Abbr": "guov",
	        "Mar_Abbr": "njuk",
	        "Apr_Abbr": "cuo",
	        "May_Abbr": "mies",
	        "Jun_Abbr": "geas",
	        "Jul_Abbr": "suoi",
	        "Aug_Abbr": "borg",
	        "Sep_Abbr": "čakč",
	        "Oct_Abbr": "golg",
	        "Nov_Abbr": "skáb",
	        "Dec_Abbr": "juov",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy-MM-dd",
	        "dddd, MMMM dd, yyyy": "MMMM d'. b. 'yyyy",
	        "h:mm tt": "HH:mm:ss",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d'. b. 'yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ođđajagemánnu",
	        "/feb(ruary)?/": "guov(vamánnu)?",
	        "/mar(ch)?/": "njuk(čamánnu)?",
	        "/apr(il)?/": "cuo(ŋománnu)?",
	        "/may/": "mies(semánnu)?",
	        "/jun(e)?/": "geas(semánnu)?",
	        "/jul(y)?/": "suoi(dnemánnu)?",
	        "/aug(ust)?/": "borg(emánnu)?",
	        "/sep(t(ember)?)?/": "čakč(amánnu)?",
	        "/oct(ober)?/": "golg(gotmánnu)?",
	        "/nov(ember)?/": "skáb(mamánnu)?",
	        "/dec(ember)?/": "juov(lamánnu)?",
	        "/^su(n(day)?)?/": "^sotnabeaivi",
	        "/^mo(n(day)?)?/": "^mánnodat",
	        "/^tu(e(s(day)?)?)?/": "^disdat",
	        "/^we(d(nesday)?)?/": "^gaskavahkku",
	        "/^th(u(r(s(day)?)?)?)?/": "^duorastat",
	        "/^fr(i(day)?)?/": "^bearjadat",
	        "/^sa(t(urday)?)?/": "^lávvardat",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "se-SE";


/***/ },
/* 258 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sk-SK
	 * Name: Slovak (Slovakia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sk-SK"] = {
	        "name": "sk-SK",
	        "englishName": "Slovak (Slovakia)",
	        "nativeName": "slovenčina (Slovenská republika)",
	        "Sunday": "nedeľa",
	        "Monday": "pondelok",
	        "Tuesday": "utorok",
	        "Wednesday": "streda",
	        "Thursday": "štvrtok",
	        "Friday": "piatok",
	        "Saturday": "sobota",
	        "Sun": "ne",
	        "Mon": "po",
	        "Tue": "ut",
	        "Wed": "st",
	        "Thu": "št",
	        "Fri": "pi",
	        "Sat": "so",
	        "Su": "ne",
	        "Mo": "po",
	        "Tu": "ut",
	        "We": "st",
	        "Th": "št",
	        "Fr": "pi",
	        "Sa": "so",
	        "S_Sun_Initial": "n",
	        "M_Mon_Initial": "p",
	        "T_Tue_Initial": "u",
	        "W_Wed_Initial": "s",
	        "T_Thu_Initial": "š",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "s",
	        "January": "január",
	        "February": "február",
	        "March": "marec",
	        "April": "apríl",
	        "May": "máj",
	        "June": "jún",
	        "July": "júl",
	        "August": "august",
	        "September": "september",
	        "October": "október",
	        "November": "november",
	        "December": "december",
	        "Jan_Abbr": "I",
	        "Feb_Abbr": "II",
	        "Mar_Abbr": "III",
	        "Apr_Abbr": "IV",
	        "May_Abbr": "V",
	        "Jun_Abbr": "VI",
	        "Jul_Abbr": "VII",
	        "Aug_Abbr": "VIII",
	        "Sep_Abbr": "IX",
	        "Oct_Abbr": "X",
	        "Nov_Abbr": "XI",
	        "Dec_Abbr": "XII",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d. M. yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "január",
	        "/feb(ruary)?/": "február",
	        "/mar(ch)?/": "marec",
	        "/apr(il)?/": "apríl",
	        "/may/": "máj",
	        "/jun(e)?/": "jún",
	        "/jul(y)?/": "júl",
	        "/aug(ust)?/": "august",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "október",
	        "/nov(ember)?/": "november",
	        "/dec(ember)?/": "december",
	        "/^su(n(day)?)?/": "^nedeľa",
	        "/^mo(n(day)?)?/": "^pondelok",
	        "/^tu(e(s(day)?)?)?/": "^utorok",
	        "/^we(d(nesday)?)?/": "^streda",
	        "/^th(u(r(s(day)?)?)?)?/": "^štvrtok",
	        "/^fr(i(day)?)?/": "^piatok",
	        "/^sa(t(urday)?)?/": "^sobota",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sk-SK";


/***/ },
/* 259 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sl-SI
	 * Name: Slovenian (Slovenia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sl-SI"] = {
	        "name": "sl-SI",
	        "englishName": "Slovenian (Slovenia)",
	        "nativeName": "slovenski (Slovenija)",
	        "Sunday": "nedelja",
	        "Monday": "ponedeljek",
	        "Tuesday": "torek",
	        "Wednesday": "sreda",
	        "Thursday": "četrtek",
	        "Friday": "petek",
	        "Saturday": "sobota",
	        "Sun": "ned",
	        "Mon": "pon",
	        "Tue": "tor",
	        "Wed": "sre",
	        "Thu": "čet",
	        "Fri": "pet",
	        "Sat": "sob",
	        "Su": "ne",
	        "Mo": "po",
	        "Tu": "to",
	        "We": "sr",
	        "Th": "če",
	        "Fr": "pe",
	        "Sa": "so",
	        "S_Sun_Initial": "n",
	        "M_Mon_Initial": "p",
	        "T_Tue_Initial": "t",
	        "W_Wed_Initial": "s",
	        "T_Thu_Initial": "č",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "s",
	        "January": "januar",
	        "February": "februar",
	        "March": "marec",
	        "April": "april",
	        "May": "maj",
	        "June": "junij",
	        "July": "julij",
	        "August": "avgust",
	        "September": "september",
	        "October": "oktober",
	        "November": "november",
	        "December": "december",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "maj",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "avg",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "mar(ec)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "maj",
	        "/jun(e)?/": "jun(ij)?",
	        "/jul(y)?/": "jul(ij)?",
	        "/aug(ust)?/": "avg(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^ne(d(elja)?)?",
	        "/^mo(n(day)?)?/": "^po(n(edeljek)?)?",
	        "/^tu(e(s(day)?)?)?/": "^to(r(ek)?)?",
	        "/^we(d(nesday)?)?/": "^sr(e(da)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^če(t(rtek)?)?",
	        "/^fr(i(day)?)?/": "^pe(t(ek)?)?",
	        "/^sa(t(urday)?)?/": "^so(b(ota)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sl-SI";


/***/ },
/* 260 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sma-NO
	 * Name: Sami (Southern) (Norway)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sma-NO"] = {
	        "name": "sma-NO",
	        "englishName": "Sami (Southern) (Norway)",
	        "nativeName": "åarjelsaemiengiele (Nöörje)",
	        "Sunday": "aejlege",
	        "Monday": "måanta",
	        "Tuesday": "dæjsta",
	        "Wednesday": "gaskevåhkoe",
	        "Thursday": "duarsta",
	        "Friday": "bearjadahke",
	        "Saturday": "laavvardahke",
	        "Sun": "aej",
	        "Mon": "måa",
	        "Tue": "dæj",
	        "Wed": "gask",
	        "Thu": "duar",
	        "Fri": "bearj",
	        "Sat": "laav",
	        "Su": "aej",
	        "Mo": "måa",
	        "Tu": "dæj",
	        "We": "gask",
	        "Th": "duar",
	        "Fr": "bearj",
	        "Sa": "laav",
	        "S_Sun_Initial": "a",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "d",
	        "W_Wed_Initial": "g",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "b",
	        "S_Sat_Initial": "l",
	        "January": "tsïengele",
	        "February": "goevte",
	        "March": "njoktje",
	        "April": "voerhtje",
	        "May": "suehpede",
	        "June": "ruffie",
	        "July": "snjaltje",
	        "August": "mïetske",
	        "September": "skïerede",
	        "October": "golke",
	        "November": "rahka",
	        "December": "goeve",
	        "Jan_Abbr": "tsïen",
	        "Feb_Abbr": "goevt",
	        "Mar_Abbr": "njok",
	        "Apr_Abbr": "voer",
	        "May_Abbr": "sueh",
	        "Jun_Abbr": "ruff",
	        "Jul_Abbr": "snja",
	        "Aug_Abbr": "mïet",
	        "Sep_Abbr": "skïer",
	        "Oct_Abbr": "golk",
	        "Nov_Abbr": "rahk",
	        "Dec_Abbr": "goev",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "MMMM d'. b. 'yyyy",
	        "h:mm tt": "HH:mm:ss",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d'. b. 'yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "tsïen(gele)?",
	        "/feb(ruary)?/": "goevt(e)?",
	        "/mar(ch)?/": "njok(tje)?",
	        "/apr(il)?/": "voer(htje)?",
	        "/may/": "sueh(pede)?",
	        "/jun(e)?/": "ruff(ie)?",
	        "/jul(y)?/": "snja(ltje)?",
	        "/aug(ust)?/": "mïet(ske)?",
	        "/sep(t(ember)?)?/": "skïer(ede)?",
	        "/oct(ober)?/": "golk(e)?",
	        "/nov(ember)?/": "rahk(a)?",
	        "/dec(ember)?/": "goev(e)?",
	        "/^su(n(day)?)?/": "^aejlege",
	        "/^mo(n(day)?)?/": "^måanta",
	        "/^tu(e(s(day)?)?)?/": "^dæjsta",
	        "/^we(d(nesday)?)?/": "^gaskevåhkoe",
	        "/^th(u(r(s(day)?)?)?)?/": "^duarsta",
	        "/^fr(i(day)?)?/": "^bearjadahke",
	        "/^sa(t(urday)?)?/": "^laavvardahke",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sma-NO";


/***/ },
/* 261 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sma-SE
	 * Name: Sami (Southern) (Sweden)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sma-SE"] = {
	        "name": "sma-SE",
	        "englishName": "Sami (Southern) (Sweden)",
	        "nativeName": "åarjelsaemiengiele (Sveerje)",
	        "Sunday": "aejlege",
	        "Monday": "måanta",
	        "Tuesday": "dæjsta",
	        "Wednesday": "gaskevåhkoe",
	        "Thursday": "duarsta",
	        "Friday": "bearjadahke",
	        "Saturday": "laavvardahke",
	        "Sun": "aej",
	        "Mon": "måa",
	        "Tue": "dæj",
	        "Wed": "gask",
	        "Thu": "duar",
	        "Fri": "bearj",
	        "Sat": "laav",
	        "Su": "aej",
	        "Mo": "måa",
	        "Tu": "dæj",
	        "We": "gask",
	        "Th": "duar",
	        "Fr": "bearj",
	        "Sa": "laav",
	        "S_Sun_Initial": "a",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "d",
	        "W_Wed_Initial": "g",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "b",
	        "S_Sat_Initial": "l",
	        "January": "tsïengele",
	        "February": "goevte",
	        "March": "njoktje",
	        "April": "voerhtje",
	        "May": "suehpede",
	        "June": "ruffie",
	        "July": "snjaltje",
	        "August": "mïetske",
	        "September": "skïerede",
	        "October": "golke",
	        "November": "rahka",
	        "December": "goeve",
	        "Jan_Abbr": "tsïen",
	        "Feb_Abbr": "goevt",
	        "Mar_Abbr": "njok",
	        "Apr_Abbr": "voer",
	        "May_Abbr": "sueh",
	        "Jun_Abbr": "ruff",
	        "Jul_Abbr": "snja",
	        "Aug_Abbr": "mïet",
	        "Sep_Abbr": "skïer",
	        "Oct_Abbr": "golk",
	        "Nov_Abbr": "rahk",
	        "Dec_Abbr": "goev",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy-MM-dd",
	        "dddd, MMMM dd, yyyy": "MMMM d'. b. 'yyyy",
	        "h:mm tt": "HH:mm:ss",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d'. b. 'yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "tsïen(gele)?",
	        "/feb(ruary)?/": "goevt(e)?",
	        "/mar(ch)?/": "njok(tje)?",
	        "/apr(il)?/": "voer(htje)?",
	        "/may/": "sueh(pede)?",
	        "/jun(e)?/": "ruff(ie)?",
	        "/jul(y)?/": "snja(ltje)?",
	        "/aug(ust)?/": "mïet(ske)?",
	        "/sep(t(ember)?)?/": "skïer(ede)?",
	        "/oct(ober)?/": "golk(e)?",
	        "/nov(ember)?/": "rahk(a)?",
	        "/dec(ember)?/": "goev(e)?",
	        "/^su(n(day)?)?/": "^aejlege",
	        "/^mo(n(day)?)?/": "^måanta",
	        "/^tu(e(s(day)?)?)?/": "^dæjsta",
	        "/^we(d(nesday)?)?/": "^gaskevåhkoe",
	        "/^th(u(r(s(day)?)?)?)?/": "^duarsta",
	        "/^fr(i(day)?)?/": "^bearjadahke",
	        "/^sa(t(urday)?)?/": "^laavvardahke",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sma-SE";


/***/ },
/* 262 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: smj-NO
	 * Name: Sami (Lule) (Norway)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["smj-NO"] = {
	        "name": "smj-NO",
	        "englishName": "Sami (Lule) (Norway)",
	        "nativeName": "julevusámegiella (Vuodna)",
	        "Sunday": "sådnåbiejvve",
	        "Monday": "mánnodahka",
	        "Tuesday": "dijstahka",
	        "Wednesday": "gasskavahkko",
	        "Thursday": "duorastahka",
	        "Friday": "bierjjedahka",
	        "Saturday": "lávvodahka",
	        "Sun": "såd",
	        "Mon": "mán",
	        "Tue": "dis",
	        "Wed": "gas",
	        "Thu": "duor",
	        "Fri": "bier",
	        "Sat": "láv",
	        "Su": "såd",
	        "Mo": "mán",
	        "Tu": "dis",
	        "We": "gas",
	        "Th": "duor",
	        "Fr": "bier",
	        "Sa": "láv",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "d",
	        "W_Wed_Initial": "g",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "b",
	        "S_Sat_Initial": "l",
	        "January": "ådåjakmánno",
	        "February": "guovvamánno",
	        "March": "sjnjuktjamánno",
	        "April": "vuoratjismánno",
	        "May": "moarmesmánno",
	        "June": "biehtsemánno",
	        "July": "sjnjilltjamánno",
	        "August": "bårggemánno",
	        "September": "ragátmánno",
	        "October": "gålgådismánno",
	        "November": "basádismánno",
	        "December": "javllamánno",
	        "Jan_Abbr": "ådåj",
	        "Feb_Abbr": "guov",
	        "Mar_Abbr": "snju",
	        "Apr_Abbr": "vuor",
	        "May_Abbr": "moar",
	        "Jun_Abbr": "bieh",
	        "Jul_Abbr": "snji",
	        "Aug_Abbr": "bårg",
	        "Sep_Abbr": "ragá",
	        "Oct_Abbr": "gålg",
	        "Nov_Abbr": "basá",
	        "Dec_Abbr": "javl",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "MMMM d'. b. 'yyyy",
	        "h:mm tt": "HH:mm:ss",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d'. b. 'yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ådåj(akmánno)?",
	        "/feb(ruary)?/": "guov(vamánno)?",
	        "/mar(ch)?/": "sjnjuktjamánno",
	        "/apr(il)?/": "vuor(atjismánno)?",
	        "/may/": "moar(mesmánno)?",
	        "/jun(e)?/": "bieh(tsemánno)?",
	        "/jul(y)?/": "sjnjilltjamánno",
	        "/aug(ust)?/": "bårg(gemánno)?",
	        "/sep(t(ember)?)?/": "ragá(tmánno)?",
	        "/oct(ober)?/": "gålg(ådismánno)?",
	        "/nov(ember)?/": "basá(dismánno)?",
	        "/dec(ember)?/": "javl(lamánno)?",
	        "/^su(n(day)?)?/": "^sådnåbiejvve",
	        "/^mo(n(day)?)?/": "^mánnodahka",
	        "/^tu(e(s(day)?)?)?/": "^dijstahka",
	        "/^we(d(nesday)?)?/": "^gasskavahkko",
	        "/^th(u(r(s(day)?)?)?)?/": "^duorastahka",
	        "/^fr(i(day)?)?/": "^bierjjedahka",
	        "/^sa(t(urday)?)?/": "^lávvodahka",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "smj-NO";


/***/ },
/* 263 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: smj-SE
	 * Name: Sami (Lule) (Sweden)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["smj-SE"] = {
	        "name": "smj-SE",
	        "englishName": "Sami (Lule) (Sweden)",
	        "nativeName": "julevusámegiella (Svierik)",
	        "Sunday": "ájllek",
	        "Monday": "mánnodahka",
	        "Tuesday": "dijstahka",
	        "Wednesday": "gasskavahkko",
	        "Thursday": "duorastahka",
	        "Friday": "bierjjedahka",
	        "Saturday": "lávvodahka",
	        "Sun": "ájl",
	        "Mon": "mán",
	        "Tue": "dis",
	        "Wed": "gas",
	        "Thu": "duor",
	        "Fri": "bier",
	        "Sat": "láv",
	        "Su": "ájl",
	        "Mo": "mán",
	        "Tu": "dis",
	        "We": "gas",
	        "Th": "duor",
	        "Fr": "bier",
	        "Sa": "láv",
	        "S_Sun_Initial": "á",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "d",
	        "W_Wed_Initial": "g",
	        "T_Thu_Initial": "d",
	        "F_Fri_Initial": "b",
	        "S_Sat_Initial": "l",
	        "January": "ådåjakmánno",
	        "February": "guovvamánno",
	        "March": "sjnjuktjamánno",
	        "April": "vuoratjismánno",
	        "May": "moarmesmánno",
	        "June": "biehtsemánno",
	        "July": "sjnjilltjamánno",
	        "August": "bårggemánno",
	        "September": "ragátmánno",
	        "October": "gålgådismánno",
	        "November": "basádismánno",
	        "December": "javllamánno",
	        "Jan_Abbr": "ådåj",
	        "Feb_Abbr": "guov",
	        "Mar_Abbr": "snju",
	        "Apr_Abbr": "vuor",
	        "May_Abbr": "moar",
	        "Jun_Abbr": "bieh",
	        "Jul_Abbr": "snji",
	        "Aug_Abbr": "bårg",
	        "Sep_Abbr": "ragá",
	        "Oct_Abbr": "gålg",
	        "Nov_Abbr": "basá",
	        "Dec_Abbr": "javl",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy-MM-dd",
	        "dddd, MMMM dd, yyyy": "MMMM d'. b. 'yyyy",
	        "h:mm tt": "HH:mm:ss",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d'. b. 'yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ådåj(akmánno)?",
	        "/feb(ruary)?/": "guov(vamánno)?",
	        "/mar(ch)?/": "sjnjuktjamánno",
	        "/apr(il)?/": "vuor(atjismánno)?",
	        "/may/": "moar(mesmánno)?",
	        "/jun(e)?/": "bieh(tsemánno)?",
	        "/jul(y)?/": "sjnjilltjamánno",
	        "/aug(ust)?/": "bårg(gemánno)?",
	        "/sep(t(ember)?)?/": "ragá(tmánno)?",
	        "/oct(ober)?/": "gålg(ådismánno)?",
	        "/nov(ember)?/": "basá(dismánno)?",
	        "/dec(ember)?/": "javl(lamánno)?",
	        "/^su(n(day)?)?/": "^ájllek",
	        "/^mo(n(day)?)?/": "^mánnodahka",
	        "/^tu(e(s(day)?)?)?/": "^dijstahka",
	        "/^we(d(nesday)?)?/": "^gasskavahkko",
	        "/^th(u(r(s(day)?)?)?)?/": "^duorastahka",
	        "/^fr(i(day)?)?/": "^bierjjedahka",
	        "/^sa(t(urday)?)?/": "^lávvodahka",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "smj-SE";


/***/ },
/* 264 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: smn-FI
	 * Name: Sami (Inari) (Finland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["smn-FI"] = {
	        "name": "smn-FI",
	        "englishName": "Sami (Inari) (Finland)",
	        "nativeName": "sämikielâ (Suomâ)",
	        "Sunday": "pasepeivi",
	        "Monday": "vuossargâ",
	        "Tuesday": "majebargâ",
	        "Wednesday": "koskokko",
	        "Thursday": "tuorâstâh",
	        "Friday": "vástuppeivi",
	        "Saturday": "lávárdâh",
	        "Sun": "pa",
	        "Mon": "vu",
	        "Tue": "ma",
	        "Wed": "ko",
	        "Thu": "tu",
	        "Fri": "vá",
	        "Sat": "lá",
	        "Su": "pa",
	        "Mo": "vu",
	        "Tu": "ma",
	        "We": "ko",
	        "Th": "tu",
	        "Fr": "vá",
	        "Sa": "lá",
	        "S_Sun_Initial": "p",
	        "M_Mon_Initial": "v",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "k",
	        "T_Thu_Initial": "t",
	        "F_Fri_Initial": "v",
	        "S_Sat_Initial": "l",
	        "January": "uđđâivemáánu",
	        "February": "kuovâmáánu",
	        "March": "njuhčâmáánu",
	        "April": "cuáŋuimáánu",
	        "May": "vyesimáánu",
	        "June": "kesimáánu",
	        "July": "syeinimáánu",
	        "August": "porgemáánu",
	        "September": "čohčâmáánu",
	        "October": "roovvâdmáánu",
	        "November": "skammâmáánu",
	        "December": "juovlâmáánu",
	        "Jan_Abbr": "uđiv",
	        "Feb_Abbr": "kuov",
	        "Mar_Abbr": "njuh",
	        "Apr_Abbr": "cuoŋ",
	        "May_Abbr": "vyes",
	        "Jun_Abbr": "kesi",
	        "Jul_Abbr": "syei",
	        "Aug_Abbr": "porg",
	        "Sep_Abbr": "čoh",
	        "Oct_Abbr": "roov",
	        "Nov_Abbr": "ska",
	        "Dec_Abbr": "juov",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "MMMM d'. p. 'yyyy",
	        "h:mm tt": "H:mm:ss",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d'. p. 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "uđđâivemáánu",
	        "/feb(ruary)?/": "kuov(âmáánu)?",
	        "/mar(ch)?/": "njuh(čâmáánu)?",
	        "/apr(il)?/": "cuáŋuimáánu",
	        "/may/": "vyes(imáánu)?",
	        "/jun(e)?/": "kesi(máánu)?",
	        "/jul(y)?/": "syei(nimáánu)?",
	        "/aug(ust)?/": "porg(emáánu)?",
	        "/sep(t(ember)?)?/": "čoh(čâmáánu)?",
	        "/oct(ober)?/": "roov(vâdmáánu)?",
	        "/nov(ember)?/": "ska(mmâmáánu)?",
	        "/dec(ember)?/": "juov(lâmáánu)?",
	        "/^su(n(day)?)?/": "^pasepeivi",
	        "/^mo(n(day)?)?/": "^vuossargâ",
	        "/^tu(e(s(day)?)?)?/": "^majebargâ",
	        "/^we(d(nesday)?)?/": "^koskokko",
	        "/^th(u(r(s(day)?)?)?)?/": "^tuorâstâh",
	        "/^fr(i(day)?)?/": "^vástuppeivi",
	        "/^sa(t(urday)?)?/": "^lávárdâh",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "smn-FI";


/***/ },
/* 265 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sms-FI
	 * Name: Sami (Skolt) (Finland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sms-FI"] = {
	        "name": "sms-FI",
	        "englishName": "Sami (Skolt) (Finland)",
	        "nativeName": "sääm´ǩiõll (Lää´ddjânnam)",
	        "Sunday": "pâ´sspei´vv",
	        "Monday": "vuõssargg",
	        "Tuesday": "mââibargg",
	        "Wednesday": "seärad",
	        "Thursday": "nelljdpei´vv",
	        "Friday": "piâtnâc",
	        "Saturday": "sue´vet",
	        "Sun": "pâ",
	        "Mon": "vu",
	        "Tue": "mâ",
	        "Wed": "se",
	        "Thu": "ne",
	        "Fri": "pi",
	        "Sat": "su",
	        "Su": "pâ",
	        "Mo": "vu",
	        "Tu": "mâ",
	        "We": "se",
	        "Th": "ne",
	        "Fr": "pi",
	        "Sa": "su",
	        "S_Sun_Initial": "p",
	        "M_Mon_Initial": "v",
	        "T_Tue_Initial": "m",
	        "W_Wed_Initial": "s",
	        "T_Thu_Initial": "n",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "s",
	        "January": "ođđee´jjmään",
	        "February": "tä´lvvmään",
	        "March": "pâ´zzlâšttammään",
	        "April": "njuhččmään",
	        "May": "vue´ssmään",
	        "June": "ǩie´ssmään",
	        "July": "suei´nnmään",
	        "August": "på´rǧǧmään",
	        "September": "čõhččmään",
	        "October": "kålggmään",
	        "November": "skamm´mään",
	        "December": "rosttovmään",
	        "Jan_Abbr": "ođjm",
	        "Feb_Abbr": "tä´lvv",
	        "Mar_Abbr": "pâzl",
	        "Apr_Abbr": "njuh",
	        "May_Abbr": "vue",
	        "Jun_Abbr": "ǩie",
	        "Jul_Abbr": "suei",
	        "Aug_Abbr": "på´r",
	        "Sep_Abbr": "čõh",
	        "Oct_Abbr": "kålg",
	        "Nov_Abbr": "ska",
	        "Dec_Abbr": "rost",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "MMMM d'. p. 'yyyy",
	        "h:mm tt": "H:mm:ss",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "MMMM d'. p. 'yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ođđee´jjmään",
	        "/feb(ruary)?/": "tä´lvv(mään)?",
	        "/mar(ch)?/": "pâ´zzlâšttammään",
	        "/apr(il)?/": "njuh(ččmään)?",
	        "/may/": "vue(´ssmään)?",
	        "/jun(e)?/": "ǩie(´ssmään)?",
	        "/jul(y)?/": "suei(´nnmään)?",
	        "/aug(ust)?/": "på´r(ǧǧmään)?",
	        "/sep(t(ember)?)?/": "čõh(ččmään)?",
	        "/oct(ober)?/": "kålg(gmään)?",
	        "/nov(ember)?/": "ska(mm´mään)?",
	        "/dec(ember)?/": "rost(tovmään)?",
	        "/^su(n(day)?)?/": "^pâ´sspei´vv",
	        "/^mo(n(day)?)?/": "^vuõssargg",
	        "/^tu(e(s(day)?)?)?/": "^mââibargg",
	        "/^we(d(nesday)?)?/": "^seärad",
	        "/^th(u(r(s(day)?)?)?)?/": "^nelljdpei´vv",
	        "/^fr(i(day)?)?/": "^piâtnâc",
	        "/^sa(t(urday)?)?/": "^sue´vet",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sms-FI";


/***/ },
/* 266 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sq-AL
	 * Name: Albanian (Albania)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sq-AL"] = {
	        "name": "sq-AL",
	        "englishName": "Albanian (Albania)",
	        "nativeName": "shqipe (Shqipëria)",
	        "Sunday": "e diel",
	        "Monday": "e hënë",
	        "Tuesday": "e martë",
	        "Wednesday": "e mërkurë",
	        "Thursday": "e enjte",
	        "Friday": "e premte",
	        "Saturday": "e shtunë",
	        "Sun": "Die",
	        "Mon": "Hën",
	        "Tue": "Mar",
	        "Wed": "Mër",
	        "Thu": "Enj",
	        "Fri": "Pre",
	        "Sat": "Sht",
	        "Su": "Di",
	        "Mo": "Hë",
	        "Tu": "Ma",
	        "We": "Më",
	        "Th": "En",
	        "Fr": "Pr",
	        "Sa": "Sh",
	        "S_Sun_Initial": "D",
	        "M_Mon_Initial": "H",
	        "T_Tue_Initial": "M",
	        "W_Wed_Initial": "M",
	        "T_Thu_Initial": "E",
	        "F_Fri_Initial": "P",
	        "S_Sat_Initial": "S",
	        "January": "janar",
	        "February": "shkurt",
	        "March": "mars",
	        "April": "prill",
	        "May": "maj",
	        "June": "qershor",
	        "July": "korrik",
	        "August": "gusht",
	        "September": "shtator",
	        "October": "tetor",
	        "November": "nëntor",
	        "December": "dhjetor",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Shk",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Pri",
	        "May_Abbr": "Maj",
	        "Jun_Abbr": "Qer",
	        "Jul_Abbr": "Kor",
	        "Aug_Abbr": "Gsh",
	        "Sep_Abbr": "Sht",
	        "Oct_Abbr": "Tet",
	        "Nov_Abbr": "Nën",
	        "Dec_Abbr": "Dhj",
	        "AM": "PD",
	        "PM": "MD",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy-MM-dd",
	        "dddd, MMMM dd, yyyy": "yyyy-MM-dd",
	        "h:mm tt": "h:mm.tt",
	        "h:mm:ss tt": "h:mm:ss.tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy-MM-dd h:mm:ss.tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "yyyy-MM",
	        "/jan(uary)?/": "jan(ar)?",
	        "/feb(ruary)?/": "shk(urt)?",
	        "/mar(ch)?/": "mar(s)?",
	        "/apr(il)?/": "pri(ll)?",
	        "/may/": "maj",
	        "/jun(e)?/": "qer(shor)?",
	        "/jul(y)?/": "kor(rik)?",
	        "/aug(ust)?/": "gusht",
	        "/sep(t(ember)?)?/": "sht(ator)?",
	        "/oct(ober)?/": "tet(or)?",
	        "/nov(ember)?/": "nën(tor)?",
	        "/dec(ember)?/": "dhj(etor)?",
	        "/^su(n(day)?)?/": "^di(e(iel)?)?",
	        "/^mo(n(day)?)?/": "^hë(n(ënë)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ma(r(artë)?)?",
	        "/^we(d(nesday)?)?/": "^më(r(ërkurë)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^en(j(njte)?)?",
	        "/^fr(i(day)?)?/": "^pr(e(remte)?)?",
	        "/^sa(t(urday)?)?/": "^sh(t(htunë)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sq-AL";


/***/ },
/* 267 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sr-Cyrl-BA
	 * Name: Serbian (Cyrillic) (Bosnia and Herzegovina)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sr-Cyrl-BA"] = {
	        "name": "sr-Cyrl-BA",
	        "englishName": "Serbian (Cyrillic) (Bosnia and Herzegovina)",
	        "nativeName": "српски (Босна и Херцеговина)",
	        "Sunday": "недеља",
	        "Monday": "понедељак",
	        "Tuesday": "уторак",
	        "Wednesday": "среда",
	        "Thursday": "четвртак",
	        "Friday": "петак",
	        "Saturday": "субота",
	        "Sun": "нед",
	        "Mon": "пон",
	        "Tue": "уто",
	        "Wed": "сре",
	        "Thu": "чет",
	        "Fri": "пет",
	        "Sat": "суб",
	        "Su": "нед",
	        "Mo": "пон",
	        "Tu": "уто",
	        "We": "сре",
	        "Th": "чет",
	        "Fr": "пет",
	        "Sa": "суб",
	        "S_Sun_Initial": "н",
	        "M_Mon_Initial": "п",
	        "T_Tue_Initial": "у",
	        "W_Wed_Initial": "с",
	        "T_Thu_Initial": "ч",
	        "F_Fri_Initial": "п",
	        "S_Sat_Initial": "с",
	        "January": "јануар",
	        "February": "фебруар",
	        "March": "март",
	        "April": "април",
	        "May": "мај",
	        "June": "јун",
	        "July": "јул",
	        "August": "август",
	        "September": "септембар",
	        "October": "октобар",
	        "November": "новембар",
	        "December": "децембар",
	        "Jan_Abbr": "јан",
	        "Feb_Abbr": "феб",
	        "Mar_Abbr": "мар",
	        "Apr_Abbr": "апр",
	        "May_Abbr": "мај",
	        "Jun_Abbr": "јун",
	        "Jul_Abbr": "јул",
	        "Aug_Abbr": "авг",
	        "Sep_Abbr": "сеп",
	        "Oct_Abbr": "окт",
	        "Nov_Abbr": "нов",
	        "Dec_Abbr": "дец",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm:ss",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "јан(уар)?",
	        "/feb(ruary)?/": "феб(руар)?",
	        "/mar(ch)?/": "мар(т)?",
	        "/apr(il)?/": "апр(ил)?",
	        "/may/": "мај",
	        "/jun(e)?/": "јун",
	        "/jul(y)?/": "јул",
	        "/aug(ust)?/": "авг(уст)?",
	        "/sep(t(ember)?)?/": "сеп(тембар)?",
	        "/oct(ober)?/": "окт(обар)?",
	        "/nov(ember)?/": "нов(ембар)?",
	        "/dec(ember)?/": "дец(ембар)?",
	        "/^su(n(day)?)?/": "^недеља",
	        "/^mo(n(day)?)?/": "^понедељак",
	        "/^tu(e(s(day)?)?)?/": "^уторак",
	        "/^we(d(nesday)?)?/": "^среда",
	        "/^th(u(r(s(day)?)?)?)?/": "^четвртак",
	        "/^fr(i(day)?)?/": "^петак",
	        "/^sa(t(urday)?)?/": "^субота",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sr-Cyrl-BA";


/***/ },
/* 268 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sr-Cyrl-CS
	 * Name: Serbian (Cyrillic, Serbia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sr-Cyrl-CS"] = {
	        "name": "sr-Cyrl-CS",
	        "englishName": "Serbian (Cyrillic, Serbia)",
	        "nativeName": "српски (Србија)",
	        "Sunday": "недеља",
	        "Monday": "понедељак",
	        "Tuesday": "уторак",
	        "Wednesday": "среда",
	        "Thursday": "четвртак",
	        "Friday": "петак",
	        "Saturday": "субота",
	        "Sun": "нед",
	        "Mon": "пон",
	        "Tue": "уто",
	        "Wed": "сре",
	        "Thu": "чет",
	        "Fri": "пет",
	        "Sat": "суб",
	        "Su": "не",
	        "Mo": "по",
	        "Tu": "ут",
	        "We": "ср",
	        "Th": "че",
	        "Fr": "пе",
	        "Sa": "су",
	        "S_Sun_Initial": "н",
	        "M_Mon_Initial": "п",
	        "T_Tue_Initial": "у",
	        "W_Wed_Initial": "с",
	        "T_Thu_Initial": "ч",
	        "F_Fri_Initial": "п",
	        "S_Sat_Initial": "с",
	        "January": "јануар",
	        "February": "фебруар",
	        "March": "март",
	        "April": "април",
	        "May": "мај",
	        "June": "јун",
	        "July": "јул",
	        "August": "август",
	        "September": "септембар",
	        "October": "октобар",
	        "November": "новембар",
	        "December": "децембар",
	        "Jan_Abbr": "јан",
	        "Feb_Abbr": "феб",
	        "Mar_Abbr": "мар",
	        "Apr_Abbr": "апр",
	        "May_Abbr": "мај",
	        "Jun_Abbr": "јун",
	        "Jul_Abbr": "јул",
	        "Aug_Abbr": "авг",
	        "Sep_Abbr": "сеп",
	        "Oct_Abbr": "окт",
	        "Nov_Abbr": "нов",
	        "Dec_Abbr": "дец",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "јан(уар)?",
	        "/feb(ruary)?/": "феб(руар)?",
	        "/mar(ch)?/": "мар(т)?",
	        "/apr(il)?/": "апр(ил)?",
	        "/may/": "мај",
	        "/jun(e)?/": "јун",
	        "/jul(y)?/": "јул",
	        "/aug(ust)?/": "авг(уст)?",
	        "/sep(t(ember)?)?/": "сеп(тембар)?",
	        "/oct(ober)?/": "окт(обар)?",
	        "/nov(ember)?/": "нов(ембар)?",
	        "/dec(ember)?/": "дец(ембар)?",
	        "/^su(n(day)?)?/": "^не(д(еља)?)?",
	        "/^mo(n(day)?)?/": "^по(н(едељак)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ут(о(рак)?)?",
	        "/^we(d(nesday)?)?/": "^ср(е(да)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^че(т(вртак)?)?",
	        "/^fr(i(day)?)?/": "^пе(т(ак)?)?",
	        "/^sa(t(urday)?)?/": "^су(б(ота)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sr-Cyrl-CS";


/***/ },
/* 269 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sr-Latn-BA
	 * Name: Serbian (Latin) (Bosnia and Herzegovina)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sr-Latn-BA"] = {
	        "name": "sr-Latn-BA",
	        "englishName": "Serbian (Latin) (Bosnia and Herzegovina)",
	        "nativeName": "srpski (Bosna i Hercegovina)",
	        "Sunday": "nedelja",
	        "Monday": "ponedeljak",
	        "Tuesday": "utorak",
	        "Wednesday": "sreda",
	        "Thursday": "četvrtak",
	        "Friday": "petak",
	        "Saturday": "subota",
	        "Sun": "ned",
	        "Mon": "pon",
	        "Tue": "uto",
	        "Wed": "sre",
	        "Thu": "čet",
	        "Fri": "pet",
	        "Sat": "sub",
	        "Su": "ned",
	        "Mo": "pon",
	        "Tu": "uto",
	        "We": "sre",
	        "Th": "čet",
	        "Fr": "pet",
	        "Sa": "sub",
	        "S_Sun_Initial": "n",
	        "M_Mon_Initial": "p",
	        "T_Tue_Initial": "u",
	        "W_Wed_Initial": "s",
	        "T_Thu_Initial": "č",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "s",
	        "January": "januar",
	        "February": "februar",
	        "March": "mart",
	        "April": "april",
	        "May": "maj",
	        "June": "jun",
	        "July": "jul",
	        "August": "avgust",
	        "September": "septembar",
	        "October": "oktobar",
	        "November": "novembar",
	        "December": "decembar",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "maj",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "avg",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm:ss",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "mar(t)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "maj",
	        "/jun(e)?/": "jun",
	        "/jul(y)?/": "jul",
	        "/aug(ust)?/": "avg(ust)?",
	        "/sep(t(ember)?)?/": "sep(tembar)?",
	        "/oct(ober)?/": "okt(obar)?",
	        "/nov(ember)?/": "nov(embar)?",
	        "/dec(ember)?/": "dec(embar)?",
	        "/^su(n(day)?)?/": "^nedelja",
	        "/^mo(n(day)?)?/": "^ponedeljak",
	        "/^tu(e(s(day)?)?)?/": "^utorak",
	        "/^we(d(nesday)?)?/": "^sreda",
	        "/^th(u(r(s(day)?)?)?)?/": "^četvrtak",
	        "/^fr(i(day)?)?/": "^petak",
	        "/^sa(t(urday)?)?/": "^subota",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sr-Latn-BA";


/***/ },
/* 270 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sr-Latn-CS
	 * Name: Serbian (Latin, Serbia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sr-Latn-CS"] = {
	        "name": "sr-Latn-CS",
	        "englishName": "Serbian (Latin, Serbia)",
	        "nativeName": "srpski (Srbija)",
	        "Sunday": "nedelja",
	        "Monday": "ponedeljak",
	        "Tuesday": "utorak",
	        "Wednesday": "sreda",
	        "Thursday": "četvrtak",
	        "Friday": "petak",
	        "Saturday": "subota",
	        "Sun": "ned",
	        "Mon": "pon",
	        "Tue": "uto",
	        "Wed": "sre",
	        "Thu": "čet",
	        "Fri": "pet",
	        "Sat": "sub",
	        "Su": "ne",
	        "Mo": "po",
	        "Tu": "ut",
	        "We": "sr",
	        "Th": "če",
	        "Fr": "pe",
	        "Sa": "su",
	        "S_Sun_Initial": "n",
	        "M_Mon_Initial": "p",
	        "T_Tue_Initial": "u",
	        "W_Wed_Initial": "s",
	        "T_Thu_Initial": "č",
	        "F_Fri_Initial": "p",
	        "S_Sat_Initial": "s",
	        "January": "januar",
	        "February": "februar",
	        "March": "mart",
	        "April": "april",
	        "May": "maj",
	        "June": "jun",
	        "July": "jul",
	        "August": "avgust",
	        "September": "septembar",
	        "October": "oktobar",
	        "November": "novembar",
	        "December": "decembar",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "maj",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "avg",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "d. MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d. MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d. MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uar)?",
	        "/feb(ruary)?/": "feb(ruar)?",
	        "/mar(ch)?/": "mar(t)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "maj",
	        "/jun(e)?/": "jun",
	        "/jul(y)?/": "jul",
	        "/aug(ust)?/": "avg(ust)?",
	        "/sep(t(ember)?)?/": "sep(tembar)?",
	        "/oct(ober)?/": "okt(obar)?",
	        "/nov(ember)?/": "nov(embar)?",
	        "/dec(ember)?/": "dec(embar)?",
	        "/^su(n(day)?)?/": "^ne(d(elja)?)?",
	        "/^mo(n(day)?)?/": "^po(n(edeljak)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ut(o(rak)?)?",
	        "/^we(d(nesday)?)?/": "^sr(e(da)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^če(t(vrtak)?)?",
	        "/^fr(i(day)?)?/": "^pe(t(ak)?)?",
	        "/^sa(t(urday)?)?/": "^su(b(ota)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sr-Latn-CS";


/***/ },
/* 271 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sv-FI
	 * Name: Swedish (Finland)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sv-FI"] = {
	        "name": "sv-FI",
	        "englishName": "Swedish (Finland)",
	        "nativeName": "svenska (Finland)",
	        "Sunday": "söndag",
	        "Monday": "måndag",
	        "Tuesday": "tisdag",
	        "Wednesday": "onsdag",
	        "Thursday": "torsdag",
	        "Friday": "fredag",
	        "Saturday": "lördag",
	        "Sun": "sö",
	        "Mon": "må",
	        "Tue": "ti",
	        "Wed": "on",
	        "Thu": "to",
	        "Fri": "fr",
	        "Sat": "lö",
	        "Su": "sö",
	        "Mo": "må",
	        "Tu": "ti",
	        "We": "on",
	        "Th": "to",
	        "Fr": "fr",
	        "Sa": "lö",
	        "S_Sun_Initial": "s",
	        "M_Mon_Initial": "m",
	        "T_Tue_Initial": "t",
	        "W_Wed_Initial": "o",
	        "T_Thu_Initial": "t",
	        "F_Fri_Initial": "f",
	        "S_Sat_Initial": "l",
	        "January": "januari",
	        "February": "februari",
	        "March": "mars",
	        "April": "april",
	        "May": "maj",
	        "June": "juni",
	        "July": "juli",
	        "August": "augusti",
	        "September": "september",
	        "October": "oktober",
	        "November": "november",
	        "December": "december",
	        "Jan_Abbr": "jan",
	        "Feb_Abbr": "feb",
	        "Mar_Abbr": "mar",
	        "Apr_Abbr": "apr",
	        "May_Abbr": "maj",
	        "Jun_Abbr": "jun",
	        "Jul_Abbr": "jul",
	        "Aug_Abbr": "aug",
	        "Sep_Abbr": "sep",
	        "Oct_Abbr": "okt",
	        "Nov_Abbr": "nov",
	        "Dec_Abbr": "dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d.M.yyyy",
	        "dddd, MMMM dd, yyyy": "'den 'd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "'den 'd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "'den 'd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uari)?",
	        "/feb(ruary)?/": "feb(ruari)?",
	        "/mar(ch)?/": "mar(s)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "maj",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(usti)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^söndag",
	        "/^mo(n(day)?)?/": "^måndag",
	        "/^tu(e(s(day)?)?)?/": "^tisdag",
	        "/^we(d(nesday)?)?/": "^onsdag",
	        "/^th(u(r(s(day)?)?)?)?/": "^torsdag",
	        "/^fr(i(day)?)?/": "^fredag",
	        "/^sa(t(urday)?)?/": "^lördag",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sv-FI";


/***/ },
/* 272 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sv-SE
	 * Name: Swedish (Sweden)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sv-SE"] = {
	        "name": "sv-SE",
	        "englishName": "Swedish (Sweden)",
	        "nativeName": "Svenska (Sverige)",
	        "Sunday": "Söndag",
	        "Monday": "Måndag",
	        "Tuesday": "Tisdag",
	        "Wednesday": "Onsdag",
	        "Thursday": "Torsdag",
	        "Friday": "Fredag",
	        "Saturday": "Lördag",
	        "Sun": "Sön",
	        "Mon": "Mån",
	        "Tue": "Tis",
	        "Wed": "Ons",
	        "Thu": "Tor",
	        "Fri": "Fre",
	        "Sat": "Lör",
	        "Su": "Sö",
	        "Mo": "Må",
	        "Tu": "Ti",
	        "We": "On",
	        "Th": "To",
	        "Fr": "Fr",
	        "Sa": "Lö",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "O",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "L",
	        "January": "Januari",
	        "February": "Februari",
	        "March": "Mars",
	        "April": "April",
	        "May": "Maj",
	        "June": "Juni",
	        "July": "Juli",
	        "August": "Augusti",
	        "September": "September",
	        "October": "Oktober",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "Maj",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Okt",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy-MM-dd",
	        "dddd, MMMM dd, yyyy": "'den 'd MMMM yyyy",
	        "h:mm tt": "HH.mm",
	        "h:mm:ss tt": "HH.mm.ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "'den 'd MMMM yyyy HH.mm.ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH.mm.ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH.mm.ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH.mm.ss",
	        "MMMM dd": "'den 'd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "jan(uari)?",
	        "/feb(ruary)?/": "feb(ruari)?",
	        "/mar(ch)?/": "mar(s)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "maj",
	        "/jun(e)?/": "jun(i)?",
	        "/jul(y)?/": "jul(i)?",
	        "/aug(ust)?/": "aug(usti)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "okt(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^sö(n(dag)?)?",
	        "/^mo(n(day)?)?/": "^må(n(dag)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ti(s(dag)?)?",
	        "/^we(d(nesday)?)?/": "^on(s(dag)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^to(r(s(dag)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(e(dag)?)?",
	        "/^sa(t(urday)?)?/": "^lö(r(dag)?)?",
	        "/^next/": "^nästa",
	        "/^last|past|prev(ious)?/": "^föregående|förra|senaste",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|efter|från)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|före|tidigare)",
	        "/^yes(terday)?/": "^i\\s?går|(för)går(dag)?",
	        "/^t(od(ay)?)?/": "^i\\s?dag?",
	        "/^tom(orrow)?/": "^i\\s?morgon|morgon(dag)?",
	        "/^n(ow)?/": "^nu",
	        "/^ms|milli(second)?s?/": "^ms|milli(sekund)?(er)?",
	        "/^sec(ond)?s?/": "^sek(und)?(er)?",
	        "/^mn|min(ute)?s?/": "^min(ut)?(er)?",
	        "/^h(our)?s?/": "^t(im)?(ar)?",
	        "/^w(eek)?s?/": "^v(eck(a)?)?(or)?",
	        "/^m(onth)?s?/": "^m(ånad)?(er)?",
	        "/^d(ay)?s?/": "^d(ag)?(ar)?",
	        "/^y(ear)?s?/": "^å(r)?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sv-SE";


/***/ },
/* 273 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: sw-KE
	 * Name: Kiswahili (Kenya)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["sw-KE"] = {
	        "name": "sw-KE",
	        "englishName": "Kiswahili (Kenya)",
	        "nativeName": "Kiswahili (Kenya)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "S",
	        "Mo": "M",
	        "Tu": "T",
	        "We": "W",
	        "Th": "T",
	        "Fr": "F",
	        "Sa": "S",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "mdy",
	        "M/d/yyyy": "M/d/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, MMMM dd, yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, MMMM dd, yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^s(un(day)?)?",
	        "/^mo(n(day)?)?/": "^m(on(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^w(ed(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^f(ri(day)?)?",
	        "/^sa(t(urday)?)?/": "^s(at(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "sw-KE";


/***/ },
/* 274 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: syr-SY
	 * Name: Syriac (Syria)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["syr-SY"] = {
	        "name": "syr-SY",
	        "englishName": "Syriac (Syria)",
	        "nativeName": "ܣܘܪܝܝܐ (سوريا)",
	        "Sunday": "ܚܕ ܒܫܒܐ",
	        "Monday": "ܬܪܝܢ ܒܫܒܐ",
	        "Tuesday": "ܬܠܬܐ ܒܫܒܐ",
	        "Wednesday": "ܐܪܒܥܐ ܒܫܒܐ",
	        "Thursday": "ܚܡܫܐ ܒܫܒܐ",
	        "Friday": "ܥܪܘܒܬܐ",
	        "Saturday": "ܫܒܬܐ",
	        "Sun": "܏ܐ ܏ܒܫ",
	        "Mon": "܏ܒ ܏ܒܫ",
	        "Tue": "܏ܓ ܏ܒܫ",
	        "Wed": "܏ܕ ܏ܒܫ",
	        "Thu": "܏ܗ ܏ܒܫ",
	        "Fri": "܏ܥܪܘܒ",
	        "Sat": "܏ܫܒ",
	        "Su": "܏",
	        "Mo": "܏",
	        "Tu": "܏",
	        "We": "܏",
	        "Th": "܏",
	        "Fr": "܏",
	        "Sa": "܏",
	        "S_Sun_Initial": "܏",
	        "M_Mon_Initial": "܏",
	        "T_Tue_Initial": "܏",
	        "W_Wed_Initial": "܏",
	        "T_Thu_Initial": "܏",
	        "F_Fri_Initial": "܏",
	        "S_Sat_Initial": "܏",
	        "January": "ܟܢܘܢ ܐܚܪܝ",
	        "February": "ܫܒܛ",
	        "March": "ܐܕܪ",
	        "April": "ܢܝܣܢ",
	        "May": "ܐܝܪ",
	        "June": "ܚܙܝܪܢ",
	        "July": "ܬܡܘܙ",
	        "August": "ܐܒ",
	        "September": "ܐܝܠܘܠ",
	        "October": "ܬܫܪܝ ܩܕܝܡ",
	        "November": "ܬܫܪܝ ܐܚܪܝ",
	        "December": "ܟܢܘܢ ܩܕܝܡ",
	        "Jan_Abbr": "܏ܟܢ ܏ܒ",
	        "Feb_Abbr": "ܫܒܛ",
	        "Mar_Abbr": "ܐܕܪ",
	        "Apr_Abbr": "ܢܝܣܢ",
	        "May_Abbr": "ܐܝܪ",
	        "Jun_Abbr": "ܚܙܝܪܢ",
	        "Jul_Abbr": "ܬܡܘܙ",
	        "Aug_Abbr": "ܐܒ",
	        "Sep_Abbr": "ܐܝܠܘܠ",
	        "Oct_Abbr": "܏ܬܫ ܏ܐ",
	        "Nov_Abbr": "܏ܬܫ ܏ܒ",
	        "Dec_Abbr": "܏ܟܢ ܏ܐ",
	        "AM": "ܩ.ܛ",
	        "PM": "ܒ.ܛ",
	        "firstDayOfWeek": 6,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "hh:mm tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "ܟܢܘܢ ܐܚܪܝ",
	        "/feb(ruary)?/": "ܫܒܛ",
	        "/mar(ch)?/": "ܐܕܪ",
	        "/apr(il)?/": "ܢܝܣܢ",
	        "/may/": "ܐܝܪ",
	        "/jun(e)?/": "ܚܙܝܪܢ",
	        "/jul(y)?/": "ܬܡܘܙ",
	        "/aug(ust)?/": "ܐܒ",
	        "/sep(t(ember)?)?/": "ܐܝܠܘܠ",
	        "/oct(ober)?/": "ܬܫܪܝ ܩܕܝܡ",
	        "/nov(ember)?/": "ܬܫܪܝ ܐܚܪܝ",
	        "/dec(ember)?/": "ܟܢܘܢ ܩܕܝܡ",
	        "/^su(n(day)?)?/": "^܏(ܐ ܏ܒܫ(ܐ)?)?",
	        "/^mo(n(day)?)?/": "^܏(ܒ ܏ܒܫ(ܫܒܐ)?)?",
	        "/^tu(e(s(day)?)?)?/": "^܏(ܓ ܏ܒܫ(ܫܒܐ)?)?",
	        "/^we(d(nesday)?)?/": "^܏(ܕ ܏ܒܫ(ܒܫܒܐ)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^܏(ܗ ܏ܒܫ(ܫܒܐ)?)?",
	        "/^fr(i(day)?)?/": "^܏(ܥܪܘܒ(ܐ)?)?",
	        "/^sa(t(urday)?)?/": "^܏(ܫܒ(ܐ)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "syr-SY";


/***/ },
/* 275 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ta-IN
	 * Name: Tamil (India)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ta-IN"] = {
	        "name": "ta-IN",
	        "englishName": "Tamil (India)",
	        "nativeName": "தமிழ் (இந்தியா)",
	        "Sunday": "ஞாயிறு",
	        "Monday": "திங்கள்",
	        "Tuesday": "செவ்வாய்",
	        "Wednesday": "புதன்",
	        "Thursday": "வியாழன்",
	        "Friday": "வெள்ளி",
	        "Saturday": "சனி",
	        "Sun": "ஞா",
	        "Mon": "தி",
	        "Tue": "செ",
	        "Wed": "பு",
	        "Thu": "வி",
	        "Fri": "வெ",
	        "Sat": "ச",
	        "Su": "ஞ",
	        "Mo": "த",
	        "Tu": "ச",
	        "We": "ப",
	        "Th": "வ",
	        "Fr": "வ",
	        "Sa": "ச",
	        "S_Sun_Initial": "ஞ",
	        "M_Mon_Initial": "த",
	        "T_Tue_Initial": "ச",
	        "W_Wed_Initial": "ப",
	        "T_Thu_Initial": "வ",
	        "F_Fri_Initial": "வ",
	        "S_Sat_Initial": "ச",
	        "January": "ஜனவரி",
	        "February": "பெப்ரவரி",
	        "March": "மார்ச்",
	        "April": "ஏப்ரல்",
	        "May": "மே",
	        "June": "ஜூன்",
	        "July": "ஜூலை",
	        "August": "ஆகஸ்ட்",
	        "September": "செப்டம்பர்",
	        "October": "அக்டோபர்",
	        "November": "நவம்பர்",
	        "December": "டிசம்பர்",
	        "Jan_Abbr": "ஜன.",
	        "Feb_Abbr": "பெப்.",
	        "Mar_Abbr": "மார்.",
	        "Apr_Abbr": "ஏப்.",
	        "May_Abbr": "மே",
	        "Jun_Abbr": "ஜூன்",
	        "Jul_Abbr": "ஜூலை",
	        "Aug_Abbr": "ஆக.",
	        "Sep_Abbr": "செப்.",
	        "Oct_Abbr": "அக்.",
	        "Nov_Abbr": "நவ.",
	        "Dec_Abbr": "டிச.",
	        "AM": "காலை",
	        "PM": "மாலை",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ஜன(.(வரி)?)?",
	        "/feb(ruary)?/": "பெப்(.(ரவரி)?)?",
	        "/mar(ch)?/": "மார்(.(ச்)?)?",
	        "/apr(il)?/": "ஏப்(.(ரல்)?)?",
	        "/may/": "மே",
	        "/jun(e)?/": "ஜூன்",
	        "/jul(y)?/": "ஜூலை",
	        "/aug(ust)?/": "ஆக(.(ஸ்ட்)?)?",
	        "/sep(t(ember)?)?/": "செப்(.(டம்பர்)?)?",
	        "/oct(ober)?/": "அக்(.(டோபர்)?)?",
	        "/nov(ember)?/": "நவ(.(ம்பர்)?)?",
	        "/dec(ember)?/": "டிச(.(ம்பர்)?)?",
	        "/^su(n(day)?)?/": "^ஞ(ா(யிறு)?)?",
	        "/^mo(n(day)?)?/": "^த(ி(ங்கள்)?)?",
	        "/^tu(e(s(day)?)?)?/": "^ச(ெ(வ்வாய்)?)?",
	        "/^we(d(nesday)?)?/": "^ப(ு(தன்)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^வ(ி(யாழன்)?)?",
	        "/^fr(i(day)?)?/": "^வ(ெ(ள்ளி)?)?",
	        "/^sa(t(urday)?)?/": "^சனி",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ta-IN";


/***/ },
/* 276 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: te-IN
	 * Name: Telugu (India)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["te-IN"] = {
	        "name": "te-IN",
	        "englishName": "Telugu (India)",
	        "nativeName": "తెలుగు (భారత దేశం)",
	        "Sunday": "ఆదివారం",
	        "Monday": "సోమవారం",
	        "Tuesday": "మంగళవారం",
	        "Wednesday": "బుధవారం",
	        "Thursday": "గురువారం",
	        "Friday": "శుక్రవారం",
	        "Saturday": "శనివారం",
	        "Sun": "ఆది.",
	        "Mon": "సోమ.",
	        "Tue": "మంగళ.",
	        "Wed": "బుధ.",
	        "Thu": "గురు.",
	        "Fri": "శుక్ర.",
	        "Sat": "శని.",
	        "Su": "ఆ",
	        "Mo": "స",
	        "Tu": "మ",
	        "We": "బ",
	        "Th": "గ",
	        "Fr": "శ",
	        "Sa": "శ",
	        "S_Sun_Initial": "ఆ",
	        "M_Mon_Initial": "స",
	        "T_Tue_Initial": "మ",
	        "W_Wed_Initial": "బ",
	        "T_Thu_Initial": "గ",
	        "F_Fri_Initial": "శ",
	        "S_Sat_Initial": "శ",
	        "January": "జనవరి",
	        "February": "ఫిబ్రవరి",
	        "March": "మార్చి",
	        "April": "ఏప్రిల్",
	        "May": "మే",
	        "June": "జూన్",
	        "July": "జూలై",
	        "August": "ఆగస్టు",
	        "September": "సెప్టెంబర్",
	        "October": "అక్టోబర్",
	        "November": "నవంబర్",
	        "December": "డిసెంబర్",
	        "Jan_Abbr": "జనవరి",
	        "Feb_Abbr": "ఫిబ్రవరి",
	        "Mar_Abbr": "మార్చి",
	        "Apr_Abbr": "ఏప్రిల్",
	        "May_Abbr": "మే",
	        "Jun_Abbr": "జూన్",
	        "Jul_Abbr": "జూలై",
	        "Aug_Abbr": "ఆగస్టు",
	        "Sep_Abbr": "సెప్టెంబర్",
	        "Oct_Abbr": "అక్టోబర్",
	        "Nov_Abbr": "నవంబర్",
	        "Dec_Abbr": "డిసెంబర్",
	        "AM": "పూర్వాహ్న",
	        "PM": "అపరాహ్న",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd-MM-yy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "జనవరి",
	        "/feb(ruary)?/": "ఫిబ్రవరి",
	        "/mar(ch)?/": "మార్చి",
	        "/apr(il)?/": "ఏప్రిల్",
	        "/may/": "మే",
	        "/jun(e)?/": "జూన్",
	        "/jul(y)?/": "జూలై",
	        "/aug(ust)?/": "ఆగస్టు",
	        "/sep(t(ember)?)?/": "సెప్టెంబర్",
	        "/oct(ober)?/": "అక్టోబర్",
	        "/nov(ember)?/": "నవంబర్",
	        "/dec(ember)?/": "డిసెంబర్",
	        "/^su(n(day)?)?/": "^ఆ(ది(.(వారం)?)?)?",
	        "/^mo(n(day)?)?/": "^స(ోమ(.(వారం)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^మ(ంగళ(.(వారం)?)?)?",
	        "/^we(d(nesday)?)?/": "^బ(ుధ(.(వారం)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^గ(ురు(.(వారం)?)?)?",
	        "/^fr(i(day)?)?/": "^శ(ుక్ర(.(వారం)?)?)?",
	        "/^sa(t(urday)?)?/": "^శ(ని(.(వారం)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "te-IN";


/***/ },
/* 277 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: th-TH
	 * Name: Thai (Thailand)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["th-TH"] = {
	        "name": "th-TH",
	        "englishName": "Thai (Thailand)",
	        "nativeName": "ไทย (ไทย)",
	        "Sunday": "อาทิตย์",
	        "Monday": "จันทร์",
	        "Tuesday": "อังคาร",
	        "Wednesday": "พุธ",
	        "Thursday": "พฤหัสบดี",
	        "Friday": "ศุกร์",
	        "Saturday": "เสาร์",
	        "Sun": "อา.",
	        "Mon": "จ.",
	        "Tue": "อ.",
	        "Wed": "พ.",
	        "Thu": "พฤ.",
	        "Fri": "ศ.",
	        "Sat": "ส.",
	        "Su": "อ",
	        "Mo": "จ",
	        "Tu": "อ",
	        "We": "พ",
	        "Th": "พ",
	        "Fr": "ศ",
	        "Sa": "ส",
	        "S_Sun_Initial": "อ",
	        "M_Mon_Initial": "จ",
	        "T_Tue_Initial": "อ",
	        "W_Wed_Initial": "พ",
	        "T_Thu_Initial": "พ",
	        "F_Fri_Initial": "ศ",
	        "S_Sat_Initial": "ส",
	        "January": "มกราคม",
	        "February": "กุมภาพันธ์",
	        "March": "มีนาคม",
	        "April": "เมษายน",
	        "May": "พฤษภาคม",
	        "June": "มิถุนายน",
	        "July": "กรกฎาคม",
	        "August": "สิงหาคม",
	        "September": "กันยายน",
	        "October": "ตุลาคม",
	        "November": "พฤศจิกายน",
	        "December": "ธันวาคม",
	        "Jan_Abbr": "ม.ค.",
	        "Feb_Abbr": "ก.พ.",
	        "Mar_Abbr": "มี.ค.",
	        "Apr_Abbr": "เม.ย.",
	        "May_Abbr": "พ.ค.",
	        "Jun_Abbr": "มิ.ย.",
	        "Jul_Abbr": "ก.ค.",
	        "Aug_Abbr": "ส.ค.",
	        "Sep_Abbr": "ก.ย.",
	        "Oct_Abbr": "ต.ค.",
	        "Nov_Abbr": "พ.ย.",
	        "Dec_Abbr": "ธ.ค.",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2572,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/M/yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ม(.(กราค)?)?",
	        "/feb(ruary)?/": "ก(.(ุมภาพันธ์)?)?",
	        "/mar(ch)?/": "มี(.(นาคม)?)?",
	        "/apr(il)?/": "เม(.(ษายน)?)?",
	        "/may/": "พ(.(ฤษภาคม)?)?",
	        "/jun(e)?/": "มิ(.(ถุนายน)?)?",
	        "/jul(y)?/": "ก(.(รฎาคม)?)?",
	        "/aug(ust)?/": "ส(.(ิงหาคม)?)?",
	        "/sep(t(ember)?)?/": "ก(.(ันยายน)?)?",
	        "/oct(ober)?/": "ต(.(ุลาคม)?)?",
	        "/nov(ember)?/": "พ(.(ฤศจิกายน)?)?",
	        "/dec(ember)?/": "ธ(.(ันวาคม)?)?",
	        "/^su(n(day)?)?/": "^อ(า(.(ทิตย์)?)?)?",
	        "/^mo(n(day)?)?/": "^จ((.(ันทร์)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^อ((.(ังคาร)?)?)?",
	        "/^we(d(nesday)?)?/": "^พ((.(ุธ)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^พ(ฤ(.(หัสบดี)?)?)?",
	        "/^fr(i(day)?)?/": "^ศ((.(ุกร์)?)?)?",
	        "/^sa(t(urday)?)?/": "^ส((.(สาร์)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "th-TH";


/***/ },
/* 278 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: tn-ZA
	 * Name: Tswana (South Africa)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["tn-ZA"] = {
	        "name": "tn-ZA",
	        "englishName": "Tswana (South Africa)",
	        "nativeName": "Setswana (Aforika Borwa)",
	        "Sunday": "Latshipi",
	        "Monday": "Mosupologo",
	        "Tuesday": "Labobedi",
	        "Wednesday": "Laboraro",
	        "Thursday": "Labone",
	        "Friday": "Labotlhano",
	        "Saturday": "Lamatlhatso",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Sun",
	        "Mo": "Mon",
	        "Tu": "Tue",
	        "We": "Wed",
	        "Th": "Thu",
	        "Fr": "Fri",
	        "Sa": "Sat",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "Ferikgong",
	        "February": "Tlhakole",
	        "March": "Mopitloe",
	        "April": "Moranang",
	        "May": "Motsheganong",
	        "June": "Seetebosigo",
	        "July": "Phukwi",
	        "August": "Phatwe",
	        "September": "Lwetse",
	        "October": "Diphalane",
	        "November": "Ngwanatsele",
	        "December": "Sedimothole",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/MM/dd",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "hh:mm:ss tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ferikgong",
	        "/feb(ruary)?/": "tlhakole",
	        "/mar(ch)?/": "mopitloe",
	        "/apr(il)?/": "moranang",
	        "/may/": "motsheganong",
	        "/jun(e)?/": "seetebosigo",
	        "/jul(y)?/": "phukwi",
	        "/aug(ust)?/": "phatwe",
	        "/sep(t(ember)?)?/": "lwetse",
	        "/oct(ober)?/": "diphalane",
	        "/nov(ember)?/": "ngwanatsele",
	        "/dec(ember)?/": "sedimothole",
	        "/^su(n(day)?)?/": "^latshipi",
	        "/^mo(n(day)?)?/": "^mosupologo",
	        "/^tu(e(s(day)?)?)?/": "^labobedi",
	        "/^we(d(nesday)?)?/": "^laboraro",
	        "/^th(u(r(s(day)?)?)?)?/": "^labone",
	        "/^fr(i(day)?)?/": "^labotlhano",
	        "/^sa(t(urday)?)?/": "^lamatlhatso",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "tn-ZA";


/***/ },
/* 279 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: tr-TR
	 * Name: Turkish (Turkey)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["tr-TR"] = {
	        "name": "tr-TR",
	        "englishName": "Turkish (Turkey)",
	        "nativeName": "Türkçe (Türkiye)",
	        "Sunday": "Pazar",
	        "Monday": "Pazartesi",
	        "Tuesday": "Salı",
	        "Wednesday": "Çarşamba",
	        "Thursday": "Perşembe",
	        "Friday": "Cuma",
	        "Saturday": "Cumartesi",
	        "Sun": "Paz",
	        "Mon": "Pzt",
	        "Tue": "Sal",
	        "Wed": "Çar",
	        "Thu": "Per",
	        "Fri": "Cum",
	        "Sat": "Cmt",
	        "Su": "Pz",
	        "Mo": "Pt",
	        "Tu": "Sa",
	        "We": "Ça",
	        "Th": "Pe",
	        "Fr": "Cu",
	        "Sa": "Ct",
	        "S_Sun_Initial": "P",
	        "M_Mon_Initial": "P",
	        "T_Tue_Initial": "S",
	        "W_Wed_Initial": "Ç",
	        "T_Thu_Initial": "P",
	        "F_Fri_Initial": "C",
	        "S_Sat_Initial": "C",
	        "January": "Ocak",
	        "February": "Şubat",
	        "March": "Mart",
	        "April": "Nisan",
	        "May": "Mayıs",
	        "June": "Haziran",
	        "July": "Temmuz",
	        "August": "Ağustos",
	        "September": "Eylül",
	        "October": "Ekim",
	        "November": "Kasım",
	        "December": "Aralık",
	        "Jan_Abbr": "Oca",
	        "Feb_Abbr": "Şub",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Nis",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Haz",
	        "Jul_Abbr": "Tem",
	        "Aug_Abbr": "Ağu",
	        "Sep_Abbr": "Eyl",
	        "Oct_Abbr": "Eki",
	        "Nov_Abbr": "Kas",
	        "Dec_Abbr": "Ara",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy dddd",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy dddd HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "oca(k)?",
	        "/feb(ruary)?/": "şub(at)?",
	        "/mar(ch)?/": "mar(t)?",
	        "/apr(il)?/": "nis(an)?",
	        "/may/": "may(ıs)?",
	        "/jun(e)?/": "haz(iran)?",
	        "/jul(y)?/": "tem(muz)?",
	        "/aug(ust)?/": "ağu(stos)?",
	        "/sep(t(ember)?)?/": "eyl(ül)?",
	        "/oct(ober)?/": "eki(m)?",
	        "/nov(ember)?/": "kas(ım)?",
	        "/dec(ember)?/": "ara(lık)?",
	        "/^su(n(day)?)?/": "^pz(z(ar)?)?",
	        "/^mo(n(day)?)?/": "^pt(t(artesi)?)?",
	        "/^tu(e(s(day)?)?)?/": "^sa(l(ı)?)?",
	        "/^we(d(nesday)?)?/": "^ça(r(şamba)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^pe(r(şembe)?)?",
	        "/^fr(i(day)?)?/": "^cu(m(a)?)?",
	        "/^sa(t(urday)?)?/": "^ct(t(artesi)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "tr-TR";


/***/ },
/* 280 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: tt-RU
	 * Name: Tatar (Russia)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["tt-RU"] = {
	        "name": "tt-RU",
	        "englishName": "Tatar (Russia)",
	        "nativeName": "Татар (Россия)",
	        "Sunday": "Якшәмбе",
	        "Monday": "Дүшәмбе",
	        "Tuesday": "Сишәмбе",
	        "Wednesday": "Чәршәмбе",
	        "Thursday": "Пәнҗешәмбе",
	        "Friday": "Җомга",
	        "Saturday": "Шимбә",
	        "Sun": "Якш",
	        "Mon": "Дүш",
	        "Tue": "Сиш",
	        "Wed": "Чәрш",
	        "Thu": "Пәнҗ",
	        "Fri": "Җом",
	        "Sat": "Шим",
	        "Su": "Якш",
	        "Mo": "Дүш",
	        "Tu": "Сиш",
	        "We": "Чәрш",
	        "Th": "Пәнҗ",
	        "Fr": "Җом",
	        "Sa": "Шим",
	        "S_Sun_Initial": "Я",
	        "M_Mon_Initial": "Д",
	        "T_Tue_Initial": "С",
	        "W_Wed_Initial": "Ч",
	        "T_Thu_Initial": "П",
	        "F_Fri_Initial": "Җ",
	        "S_Sat_Initial": "Ш",
	        "January": "Гыйнварь",
	        "February": "Февраль",
	        "March": "Март",
	        "April": "Апрель",
	        "May": "Май",
	        "June": "Июнь",
	        "July": "Июль",
	        "August": "Август",
	        "September": "Сентябрь",
	        "October": "Октябрь",
	        "November": "Ноябрь",
	        "December": "Декабрь",
	        "Jan_Abbr": "Гыйнв",
	        "Feb_Abbr": "Фев",
	        "Mar_Abbr": "Мар",
	        "Apr_Abbr": "Апр",
	        "May_Abbr": "Май",
	        "Jun_Abbr": "Июн",
	        "Jul_Abbr": "Июл",
	        "Aug_Abbr": "Авг",
	        "Sep_Abbr": "Сен",
	        "Oct_Abbr": "Окт",
	        "Nov_Abbr": "Ноя",
	        "Dec_Abbr": "Дек",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "гыйнв(арь)?",
	        "/feb(ruary)?/": "фев(раль)?",
	        "/mar(ch)?/": "мар(т)?",
	        "/apr(il)?/": "апр(ель)?",
	        "/may/": "май",
	        "/jun(e)?/": "июн(ь)?",
	        "/jul(y)?/": "июл(ь)?",
	        "/aug(ust)?/": "авг(уст)?",
	        "/sep(t(ember)?)?/": "сен(тябрь)?",
	        "/oct(ober)?/": "окт(ябрь)?",
	        "/nov(ember)?/": "ноя(брь)?",
	        "/dec(ember)?/": "дек(абрь)?",
	        "/^su(n(day)?)?/": "^якшәмбе",
	        "/^mo(n(day)?)?/": "^дүшәмбе",
	        "/^tu(e(s(day)?)?)?/": "^сишәмбе",
	        "/^we(d(nesday)?)?/": "^чәршәмбе",
	        "/^th(u(r(s(day)?)?)?)?/": "^пәнҗешәмбе",
	        "/^fr(i(day)?)?/": "^җомга",
	        "/^sa(t(urday)?)?/": "^шимбә",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "tt-RU";


/***/ },
/* 281 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: uk-UA
	 * Name: Ukrainian (Ukraine)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["uk-UA"] = {
	        "name": "uk-UA",
	        "englishName": "Ukrainian (Ukraine)",
	        "nativeName": "україньска (Україна)",
	        "Sunday": "неділя",
	        "Monday": "понеділок",
	        "Tuesday": "вівторок",
	        "Wednesday": "середа",
	        "Thursday": "четвер",
	        "Friday": "п'ятниця",
	        "Saturday": "субота",
	        "Sun": "Нд",
	        "Mon": "Пн",
	        "Tue": "Вт",
	        "Wed": "Ср",
	        "Thu": "Чт",
	        "Fri": "Пт",
	        "Sat": "Сб",
	        "Su": "Нд",
	        "Mo": "Пн",
	        "Tu": "Вт",
	        "We": "Ср",
	        "Th": "Чт",
	        "Fr": "Пт",
	        "Sa": "Сб",
	        "S_Sun_Initial": "Н",
	        "M_Mon_Initial": "П",
	        "T_Tue_Initial": "В",
	        "W_Wed_Initial": "С",
	        "T_Thu_Initial": "Ч",
	        "F_Fri_Initial": "П",
	        "S_Sat_Initial": "С",
	        "January": "Січень",
	        "February": "Лютий",
	        "March": "Березень",
	        "April": "Квітень",
	        "May": "Травень",
	        "June": "Червень",
	        "July": "Липень",
	        "August": "Серпень",
	        "September": "Вересень",
	        "October": "Жовтень",
	        "November": "Листопад",
	        "December": "Грудень",
	        "Jan_Abbr": "Січ",
	        "Feb_Abbr": "Лют",
	        "Mar_Abbr": "Бер",
	        "Apr_Abbr": "Кві",
	        "May_Abbr": "Тра",
	        "Jun_Abbr": "Чер",
	        "Jul_Abbr": "Лип",
	        "Aug_Abbr": "Сер",
	        "Sep_Abbr": "Вер",
	        "Oct_Abbr": "Жов",
	        "Nov_Abbr": "Лис",
	        "Dec_Abbr": "Гру",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "d MMMM yyyy' р.'",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "d MMMM yyyy' р.' H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM yyyy' р.'",
	        "/jan(uary)?/": "січ(ень)?",
	        "/feb(ruary)?/": "лют(ий)?",
	        "/mar(ch)?/": "бер(езень)?",
	        "/apr(il)?/": "кві(тень)?",
	        "/may/": "тра(вень)?",
	        "/jun(e)?/": "чер(вень)?",
	        "/jul(y)?/": "лип(ень)?",
	        "/aug(ust)?/": "сер(пень)?",
	        "/sep(t(ember)?)?/": "вер(есень)?",
	        "/oct(ober)?/": "жов(тень)?",
	        "/nov(ember)?/": "лис(топад)?",
	        "/dec(ember)?/": "гру(день)?",
	        "/^su(n(day)?)?/": "^неділя",
	        "/^mo(n(day)?)?/": "^понеділок",
	        "/^tu(e(s(day)?)?)?/": "^вівторок",
	        "/^we(d(nesday)?)?/": "^середа",
	        "/^th(u(r(s(day)?)?)?)?/": "^четвер",
	        "/^fr(i(day)?)?/": "^п'ятниця",
	        "/^sa(t(urday)?)?/": "^субота",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "uk-UA";


/***/ },
/* 282 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: ur-PK
	 * Name: Urdu (Islamic Republic of Pakistan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["ur-PK"] = {
	        "name": "ur-PK",
	        "englishName": "Urdu (Islamic Republic of Pakistan)",
	        "nativeName": "اُردو (پاکستان)",
	        "Sunday": "اتوار",
	        "Monday": "پير",
	        "Tuesday": "منگل",
	        "Wednesday": "بدھ",
	        "Thursday": "جمعرات",
	        "Friday": "جمعه",
	        "Saturday": "هفته",
	        "Sun": "اتوار",
	        "Mon": "پير",
	        "Tue": "منگل",
	        "Wed": "بدھ",
	        "Thu": "جمعرات",
	        "Fri": "جمعه",
	        "Sat": "هفته",
	        "Su": "ا",
	        "Mo": "پ",
	        "Tu": "م",
	        "We": "ب",
	        "Th": "ج",
	        "Fr": "ج",
	        "Sa": "ه",
	        "S_Sun_Initial": "ا",
	        "M_Mon_Initial": "پ",
	        "T_Tue_Initial": "م",
	        "W_Wed_Initial": "ب",
	        "T_Thu_Initial": "ج",
	        "F_Fri_Initial": "ج",
	        "S_Sat_Initial": "ه",
	        "January": "جنورى",
	        "February": "فرورى",
	        "March": "مارچ",
	        "April": "اپريل",
	        "May": "مئ",
	        "June": "جون",
	        "July": "جولاٸ",
	        "August": "اگست",
	        "September": "ستمبر",
	        "October": "اکتوبر",
	        "November": "نومبر",
	        "December": "دسمبر",
	        "Jan_Abbr": "جنورى",
	        "Feb_Abbr": "فرورى",
	        "Mar_Abbr": "مارچ",
	        "Apr_Abbr": "اپريل",
	        "May_Abbr": "مئ",
	        "Jun_Abbr": "جون",
	        "Jul_Abbr": "جولاٸ",
	        "Aug_Abbr": "اگست",
	        "Sep_Abbr": "ستمبر",
	        "Oct_Abbr": "اکتوبر",
	        "Nov_Abbr": "نومبر",
	        "Dec_Abbr": "دسمبر",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM, yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM, yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "جنورى",
	        "/feb(ruary)?/": "فرورى",
	        "/mar(ch)?/": "مارچ",
	        "/apr(il)?/": "اپريل",
	        "/may/": "مئ",
	        "/jun(e)?/": "جون",
	        "/jul(y)?/": "جولاٸ",
	        "/aug(ust)?/": "اگست",
	        "/sep(t(ember)?)?/": "ستمبر",
	        "/oct(ober)?/": "اکتوبر",
	        "/nov(ember)?/": "نومبر",
	        "/dec(ember)?/": "دسمبر",
	        "/^su(n(day)?)?/": "^ا(1)?",
	        "/^mo(n(day)?)?/": "^پ(1)?",
	        "/^tu(e(s(day)?)?)?/": "^م(1)?",
	        "/^we(d(nesday)?)?/": "^ب(1)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^ج(1)?",
	        "/^fr(i(day)?)?/": "^ج(1)?",
	        "/^sa(t(urday)?)?/": "^ه(1)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "ur-PK";


/***/ },
/* 283 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: uz-Cyrl-UZ
	 * Name: Uzbek (Cyrillic, Uzbekistan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["uz-Cyrl-UZ"] = {
	        "name": "uz-Cyrl-UZ",
	        "englishName": "Uzbek (Cyrillic, Uzbekistan)",
	        "nativeName": "Ўзбек (Ўзбекистон)",
	        "Sunday": "якшанба",
	        "Monday": "душанба",
	        "Tuesday": "сешанба",
	        "Wednesday": "чоршанба",
	        "Thursday": "пайшанба",
	        "Friday": "жума",
	        "Saturday": "шанба",
	        "Sun": "якш",
	        "Mon": "дш",
	        "Tue": "сш",
	        "Wed": "чш",
	        "Thu": "пш",
	        "Fri": "ж",
	        "Sat": "ш",
	        "Su": "якш",
	        "Mo": "дш",
	        "Tu": "сш",
	        "We": "чш",
	        "Th": "пш",
	        "Fr": "ж",
	        "Sa": "ш",
	        "S_Sun_Initial": "я",
	        "M_Mon_Initial": "д",
	        "T_Tue_Initial": "с",
	        "W_Wed_Initial": "ч",
	        "T_Thu_Initial": "п",
	        "F_Fri_Initial": "ж",
	        "S_Sat_Initial": "ш",
	        "January": "Январ",
	        "February": "Феврал",
	        "March": "Март",
	        "April": "Апрел",
	        "May": "Май",
	        "June": "Июн",
	        "July": "Июл",
	        "August": "Август",
	        "September": "Сентябр",
	        "October": "Октябр",
	        "November": "Ноябр",
	        "December": "Декабр",
	        "Jan_Abbr": "Янв",
	        "Feb_Abbr": "Фев",
	        "Mar_Abbr": "Мар",
	        "Apr_Abbr": "Апр",
	        "May_Abbr": "Май",
	        "Jun_Abbr": "Июн",
	        "Jul_Abbr": "Июл",
	        "Aug_Abbr": "Авг",
	        "Sep_Abbr": "Сен",
	        "Oct_Abbr": "Окт",
	        "Nov_Abbr": "Ноя",
	        "Dec_Abbr": "Дек",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd.MM.yyyy",
	        "dddd, MMMM dd, yyyy": "yyyy 'йил' d-MMMM",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy 'йил' d-MMMM HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d-MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "янв(ар)?",
	        "/feb(ruary)?/": "фев(рал)?",
	        "/mar(ch)?/": "мар(т)?",
	        "/apr(il)?/": "апр(ел)?",
	        "/may/": "май",
	        "/jun(e)?/": "июн",
	        "/jul(y)?/": "июл",
	        "/aug(ust)?/": "авг(уст)?",
	        "/sep(t(ember)?)?/": "сен(тябр)?",
	        "/oct(ober)?/": "окт(ябр)?",
	        "/nov(ember)?/": "ноя(бр)?",
	        "/dec(ember)?/": "дек(абр)?",
	        "/^su(n(day)?)?/": "^якшанба",
	        "/^mo(n(day)?)?/": "^душанба",
	        "/^tu(e(s(day)?)?)?/": "^сешанба",
	        "/^we(d(nesday)?)?/": "^чоршанба",
	        "/^th(u(r(s(day)?)?)?)?/": "^пайшанба",
	        "/^fr(i(day)?)?/": "^жума",
	        "/^sa(t(urday)?)?/": "^шанба",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "uz-Cyrl-UZ";


/***/ },
/* 284 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: uz-Latn-UZ
	 * Name: Uzbek (Latin, Uzbekistan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["uz-Latn-UZ"] = {
	        "name": "uz-Latn-UZ",
	        "englishName": "Uzbek (Latin, Uzbekistan)",
	        "nativeName": "U'zbek (U'zbekiston Respublikasi)",
	        "Sunday": "yakshanba",
	        "Monday": "dushanba",
	        "Tuesday": "seshanba",
	        "Wednesday": "chorshanba",
	        "Thursday": "payshanba",
	        "Friday": "juma",
	        "Saturday": "shanba",
	        "Sun": "yak.",
	        "Mon": "dsh.",
	        "Tue": "sesh.",
	        "Wed": "chr.",
	        "Thu": "psh.",
	        "Fri": "jm.",
	        "Sat": "sh.",
	        "Su": "yak",
	        "Mo": "dsh",
	        "Tu": "sesh",
	        "We": "chr",
	        "Th": "psh",
	        "Fr": "jm",
	        "Sa": "sh",
	        "S_Sun_Initial": "y",
	        "M_Mon_Initial": "d",
	        "T_Tue_Initial": "s",
	        "W_Wed_Initial": "c",
	        "T_Thu_Initial": "p",
	        "F_Fri_Initial": "j",
	        "S_Sat_Initial": "s",
	        "January": "yanvar",
	        "February": "fevral",
	        "March": "mart",
	        "April": "aprel",
	        "May": "may",
	        "June": "iyun",
	        "July": "iyul",
	        "August": "avgust",
	        "September": "sentyabr",
	        "October": "oktyabr",
	        "November": "noyabr",
	        "December": "dekabr",
	        "Jan_Abbr": "yanvar",
	        "Feb_Abbr": "fevral",
	        "Mar_Abbr": "mart",
	        "Apr_Abbr": "aprel",
	        "May_Abbr": "may",
	        "Jun_Abbr": "iyun",
	        "Jul_Abbr": "iyul",
	        "Aug_Abbr": "avgust",
	        "Sep_Abbr": "sentyabr",
	        "Oct_Abbr": "oktyabr",
	        "Nov_Abbr": "noyabr",
	        "Dec_Abbr": "dekabr",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM yyyy",
	        "dddd, MMMM dd, yyyy": "yyyy 'yil' d-MMMM",
	        "h:mm tt": "HH:mm",
	        "h:mm:ss tt": "HH:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy 'yil' d-MMMM HH:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d-MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "yanvar",
	        "/feb(ruary)?/": "fevral",
	        "/mar(ch)?/": "mart",
	        "/apr(il)?/": "aprel",
	        "/may/": "may",
	        "/jun(e)?/": "iyun",
	        "/jul(y)?/": "iyul",
	        "/aug(ust)?/": "avgust",
	        "/sep(t(ember)?)?/": "sentyabr",
	        "/oct(ober)?/": "oktyabr",
	        "/nov(ember)?/": "noyabr",
	        "/dec(ember)?/": "dekabr",
	        "/^su(n(day)?)?/": "^yak((.(shanba)?)?)?",
	        "/^mo(n(day)?)?/": "^dsh((.(hanba)?)?)?",
	        "/^tu(e(s(day)?)?)?/": "^sesh((.(anba)?)?)?",
	        "/^we(d(nesday)?)?/": "^chr((.(rshanba)?)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^psh((.(shanba)?)?)?",
	        "/^fr(i(day)?)?/": "^jm((.(ma)?)?)?",
	        "/^sa(t(urday)?)?/": "^sh((.(anba)?)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "uz-Latn-UZ";


/***/ },
/* 285 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: vi-VN
	 * Name: Vietnamese (Vietnam)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["vi-VN"] = {
	        "name": "vi-VN",
	        "englishName": "Vietnamese (Vietnam)",
	        "nativeName": "Tiếng Việt (Việt Nam)",
	        "Sunday": "Chủ Nhật",
	        "Monday": "Thứ Hai",
	        "Tuesday": "Thứ Ba",
	        "Wednesday": "Thứ Tư",
	        "Thursday": "Thứ Năm",
	        "Friday": "Thứ Sáu",
	        "Saturday": "Thứ Bảy",
	        "Sun": "CN",
	        "Mon": "Hai",
	        "Tue": "Ba",
	        "Wed": "Tư",
	        "Thu": "Năm",
	        "Fri": "Sáu",
	        "Sat": "Bảy",
	        "Su": "C",
	        "Mo": "H",
	        "Tu": "B",
	        "We": "T",
	        "Th": "N",
	        "Fr": "S",
	        "Sa": "B",
	        "S_Sun_Initial": "C",
	        "M_Mon_Initial": "H",
	        "T_Tue_Initial": "B",
	        "W_Wed_Initial": "T",
	        "T_Thu_Initial": "N",
	        "F_Fri_Initial": "S",
	        "S_Sat_Initial": "B",
	        "January": "Tháng Giêng",
	        "February": "Tháng Hai",
	        "March": "Tháng Ba",
	        "April": "Tháng Tư",
	        "May": "Tháng Năm",
	        "June": "Tháng Sáu",
	        "July": "Tháng Bảy",
	        "August": "Tháng Tám",
	        "September": "Tháng Chín",
	        "October": "Tháng Mười",
	        "November": "Tháng Mười Một",
	        "December": "Tháng Mười Hai",
	        "Jan_Abbr": "Thg1",
	        "Feb_Abbr": "Thg2",
	        "Mar_Abbr": "Thg3",
	        "Apr_Abbr": "Thg4",
	        "May_Abbr": "Thg5",
	        "Jun_Abbr": "Thg6",
	        "Jul_Abbr": "Thg7",
	        "Aug_Abbr": "Thg8",
	        "Sep_Abbr": "Thg9",
	        "Oct_Abbr": "Thg10",
	        "Nov_Abbr": "Thg11",
	        "Dec_Abbr": "Thg12",
	        "AM": "SA",
	        "PM": "CH",
	        "firstDayOfWeek": 1,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "dd/MM/yyyy",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "h:mm tt",
	        "h:mm:ss tt": "h:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy h:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "dd MMMM",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "tháng giêng",
	        "/feb(ruary)?/": "tháng hai",
	        "/mar(ch)?/": "tháng ba",
	        "/apr(il)?/": "tháng tư",
	        "/may/": "tháng năm",
	        "/jun(e)?/": "tháng sáu",
	        "/jul(y)?/": "tháng bảy",
	        "/aug(ust)?/": "tháng tám",
	        "/sep(t(ember)?)?/": "tháng chín",
	        "/oct(ober)?/": "tháng mười",
	        "/nov(ember)?/": "tháng mười một",
	        "/dec(ember)?/": "tháng mười hai",
	        "/^su(n(day)?)?/": "^c(n(ủ nhật)?)?",
	        "/^mo(n(day)?)?/": "^h(ai(́ hai)?)?",
	        "/^tu(e(s(day)?)?)?/": "^b(a(ứ ba)?)?",
	        "/^we(d(nesday)?)?/": "^t(ư(ứ tư)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^n(ăm(́ năm)?)?",
	        "/^fr(i(day)?)?/": "^s(áu( sáu)?)?",
	        "/^sa(t(urday)?)?/": "^b(ảy( bảy)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "vi-VN";


/***/ },
/* 286 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: xh-ZA
	 * Name: Xhosa (South Africa)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["xh-ZA"] = {
	        "name": "xh-ZA",
	        "englishName": "Xhosa (South Africa)",
	        "nativeName": "isiXhosa (uMzantsi Afrika)",
	        "Sunday": "iCawa",
	        "Monday": "uMvulo",
	        "Tuesday": "uLwesibini",
	        "Wednesday": "uLwesithathu",
	        "Thursday": "uLwesine",
	        "Friday": "uLwesihlanu",
	        "Saturday": "uMgqibelo",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Sun",
	        "Mo": "Mon",
	        "Tu": "Tue",
	        "We": "Wed",
	        "Th": "Thu",
	        "Fr": "Fri",
	        "Sa": "Sat",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "eyoMqungu",
	        "February": "eyoMdumba",
	        "March": "eyoKwindla",
	        "April": "Tshazimpuzi",
	        "May": "Canzibe",
	        "June": "eyeSilimela",
	        "July": "eyeKhala",
	        "August": "eyeThupha",
	        "September": "eyoMsintsi",
	        "October": "eyeDwara",
	        "November": "eyeNkanga",
	        "December": "eyoMnga",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/MM/dd",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "hh:mm:ss tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "eyomqungu",
	        "/feb(ruary)?/": "eyomdumba",
	        "/mar(ch)?/": "eyokwindla",
	        "/apr(il)?/": "tshazimpuzi",
	        "/may/": "canzibe",
	        "/jun(e)?/": "eyesilimela",
	        "/jul(y)?/": "eyekhala",
	        "/aug(ust)?/": "eyethupha",
	        "/sep(t(ember)?)?/": "eyomsintsi",
	        "/oct(ober)?/": "eyedwara",
	        "/nov(ember)?/": "eyenkanga",
	        "/dec(ember)?/": "eyomnga",
	        "/^su(n(day)?)?/": "^icawa",
	        "/^mo(n(day)?)?/": "^umvulo",
	        "/^tu(e(s(day)?)?)?/": "^ulwesibini",
	        "/^we(d(nesday)?)?/": "^ulwesithathu",
	        "/^th(u(r(s(day)?)?)?)?/": "^ulwesine",
	        "/^fr(i(day)?)?/": "^ulwesihlanu",
	        "/^sa(t(urday)?)?/": "^umgqibelo",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "xh-ZA";


/***/ },
/* 287 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: zh-CN
	 * Name: Chinese (People's Republic of China)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["zh-CN"] = {
	        "name": "zh-CN",
	        "englishName": "Chinese (People's Republic of China)",
	        "nativeName": "中文(中华人民共和国)",
	        "Sunday": "星期日",
	        "Monday": "星期一",
	        "Tuesday": "星期二",
	        "Wednesday": "星期三",
	        "Thursday": "星期四",
	        "Friday": "星期五",
	        "Saturday": "星期六",
	        "Sun": "日",
	        "Mon": "一",
	        "Tue": "二",
	        "Wed": "三",
	        "Thu": "四",
	        "Fri": "五",
	        "Sat": "六",
	        "Su": "日",
	        "Mo": "一",
	        "Tu": "二",
	        "We": "三",
	        "Th": "四",
	        "Fr": "五",
	        "Sa": "六",
	        "S_Sun_Initial": "日",
	        "M_Mon_Initial": "一",
	        "T_Tue_Initial": "二",
	        "W_Wed_Initial": "三",
	        "T_Thu_Initial": "四",
	        "F_Fri_Initial": "五",
	        "S_Sat_Initial": "六",
	        "January": "一月",
	        "February": "二月",
	        "March": "三月",
	        "April": "四月",
	        "May": "五月",
	        "June": "六月",
	        "July": "七月",
	        "August": "八月",
	        "September": "九月",
	        "October": "十月",
	        "November": "十一月",
	        "December": "十二月",
	        "Jan_Abbr": "一月",
	        "Feb_Abbr": "二月",
	        "Mar_Abbr": "三月",
	        "Apr_Abbr": "四月",
	        "May_Abbr": "五月",
	        "Jun_Abbr": "六月",
	        "Jul_Abbr": "七月",
	        "Aug_Abbr": "八月",
	        "Sep_Abbr": "九月",
	        "Oct_Abbr": "十月",
	        "Nov_Abbr": "十一月",
	        "Dec_Abbr": "十二月",
	        "AM": "上午",
	        "PM": "下午",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/M/d",
	        "dddd, MMMM dd, yyyy": "yyyy'年'M'月'd'日'",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy'年'M'月'd'日' H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "M'月'd'日'",
	        "MMMM, yyyy": "yyyy'年'M'月'",
	        "/jan(uary)?/": "一月",
	        "/feb(ruary)?/": "二月",
	        "/mar(ch)?/": "三月",
	        "/apr(il)?/": "四月",
	        "/may/": "五月",
	        "/jun(e)?/": "六月",
	        "/jul(y)?/": "七月",
	        "/aug(ust)?/": "八月",
	        "/sep(t(ember)?)?/": "九月",
	        "/oct(ober)?/": "十月",
	        "/nov(ember)?/": "十一月",
	        "/dec(ember)?/": "十二月",
	        "/^su(n(day)?)?/": "^星期日",
	        "/^mo(n(day)?)?/": "^星期一",
	        "/^tu(e(s(day)?)?)?/": "^星期二",
	        "/^we(d(nesday)?)?/": "^星期三",
	        "/^th(u(r(s(day)?)?)?)?/": "^星期四",
	        "/^fr(i(day)?)?/": "^星期五",
	        "/^sa(t(urday)?)?/": "^星期六",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "zh-CN";


/***/ },
/* 288 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: zh-HK
	 * Name: Chinese (Hong Kong S.A.R.)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["zh-HK"] = {
	        "name": "zh-HK",
	        "englishName": "Chinese (Hong Kong S.A.R.)",
	        "nativeName": "中文(香港特别行政區)",
	        "Sunday": "Sunday",
	        "Monday": "Monday",
	        "Tuesday": "Tuesday",
	        "Wednesday": "Wednesday",
	        "Thursday": "Thursday",
	        "Friday": "Friday",
	        "Saturday": "Saturday",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Su",
	        "Mo": "Mo",
	        "Tu": "Tu",
	        "We": "We",
	        "Th": "Th",
	        "Fr": "Fr",
	        "Sa": "Sa",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "January",
	        "February": "February",
	        "March": "March",
	        "April": "April",
	        "May": "May",
	        "June": "June",
	        "July": "July",
	        "August": "August",
	        "September": "September",
	        "October": "October",
	        "November": "November",
	        "December": "December",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/M/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d MMMM, yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d MMMM, yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "jan(uary)?",
	        "/feb(ruary)?/": "feb(ruary)?",
	        "/mar(ch)?/": "mar(ch)?",
	        "/apr(il)?/": "apr(il)?",
	        "/may/": "may",
	        "/jun(e)?/": "jun(e)?",
	        "/jul(y)?/": "jul(y)?",
	        "/aug(ust)?/": "aug(ust)?",
	        "/sep(t(ember)?)?/": "sep(t(ember)?)?",
	        "/oct(ober)?/": "oct(ober)?",
	        "/nov(ember)?/": "nov(ember)?",
	        "/dec(ember)?/": "dec(ember)?",
	        "/^su(n(day)?)?/": "^su(n(day)?)?",
	        "/^mo(n(day)?)?/": "^mo(n(day)?)?",
	        "/^tu(e(s(day)?)?)?/": "^tu(e(s(day)?)?)?",
	        "/^we(d(nesday)?)?/": "^we(d(nesday)?)?",
	        "/^th(u(r(s(day)?)?)?)?/": "^th(u(r(s(day)?)?)?)?",
	        "/^fr(i(day)?)?/": "^fr(i(day)?)?",
	        "/^sa(t(urday)?)?/": "^sa(t(urday)?)?",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "zh-HK";


/***/ },
/* 289 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: zh-MO
	 * Name: Chinese (Macao S.A.R.)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["zh-MO"] = {
	        "name": "zh-MO",
	        "englishName": "Chinese (Macao S.A.R.)",
	        "nativeName": "中文(澳門特别行政區)",
	        "Sunday": "星期日",
	        "Monday": "星期一",
	        "Tuesday": "星期二",
	        "Wednesday": "星期三",
	        "Thursday": "星期四",
	        "Friday": "星期五",
	        "Saturday": "星期六",
	        "Sun": "星期日",
	        "Mon": "星期一",
	        "Tue": "星期二",
	        "Wed": "星期三",
	        "Thu": "星期四",
	        "Fri": "星期五",
	        "Sat": "星期六",
	        "Su": "日",
	        "Mo": "一",
	        "Tu": "二",
	        "We": "三",
	        "Th": "四",
	        "Fr": "五",
	        "Sa": "六",
	        "S_Sun_Initial": "日",
	        "M_Mon_Initial": "一",
	        "T_Tue_Initial": "二",
	        "W_Wed_Initial": "三",
	        "T_Thu_Initial": "四",
	        "F_Fri_Initial": "五",
	        "S_Sat_Initial": "六",
	        "January": "一月",
	        "February": "二月",
	        "March": "三月",
	        "April": "四月",
	        "May": "五月",
	        "June": "六月",
	        "July": "七月",
	        "August": "八月",
	        "September": "九月",
	        "October": "十月",
	        "November": "十一月",
	        "December": "十二月",
	        "Jan_Abbr": "一月",
	        "Feb_Abbr": "二月",
	        "Mar_Abbr": "三月",
	        "Apr_Abbr": "四月",
	        "May_Abbr": "五月",
	        "Jun_Abbr": "六月",
	        "Jul_Abbr": "七月",
	        "Aug_Abbr": "八月",
	        "Sep_Abbr": "九月",
	        "Oct_Abbr": "十月",
	        "Nov_Abbr": "十一月",
	        "Dec_Abbr": "十二月",
	        "AM": "",
	        "PM": "",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/M/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d MMMM, yyyy",
	        "h:mm tt": "H:mm",
	        "h:mm:ss tt": "H:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d MMMM, yyyy H:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "一月",
	        "/feb(ruary)?/": "二月",
	        "/mar(ch)?/": "三月",
	        "/apr(il)?/": "四月",
	        "/may/": "五月",
	        "/jun(e)?/": "六月",
	        "/jul(y)?/": "七月",
	        "/aug(ust)?/": "八月",
	        "/sep(t(ember)?)?/": "九月",
	        "/oct(ober)?/": "十月",
	        "/nov(ember)?/": "十一月",
	        "/dec(ember)?/": "十二月",
	        "/^su(n(day)?)?/": "^星期日",
	        "/^mo(n(day)?)?/": "^星期一",
	        "/^tu(e(s(day)?)?)?/": "^星期二",
	        "/^we(d(nesday)?)?/": "^星期三",
	        "/^th(u(r(s(day)?)?)?)?/": "^星期四",
	        "/^fr(i(day)?)?/": "^星期五",
	        "/^sa(t(urday)?)?/": "^星期六",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "zh-MO";


/***/ },
/* 290 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: zh-SG
	 * Name: Chinese (Singapore)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["zh-SG"] = {
	        "name": "zh-SG",
	        "englishName": "Chinese (Singapore)",
	        "nativeName": "中文(新加坡)",
	        "Sunday": "星期日",
	        "Monday": "星期一",
	        "Tuesday": "星期二",
	        "Wednesday": "星期三",
	        "Thursday": "星期四",
	        "Friday": "星期五",
	        "Saturday": "星期六",
	        "Sun": "星期日",
	        "Mon": "星期一",
	        "Tue": "星期二",
	        "Wed": "星期三",
	        "Thu": "星期四",
	        "Fri": "星期五",
	        "Sat": "星期六",
	        "Su": "日",
	        "Mo": "一",
	        "Tu": "二",
	        "We": "三",
	        "Th": "四",
	        "Fr": "五",
	        "Sa": "六",
	        "S_Sun_Initial": "日",
	        "M_Mon_Initial": "一",
	        "T_Tue_Initial": "二",
	        "W_Wed_Initial": "三",
	        "T_Thu_Initial": "四",
	        "F_Fri_Initial": "五",
	        "S_Sat_Initial": "六",
	        "January": "一月",
	        "February": "二月",
	        "March": "三月",
	        "April": "四月",
	        "May": "五月",
	        "June": "六月",
	        "July": "七月",
	        "August": "八月",
	        "September": "九月",
	        "October": "十月",
	        "November": "十一月",
	        "December": "十二月",
	        "Jan_Abbr": "一月",
	        "Feb_Abbr": "二月",
	        "Mar_Abbr": "三月",
	        "Apr_Abbr": "四月",
	        "May_Abbr": "五月",
	        "Jun_Abbr": "六月",
	        "Jul_Abbr": "七月",
	        "Aug_Abbr": "八月",
	        "Sep_Abbr": "九月",
	        "Oct_Abbr": "十月",
	        "Nov_Abbr": "十一月",
	        "Dec_Abbr": "十二月",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "dmy",
	        "M/d/yyyy": "d/M/yyyy",
	        "dddd, MMMM dd, yyyy": "dddd, d MMMM, yyyy",
	        "h:mm tt": "tt h:mm",
	        "h:mm:ss tt": "tt h:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dddd, d MMMM, yyyy tt h:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "d MMMM",
	        "MMMM, yyyy": "MMMM, yyyy",
	        "/jan(uary)?/": "一月",
	        "/feb(ruary)?/": "二月",
	        "/mar(ch)?/": "三月",
	        "/apr(il)?/": "四月",
	        "/may/": "五月",
	        "/jun(e)?/": "六月",
	        "/jul(y)?/": "七月",
	        "/aug(ust)?/": "八月",
	        "/sep(t(ember)?)?/": "九月",
	        "/oct(ober)?/": "十月",
	        "/nov(ember)?/": "十一月",
	        "/dec(ember)?/": "十二月",
	        "/^su(n(day)?)?/": "^星期日",
	        "/^mo(n(day)?)?/": "^星期一",
	        "/^tu(e(s(day)?)?)?/": "^星期二",
	        "/^we(d(nesday)?)?/": "^星期三",
	        "/^th(u(r(s(day)?)?)?)?/": "^星期四",
	        "/^fr(i(day)?)?/": "^星期五",
	        "/^sa(t(urday)?)?/": "^星期六",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "zh-SG";


/***/ },
/* 291 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: zh-TW
	 * Name: Chinese (Taiwan)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["zh-TW"] = {
	        "name": "zh-TW",
	        "englishName": "Chinese (Taiwan)",
	        "nativeName": "中文(台灣)",
	        "Sunday": "星期日",
	        "Monday": "星期一",
	        "Tuesday": "星期二",
	        "Wednesday": "星期三",
	        "Thursday": "星期四",
	        "Friday": "星期五",
	        "Saturday": "星期六",
	        "Sun": "星期日",
	        "Mon": "星期一",
	        "Tue": "星期二",
	        "Wed": "星期三",
	        "Thu": "星期四",
	        "Fri": "星期五",
	        "Sat": "星期六",
	        "Su": "日",
	        "Mo": "一",
	        "Tu": "二",
	        "We": "三",
	        "Th": "四",
	        "Fr": "五",
	        "Sa": "六",
	        "S_Sun_Initial": "日",
	        "M_Mon_Initial": "一",
	        "T_Tue_Initial": "二",
	        "W_Wed_Initial": "三",
	        "T_Thu_Initial": "四",
	        "F_Fri_Initial": "五",
	        "S_Sat_Initial": "六",
	        "January": "一月",
	        "February": "二月",
	        "March": "三月",
	        "April": "四月",
	        "May": "五月",
	        "June": "六月",
	        "July": "七月",
	        "August": "八月",
	        "September": "九月",
	        "October": "十月",
	        "November": "十一月",
	        "December": "十二月",
	        "Jan_Abbr": "一月",
	        "Feb_Abbr": "二月",
	        "Mar_Abbr": "三月",
	        "Apr_Abbr": "四月",
	        "May_Abbr": "五月",
	        "Jun_Abbr": "六月",
	        "Jul_Abbr": "七月",
	        "Aug_Abbr": "八月",
	        "Sep_Abbr": "九月",
	        "Oct_Abbr": "十月",
	        "Nov_Abbr": "十一月",
	        "Dec_Abbr": "十二月",
	        "AM": "上午",
	        "PM": "下午",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/M/d",
	        "dddd, MMMM dd, yyyy": "yyyy'年'M'月'd'日'",
	        "h:mm tt": "tt hh:mm",
	        "h:mm:ss tt": "tt hh:mm:ss",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "yyyy'年'M'月'd'日' tt hh:mm:ss",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "M'月'd'日'",
	        "MMMM, yyyy": "yyyy'年'M'月'",
	        "/jan(uary)?/": "一月",
	        "/feb(ruary)?/": "二月",
	        "/mar(ch)?/": "三月",
	        "/apr(il)?/": "四月",
	        "/may/": "五月",
	        "/jun(e)?/": "六月",
	        "/jul(y)?/": "七月",
	        "/aug(ust)?/": "八月",
	        "/sep(t(ember)?)?/": "九月",
	        "/oct(ober)?/": "十月",
	        "/nov(ember)?/": "十一月",
	        "/dec(ember)?/": "十二月",
	        "/^su(n(day)?)?/": "^星期日",
	        "/^mo(n(day)?)?/": "^星期一",
	        "/^tu(e(s(day)?)?)?/": "^星期二",
	        "/^we(d(nesday)?)?/": "^星期三",
	        "/^th(u(r(s(day)?)?)?)?/": "^星期四",
	        "/^fr(i(day)?)?/": "^星期五",
	        "/^sa(t(urday)?)?/": "^星期六",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "zh-TW";


/***/ },
/* 292 */
/***/ function(module, exports) {

	/* 
	 * DateJS Culture String File
	 * Country Code: zu-ZA
	 * Name: Zulu (South Africa)
	 * Format: "key" : "value"
	 * Key is the en-US term, Value is the Key in the current language.
	 */
	Date.CultureStrings = Date.CultureStrings || {};
	Date.CultureStrings["zu-ZA"] = {
	        "name": "zu-ZA",
	        "englishName": "Zulu (South Africa)",
	        "nativeName": "isiZulu (iNingizimu Afrika)",
	        "Sunday": "iSonto",
	        "Monday": "uMsombuluko",
	        "Tuesday": "uLwesibili",
	        "Wednesday": "uLwesithathu",
	        "Thursday": "uLwesine",
	        "Friday": "uLwesihlanu",
	        "Saturday": "uMgqibelo",
	        "Sun": "Sun",
	        "Mon": "Mon",
	        "Tue": "Tue",
	        "Wed": "Wed",
	        "Thu": "Thu",
	        "Fri": "Fri",
	        "Sat": "Sat",
	        "Su": "Sun",
	        "Mo": "Mon",
	        "Tu": "Tue",
	        "We": "Wed",
	        "Th": "Thu",
	        "Fr": "Fri",
	        "Sa": "Sat",
	        "S_Sun_Initial": "S",
	        "M_Mon_Initial": "M",
	        "T_Tue_Initial": "T",
	        "W_Wed_Initial": "W",
	        "T_Thu_Initial": "T",
	        "F_Fri_Initial": "F",
	        "S_Sat_Initial": "S",
	        "January": "uJanuwari",
	        "February": "uFebuwari",
	        "March": "uMashi",
	        "April": "uAprhili",
	        "May": "uMeyi",
	        "June": "uJuni",
	        "July": "uJulayi",
	        "August": "uAgaste",
	        "September": "uSepthemba",
	        "October": "uOkthoba",
	        "November": "uNovemba",
	        "December": "uDisemba",
	        "Jan_Abbr": "Jan",
	        "Feb_Abbr": "Feb",
	        "Mar_Abbr": "Mar",
	        "Apr_Abbr": "Apr",
	        "May_Abbr": "May",
	        "Jun_Abbr": "Jun",
	        "Jul_Abbr": "Jul",
	        "Aug_Abbr": "Aug",
	        "Sep_Abbr": "Sep",
	        "Oct_Abbr": "Oct",
	        "Nov_Abbr": "Nov",
	        "Dec_Abbr": "Dec",
	        "AM": "AM",
	        "PM": "PM",
	        "firstDayOfWeek": 0,
	        "twoDigitYearMax": 2029,
	        "mdy": "ymd",
	        "M/d/yyyy": "yyyy/MM/dd",
	        "dddd, MMMM dd, yyyy": "dd MMMM yyyy",
	        "h:mm tt": "hh:mm:ss tt",
	        "h:mm:ss tt": "hh:mm:ss tt",
	        "dddd, MMMM dd, yyyy h:mm:ss tt": "dd MMMM yyyy hh:mm:ss tt",
	        "yyyy-MM-ddTHH:mm:ss": "yyyy-MM-ddTHH:mm:ss",
	        "yyyy-MM-dd HH:mm:ssZ": "yyyy-MM-dd HH:mm:ssZ",
	        "ddd, dd MMM yyyy HH:mm:ss": "ddd, dd MMM yyyy HH:mm:ss",
	        "MMMM dd": "MMMM dd",
	        "MMMM, yyyy": "MMMM yyyy",
	        "/jan(uary)?/": "ujanuwari",
	        "/feb(ruary)?/": "ufebuwari",
	        "/mar(ch)?/": "umashi",
	        "/apr(il)?/": "uaprhili",
	        "/may/": "umeyi",
	        "/jun(e)?/": "ujuni",
	        "/jul(y)?/": "ujulayi",
	        "/aug(ust)?/": "uagaste",
	        "/sep(t(ember)?)?/": "usepthemba",
	        "/oct(ober)?/": "uokthoba",
	        "/nov(ember)?/": "unovemba",
	        "/dec(ember)?/": "udisemba",
	        "/^su(n(day)?)?/": "^isonto",
	        "/^mo(n(day)?)?/": "^umsombuluko",
	        "/^tu(e(s(day)?)?)?/": "^ulwesibili",
	        "/^we(d(nesday)?)?/": "^ulwesithathu",
	        "/^th(u(r(s(day)?)?)?)?/": "^ulwesine",
	        "/^fr(i(day)?)?/": "^ulwesihlanu",
	        "/^sa(t(urday)?)?/": "^umgqibelo",
	        "/^next/": "^next",
	        "/^last|past|prev(ious)?/": "^last|past|prev(ious)?",
	        "/^(\\+|aft(er)?|from|hence)/": "^(\\+|aft(er)?|from|hence)",
	        "/^(\\-|bef(ore)?|ago)/": "^(\\-|bef(ore)?|ago)",
	        "/^yes(terday)?/": "^yes(terday)?",
	        "/^t(od(ay)?)?/": "^t(od(ay)?)?",
	        "/^tom(orrow)?/": "^tom(orrow)?",
	        "/^n(ow)?/": "^n(ow)?",
	        "/^ms|milli(second)?s?/": "^ms|milli(second)?s?",
	        "/^sec(ond)?s?/": "^sec(ond)?s?",
	        "/^mn|min(ute)?s?/": "^mn|min(ute)?s?",
	        "/^h(our)?s?/": "^h(our)?s?",
	        "/^w(eek)?s?/": "^w(eek)?s?",
	        "/^m(onth)?s?/": "^m(onth)?s?",
	        "/^d(ay)?s?/": "^d(ay)?s?",
	        "/^y(ear)?s?/": "^y(ear)?s?",
	        "/^(a|p)/": "^(a|p)",
	        "/^(a\\.?m?\\.?|p\\.?m?\\.?)/": "^(a\\.?m?\\.?|p\\.?m?\\.?)",
	        "/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)/": "^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\s*(\\+|\\-)\\s*\\d\\d\\d\\d?)|gmt|utc)",
	        "/^\\s*(st|nd|rd|th)/": "^\\s*(st|nd|rd|th)",
	        "/^\\s*(\\:|a(?!u|p)|p)/": "^\\s*(\\:|a(?!u|p)|p)",
	        "LINT": "LINT",
	        "TOT": "TOT",
	        "CHAST": "CHAST",
	        "NZST": "NZST",
	        "NFT": "NFT",
	        "SBT": "SBT",
	        "AEST": "AEST",
	        "ACST": "ACST",
	        "JST": "JST",
	        "CWST": "CWST",
	        "CT": "CT",
	        "ICT": "ICT",
	        "MMT": "MMT",
	        "BIOT": "BST",
	        "NPT": "NPT",
	        "IST": "IST",
	        "PKT": "PKT",
	        "AFT": "AFT",
	        "MSK": "MSK",
	        "IRST": "IRST",
	        "FET": "FET",
	        "EET": "EET",
	        "CET": "CET",
	        "UTC": "UTC",
	        "GMT": "GMT",
	        "CVT": "CVT",
	        "GST": "GST",
	        "BRT": "BRT",
	        "NST": "NST",
	        "AST": "AST",
	        "EST": "EST",
	        "CST": "CST",
	        "MST": "MST",
	        "PST": "PST",
	        "AKST": "AKST",
	        "MIT": "MIT",
	        "HST": "HST",
	        "SST": "SST",
	        "BIT": "BIT",
	        "CHADT": "CHADT",
	        "NZDT": "NZDT",
	        "AEDT": "AEDT",
	        "ACDT": "ACDT",
	        "AZST": "AZST",
	        "IRDT": "IRDT",
	        "EEST": "EEST",
	        "CEST": "CEST",
	        "BST": "BST",
	        "PMDT": "PMDT",
	        "ADT": "ADT",
	        "NDT": "NDT",
	        "EDT": "EDT",
	        "CDT": "CDT",
	        "MDT": "MDT",
	        "PDT": "PDT",
	        "AKDT": "AKDT",
	        "HADT": "HADT"
	};
	Date.CultureStrings.lang = "zu-ZA";


/***/ },
/* 293 */
/***/ function(module, exports) {

	(function () {
		var $D = Date,
			$P = $D.prototype,
			p = function (s, l) {
				if (!l) {
					l = 2;
				}
				return ("000" + s).slice(l * -1);
			};
		
		if (typeof window !== "undefined" && typeof window.console !== "undefined" && typeof window.console.log !== "undefined") {
			$D.console = console; // used only to raise non-critical errors if available
		} else {
			// set mock so we don't give errors.
			$D.console = {
				log: function(){},
				error: function(){}
			};
		}
		$D.Config = $D.Config || {};

		$D.initOverloads = function() {
			/** 
			 * Overload of Date.now. Allows an alternate call for Date.now where it returns the 
			 * current Date as an object rather than just milliseconds since the Unix Epoch.
			 *
			 * Also provides an implementation of now() for browsers (IE<9) that don't have it.
			 * 
			 * Backwards compatible so with work with either:
			 *  Date.now() [returns ms]
			 * or
			 *  Date.now(true) [returns Date]
			 */
			if (!$D.now) {
				$D._now = function now() {
					return new Date().getTime();
				};
			} else if (!$D._now) {
				$D._now = $D.now;
			}

			$D.now = function (returnObj) {
				if (returnObj) {
					return $D.present();
				} else {
					return $D._now();
				}
			};

			if ( !$P.toISOString ) {
				$P.toISOString = function() {
					return this.getUTCFullYear() +
					"-" + p(this.getUTCMonth() + 1) +
					"-" + p(this.getUTCDate()) +
					"T" + p(this.getUTCHours()) +
					":" + p(this.getUTCMinutes()) +
					":" + p(this.getUTCSeconds()) +
					"." + String( (this.getUTCMilliseconds()/1000).toFixed(3)).slice(2, 5) +
					"Z";
				};
			}
			
			// private
			if ( $P._toString === undefined ){
				$P._toString = $P.toString;
			}

		};
		$D.initOverloads();

		/**
		 * Resets the time of this Date object to 12:00 AM (00:00), which is the start of the day.
		 * @param {Boolean}  .clone() this date instance before clearing Time
		 * @return {Date}    this
		 */
		$P.clearTime = function () {
			this.setHours(0);
			this.setMinutes(0);
			this.setSeconds(0);
			this.setMilliseconds(0);
			return this;
		};

		/**
		 * Resets the time of this Date object to the current time ('now').
		 * @return {Date}    this
		 */
		$P.setTimeToNow = function () {
			var n = new Date();
			this.setHours(n.getHours());
			this.setMinutes(n.getMinutes());
			this.setSeconds(n.getSeconds());
			this.setMilliseconds(n.getMilliseconds());
			return this;
		};

		/** 
		 * Gets a date that is set to the current date. The time is set to the start of the day (00:00 or 12:00 AM).
		 * @return {Date}    The current date.
		 */
		$D.today = function () {
			return new Date().clearTime();
		};

		/** 
		 * Gets a date that is set to the current date and time (same as new Date, but chainable)
		 * @return {Date}    The current date.
		 */
		$D.present = function () {
			return new Date();
		};

		/**
		 * Compares the first date to the second date and returns an number indication of their relative values.  
		 * @param {Date}     First Date object to compare [Required].
		 * @param {Date}     Second Date object to compare to [Required].
		 * @return {Number}  -1 = date1 is lessthan date2. 0 = values are equal. 1 = date1 is greaterthan date2.
		 */
		$D.compare = function (date1, date2) {
			if (isNaN(date1) || isNaN(date2)) {
				throw new Error(date1 + " - " + date2);
			} else if (date1 instanceof Date && date2 instanceof Date) {
				return (date1 < date2) ? -1 : (date1 > date2) ? 1 : 0;
			} else {
				throw new TypeError(date1 + " - " + date2);
			}
		};
		
		/**
		 * Compares the first Date object to the second Date object and returns true if they are equal.  
		 * @param {Date}     First Date object to compare [Required]
		 * @param {Date}     Second Date object to compare to [Required]
		 * @return {Boolean} true if dates are equal. false if they are not equal.
		 */
		$D.equals = function (date1, date2) {
			return (date1.compareTo(date2) === 0);
		};

		/**
		 * Gets the language appropriate day name when given the day number(0-6)
		 * eg - 0 == Sunday
		 * @return {String}  The day name
		 */
		$D.getDayName = function (n) {
			return Date.CultureInfo.dayNames[n];
		};

		/**
		 * Gets the day number (0-6) if given a CultureInfo specific string which is a valid dayName, abbreviatedDayName or shortestDayName (two char).
		 * @param {String}   The name of the day (eg. "Monday, "Mon", "tuesday", "tue", "We", "we").
		 * @return {Number}  The day number
		 */
		$D.getDayNumberFromName = function (name) {
			var n = Date.CultureInfo.dayNames, m = Date.CultureInfo.abbreviatedDayNames, o = Date.CultureInfo.shortestDayNames, s = name.toLowerCase();
			for (var i = 0; i < n.length; i++) {
				if (n[i].toLowerCase() === s || m[i].toLowerCase() === s || o[i].toLowerCase() === s) {
					return i;
				}
			}
			return -1;
		};
		
		/**
		 * Gets the month number (0-11) if given a Culture Info specific string which is a valid monthName or abbreviatedMonthName.
		 * @param {String}   The name of the month (eg. "February, "Feb", "october", "oct").
		 * @return {Number}  The day number
		 */
		$D.getMonthNumberFromName = function (name) {
			var n = Date.CultureInfo.monthNames, m = Date.CultureInfo.abbreviatedMonthNames, s = name.toLowerCase();
			for (var i = 0; i < n.length; i++) {
				if (n[i].toLowerCase() === s || m[i].toLowerCase() === s) {
					return i;
				}
			}
			return -1;
		};

		/**
		 * Gets the language appropriate month name when given the month number(0-11)
		 * eg - 0 == January
		 * @return {String}  The month name
		 */
		$D.getMonthName = function (n) {
			return Date.CultureInfo.monthNames[n];
		};

		/**
		 * Determines if the current date instance is within a LeapYear.
		 * @param {Number}   The year.
		 * @return {Boolean} true if date is within a LeapYear, otherwise false.
		 */
		$D.isLeapYear = function (year) {
			return ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
		};

		/**
		 * Gets the number of days in the month, given a year and month value. Automatically corrects for LeapYear.
		 * @param {Number}   The year.
		 * @param {Number}   The month (0-11).
		 * @return {Number}  The number of days in the month.
		 */
		$D.getDaysInMonth = function (year, month) {
			if (!month && $D.validateMonth(year)) {
					month = year;
					year = Date.today().getFullYear();
			}
			return [31, ($D.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
		};

		$P.getDaysInMonth = function () {
			return $D.getDaysInMonth(this.getFullYear(), this.getMonth());
		};
	 
		$D.getTimezoneAbbreviation = function (offset, dst) {
			var p, n = (dst || false) ? Date.CultureInfo.abbreviatedTimeZoneDST : Date.CultureInfo.abbreviatedTimeZoneStandard;
			for (p in n) {
				if (n.hasOwnProperty(p)) {
					if (n[p] === offset) {
						return p;
					}
				}
			}
			return null;
		};
		
		$D.getTimezoneOffset = function (name, dst) {
			var i, a =[], z = Date.CultureInfo.timezones;
			if (!name) { name = (new Date()).getTimezone();}
			for (i = 0; i < z.length; i++) {
				if (z[i].name === name.toUpperCase()) {
					a.push(i);
				}
			}
			if (!z[a[0]]) {
				return null;
			}
			if (a.length === 1 || !dst) {
				return z[a[0]].offset;
			} else {
				for (i=0; i < a.length; i++) {
					if (z[a[i]].dst) {
						return z[a[i]].offset;
					}
				}
			}
		};

		$D.getQuarter = function (d) {
			d = d || new Date(); // If no date supplied, use today
			var q = [1,2,3,4];
			return q[Math.floor(d.getMonth() / 3)]; // ~~~ is a bitwise op. Faster than Math.floor
		};

		$D.getDaysLeftInQuarter = function (d) {
			d = d || new Date();
			var qEnd = new Date(d);
			qEnd.setMonth(qEnd.getMonth() + 3 - qEnd.getMonth() % 3, 0);
			return Math.floor((qEnd - d) / 8.64e7);
		};

		/**
		 * Returns a new Date object that is an exact date and time copy of the original instance.
		 * @return {Date}    A new Date instance
		 */
		$P.clone = function () {
			return new Date(this.getTime());
		};

		/**
		 * Compares this instance to a Date object and returns an number indication of their relative values.  
		 * @param {Date}     Date object to compare [Required]
		 * @return {Number}  -1 = this is lessthan date. 0 = values are equal. 1 = this is greaterthan date.
		 */
		$P.compareTo = function (date) {
			return Date.compare(this, date);
		};

		/**
		 * Compares this instance to another Date object and returns true if they are equal.  
		 * @param {Date}     Date object to compare. If no date to compare, new Date() [now] is used.
		 * @return {Boolean} true if dates are equal. false if they are not equal.
		 */
		$P.equals = function (date) {
			return Date.equals(this, (date !== undefined ? date : new Date()));
		};

		/**
		 * Determines if this instance is between a range of two dates or equal to either the start or end dates.
		 * @param {Date}     Start of range [Required]
		 * @param {Date}     End of range [Required]
		 * @return {Boolean} true is this is between or equal to the start and end dates, else false
		 */
		$P.between = function (start, end) {
			return this.getTime() >= start.getTime() && this.getTime() <= end.getTime();
		};

		/**
		 * Determines if this date occurs after the date to compare to.
		 * @param {Date}     Date object to compare. If no date to compare, new Date() ("now") is used.
		 * @return {Boolean} true if this date instance is greater than the date to compare to (or "now"), otherwise false.
		 */
		$P.isAfter = function (date) {
			return this.compareTo(date || new Date()) === 1;
		};

		/**
		 * Determines if this date occurs before the date to compare to.
		 * @param {Date}     Date object to compare. If no date to compare, new Date() ("now") is used.
		 * @return {Boolean} true if this date instance is less than the date to compare to (or "now").
		 */
		$P.isBefore = function (date) {
			return (this.compareTo(date || new Date()) === -1);
		};

		/**
		 * Determines if the current Date instance occurs today.
		 * @return {Boolean} true if this date instance is 'today', otherwise false.
		 */
		
		/**
		 * Determines if the current Date instance occurs on the same Date as the supplied 'date'. 
		 * If no 'date' to compare to is provided, the current Date instance is compared to 'today'. 
		 * @param {date}     Date object to compare. If no date to compare, the current Date ("now") is used.
		 * @return {Boolean} true if this Date instance occurs on the same Day as the supplied 'date'.
		 */
		$P.isToday = $P.isSameDay = function (date) {
			return this.clone().clearTime().equals((date || new Date()).clone().clearTime());
		};
		
		/**
		 * Adds the specified number of milliseconds to this instance. 
		 * @param {Number}   The number of milliseconds to add. The number can be positive or negative [Required]
		 * @return {Date}    this
		 */
		$P.addMilliseconds = function (value) {
			if (!value) { return this; }
			this.setTime(this.getTime() + value * 1);
			return this;
		};

		/**
		 * Adds the specified number of seconds to this instance. 
		 * @param {Number}   The number of seconds to add. The number can be positive or negative [Required]
		 * @return {Date}    this
		 */
		$P.addSeconds = function (value) {
			if (!value) { return this; }
			return this.addMilliseconds(value * 1000);
		};

		/**
		 * Adds the specified number of seconds to this instance. 
		 * @param {Number}   The number of seconds to add. The number can be positive or negative [Required]
		 * @return {Date}    this
		 */
		$P.addMinutes = function (value) {
			if (!value) { return this; }
			return this.addMilliseconds(value * 60000); // 60*1000
		};

		/**
		 * Adds the specified number of hours to this instance. 
		 * @param {Number}   The number of hours to add. The number can be positive or negative [Required]
		 * @return {Date}    this
		 */
		$P.addHours = function (value) {
			if (!value) { return this; }
			return this.addMilliseconds(value * 3600000); // 60*60*1000
		};

		/**
		 * Adds the specified number of days to this instance. 
		 * @param {Number}   The number of days to add. The number can be positive or negative [Required]
		 * @return {Date}    this
		 */
		$P.addDays = function (value) {
			if (!value) { return this; }
			this.setDate(this.getDate() + value * 1);
			return this;
		};

		/**
		 * Adds the specified number of weekdays (ie - not sat or sun) to this instance. 
		 * @param {Number}   The number of days to add. The number can be positive or negative [Required]
		 * @return {Date}    this
		 */
		$P.addWeekdays = function (value) {
			if (!value) { return this; }
			var day = this.getDay();
			var weeks = (Math.ceil(Math.abs(value)/7));
			if (day === 0 || day === 6) {
				if (value > 0) {
					this.next().monday();
					this.addDays(-1);
				}
			}

			if (value < 0) {
				while (value < 0) {
					this.addDays(-1);
					day = this.getDay();
					if (day !== 0 && day !== 6) {
						value++;
					}
				}
				return this;
			} else if (value > 5 || (6-day) <= value) {
				value = value + (weeks * 2);
			}

			return this.addDays(value);
		};

		/**
		 * Adds the specified number of weeks to this instance. 
		 * @param {Number}   The number of weeks to add. The number can be positive or negative [Required]
		 * @return {Date}    this
		 */
		$P.addWeeks = function (value) {
			if (!value) { return this; }
			return this.addDays(value * 7);
		};

		/**
		 * Adds the specified number of months to this instance. 
		 * @param {Number}   The number of months to add. The number can be positive or negative [Required]
		 * @return {Date}    this
		 */
		$P.addMonths = function (value) {
			if (!value) { return this; }
			var n = this.getDate();
			this.setDate(1);
			this.setMonth(this.getMonth() + value * 1);
			this.setDate(Math.min(n, $D.getDaysInMonth(this.getFullYear(), this.getMonth())));
			return this;
		};

		$P.addQuarters = function (value) {
			if (!value) { return this; }
			// note this will take you to the same point in the quarter as you are now.
			// i.e. - if you are 15 days into the quarter you'll be 15 days into the resulting one.
			// bonus: this allows adding fractional quarters
			return this.addMonths(value * 3);
		};

		/**
		 * Adds the specified number of years to this instance. 
		 * @param {Number}   The number of years to add. The number can be positive or negative [Required]
		 * @return {Date}    this
		 */
		$P.addYears = function (value) {
			if (!value) { return this; }
			return this.addMonths(value * 12);
		};

		/**
		 * Adds (or subtracts) to the value of the years, months, weeks, days, hours, minutes, seconds, milliseconds of the date instance using given configuration object. Positive and Negative values allowed.
		 * Example
		<pre><code>
		Date.today().add( { days: 1, months: 1 } )
		 
		new Date().add( { years: -1 } )
		</code></pre> 
		 * @param {Object}   Configuration object containing attributes (months, days, etc.)
		 * @return {Date}    this
		 */
		$P.add = function (config) {
			if (typeof config === "number") {
				this._orient = config;
				return this;
			}
			
			var x = config;

			if (x.day) {
				// If we should be a different date than today (eg: for 'tomorrow -1d', etc).
				// Should only effect parsing, not direct usage (eg, Finish and FinishExact)
				if ((x.day - this.getDate()) !== 0) {
					this.setDate(x.day);
				}
			}
			if (x.milliseconds) {
				this.addMilliseconds(x.milliseconds);
			}
			if (x.seconds) {
				this.addSeconds(x.seconds);
			}
			if (x.minutes) {
				this.addMinutes(x.minutes);
			}
			if (x.hours) {
				this.addHours(x.hours);
			}
			if (x.weeks) {
				this.addWeeks(x.weeks);
			}
			if (x.months) {
				this.addMonths(x.months);
			}
			if (x.years) {
				this.addYears(x.years);
			}
			if (x.days) {
				this.addDays(x.days);
			}
			return this;
		};
		
		/**
		 * Get the week number. Week one (1) is the week which contains the first Thursday of the year. Monday is considered the first day of the week.
		 * The .getWeek() function does NOT convert the date to UTC. The local datetime is used. 
		 * Please use .getISOWeek() to get the week of the UTC converted date.
		 * @return {Number}  1 to 53
		 */
		$P.getWeek = function (utc) {
			// Create a copy of this date object  
			var self, target = new Date(this.valueOf());
			if (utc) {
				target.addMinutes(target.getTimezoneOffset());
				self = target.clone();
			} else {
				self = this;
			}
			// ISO week date weeks start on monday  
			// so correct the day number  
			var dayNr = (self.getDay() + 6) % 7;
			// ISO 8601 states that week 1 is the week  
			// with the first thursday of that year.  
			// Set the target date to the thursday in the target week  
			target.setDate(target.getDate() - dayNr + 3);
			// Store the millisecond value of the target date  
			var firstThursday = target.valueOf();
			// Set the target to the first thursday of the year  
			// First set the target to january first  
			target.setMonth(0, 1);
			// Not a thursday? Correct the date to the next thursday  
			if (target.getDay() !== 4) {
				target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);
			}
			// The weeknumber is the number of weeks between the   
			// first thursday of the year and the thursday in the target week  
			return 1 + Math.ceil((firstThursday - target) / 604800000); // 604800000 = 7 * 24 * 3600 * 1000  
		};
		
		/**
		 * Get the ISO 8601 week number. Week one ("01") is the week which contains the first Thursday of the year. Monday is considered the first day of the week.
		 * The .getISOWeek() function does convert the date to it's UTC value. Please use .getWeek() to get the week of the local date.
		 * @return {String}  "01" to "53"
		 */
		$P.getISOWeek = function () {
			return p(this.getWeek(true));
		};

		/**
		 * Moves the date to Monday of the week set. Week one (1) is the week which contains the first Thursday of the year.
		 * @param {Number}   A Number (1 to 53) that represents the week of the year.
		 * @return {Date}    this
		 */
		$P.setWeek = function (n) {
			if ((n - this.getWeek()) === 0) {
				if (this.getDay() !== 1) {
					return this.moveToDayOfWeek(1, (this.getDay() > 1 ? -1 : 1));
				} else {
					return this;
				}
			} else {
				return this.moveToDayOfWeek(1, (this.getDay() > 1 ? -1 : 1)).addWeeks(n - this.getWeek());
			}
		};

		$P.setQuarter = function (qtr) {
			var month = Math.abs(((qtr-1) * 3) + 1);
			return this.setMonth(month, 1);
		};

		$P.getQuarter = function () {
			return Date.getQuarter(this);
		};

		$P.getDaysLeftInQuarter = function () {
			return Date.getDaysLeftInQuarter(this);
		};

		// private
		var validate = function (n, min, max, name) {
			name = name ? name : "Object";
			if (typeof n === "undefined") {
				return false;
			} else if (typeof n !== "number") {
				throw new TypeError(n + " is not a Number.");
			} else if (n < min || n > max) {
				// As failing validation is *not* an exceptional circumstance 
				// lets not throw a RangeError Exception here. 
				// It's semantically correct but it's not sensible.
				return false;
			}
			return true;
		};

		/**
		 * Validates the number is within an acceptable range for milliseconds [0-999].
		 * @param {Number}   The number to check if within range.
		 * @return {Boolean} true if within range, otherwise false.
		 */
		$D.validateMillisecond = function (value) {
			return validate(value, 0, 999, "millisecond");
		};

		/**
		 * Validates the number is within an acceptable range for seconds [0-59].
		 * @param {Number}   The number to check if within range.
		 * @return {Boolean} true if within range, otherwise false.
		 */
		$D.validateSecond = function (value) {
			return validate(value, 0, 59, "second");
		};

		/**
		 * Validates the number is within an acceptable range for minutes [0-59].
		 * @param {Number}   The number to check if within range.
		 * @return {Boolean} true if within range, otherwise false.
		 */
		$D.validateMinute = function (value) {
			return validate(value, 0, 59, "minute");
		};

		/**
		 * Validates the number is within an acceptable range for hours [0-23].
		 * @param {Number}   The number to check if within range.
		 * @return {Boolean} true if within range, otherwise false.
		 */
		$D.validateHour = function (value) {
			return validate(value, 0, 23, "hour");
		};

		/**
		 * Validates the number is within an acceptable range for the days in a month [0-MaxDaysInMonth].
		 * @param {Number}   The number to check if within range.
		 * @return {Boolean} true if within range, otherwise false.
		 */
		$D.validateDay = function (value, year, month) {
			if (year === undefined || year === null || month === undefined || month === null) { return false;}
			return validate(value, 1, $D.getDaysInMonth(year, month), "day");
		};

		/**
		 * Validates the number is within an acceptable range for months [0-11].
		 * @param {Number}   The number to check if within range.
		 * @return {Boolean} true if within range, otherwise false.
		 */
		$D.validateWeek = function (value) {
			return validate(value, 0, 53, "week");
		};

		/**
		 * Validates the number is within an acceptable range for months [0-11].
		 * @param {Number}   The number to check if within range.
		 * @return {Boolean} true if within range, otherwise false.
		 */
		$D.validateMonth = function (value) {
			return validate(value, 0, 11, "month");
		};

		/**
		 * Validates the number is within an acceptable range for years.
		 * @param {Number}   The number to check if within range.
		 * @return {Boolean} true if within range, otherwise false.
		 */
		$D.validateYear = function (value) {
			/**
			 * Per ECMAScript spec the range of times supported by Date objects is 
			 * exactly -100,000,000 days to +100,000,000 days measured relative to 
			 * midnight at the beginning of 01 January, 1970 UTC. 
			 * This gives a range of 8,640,000,000,000,000 milliseconds to either 
			 * side of 01 January, 1970 UTC.
			 *
			 * Earliest possible date: Tue, 20 Apr 271,822 B.C. 00:00:00 UTC
			 * Latest possible date: Sat, 13 Sep 275,760 00:00:00 UTC
			 */
			return validate(value, -271822, 275760, "year");
		};
		$D.validateTimezone = function(value) {
			var timezones = {"ACDT":1,"ACST":1,"ACT":1,"ADT":1,"AEDT":1,"AEST":1,"AFT":1,"AKDT":1,"AKST":1,"AMST":1,"AMT":1,"ART":1,"AST":1,"AWDT":1,"AWST":1,"AZOST":1,"AZT":1,"BDT":1,"BIOT":1,"BIT":1,"BOT":1,"BRT":1,"BST":1,"BTT":1,"CAT":1,"CCT":1,"CDT":1,"CEDT":1,"CEST":1,"CET":1,"CHADT":1,"CHAST":1,"CHOT":1,"ChST":1,"CHUT":1,"CIST":1,"CIT":1,"CKT":1,"CLST":1,"CLT":1,"COST":1,"COT":1,"CST":1,"CT":1,"CVT":1,"CWST":1,"CXT":1,"DAVT":1,"DDUT":1,"DFT":1,"EASST":1,"EAST":1,"EAT":1,"ECT":1,"EDT":1,"EEDT":1,"EEST":1,"EET":1,"EGST":1,"EGT":1,"EIT":1,"EST":1,"FET":1,"FJT":1,"FKST":1,"FKT":1,"FNT":1,"GALT":1,"GAMT":1,"GET":1,"GFT":1,"GILT":1,"GIT":1,"GMT":1,"GST":1,"GYT":1,"HADT":1,"HAEC":1,"HAST":1,"HKT":1,"HMT":1,"HOVT":1,"HST":1,"ICT":1,"IDT":1,"IOT":1,"IRDT":1,"IRKT":1,"IRST":1,"IST":1,"JST":1,"KGT":1,"KOST":1,"KRAT":1,"KST":1,"LHST":1,"LINT":1,"MAGT":1,"MART":1,"MAWT":1,"MDT":1,"MET":1,"MEST":1,"MHT":1,"MIST":1,"MIT":1,"MMT":1,"MSK":1,"MST":1,"MUT":1,"MVT":1,"MYT":1,"NCT":1,"NDT":1,"NFT":1,"NPT":1,"NST":1,"NT":1,"NUT":1,"NZDT":1,"NZST":1,"OMST":1,"ORAT":1,"PDT":1,"PET":1,"PETT":1,"PGT":1,"PHOT":1,"PHT":1,"PKT":1,"PMDT":1,"PMST":1,"PONT":1,"PST":1,"PYST":1,"PYT":1,"RET":1,"ROTT":1,"SAKT":1,"SAMT":1,"SAST":1,"SBT":1,"SCT":1,"SGT":1,"SLST":1,"SRT":1,"SST":1,"SYOT":1,"TAHT":1,"THA":1,"TFT":1,"TJT":1,"TKT":1,"TLT":1,"TMT":1,"TOT":1,"TVT":1,"UCT":1,"ULAT":1,"UTC":1,"UYST":1,"UYT":1,"UZT":1,"VET":1,"VLAT":1,"VOLT":1,"VOST":1,"VUT":1,"WAKT":1,"WAST":1,"WAT":1,"WEDT":1,"WEST":1,"WET":1,"WST":1,"YAKT":1,"YEKT":1,"Z":1};
			return (timezones[value] === 1);
		};
		$D.validateTimezoneOffset= function(value) {
			// timezones go from +14hrs to -12hrs, the +X hours are negative offsets.
			return (value > -841 && value < 721);
		};

		var validateConfigObject = function (obj) {
			var result = {}, self = this, prop, testFunc;
			testFunc = function (prop, func, value) {
				if (prop === "day") {
					var month = (obj.month !== undefined) ? obj.month - self.getMonth() : self.getMonth();
					var year = (obj.year !== undefined) ? obj.year - self.getFullYear() : self.getFullYear();
					return $D[func](value, year, month);
				} else {
					return $D[func](value);
				}
			};
			for (prop in obj) {
				if (hasOwnProperty.call(obj, prop)) {
					var func = "validate" + prop.charAt(0).toUpperCase() + prop.slice(1);
					if ($D[func] && obj[prop] !== null && testFunc(prop, func, obj[prop])) {
						result[prop] = obj[prop];
					}
				}
			}
			return result;
		};
		
		/**
		 * Set the value of year, month, day, hour, minute, second, millisecond of date instance using given configuration object.
		 * Example
		<pre><code>
		Date.today().set( { day: 20, month: 1 } )

		new Date().set( { millisecond: 0 } )
		</code></pre>
		 * 
		 * @param {Object}   Configuration object containing attributes (month, day, etc.)
		 * @return {Date}    this
		 */
		$P.set = function (config) {
			config = validateConfigObject.call(this, config);
			var key;
			for (key in config) {
				if (hasOwnProperty.call(config, key)) {
					var name = key.charAt(0).toUpperCase() + key.slice(1);
					var addFunc, getFunc;
					if (key !== "week" && key !== "month" && key !== "timezone" && key !== "timezoneOffset") {
						name += "s";
					}
					addFunc = "add" + name;
					getFunc = "get" + name;
					if (key === "month") {
						addFunc = addFunc + "s";
					} else if (key === "year"){
						getFunc = "getFullYear";
					}
					if (key !== "day" && key !== "timezone" && key !== "timezoneOffset"  && key !== "week") {
							this[addFunc](config[key] - this[getFunc]());
					} else if ( key === "timezone" || key === "timezoneOffset" || key === "week") {
						this["set"+name](config[key]);
					}
				}
			}
			// day has to go last because you can't validate the day without first knowing the month
			if (config.day) {
				this.addDays(config.day - this.getDate());
			}
			
			return this;
		};

		/**
		 * Moves the date to the first day of the month.
		 * @return {Date}    this
		 */
		$P.moveToFirstDayOfMonth = function () {
			return this.set({ day: 1 });
		};

		/**
		 * Moves the date to the last day of the month.
		 * @return {Date}    this
		 */
		$P.moveToLastDayOfMonth = function () {
			return this.set({ day: $D.getDaysInMonth(this.getFullYear(), this.getMonth())});
		};

		/**
		 * Moves the date to the next n'th occurrence of the dayOfWeek starting from the beginning of the month. The number (-1) is a magic number and will return the last occurrence of the dayOfWeek in the month.
		 * @param {Number}   The dayOfWeek to move to
		 * @param {Number}   The n'th occurrence to move to. Use (-1) to return the last occurrence in the month
		 * @return {Date}    this
		 */
		$P.moveToNthOccurrence = function (dayOfWeek, occurrence) {
			if (dayOfWeek === "Weekday") {
				if (occurrence > 0) {
					this.moveToFirstDayOfMonth();
					if (this.is().weekday()) {
						occurrence -= 1;
					}
				} else if (occurrence < 0) {
					this.moveToLastDayOfMonth();
					if (this.is().weekday()) {
						occurrence += 1;
					}
				} else {
					return this;
				}
				return this.addWeekdays(occurrence);
			}
			var shift = 0;
			if (occurrence > 0) {
				shift = occurrence - 1;
			}
			else if (occurrence === -1) {
				this.moveToLastDayOfMonth();
				if (this.getDay() !== dayOfWeek) {
					this.moveToDayOfWeek(dayOfWeek, -1);
				}
				return this;
			}
			return this.moveToFirstDayOfMonth().addDays(-1).moveToDayOfWeek(dayOfWeek, +1).addWeeks(shift);
		};


		var moveToN = function (getFunc, addFunc, nVal) {
			return function (value, orient) {
				var diff = (value - this[getFunc]() + nVal * (orient || +1)) % nVal;
				return this[addFunc]((diff === 0) ? diff += nVal * (orient || +1) : diff);
			};
		};
		/**
		 * Move to the next or last dayOfWeek based on the orient value.
		 * @param {Number}   The dayOfWeek to move to
		 * @param {Number}   Forward (+1) or Back (-1). Defaults to +1. [Optional]
		 * @return {Date}    this
		 */
		$P.moveToDayOfWeek = moveToN("getDay", "addDays", 7);
		/**
		 * Move to the next or last month based on the orient value.
		 * @param {Number}   The month to move to. 0 = January, 11 = December
		 * @param {Number}   Forward (+1) or Back (-1). Defaults to +1. [Optional]
		 * @return {Date}    this
		 */
		$P.moveToMonth = moveToN("getMonth", "addMonths", 12);
		/**
		 * Get the Ordinate of the current day ("th", "st", "rd").
		 * @return {String} 
		 */
		$P.getOrdinate = function () {
			var num = this.getDate();
			return ord(num);
		};
		/**
		 * Get the Ordinal day (numeric day number) of the year, adjusted for leap year.
		 * @return {Number} 1 through 365 (366 in leap years)
		 */
		$P.getOrdinalNumber = function () {
			return Math.ceil((this.clone().clearTime() - new Date(this.getFullYear(), 0, 1)) / 86400000) + 1;
		};

		/**
		 * Get the time zone abbreviation of the current date.
		 * @return {String} The abbreviated time zone name (e.g. "EST")
		 */
		$P.getTimezone = function () {
			return $D.getTimezoneAbbreviation(this.getUTCOffset(), this.isDaylightSavingTime());
		};

		$P.setTimezoneOffset = function (offset) {
			var here = this.getTimezoneOffset(), there = Number(offset) * -6 / 10;
			return (there || there === 0) ? this.addMinutes(there - here) : this;
		};

		$P.setTimezone = function (offset) {
			return this.setTimezoneOffset($D.getTimezoneOffset(offset));
		};

		/**
		 * Indicates whether Daylight Saving Time is observed in the current time zone.
		 * @return {Boolean} true|false
		 */
		$P.hasDaylightSavingTime = function () {
			return (Date.today().set({month: 0, day: 1}).getTimezoneOffset() !== Date.today().set({month: 6, day: 1}).getTimezoneOffset());
		};
		
		/**
		 * Indicates whether this Date instance is within the Daylight Saving Time range for the current time zone.
		 * @return {Boolean} true|false
		 */
		$P.isDaylightSavingTime = function () {
			return Date.today().set({month: 0, day: 1}).getTimezoneOffset() !== this.getTimezoneOffset();
		};

		/**
		 * Get the offset from UTC of the current date.
		 * @return {String} The 4-character offset string prefixed with + or - (e.g. "-0500")
		 */
		$P.getUTCOffset = function (offset) {
			var n = (offset || this.getTimezoneOffset()) * -10 / 6, r;
			if (n < 0) {
				r = (n - 10000).toString();
				return r.charAt(0) + r.substr(2);
			} else {
				r = (n + 10000).toString();
				return "+" + r.substr(1);
			}
		};

		/**
		 * Returns the number of milliseconds between this date and date.
		 * @param {Date} Defaults to now
		 * @return {Number} The diff in milliseconds
		 */
		$P.getElapsed = function (date) {
			return (date || new Date()) - this;
		};

		/**
		 * Converts the value of the current Date object to its equivalent string representation.
		 * Format Specifiers
		 * CUSTOM DATE AND TIME FORMAT STRINGS
		 * Format  Description                                                                  Example
		 * ------  ---------------------------------------------------------------------------  -----------------------
		 * s      The seconds of the minute between 0-59.                                      "0" to "59"
		 * ss     The seconds of the minute with leading zero if required.                     "00" to "59"
		 * 
		 * m      The minute of the hour between 0-59.                                         "0"  or "59"
		 * mm     The minute of the hour with leading zero if required.                        "00" or "59"
		 * 
		 * h      The hour of the day between 1-12.                                            "1"  to "12"
		 * hh     The hour of the day with leading zero if required.                           "01" to "12"
		 * 
		 * H      The hour of the day between 0-23.                                            "0"  to "23"
		 * HH     The hour of the day with leading zero if required.                           "00" to "23"
		 * 
		 * d      The day of the month between 1 and 31.                                       "1"  to "31"
		 * dd     The day of the month with leading zero if required.                          "01" to "31"
		 * ddd    Abbreviated day name. Date.CultureInfo.abbreviatedDayNames.                                "Mon" to "Sun" 
		 * dddd   The full day name. Date.CultureInfo.dayNames.                                              "Monday" to "Sunday"
		 * 
		 * M      The month of the year between 1-12.                                          "1" to "12"
		 * MM     The month of the year with leading zero if required.                         "01" to "12"
		 * MMM    Abbreviated month name. Date.CultureInfo.abbreviatedMonthNames.                            "Jan" to "Dec"
		 * MMMM   The full month name. Date.CultureInfo.monthNames.                                          "January" to "December"
		 *
		 * yy     The year as a two-digit number.                                              "99" or "08"
		 * yyyy   The full four digit year.                                                    "1999" or "2008"
		 * 
		 * t      Displays the first character of the A.M./P.M. designator.                    "A" or "P"
		 *		Date.CultureInfo.amDesignator or Date.CultureInfo.pmDesignator
		 * tt     Displays the A.M./P.M. designator.                                           "AM" or "PM"
		 *		Date.CultureInfo.amDesignator or Date.CultureInfo.pmDesignator
		 * 
		 * S      The ordinal suffix ("st, "nd", "rd" or "th") of the current day.            "st, "nd", "rd" or "th"
		 *
		 * STANDARD DATE AND TIME FORMAT STRINGS
		 * Format  Description                                                                  Example
		 *------  ---------------------------------------------------------------------------  -----------------------
		 * d      The CultureInfo shortDate Format Pattern                                     "M/d/yyyy"
		 * D      The CultureInfo longDate Format Pattern                                      "dddd, MMMM dd, yyyy"
		 * F      The CultureInfo fullDateTime Format Pattern                                  "dddd, MMMM dd, yyyy h:mm:ss tt"
		 * m      The CultureInfo monthDay Format Pattern                                      "MMMM dd"
		 * r      The CultureInfo rfc1123 Format Pattern                                       "ddd, dd MMM yyyy HH:mm:ss GMT"
		 * s      The CultureInfo sortableDateTime Format Pattern                              "yyyy-MM-ddTHH:mm:ss"
		 * t      The CultureInfo shortTime Format Pattern                                     "h:mm tt"
		 * T      The CultureInfo longTime Format Pattern                                      "h:mm:ss tt"
		 * u      The CultureInfo universalSortableDateTime Format Pattern                     "yyyy-MM-dd HH:mm:ssZ"
		 * y      The CultureInfo yearMonth Format Pattern                                     "MMMM, yyyy"
		 *
		 * @param {String}   A format string consisting of one or more format spcifiers [Optional].
		 * @return {String}  A string representation of the current Date object.
		 */
		
		var ord = function (n) {
			switch (n * 1) {
			case 1:
			case 21:
			case 31:
				return "st";
			case 2:
			case 22:
				return "nd";
			case 3:
			case 23:
				return "rd";
			default:
				return "th";
			}
		};
		var parseStandardFormats = function (format) {
			var y, c = Date.CultureInfo.formatPatterns;
			switch (format) {
				case "d":
					return this.toString(c.shortDate);
				case "D":
					return this.toString(c.longDate);
				case "F":
					return this.toString(c.fullDateTime);
				case "m":
					return this.toString(c.monthDay);
				case "r":
				case "R":
					y = this.clone().addMinutes(this.getTimezoneOffset());
					return y.toString(c.rfc1123) + " GMT";
				case "s":
					return this.toString(c.sortableDateTime);
				case "t":
					return this.toString(c.shortTime);
				case "T":
					return this.toString(c.longTime);
				case "u":
					y = this.clone().addMinutes(this.getTimezoneOffset());
					return y.toString(c.universalSortableDateTime);
				case "y":
					return this.toString(c.yearMonth);
				default:
					return false;
			}
		};
		var parseFormatStringsClosure = function (context) {
			return function (m) {
				if (m.charAt(0) === "\\") {
					return m.replace("\\", "");
				}
				switch (m) {
				case "hh":
					return p(context.getHours() < 13 ? (context.getHours() === 0 ? 12 : context.getHours()) : (context.getHours() - 12));
				case "h":
					return context.getHours() < 13 ? (context.getHours() === 0 ? 12 : context.getHours()) : (context.getHours() - 12);
				case "HH":
					return p(context.getHours());
				case "H":
					return context.getHours();
				case "mm":
					return p(context.getMinutes());
				case "m":
					return context.getMinutes();
				case "ss":
					return p(context.getSeconds());
				case "s":
					return context.getSeconds();
				case "yyyy":
					return p(context.getFullYear(), 4);
				case "yy":
					return p(context.getFullYear());
				case "y":
					return context.getFullYear();
				case "dddd":
					return Date.CultureInfo.dayNames[context.getDay()];
				case "ddd":
					return Date.CultureInfo.abbreviatedDayNames[context.getDay()];
				case "dd":
					return p(context.getDate());
				case "d":
					return context.getDate();
				case "MMMM":
					return Date.CultureInfo.monthNames[context.getMonth()];
				case "MMM":
					return Date.CultureInfo.abbreviatedMonthNames[context.getMonth()];
				case "MM":
					return p((context.getMonth() + 1));
				case "M":
					return context.getMonth() + 1;
				case "t":
					return context.getHours() < 12 ? Date.CultureInfo.amDesignator.substring(0, 1) : Date.CultureInfo.pmDesignator.substring(0, 1);
				case "tt":
					return context.getHours() < 12 ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator;
				case "S":
					return ord(context.getDate());
				case "W":
					return context.getWeek();
				case "WW":
					return context.getISOWeek();
				case "Q":
					return "Q" + context.getQuarter();
				case "q":
					return String(context.getQuarter());
				default:
					return m;
				}
			};
		};
		$P.toString = function (format, ignoreStandards) {
			
			// Standard Date and Time Format Strings. Formats pulled from CultureInfo file and
			// may vary by culture. 
			if (!ignoreStandards && format && format.length === 1) {
				output = parseStandardFormats.call(this, format);
				if (output) {
					return output;
				}
			}
			var parseFormatStrings = parseFormatStringsClosure(this);
			return format ? format.replace(/((\\)?(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|S|q|Q|WW?W?W?)(?![^\[]*\]))/g, parseFormatStrings).replace(/\[|\]/g, "") : this._toString();
		};

	}());


/***/ },
/* 294 */
/***/ function(module, exports) {

	/*************************************************************
	 * SugarPak - Domain Specific Language -  Syntactical Sugar  *
	 *************************************************************/
	 
	(function () {
		var $D = Date, $P = $D.prototype, $N = Number.prototype;

		// private
		$P._orient = +1;

		// private
		$P._nth = null;

		// private
		$P._is = false;

		// private
		$P._same = false;
		
		// private
		$P._isSecond = false;

		// private
		$N._dateElement = "days";

		/** 
		 * Moves the date to the next instance of a date as specified by the subsequent date element function (eg. .day(), .month()), month name function (eg. .january(), .jan()) or day name function (eg. .friday(), fri()).
		 * Example
		<pre><code>
		Date.today().next().friday();
		Date.today().next().fri();
		Date.today().next().march();
		Date.today().next().mar();
		Date.today().next().week();
		</code></pre>
		 * 
		 * @return {Date}    date
		 */
		$P.next = function () {
			this._move = true;
			this._orient = +1;
			return this;
		};

		/** 
		 * Creates a new Date (Date.today()) and moves the date to the next instance of the date as specified by the subsequent date element function (eg. .day(), .month()), month name function (eg. .january(), .jan()) or day name function (eg. .friday(), fri()).
		 * Example
		<pre><code>
		Date.next().friday();
		Date.next().fri();
		Date.next().march();
		Date.next().mar();
		Date.next().week();
		</code></pre>
		 * 
		 * @return {Date}    date
		 */
		$D.next = function () {
			return $D.today().next();
		};

		/** 
		 * Moves the date to the previous instance of a date as specified by the subsequent date element function (eg. .day(), .month()), month name function (eg. .january(), .jan()) or day name function (eg. .friday(), fri()).
		 * Example
		<pre><code>
		Date.today().last().friday();
		Date.today().last().fri();
		Date.today().last().march();
		Date.today().last().mar();
		Date.today().last().week();
		</code></pre>
		 *  
		 * @return {Date}    date
		 */
		$P.last = $P.prev = $P.previous = function () {
			this._move = true;
			this._orient = -1;
			return this;
		};

		/** 
		 * Creates a new Date (Date.today()) and moves the date to the previous instance of the date as specified by the subsequent date element function (eg. .day(), .month()), month name function (eg. .january(), .jan()) or day name function (eg. .friday(), fri()).
		 * Example
		<pre><code>
		Date.last().friday();
		Date.last().fri();
		Date.previous().march();
		Date.prev().mar();
		Date.last().week();
		</code></pre>
		 *  
		 * @return {Date}    date
		 */
		$D.last = $D.prev = $D.previous = function () {
			return $D.today().last();
		};

		/** 
		 * Performs a equality check when followed by either a month name, day name or .weekday() function.
		 * Example
		<pre><code>
		Date.today().is().friday(); // true|false
		Date.today().is().fri();
		Date.today().is().march();
		Date.today().is().mar();
		</code></pre>
		 *  
		 * @return {Boolean}    true|false
		 */
		$P.is = function () {
			this._is = true;
			return this;
		};

		/** 
		 * Determines if two date objects occur on/in exactly the same instance of the subsequent date part function.
		 * The function .same() must be followed by a date part function (example: .day(), .month(), .year(), etc).
		 *
		 * An optional Date can be passed in the date part function. If now date is passed as a parameter, 'Now' is used. 
		 *
		 * The following example demonstrates how to determine if two dates fall on the exact same day.
		 *
		 * Example
		<pre><code>
		var d1 = Date.today(); // today at 00:00
		var d2 = new Date();   // exactly now.

		// Do they occur on the same day?
		d1.same().day(d2); // true
		
		// Do they occur on the same hour?
		d1.same().hour(d2); // false, unless d2 hour is '00' (midnight).
		
		// What if it's the same day, but one year apart?
		var nextYear = Date.today().add(1).year();

		d1.same().day(nextYear); // false, because the dates must occur on the exact same day. 
		</code></pre>
		 *
		 * Scenario: Determine if a given date occurs during some week period 2 months from now. 
		 *
		 * Example
		<pre><code>
		var future = Date.today().add(2).months();
		return someDate.same().week(future); // true|false;
		</code></pre>
		 *  
		 * @return {Boolean}    true|false
		 */
		$P.same = function () {
			this._same = true;
			this._isSecond = false;
			return this;
		};

		/** 
		 * Determines if the current date/time occurs during Today. Must be preceded by the .is() function.
		 * Example
		<pre><code>
		someDate.is().today();    // true|false
		new Date().is().today();  // true
		Date.today().is().today();// true
		Date.today().add(-1).day().is().today(); // false
		</code></pre>
		 *  
		 * @return {Boolean}    true|false
		 */
		$P.today = function () {
			return this.same().day();
		};

		/** 
		 * Determines if the current date is a weekday. This function must be preceded by the .is() function.
		 * Example
		<pre><code>
		Date.today().is().weekday(); // true|false
		</code></pre>
		 *  
		 * @return {Boolean}    true|false
		 */
		$P.weekday = function () {
			if (this._nth) {
				return df("Weekday").call(this);
			}
			if (this._move) {
				return this.addWeekdays(this._orient);
			}
			if (this._is) {
				this._is = false;
				return (!this.is().sat() && !this.is().sun());
			}
			return false;
		};
		/** 
		 * Determines if the current date is on the weekend. This function must be preceded by the .is() function.
		 * Example
		<pre><code>
		Date.today().is().weekend(); // true|false
		</code></pre>
		 *  
		 * @return {Boolean}    true|false
		 */
		$P.weekend = function () {
			if (this._is) {
				this._is = false;
				return (this.is().sat() || this.is().sun());
			}
			return false;
		};

		/** 
		 * Sets the Time of the current Date instance. A string "6:15 pm" or config object {hour:18, minute:15} are accepted.
		 * Example
		<pre><code>
		// Set time to 6:15pm with a String
		Date.today().at("6:15pm");

		// Set time to 6:15pm with a config object
		Date.today().at({hour:18, minute:15});
		</code></pre>
		 *  
		 * @return {Date}    date
		 */
		$P.at = function (time) {
			return (typeof time === "string") ? $D.parse(this.toString("d") + " " + time) : this.set(time);
		};
			
		/** 
		 * Creates a new Date() and adds this (Number) to the date based on the preceding date element function (eg. second|minute|hour|day|month|year).
		 * Example
		<pre><code>
		// Undeclared Numbers must be wrapped with parentheses. Requirment of JavaScript.
		(3).days().fromNow();
		(6).months().fromNow();

		// Declared Number variables do not require parentheses. 
		var n = 6;
		n.months().fromNow();
		</code></pre>
		 *  
		 * @return {Date}    A new Date instance
		 */
		$N.fromNow = $N.after = function (date) {
			var c = {};
			c[this._dateElement] = this;
			return ((!date) ? new Date() : date.clone()).add(c);
		};

		/** 
		 * Creates a new Date() and subtract this (Number) from the date based on the preceding date element function (eg. second|minute|hour|day|month|year).
		 * Example
		<pre><code>
		// Undeclared Numbers must be wrapped with parentheses. Requirment of JavaScript.
		(3).days().ago();
		(6).months().ago();

		// Declared Number variables do not require parentheses. 
		var n = 6;
		n.months().ago();
		</code></pre>
		 *  
		 * @return {Date}    A new Date instance
		 */
		$N.ago = $N.before = function (date) {
			var c = {},
			s = (this._dateElement[this._dateElement.length-1] !== "s") ? this._dateElement + "s" : this._dateElement;
			c[s] = this * -1;
			return ((!date) ? new Date() : date.clone()).add(c);
		};

		// Do NOT modify the following string tokens. These tokens are used to build dynamic functions.
		// All culture-specific strings can be found in the CultureInfo files.
		var dx = ("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),
			mx = ("january february march april may june july august september october november december").split(/\s/),
			px = ("Millisecond Second Minute Hour Day Week Month Year Quarter Weekday").split(/\s/),
			pxf = ("Milliseconds Seconds Minutes Hours Date Week Month FullYear Quarter").split(/\s/),
			nth = ("final first second third fourth fifth").split(/\s/),
			de;

	   /** 
		 * Returns an object literal of all the date parts.
		 * Example
		<pre><code>
		var o = new Date().toObject();
		
		// { year: 2008, month: 4, week: 20, day: 13, hour: 18, minute: 9, second: 32, millisecond: 812 }
		
		// The object properties can be referenced directly from the object.
		
		alert(o.day);  // alerts "13"
		alert(o.year); // alerts "2008"
		</code></pre>
		 *  
		 * @return {Date}    An object literal representing the original date object.
		 */
		$P.toObject = function () {
			var o = {};
			for (var i = 0; i < px.length; i++) {
				if (this["get" + pxf[i]]) {
					o[px[i].toLowerCase()] = this["get" + pxf[i]]();
				}
			}
			return o;
		};
	   
	   /** 
		 * Returns a date created from an object literal. Ignores the .week property if set in the config. 
		 * Example
		<pre><code>
		var o = new Date().toObject();
		
		return Date.fromObject(o); // will return the same date. 

		var o2 = {month: 1, day: 20, hour: 18}; // birthday party!
		Date.fromObject(o2);
		</code></pre>
		 *  
		 * @return {Date}    An object literal representing the original date object.
		 */
		$D.fromObject = function(config) {
			config.week = null;
			return Date.today().set(config);
		};
			
		// Create day name functions and abbreviated day name functions (eg. monday(), friday(), fri()).
		
		var df = function (n) {
			return function () {
				if (this._is) {
					this._is = false;
					return this.getDay() === n;
				}
				if (this._move) { this._move = null; }
				if (this._nth !== null) {
					// If the .second() function was called earlier, remove the _orient 
					// from the date, and then continue.
					// This is required because 'second' can be used in two different context.
					// 
					// Example
					//
					//   Date.today().add(1).second();
					//   Date.march().second().monday();
					// 
					// Things get crazy with the following...
					//   Date.march().add(1).second().second().monday(); // but it works!!
					//  
					if (this._isSecond) {
						this.addSeconds(this._orient * -1);
					}
					// make sure we reset _isSecond
					this._isSecond = false;

					var ntemp = this._nth;
					this._nth = null;
					var temp = this.clone().moveToLastDayOfMonth();
					this.moveToNthOccurrence(n, ntemp);
					if (this > temp) {
						throw new RangeError($D.getDayName(n) + " does not occur " + ntemp + " times in the month of " + $D.getMonthName(temp.getMonth()) + " " + temp.getFullYear() + ".");
					}
					return this;
				}
				return this.moveToDayOfWeek(n, this._orient);
			};
		};
		
		var sdf = function (n) {
			return function () {
				var t = $D.today(), shift = n - t.getDay();
				if (n === 0 && Date.CultureInfo.firstDayOfWeek === 1 && t.getDay() !== 0) {
					shift = shift + 7;
				}
				return t.addDays(shift);
			};
		};
		

		
		// Create month name functions and abbreviated month name functions (eg. january(), march(), mar()).
		var month_instance_functions = function (n) {
			return function () {
				if (this._is) {
					this._is = false;
					return this.getMonth() === n;
				}
				return this.moveToMonth(n, this._orient);
			};
		};
		
		var month_static_functions = function (n) {
			return function () {
				return $D.today().set({ month: n, day: 1 });
			};
		};
		
		var processTerms = function (names, staticFunc, instanceFunc) {
			for (var i = 0; i < names.length; i++) {
				// Create constant static Name variables.
				$D[names[i].toUpperCase()] = $D[names[i].toUpperCase().substring(0, 3)] = i;
				// Create Name functions.
				$D[names[i]] = $D[names[i].substring(0, 3)] = staticFunc(i);
				// Create Name instance functions.
				$P[names[i]] = $P[names[i].substring(0, 3)] = instanceFunc(i);
			}

		};

		processTerms(dx, sdf, df);
		processTerms(mx, month_static_functions, month_instance_functions);
		
		// Create date element functions and plural date element functions used with Date (eg. day(), days(), months()).
		var ef = function (j) {
			return function () {
				// if the .second() function was called earlier, the _orient 
				// has alread been added. Just return this and reset _isSecond.
				if (this._isSecond) {
					this._isSecond = false;
					return this;
				}

				if (this._same) {
					this._same = this._is = false;
					var o1 = this.toObject(),
						o2 = (arguments[0] || new Date()).toObject(),
						v = "",
						k = j.toLowerCase();

					// the substr trick with -1 doesn't work in IE8 or less
					k = (k[k.length-1] === "s") ? k.substring(0,k.length-1) : k;
						
					for (var m = (px.length - 1); m > -1; m--) {
						v = px[m].toLowerCase();
						if (o1[v] !== o2[v]) {
							return false;
						}
						if (k === v) {
							break;
						}
					}
					return true;
				}
				
				if (j.substring(j.length - 1) !== "s") {
					j += "s";
				}
				if (this._move) { this._move = null; }
				return this["add" + j](this._orient);
			};
		};
		
		
		var nf = function (n) {
			return function () {
				this._dateElement = n;
				return this;
			};
		};
	   
		for (var k = 0; k < px.length; k++) {
			de = px[k].toLowerCase();
			if(de !== "weekday") {
				// Create date element functions and plural date element functions used with Date (eg. day(), days(), months()).
				$P[de] = $P[de + "s"] = ef(px[k]);
				
				// Create date element functions and plural date element functions used with Number (eg. day(), days(), months()).
				$N[de] = $N[de + "s"] = nf(de + "s");
			}
		}
		
		$P._ss = ef("Second");
		
		var nthfn = function (n) {
			return function (dayOfWeek) {
				if (this._same) {
					return this._ss(arguments[0]);
				}
				if (dayOfWeek || dayOfWeek === 0) {
					return this.moveToNthOccurrence(dayOfWeek, n);
				}
				this._nth = n;

				// if the operator is 'second' add the _orient, then deal with it later...
				if (n === 2 && (dayOfWeek === undefined || dayOfWeek === null)) {
					this._isSecond = true;
					return this.addSeconds(this._orient);
				}
				return this;
			};
		};

		for (var l = 0; l < nth.length; l++) {
			$P[nth[l]] = (l === 0) ? nthfn(-1) : nthfn(l);
		}
	}());


/***/ },
/* 295 */
/***/ function(module, exports) {

	(function () {
		"use strict";
		Date.Parsing = {
			Exception: function (s) {
				this.message = "Parse error at '" + s.substring(0, 10) + " ...'";
			}
		};
		var $P = Date.Parsing;
		var dayOffsets = {
			standard: [0,31,59,90,120,151,181,212,243,273,304,334],
			leap: [0,31,60,91,121,152,182,213,244,274,305,335]
		};

		$P.isLeapYear = function(year) {
			return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
		};

		var utils = {
			multiReplace : function (str, hash ) {
				var key;
				for (key in hash) {
					if (Object.prototype.hasOwnProperty.call(hash, key)) {
						var regex;
						if (typeof hash[key] === "function") {

						} else {
							regex = (hash[key] instanceof RegExp) ? hash[key] : new RegExp(hash[key], "g");
						}
						str = str.replace(regex, key);
					}
				}
				return str;
			},
			getDayOfYearFromWeek : function (obj) {
				var d, jan4, offset;
				obj.weekDay = (!obj.weekDay && obj.weekDay !== 0) ? 1 : obj.weekDay;
				d = new Date(obj.year, 0, 4);
				jan4 = d.getDay() === 0 ? 7 : d.getDay(); // JS is 0 indexed on Sunday.
				offset = jan4+3;
				obj.dayOfYear = ((obj.week * 7) + (obj.weekDay === 0 ? 7 : obj.weekDay))-offset;
				return obj;
			},
			getDayOfYear : function (obj, dayOffset) {
				if (!obj.dayOfYear) {
					obj = utils.getDayOfYearFromWeek(obj);
				}
				for (var i=0;i <= dayOffset.length;i++) {
					if (obj.dayOfYear < dayOffset[i] || i === dayOffset.length) {
						obj.day = obj.day ? obj.day : (obj.dayOfYear - dayOffset[i-1]);
						break;
					} else {
						obj.month = i;
					}
				}
				return obj;
			},
			adjustForTimeZone : function (obj, date) {
				var offset;
				if (obj.zone.toUpperCase() === "Z" || (obj.zone_hours === 0 && obj.zone_minutes === 0)) {
					// it's UTC/GML so work out the current timeszone offset
					offset = -date.getTimezoneOffset();
				} else {
					offset = (obj.zone_hours*60) + (obj.zone_minutes || 0);
					if (obj.zone_sign === "+") {
						offset *= -1;
					}
					offset -= date.getTimezoneOffset();
				}
				date.setMinutes(date.getMinutes()+offset);
				return date;
			},
			setDefaults : function (obj) {
				obj.year = obj.year || Date.today().getFullYear();
				obj.hours = obj.hours || 0;
				obj.minutes = obj.minutes || 0;
				obj.seconds = obj.seconds || 0;
				obj.milliseconds = obj.milliseconds || 0;
				if (!(!obj.month && (obj.week || obj.dayOfYear))) {
					// if we have a month, or if we don't but don't have the day calculation data
					obj.month = obj.month || 0;
					obj.day = obj.day || 1;
				}
				return obj;
			},
			dataNum: function (data, mod, explict, postProcess) {
				var dataNum = data*1;
				if (mod) {
					if (postProcess) {
						return data ? mod(data)*1 : data;
					} else {
						return data ? mod(dataNum) : data;
					}
				} else if (!explict){
					return data ? dataNum : data;
				} else {
					return (data && typeof data !== "undefined") ? dataNum : data;
				}
			},
			timeDataProcess: function (obj) {
				var timeObj = {};
				for (var x in obj.data) {
					if (obj.data.hasOwnProperty(x)) {
						timeObj[x] = obj.ignore[x] ? obj.data[x] : utils.dataNum(obj.data[x], obj.mods[x], obj.explict[x], obj.postProcess[x]);
					}
				}
				if (obj.data.secmins) {
					obj.data.secmins = obj.data.secmins.replace(",", ".") * 60;
					if (!timeObj.minutes) {
						timeObj.minutes = obj.data.secmins;
					} else if (!timeObj.seconds) {
						timeObj.seconds = obj.data.secmins;
					}
					delete obj.secmins;
				}
				return timeObj;
			},
			buildTimeObjectFromData: function (data) {
				var time = utils.timeDataProcess({
					data: {
						year : data[1],
						month : data[5],
						day : data[7],
						week : data[8],
						dayOfYear : data[10],
						hours : data[15],
						zone_hours : data[23],
						zone_minutes : data[24],
						zone : data[21],
						zone_sign : data[22],
						weekDay : data[9],
						minutes: data[16],
						seconds: data[19],
						milliseconds: data[20],
						secmins: data[18]
					},
					mods: {
						month: function(data) {
							return data-1;
						},
						weekDay: function (data) {
							data = Math.abs(data);
							return (data === 7 ? 0 : data);
						},
						minutes: function (data) {
							return data.replace(":","");
						},
						seconds: function (data) {
							return Math.floor( (data.replace(":","").replace(",","."))*1 );
						},
						milliseconds: function (data) {
							return (data.replace(",",".")*1000);
						}
					},
					postProcess: {
						minutes: true,
						seconds: true,
						milliseconds: true
					},
					explict: {
						zone_hours: true,
						zone_minutes: true
					},
					ignore: {
						zone: true,
						zone_sign: true,
						secmins: true
					}
				});
				return time;
			},
			addToHash: function (hash, keys, data) {
				keys = keys;
				data = data;
				var len = keys.length;
				for (var i = 0; i < len; i++) {
				  hash[keys[i]] = data[i];
				}
				return hash;
			},
			combineRegex: function (r1, r2) {
				return new RegExp("(("+r1.source+")\\s("+r2.source+"))");
			},
			getDateNthString: function(add, last, inc){
				if (add) {
					return Date.today().addDays(inc).toString("d");
				} else if (last) {
					return Date.today().last()[inc]().toString("d");
				}
				
			},
			buildRegexData: function (array) {
				var arr = [];
				var len = array.length;
				for (var i=0; i < len; i++) {
					if (Array.isArray(array[i])) {
						arr.push(this.combineRegex(array[i][0], array[i][1]));
					} else {
						arr.push(array[i]);
					}
				}
				return arr;
			}
		};

		$P.processTimeObject = function (obj) {
			var date, dayOffset;

			utils.setDefaults(obj);
			dayOffset = ($P.isLeapYear(obj.year)) ? dayOffsets.leap : dayOffsets.standard;

			if (!obj.month && (obj.week || obj.dayOfYear)) {
				utils.getDayOfYear(obj, dayOffset);
			} else {
				obj.dayOfYear = dayOffset[obj.month] + obj.day;
			}

			date = new Date(obj.year, obj.month, obj.day, obj.hours, obj.minutes, obj.seconds, obj.milliseconds);

			if (obj.zone) {
				utils.adjustForTimeZone(obj, date); // adjust (and calculate) for timezone
			}
			return date;
		};
		
		$P.ISO = {
			regex : /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-4])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?\s?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/,
			parse : function (s) {
				var time, data = s.match(this.regex);
				if (!data || !data.length) {
					return null;
				}

				time = utils.buildTimeObjectFromData(data);

				if (!time.year || (!time.year && (!time.month && !time.day) && (!time.week && !time.dayOfYear)) ) {
					return null;
				}
				return $P.processTimeObject(time);
			}
		};

		$P.Numeric = {
			isNumeric: function (e){return!isNaN(parseFloat(e))&&isFinite(e);},
			regex: /\b([0-1]?[0-9])([0-3]?[0-9])([0-2]?[0-9]?[0-9][0-9])\b/i,
			parse: function (s) {
				var data, i,
					time = {},
					order = Date.CultureInfo.dateElementOrder.split("");
				if (!(this.isNumeric(s)) || // if it's non-numeric OR
					(s[0] === "+" && s[0] === "-")) {			// It's an arithmatic string (eg +/-1000)
					return null;
				}
				if (s.length < 5) { // assume it's just a year.
					time.year = s;
					return $P.processTimeObject(time);
				}
				data = s.match(this.regex);
				if (!data || !data.length) {
					return null;
				}
				for (i=0; i < order.length; i++) {
					switch(order[i]) {
						case "d":
							time.day = data[i+1];
							break;
						case "m":
							time.month = (data[i+1]-1);
							break;
						case "y":
							time.year = data[i+1];
							break;
					}
				}
				return $P.processTimeObject(time);
			}
		};

		$P.Normalizer = {
			regexData: function () {
				var $R = Date.CultureInfo.regexPatterns;
				return utils.buildRegexData([
					$R.tomorrow,
					$R.yesterday,
					[$R.past, $R.mon],
					[$R.past, $R.tue],
					[$R.past, $R.wed],
					[$R.past, $R.thu],
					[$R.past, $R.fri],
					[$R.past, $R.sat],
					[$R.past, $R.sun]
				]);
			},
			basicReplaceHash : function() {
				var $R = Date.CultureInfo.regexPatterns;
				return {
					"January": $R.jan.source,
					"February": $R.feb,
					"March": $R.mar,
					"April": $R.apr,
					"May": $R.may,
					"June": $R.jun,
					"July": $R.jul,
					"August": $R.aug,
					"September": $R.sep,
					"October": $R.oct,
					"November": $R.nov,
					"December": $R.dec,
					"": /\bat\b/gi,
					" ": /\s{2,}/,
					"am": $R.inTheMorning,
					"9am": $R.thisMorning,
					"pm": $R.inTheEvening,
					"7pm":$R.thisEvening
				};
			},
			keys : function(){
				return [
					utils.getDateNthString(true, false, 1),				// tomorrow
					utils.getDateNthString(true, false, -1),			// yesterday
					utils.getDateNthString(false, true, "monday"),		//last mon
					utils.getDateNthString(false, true, "tuesday"),		//last tues
					utils.getDateNthString(false, true, "wednesday"),	//last wed
					utils.getDateNthString(false, true, "thursday"),	//last thurs
					utils.getDateNthString(false, true, "friday"),		//last fri
					utils.getDateNthString(false, true, "saturday"),	//last sat
					utils.getDateNthString(false, true, "sunday")		//last sun
				];
			},
			buildRegexFunctions: function () {
				var $R = Date.CultureInfo.regexPatterns;
				var __ = Date.i18n.__;
				var regexStr = new RegExp("(\\b\\d\\d?("+__("AM")+"|"+__("PM")+")? )("+$R.tomorrow.source.slice(1)+")", "i");
				
				this.replaceFuncs = [
					[regexStr,
					function(full, m1) {
						var t = Date.today().addDays(1).toString("d");
						return (t + " " + m1);
					}],
					[$R.amThisMorning, function(str, am){return am;}],
					[$R.pmThisEvening, function(str, pm){return pm;}]
				];
					
			},
			buildReplaceData: function () {
				this.buildRegexFunctions();
				this.replaceHash = utils.addToHash(this.basicReplaceHash(), this.keys(), this.regexData());
			},
			stringReplaceFuncs: function (s) {
				for (var i=0; i < this.replaceFuncs.length; i++) {
					s = s.replace(this.replaceFuncs[i][0], this.replaceFuncs[i][1]);
				}
				return s;
			},
			parse: function (s) {
				s = this.stringReplaceFuncs(s);
				s = utils.multiReplace(s, this.replaceHash);

				try {
					var n = s.split(/([\s\-\.\,\/\x27]+)/);
					if (n.length === 3 &&
						$P.Numeric.isNumeric(n[0]) &&
						$P.Numeric.isNumeric(n[2]) &&
						(n[2].length >= 4)) {
							// ok, so we're dealing with x/year. But that's not a full date.
							// This fixes wonky dateElementOrder parsing when set to dmy order.
							if (Date.CultureInfo.dateElementOrder[0] === "d") {
								s = "1/" + n[0] + "/" + n[2]; // set to 1st of month and normalize the seperator
							}
					}
				} catch (e) {}

				return s;
			}
		};
		$P.Normalizer.buildReplaceData();
	}());

/***/ },
/* 296 */
/***/ function(module, exports) {

	(function () {
		var $P = Date.Parsing;
		var _ = $P.Operators = {
			//
			// Tokenizers
			//
			rtoken: function (r) { // regex token
				return function (s) {
					var mx = s.match(r);
					if (mx) {
						return ([ mx[0], s.substring(mx[0].length) ]);
					} else {
						throw new $P.Exception(s);
					}
				};
			},
			token: function () { // whitespace-eating token
				return function (s) {
					return _.rtoken(new RegExp("^\\s*" + s + "\\s*"))(s);
				};
			},
			stoken: function (s) { // string token
				return _.rtoken(new RegExp("^" + s));
			},

			// Atomic Operators

			until: function (p) {
				return function (s) {
					var qx = [], rx = null;
					while (s.length) {
						try {
							rx = p.call(this, s);
						} catch (e) {
							qx.push(rx[0]);
							s = rx[1];
							continue;
						}
						break;
					}
					return [ qx, s ];
				};
			},
			many: function (p) {
				return function (s) {
					var rx = [], r = null;
					while (s.length) {
						try {
							r = p.call(this, s);
						} catch (e) {
							return [ rx, s ];
						}
						rx.push(r[0]);
						s = r[1];
					}
					return [ rx, s ];
				};
			},

			// generator operators -- see below
			optional: function (p) {
				return function (s) {
					var r = null;
					try {
						r = p.call(this, s);
					} catch (e) {
						return [ null, s ];
					}
					return [ r[0], r[1] ];
				};
			},
			not: function (p) {
				return function (s) {
					try {
						p.call(this, s);
					} catch (e) {
						return [null, s];
					}
					throw new $P.Exception(s);
				};
			},
			ignore: function (p) {
				return p ?
				function (s) {
					var r = null;
					r = p.call(this, s);
					return [null, r[1]];
				} : null;
			},
			product: function () {
				var px = arguments[0],
				qx = Array.prototype.slice.call(arguments, 1), rx = [];
				for (var i = 0 ; i < px.length ; i++) {
					rx.push(_.each(px[i], qx));
				}
				return rx;
			},
			cache: function (rule) {
				var cache = {}, r = null;
				return function (s) {
					try {
						r = cache[s] = (cache[s] || rule.call(this, s));
					} catch (e) {
						r = cache[s] = e;
					}
					if (r instanceof $P.Exception) {
						throw r;
					} else {
						return r;
					}
				};
			},

			// vector operators -- see below
			any: function () {
				var px = arguments;
				return function (s) {
					var r = null;
					for (var i = 0; i < px.length; i++) {
						if (px[i] == null) {
							continue;
						}
						try {
							r = (px[i].call(this, s));
						} catch (e) {
							r = null;
						}
						if (r) {
							return r;
						}
					}
					throw new $P.Exception(s);
				};
			},
			each: function () {
				var px = arguments;
				return function (s) {
					var rx = [], r = null;
					for (var i = 0; i < px.length ; i++) {
						if (px[i] == null) {
							continue;
						}
						try {
							r = (px[i].call(this, s));
						} catch (e) {
							throw new $P.Exception(s);
						}
						rx.push(r[0]);
						s = r[1];
					}
					return [ rx, s];
				};
			},
			all: function () {
				var px = arguments, _ = _;
				return _.each(_.optional(px));
			},

			// delimited operators
			sequence: function (px, d, c) {
				d = d || _.rtoken(/^\s*/);
				c = c || null;
				
				if (px.length === 1) {
					return px[0];
				}
				return function (s) {
					var r = null, q = null;
					var rx = [];
					for (var i = 0; i < px.length ; i++) {
						try {
							r = px[i].call(this, s);
						} catch (e) {
							break;
						}
						rx.push(r[0]);
						try {
							q = d.call(this, r[1]);
						} catch (ex) {
							q = null;
							break;
						}
						s = q[1];
					}
					if (!r) {
						throw new $P.Exception(s);
					}
					if (q) {
						throw new $P.Exception(q[1]);
					}
					if (c) {
						try {
							r = c.call(this, r[1]);
						} catch (ey) {
							throw new $P.Exception(r[1]);
						}
					}
					return [ rx, (r?r[1]:s) ];
				};
			},

			//
			// Composite Operators
			//

			between: function (d1, p, d2) {
				d2 = d2 || d1;
				var _fn = _.each(_.ignore(d1), p, _.ignore(d2));
				return function (s) {
					var rx = _fn.call(this, s);
					return [[rx[0][0], r[0][2]], rx[1]];
				};
			},
			list: function (p, d, c) {
				d = d || _.rtoken(/^\s*/);
				c = c || null;
				return (p instanceof Array ?
					_.each(_.product(p.slice(0, -1), _.ignore(d)), p.slice(-1), _.ignore(c)) :
					_.each(_.many(_.each(p, _.ignore(d))), px, _.ignore(c)));
			},
			set: function (px, d, c) {
				d = d || _.rtoken(/^\s*/);
				c = c || null;
				return function (s) {
					// r is the current match, best the current 'best' match
					// which means it parsed the most amount of input
					var r = null, p = null, q = null, rx = null, best = [[], s], last = false;
					// go through the rules in the given set
					for (var i = 0; i < px.length ; i++) {

						// last is a flag indicating whether this must be the last element
						// if there is only 1 element, then it MUST be the last one
						q = null;
						p = null;
						r = null;
						last = (px.length === 1);
						// first, we try simply to match the current pattern
						// if not, try the next pattern
						try {
							r = px[i].call(this, s);
						} catch (e) {
							continue;
						}
						// since we are matching against a set of elements, the first
						// thing to do is to add r[0] to matched elements
						rx = [[r[0]], r[1]];
						// if we matched and there is still input to parse and 
						// we don't already know this is the last element,
						// we're going to next check for the delimiter ...
						// if there's none, or if there's no input left to parse
						// than this must be the last element after all ...
						if (r[1].length > 0 && ! last) {
							try {
								q = d.call(this, r[1]);
							} catch (ex) {
								last = true;
							}
						} else {
							last = true;
						}

						// if we parsed the delimiter and now there's no more input,
						// that means we shouldn't have parsed the delimiter at all
						// so don't update r and mark this as the last element ...
						if (!last && q[1].length === 0) {
							last = true;
						}


						// so, if this isn't the last element, we're going to see if
						// we can get any more matches from the remaining (unmatched)
						// elements ...
						if (!last) {
							// build a list of the remaining rules we can match against,
							// i.e., all but the one we just matched against
							var qx = [];
							for (var j = 0; j < px.length ; j++) {
								if (i !== j) {
									qx.push(px[j]);
								}
							}

							// now invoke recursively set with the remaining input
							// note that we don't include the closing delimiter ...
							// we'll check for that ourselves at the end
							p = _.set(qx, d).call(this, q[1]);

							// if we got a non-empty set as a result ...
							// (otw rx already contains everything we want to match)
							if (p[0].length > 0) {
								// update current result, which is stored in rx ...
								// basically, pick up the remaining text from p[1]
								// and concat the result from p[0] so that we don't
								// get endless nesting ...
								rx[0] = rx[0].concat(p[0]);
								rx[1] = p[1];
							}
						}

						// at this point, rx either contains the last matched element
						// or the entire matched set that starts with this element.

						// now we just check to see if this variation is better than
						// our best so far, in terms of how much of the input is parsed
						if (rx[1].length < best[1].length) {
							best = rx;
						}

						// if we've parsed all the input, then we're finished
						if (best[1].length === 0) {
							break;
						}
					}

					// so now we've either gone through all the patterns trying them
					// as the initial match; or we found one that parsed the entire
					// input string ...

					// if best has no matches, just return empty set ...
					if (best[0].length === 0) {
						return best;
					}

					// if a closing delimiter is provided, then we have to check it also
					if (c) {
						// we try this even if there is no remaining input because the pattern
						// may well be optional or match empty input ...
						try {
							q = c.call(this, best[1]);
						} catch (ey) {
							throw new $P.Exception(best[1]);
						}

						// it parsed ... be sure to update the best match remaining input
						best[1] = q[1];
					}
					// if we're here, either there was no closing delimiter or we parsed it
					// so now we have the best match; just return it!
					return best;
				};
			},
			forward: function (gr, fname) {
				return function (s) {
					return gr[fname].call(this, s);
				};
			},

			//
			// Translation Operators
			//
			replace: function (rule, repl) {
				return function (s) {
					var r = rule.call(this, s);
					return [repl, r[1]];
				};
			},
			process: function (rule, fn) {
				return function (s) {
					var r = rule.call(this, s);
					return [fn.call(this, r[0]), r[1]];
				};
			},
			min: function (min, rule) {
				return function (s) {
					var rx = rule.call(this, s);
					if (rx[0].length < min) {
						throw new $P.Exception(s);
					}
					return rx;
				};
			}
		};
		

		// Generator Operators And Vector Operators

		// Generators are operators that have a signature of F(R) => R,
		// taking a given rule and returning another rule, such as 
		// ignore, which parses a given rule and throws away the result.

		// Vector operators are those that have a signature of F(R1,R2,...) => R,
		// take a list of rules and returning a new rule, such as each.

		// Generator operators are converted (via the following _generator
		// function) into functions that can also take a list or array of rules
		// and return an array of new rules as though the function had been
		// called on each rule in turn (which is what actually happens).

		// This allows generators to be used with vector operators more easily.
		// Example:
		// each(ignore(foo, bar)) instead of each(ignore(foo), ignore(bar))

		// This also turns generators into vector operators, which allows
		// constructs like:
		// not(cache(foo, bar))
		
		var _generator = function (op) {
			function gen() {
				var args = null, rx = [], px, i;
				if (arguments.length > 1) {
					args = Array.prototype.slice.call(arguments);
				} else if (arguments[0] instanceof Array) {
					args = arguments[0];
				}
				if (args) {
					px = args.shift();
					if (px.length > 0) {
						args.unshift(px[i]);
						rx.push(op.apply(null, args));
						args.shift();
						return rx;
					}
				} else {
					return op.apply(null, arguments);
				}
			}

			return gen;
		};
		
		var gx = "optional not ignore cache".split(/\s/);
		
		for (var i = 0 ; i < gx.length ; i++) {
			_[gx[i]] = _generator(_[gx[i]]);
		}

		var _vector = function (op) {
			return function () {
				if (arguments[0] instanceof Array) {
					return op.apply(null, arguments[0]);
				} else {
					return op.apply(null, arguments);
				}
			};
		};
		
		var vx = "each any all".split(/\s/);
		
		for (var j = 0 ; j < vx.length ; j++) {
			_[vx[j]] = _vector(_[vx[j]]);
		}
		
	}());

/***/ },
/* 297 */
/***/ function(module, exports) {

	(function () {
		var $D = Date;

		var flattenAndCompact = function (ax) {
			var rx = [];
			for (var i = 0; i < ax.length; i++) {
				if (ax[i] instanceof Array) {
					rx = rx.concat(flattenAndCompact(ax[i]));
				} else {
					if (ax[i]) {
						rx.push(ax[i]);
					}
				}
			}
			return rx;
		};

		var parseMeridian = function () {
			if (this.meridian && (this.hour || this.hour === 0)) {
				if (this.meridian === "a" && this.hour > 11 && Date.Config.strict24hr){
					throw "Invalid hour and meridian combination";
				} else if (this.meridian === "p" && this.hour < 12 && Date.Config.strict24hr){
					throw "Invalid hour and meridian combination";
				} else if (this.meridian === "p" && this.hour < 12) {
					this.hour = this.hour + 12;
				} else if (this.meridian === "a" && this.hour === 12) {
					this.hour = 0;
				}
			}
		};

		var setDefaults = function () {
			var now = new Date();
			if ((this.hour || this.minute) && (!this.month && !this.year && !this.day)) {
				this.day = now.getDate();
			}

			if (!this.year) {
				this.year = now.getFullYear();
			}
			
			if (!this.month && this.month !== 0) {
				this.month = now.getMonth();
			}
			
			if (!this.day) {
				this.day = 1;
			}
			
			if (!this.hour) {
				this.hour = 0;
			}
			
			if (!this.minute) {
				this.minute = 0;
			}

			if (!this.second) {
				this.second = 0;
			}
			if (!this.millisecond) {
				this.millisecond = 0;
			}
		};

		var finishUtils = {
			getToday: function () {
				 if (this.now || "hour minute second".indexOf(this.unit) !== -1) {
					return new Date();
				} else {
					return $D.today();
				}
			},
			setDaysFromWeekday: function (today){
				var gap;
				this.unit = "day";
				gap = ($D.getDayNumberFromName(this.weekday) - today.getDay());
				this.days = gap ? ((gap + (orient * 7)) % 7) : (orient * 7);
				return this;
			},
			setMonthsFromMonth: function (today, orient) {
				var gap;
				this.unit = "month";
				gap = (this.month - today.getMonth());
				this.months = gap ? ((gap + (orient * 12)) % 12) : (orient * 12);
				this.month = null;
				return this;
			},
			setDMYFromWeekday: function () {
				var d = Date[this.weekday]();
				this.day = d.getDate();
				if (!this.month) {
					this.month = d.getMonth();
				}
				this.year = d.getFullYear();
				return this;
			},
			setUnitValue: function (orient) {
				if (!this.value && this.operator && this.operator !== null && this[this.unit + "s"] && this[this.unit + "s"] !== null) {
					this[this.unit + "s"] = this[this.unit + "s"] + ((this.operator === "add") ? 1 : -1) + (this.value||0) * orient;
				} else if (this[this.unit + "s"] == null || this.operator != null) {
					if (!this.value) {
						this.value = 1;
					}
					this[this.unit + "s"] = this.value * orient;
				}
			},
			generateDateFromWeeks: function () {
				var weekday = (this.weekday !== undefined) ? this.weekday : "today";
				var d = Date[weekday]().addWeeks(this.weeks);
				if (this.now) {
					d.setTimeToNow();
				}
				return d;
			}
		};

		$D.Translator = {
			hour: function (s) {
				return function () {
					this.hour = Number(s);
				};
			},
			minute: function (s) {
				return function () {
					this.minute = Number(s);
				};
			},
			second: function (s) {
				return function () {
					this.second = Number(s);
				};
			},
			/* for ss.s format */
			secondAndMillisecond: function (s) {
				return function () {
					var mx = s.match(/^([0-5][0-9])\.([0-9]{1,3})/);
					this.second = Number(mx[1]);
					this.millisecond = Number(mx[2]);
				};
			},
			meridian: function (s) {
				return function () {
					this.meridian = s.slice(0, 1).toLowerCase();
				};
			},
			timezone: function (s) {
				return function () {
					var n = s.replace(/[^\d\+\-]/g, "");
					if (n.length) {
						this.timezoneOffset = Number(n);
					} else {
						this.timezone = s.toLowerCase();
					}
				};
			},
			day: function (x) {
				var s = x[0];
				return function () {
					this.day = Number(s.match(/\d+/)[0]);
					if (this.day < 1) {
						throw "invalid day";
					}
				};
			},
			month: function (s) {
				return function () {
					this.month = (s.length === 3) ? "jan feb mar apr may jun jul aug sep oct nov dec".indexOf(s)/4 : Number(s) - 1;
					if (this.month < 0) {
						throw "invalid month";
					}
				};
			},
			year: function (s) {
				return function () {
					var n = Number(s);
					this.year = ((s.length > 2) ? n :
						(n + (((n + 2000) < Date.CultureInfo.twoDigitYearMax) ? 2000 : 1900)));
				};
			},
			rday: function (s) {
				return function () {
					switch (s) {
						case "yesterday":
							this.days = -1;
							break;
						case "tomorrow":
							this.days = 1;
							break;
						case "today":
							this.days = 0;
							break;
						case "now":
							this.days = 0;
							this.now = true;
							break;
					}
				};
			},
			finishExact: function (x) {
				var d;
				x = (x instanceof Array) ? x : [x];

				for (var i = 0 ; i < x.length ; i++) {
					if (x[i]) {
						x[i].call(this);
					}
				}
				
				setDefaults.call(this);
				parseMeridian.call(this);

				if (this.day > $D.getDaysInMonth(this.year, this.month)) {
					throw new RangeError(this.day + " is not a valid value for days.");
				}

				d = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
				if (this.year < 100) {
					d.setFullYear(this.year); // means years less that 100 are process correctly. JS will parse it otherwise as 1900-1999.
				}
				if (this.timezone) {
					d.set({ timezone: this.timezone });
				} else if (this.timezoneOffset) {
					d.set({ timezoneOffset: this.timezoneOffset });
				}
				
				return d;
			},
			finish: function (x) {
				var today, expression, orient, temp;

				x = (x instanceof Array) ? flattenAndCompact(x) : [ x ];

				if (x.length === 0) {
					return null;
				}

				for (var i = 0 ; i < x.length ; i++) {
					if (typeof x[i] === "function") {
						x[i].call(this);
					}
				}

				if (this.now && !this.unit && !this.operator) {
					return new Date();
				} else {
					today = finishUtils.getToday.call(this);
				}
				
				expression = !!(this.days && this.days !== null || this.orient || this.operator);
				orient = ((this.orient === "past" || this.operator === "subtract") ? -1 : 1);

				if (this.month && this.unit === "week") {
					this.value = this.month + 1;
					delete this.month;
					delete this.day;
				}

				if ((this.month || this.month === 0) && "year day hour minute second".indexOf(this.unit) !== -1) {
					if (!this.value) {
						this.value = this.month + 1;
					}
					this.month = null;
					expression = true;
				}

				if (!expression && this.weekday && !this.day && !this.days) {
					finishUtils.setDMYFromWeekday.call(this);
				}
				if (this.weekday && this.unit !== "week" && !this.day && !this.days) {
					temp = Date[this.weekday]();
					this.day = temp.getDate();
					if (temp.getMonth() !== today.getMonth()) {
						this.month = temp.getMonth();
					}
				}

				if (expression && this.weekday && this.unit !== "month" && this.unit !== "week") {
					finishUtils.setDaysFromWeekday.call(this, today);
				}

				if (this.month && this.unit === "day" && this.operator) {
					if (!this.value) {
						this.value = (this.month + 1);
					}
					this.month = null;
				}

				if (this.value != null && this.month != null && this.year != null) {
					this.day = this.value * 1;
				}

				if (this.month && !this.day && this.value) {
					today.set({ day: this.value * 1 });
					if (!expression) {
						this.day = this.value * 1;
					}
				}

				if (!this.month && this.value && this.unit === "month" && !this.now) {
					this.month = this.value;
					expression = true;
				}

				if (expression && (this.month || this.month === 0) && this.unit !== "year") {
					finishUtils.setMonthsFromMonth.call(this, today, orient);
				}

				if (!this.unit) {
					this.unit = "day";
				}

				finishUtils.setUnitValue.call(this, orient);
				parseMeridian.call(this);
				
				if ((this.month || this.month === 0) && !this.day) {
					this.day = 1;
				}

				if (!this.orient && !this.operator && this.unit === "week" && this.value && !this.day && !this.month) {
					return Date.today().setWeek(this.value);
				}

				if (this.unit === "week" && this.weeks && !this.day && !this.month) {
					return finishUtils.generateDateFromWeeks.call(this);
				}

				if (expression && this.timezone && this.day && this.days) {
					this.day = this.days;
				}
				
				return (expression) ? today.add(this) : today.set(this);
			}
		};
	}());

/***/ },
/* 298 */
/***/ function(module, exports) {

	(function () {
		var $D = Date;
		$D.Grammar = {};
		var _ = $D.Parsing.Operators, g = $D.Grammar, t = $D.Translator, _fn;

		g.datePartDelimiter = _.rtoken(/^([\s\-\.\,\/\x27]+)/);
		g.timePartDelimiter = _.stoken(":");
		g.whiteSpace = _.rtoken(/^\s*/);
		g.generalDelimiter = _.rtoken(/^(([\s\,]|at|@|on)+)/);
	  
		var _C = {};
		g.ctoken = function (keys) {
			var fn = _C[keys];
			if (! fn) {
				var c = Date.CultureInfo.regexPatterns;
				var kx = keys.split(/\s+/), px = [];
				for (var i = 0; i < kx.length ; i++) {
					px.push(_.replace(_.rtoken(c[kx[i]]), kx[i]));
				}
				fn = _C[keys] = _.any.apply(null, px);
			}
			return fn;
		};
		g.ctoken2 = function (key) {
			return _.rtoken(Date.CultureInfo.regexPatterns[key]);
		};
		var cacheProcessRtoken = function (token, type, eachToken) {
			if (eachToken) {
				return _.cache(_.process(_.each(_.rtoken(token),_.optional(g.ctoken2(eachToken))), type));
			} else {
				return _.cache(_.process(_.rtoken(token), type));
			}
		};

		var _F = {
			//"M/d/yyyy": function (s) { 
			//	var m = s.match(/^([0-2]\d|3[0-1]|\d)\/(1[0-2]|0\d|\d)\/(\d\d\d\d)/);
			//	if (m!=null) { 
			//		var r =  [ t.month.call(this,m[1]), t.day.call(this,m[2]), t.year.call(this,m[3]) ];
			//		r = t.finishExact.call(this,r);
			//		return [ r, "" ];
			//	} else {
			//		throw new Date.Parsing.Exception(s);
			//	}
			//}
			//"M/d/yyyy": function (s) { return [ new Date(Date._parse(s)), ""]; }
		};
		var _get = function (f) {
			_F[f] = (_F[f] || g.format(f)[0]);
			return _F[f];
		};

		g.allformats = function (fx) {
			var rx = [];
			if (fx instanceof Array) {
				for (var i = 0; i < fx.length; i++) {
					rx.push(_get(fx[i]));
				}
			} else {
				rx.push(_get(fx));
			}
			return rx;
		};
	  
		g.formats = function (fx) {
			if (fx instanceof Array) {
				var rx = [];
				for (var i = 0 ; i < fx.length ; i++) {
					rx.push(_get(fx[i]));
				}
				return _.any.apply(null, rx);
			} else {
				return _get(fx);
			}
		};

		g.buildGrammarFormats = function () {
			// these need to be rebuilt every time the language changes.
			_C = {};
			// hour, minute, second, meridian, timezone
			g.h = cacheProcessRtoken(/^(0[0-9]|1[0-2]|[1-9])/, t.hour);
			g.hh = cacheProcessRtoken(/^(0[0-9]|1[0-2])/, t.hour);
			g.H = cacheProcessRtoken(/^([0-1][0-9]|2[0-3]|[0-9])/, t.hour);
			g.HH = cacheProcessRtoken(/^([0-1][0-9]|2[0-3])/, t.hour);
			g.m = cacheProcessRtoken(/^([0-5][0-9]|[0-9])/, t.minute);
			g.mm = cacheProcessRtoken(/^[0-5][0-9]/, t.minute);
			g.s = cacheProcessRtoken(/^([0-5][0-9]|[0-9])/, t.second);
			g.ss = cacheProcessRtoken(/^[0-5][0-9]/, t.second);
			g["ss.s"] = cacheProcessRtoken(/^[0-5][0-9]\.[0-9]{1,3}/, t.secondAndMillisecond);
			g.hms = _.cache(_.sequence([g.H, g.m, g.s], g.timePartDelimiter));
		  
			// _.min(1, _.set([ g.H, g.m, g.s ], g._t));
			g.t = _.cache(_.process(g.ctoken2("shortMeridian"), t.meridian));
			g.tt = _.cache(_.process(g.ctoken2("longMeridian"), t.meridian));
			g.z = cacheProcessRtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/, t.timezone);
			g.zz = cacheProcessRtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/, t.timezone);
			
			g.zzz = _.cache(_.process(g.ctoken2("timezone"), t.timezone));
			g.timeSuffix = _.each(_.ignore(g.whiteSpace), _.set([ g.tt, g.zzz ]));
			g.time = _.each(_.optional(_.ignore(_.stoken("T"))), g.hms, g.timeSuffix);
				  
			// days, months, years
			g.d = cacheProcessRtoken(/^([0-2]\d|3[0-1]|\d)/, t.day, "ordinalSuffix");
			g.dd = cacheProcessRtoken(/^([0-2]\d|3[0-1])/, t.day, "ordinalSuffix");
			g.ddd = g.dddd = _.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),
				function (s) {
					return function () {
						this.weekday = s;
					};
				}
			));
			g.M = cacheProcessRtoken(/^(1[0-2]|0\d|\d)/, t.month);
			g.MM = cacheProcessRtoken(/^(1[0-2]|0\d)/, t.month);
			g.MMM = g.MMMM = _.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"), t.month));
		//	g.MMM = g.MMMM = _.cache(_.process(g.ctoken(Date.CultureInfo.abbreviatedMonthNames.join(" ")), t.month));
			g.y = cacheProcessRtoken(/^(\d\d?)/, t.year);
			g.yy = cacheProcessRtoken(/^(\d\d)/, t.year);
			g.yyy = cacheProcessRtoken(/^(\d\d?\d?\d?)/, t.year);
			g.yyyy = cacheProcessRtoken(/^(\d\d\d\d)/, t.year);
			
			// rolling these up into general purpose rules
			_fn = function () {
				return _.each(_.any.apply(null, arguments), _.not(g.ctoken2("timeContext")));
			};
			
			g.day = _fn(g.d, g.dd);
			g.month = _fn(g.M, g.MMM);
			g.year = _fn(g.yyyy, g.yy);

			// relative date / time expressions
			g.orientation = _.process(g.ctoken("past future"),
				function (s) {
					return function () {
						this.orient = s;
					};
				}
			);

			g.operator = _.process(g.ctoken("add subtract"),
				function (s) {
					return function () {
						this.operator = s;
					};
				}
			);
			g.rday = _.process(g.ctoken("yesterday tomorrow today now"), t.rday);
			g.unit = _.process(g.ctoken("second minute hour day week month year"),
				function (s) {
					return function () {
						this.unit = s;
					};
				}
			);
			g.value = _.process(_.rtoken(/^([-+]?\d+)?(st|nd|rd|th)?/),
				function (s) {
					return function () {
						this.value = s.replace(/\D/g, "");
					};
				}
			);
			g.expression = _.set([ g.rday, g.operator, g.value, g.unit, g.orientation, g.ddd, g.MMM ]);

			// pre-loaded rules for different date part order preferences
			_fn = function () {
				return  _.set(arguments, g.datePartDelimiter);
			};
			g.mdy = _fn(g.ddd, g.month, g.day, g.year);
			g.ymd = _fn(g.ddd, g.year, g.month, g.day);
			g.dmy = _fn(g.ddd, g.day, g.month, g.year);
			g.date = function (s) {
				return ((g[Date.CultureInfo.dateElementOrder] || g.mdy).call(this, s));
			};

			g.format = _.process(_.many(
				_.any(
					// translate format specifiers into grammar rules
					_.process(
						_.rtoken(/^(dd?d?d?(?!e)|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),
							function (fmt) {
								if (g[fmt]) {
									return g[fmt];
								} else {
									throw $D.Parsing.Exception(fmt);
								}
							}
						),
						// translate separator tokens into token rules
						_.process(_.rtoken(/^[^dMyhHmstz]+/), // all legal separators 
							function (s) {
								return _.ignore(_.stoken(s));
							}
						)
					)
				),
				// construct the parser ...
				function (rules) {
					return _.process(_.each.apply(null, rules), t.finishExact);
				}
			);

			// starting rule for general purpose grammar
			g._start = _.process(_.set([ g.date, g.time, g.expression ],
			g.generalDelimiter, g.whiteSpace), t.finish);
		};
		g.buildGrammarFormats();
		// parsing date format specifiers - ex: "h:m:s tt" 
		// this little guy will generate a custom parser based
		// on the format string, ex: g.format("h:m:s tt")
		

		

		// check for these formats first
		g._formats = g.formats([
			"\"yyyy-MM-ddTHH:mm:ssZ\"",
			"yyyy-MM-ddTHH:mm:ss.sz",
			"yyyy-MM-ddTHH:mm:ssZ",
			"yyyy-MM-ddTHH:mm:ssz",
			"yyyy-MM-ddTHH:mm:ss",
			"yyyy-MM-ddTHH:mmZ",
			"yyyy-MM-ddTHH:mmz",
			"yyyy-MM-ddTHH:mm",
			"ddd, MMM dd, yyyy H:mm:ss tt",
			"ddd MMM d yyyy HH:mm:ss zzz",
			"MMddyyyy",
			"ddMMyyyy",
			"Mddyyyy",
			"ddMyyyy",
			"Mdyyyy",
			"dMyyyy",
			"yyyy",
			"Mdyy",
			"dMyy",
			"d"
		]);
		
		// real starting rule: tries selected formats first, 
		// then general purpose rule
		g.start = function (s) {
			try {
				var r = g._formats.call({}, s);
				if (r[1].length === 0) {
					return r;
				}
			} catch (e) {}
			return g._start.call({}, s);
		};
	}());

/***/ },
/* 299 */
/***/ function(module, exports) {

	(function () {
		var $D = Date;

		/**
		 * @desc Converts the specified string value into its JavaScript Date equivalent using CultureInfo specific format information.
		 * 
		 * Example
		<pre><code>
		///////////
		// Dates //
		///////////

		// 15-Oct-2004
		var d1 = Date.parse("10/15/2004");

		// 15-Oct-2004
		var d1 = Date.parse("15-Oct-2004");

		// 15-Oct-2004
		var d1 = Date.parse("2004.10.15");

		//Fri Oct 15, 2004
		var d1 = Date.parse("Fri Oct 15, 2004");

		///////////
		// Times //
		///////////

		// Today at 10 PM.
		var d1 = Date.parse("10 PM");

		// Today at 10:30 PM.
		var d1 = Date.parse("10:30 P.M.");

		// Today at 6 AM.
		var d1 = Date.parse("06am");

		/////////////////////
		// Dates and Times //
		/////////////////////

		// 8-July-2004 @ 10:30 PM
		var d1 = Date.parse("July 8th, 2004, 10:30 PM");

		// 1-July-2004 @ 10:30 PM
		var d1 = Date.parse("2004-07-01T22:30:00");

		////////////////////
		// Relative Dates //
		////////////////////

		// Returns today's date. The string "today" is culture specific.
		var d1 = Date.parse("today");

		// Returns yesterday's date. The string "yesterday" is culture specific.
		var d1 = Date.parse("yesterday");

		// Returns the date of the next thursday.
		var d1 = Date.parse("Next thursday");

		// Returns the date of the most previous monday.
		var d1 = Date.parse("last monday");

		// Returns today's day + one year.
		var d1 = Date.parse("next year");

		///////////////
		// Date Math //
		///////////////

		// Today + 2 days
		var d1 = Date.parse("t+2");

		// Today + 2 days
		var d1 = Date.parse("today + 2 days");

		// Today + 3 months
		var d1 = Date.parse("t+3m");

		// Today - 1 year
		var d1 = Date.parse("today - 1 year");

		// Today - 1 year
		var d1 = Date.parse("t-1y"); 


		/////////////////////////////
		// Partial Dates and Times //
		/////////////////////////////

		// July 15th of this year.
		var d1 = Date.parse("July 15");

		// 15th day of current day and year.
		var d1 = Date.parse("15");

		// July 1st of current year at 10pm.
		var d1 = Date.parse("7/1 10pm");
		</code></pre>
		 *
		 * @param {String}   The string value to convert into a Date object [Required]
		 * @return {Date}    A Date object or null if the string cannot be converted into a Date.
		 */
		var parseUtils = {
			removeOrds: function (s) {
				ords = s.match(/\b(\d+)(?:st|nd|rd|th)\b/); // find ordinal matches
				s = ((ords && ords.length === 2) ? s.replace(ords[0], ords[1]) : s);
				return s;
			},
			grammarParser: function (s) {
				var r = null;
				try {
					r = $D.Grammar.start.call({}, s.replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1"));
				} catch (e) {
					return null;
				}
				
				return ((r[1].length === 0) ? r[0] : null);
			},
			nativeFallback: function(s) {
				var t;
				try {
					// ok we haven't parsed it, last ditch attempt with the built-in parser.
					t = Date._parse(s);
					return (t || t === 0) ? new Date(t) : null;
				} catch (e) {
					return null;
				}
			}
		};
		function parse (s) {
			var d;
			if (!s) {
				return null;
			}
			if (s instanceof Date) {
				return s.clone();
			}
			if (s.length >= 4 && s.charAt(0) !== "0" && s.charAt(0) !== "+"&& s.charAt(0) !== "-") { // ie: 2004 will pass, 0800 won't.
				//  Start with specific formats
				d = $D.Parsing.ISO.parse(s) || $D.Parsing.Numeric.parse(s);
			}
			if (d instanceof Date && !isNaN(d.getTime())) {
				return d;
			} else {
				// find ordinal dates (1st, 3rd, 8th, etc and remove them as they cause parsing issues)
				s = $D.Parsing.Normalizer.parse(parseUtils.removeOrds(s));
				d = parseUtils.grammarParser(s);

				if (d !== null) {
					return d;
				} else {
					return parseUtils.nativeFallback(s);
				}
			}
		}

		if (!$D._parse) {
			$D._parse = $D.parse;
		}
		$D.parse = parse;

		Date.getParseFunction = function (fx) {
			var fns = Date.Grammar.allformats(fx);
			return function (s) {
				var r = null;
				for (var i = 0; i < fns.length; i++) {
					try {
						r = fns[i].call({}, s);
					} catch (e) {
						continue;
					}
					if (r[1].length === 0) {
						return r[0];
					}
				}
				return null;
			};
		};
		
		/**
		 * Converts the specified string value into its JavaScript Date equivalent using the specified format {String} or formats {Array} and the CultureInfo specific format information.
		 * The format of the string value must match one of the supplied formats exactly.
		 * 
		 * Example
		<pre><code>
		// 15-Oct-2004
		var d1 = Date.parseExact("10/15/2004", "M/d/yyyy");

		// 15-Oct-2004
		var d1 = Date.parse("15-Oct-2004", "M-ddd-yyyy");

		// 15-Oct-2004
		var d1 = Date.parse("2004.10.15", "yyyy.MM.dd");

		// Multiple formats
		var d1 = Date.parseExact("10/15/2004", ["M/d/yyyy", "MMMM d, yyyy"]);
		</code></pre>
		 *
		 * @param {String}   The string value to convert into a Date object [Required].
		 * @param {Object}   The expected format {String} or an array of expected formats {Array} of the date string [Required].
		 * @return {Date}    A Date object or null if the string cannot be converted into a Date.
		 */
		$D.parseExact = function (s, fx) {
			return $D.getParseFunction(fx)(s);
		};
	}());


/***/ },
/* 300 */
/***/ function(module, exports) {

	(function () {
		var $D = Date,
			$P = $D.prototype,
			// $C = $D.CultureInfo, // not used atm
			p = function (s, l) {
				if (!l) {
					l = 2;
				}
				return ("000" + s).slice(l * -1);
			};
		/**
		 * Converts a PHP format string to Java/.NET format string. 
		 * A PHP format string can be used with .$format or .format.
		 * A Java/.NET format string can be used with .toString().
		 * The .parseExact function will only accept a Java/.NET format string
		 *
		 * Example
		 * var f1 = "%m/%d/%y"
		 * var f2 = Date.normalizeFormat(f1);	// "MM/dd/yy"
		 * 
		 * new Date().format(f1);	// "04/13/08"
		 * new Date().$format(f1);	// "04/13/08"
		 * new Date().toString(f2);	// "04/13/08"
		 *  
		 * var date = Date.parseExact("04/13/08", f2); // Sun Apr 13 2008
		 * 
		 * @param {String}   A PHP format string consisting of one or more format spcifiers.
		 * @return {String}  The PHP format converted to a Java/.NET format string.
		 */
		$D.normalizeFormat = function (format) {
			// function does nothing atm
			// $f = [];
			// var t = new Date().$format(format);
			// return $f.join("");
			return format;
		};
		/**
		 * Format a local Unix timestamp according to locale settings
		 * 
		 * Example:
		 * Date.strftime("%m/%d/%y", new Date());		// "04/13/08"
		 * Date.strftime("c", "2008-04-13T17:52:03Z");	// "04/13/08"
		 * 
		 * @param {String}   A format string consisting of one or more format spcifiers [Optional].
		 * @param {Number}   The number representing the number of seconds that have elapsed since January 1, 1970 (local time). 
		 * @return {String}  A string representation of the current Date object.
		 */
		$D.strftime = function (format, time) {
			return new Date(time * 1000).$format(format);
		};
		/**
		 * Parse any textual datetime description into a Unix timestamp. 
		 * A Unix timestamp is the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).
		 * 
		 * Example:
		 * Date.strtotime("04/13/08");				// 1208044800
		 * Date.strtotime("1970-01-01T00:00:00Z");	// 0
		 * 
		 * @param {String}   A format string consisting of one or more format spcifiers [Optional].
		 * @param {Object}   A string or date object.
		 * @return {String}  A string representation of the current Date object.
		 */
		$D.strtotime = function (time) {
			var d = $D.parse(time);
			d.addMinutes(d.getTimezoneOffset() * -1);
			return Math.round($D.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()) / 1000);
		};
		/**
		 * Converts the value of the current Date object to its equivalent string representation using a PHP/Unix style of date format specifiers.
		 * Format Specifiers
		 * Format  Description																	Example
		 * ------  ---------------------------------------------------------------------------	-----------------------
		 * %a		abbreviated weekday name according to the current localed					"Mon" through "Sun"
		 * %A		full weekday name according to the current localed							"Sunday" through "Saturday"
		 * %b		abbreviated month name according to the current localed						"Jan" through "Dec"
		 * %B		full month name according to the current locale								"January" through "December"
		 * %c		preferred date and time representation for the current locale				"4/13/2008 12:33 PM"
		 * %C		century number (the year divided by 100 and truncated to an integer)		"00" to "99"
		 * %d		day of the month as a decimal number										"01" to "31"
		 * %D		same as %m/%d/%y															"04/13/08"
		 * %e		day of the month as a decimal number, a single digit is preceded by a space	"1" to "31"
		 * %g		like %G, but without the century											"08"
		 * %G		The 4-digit year corresponding to the ISO week number (see %V).				"2008"
		 *		This has the same format and value as %Y, except that if the ISO week number
		 *		belongs to the previous or next year, that year is used instead.
		 * %h		same as %b																	"Jan" through "Dec"
		 * %H		hour as a decimal number using a 24-hour clock.								"00" to "23"
		 * %I		hour as a decimal number using a 12-hour clock.								"01" to "12"
		 * %j		day of the year as a decimal number.										"001" to "366"
		 * %m		month as a decimal number.													"01" to "12"
		 * %M		minute as a decimal number.													"00" to "59"
		 * %n		newline character		"\n"
		 * %p		either "am" or "pm" according to the given time value, or the				"am" or "pm"
		 *		corresponding strings for the current locale.
		 * %r		time in a.m. and p.m. notation												"8:44 PM"
		 * %R		time in 24 hour notation													"20:44"
		 * %S		second as a decimal number													"00" to "59"
		 * %t		tab character																"\t"
		 * %T		current time, equal to %H:%M:%S												"12:49:11"
		 * %u		weekday as a decimal number ["1", "7"], with "1" representing Monday		"1" to "7"
		 * %U		week number of the current year as a decimal number, starting with the		"0" to ("52" or "53")
		 *		first Sunday as the first day of the first week
		 * %V		The ISO 8601:1988 week number of the current year as a decimal number,		"00" to ("52" or "53")
		 *		range 01 to 53, where week 1 is the first week that has at least 4 days
		 *		in the current year, and with Monday as the first day of the week.
		 *		(Use %G or %g for the year component that corresponds to the week number
		 *		for the specified timestamp.)
		 * %W		week number of the current year as a decimal number, starting with the		"00" to ("52" or "53")
		 *		first Monday as the first day of the first week
		 * %w		day of the week as a decimal, Sunday being "0"								"0" to "6"
		 * %x		preferred date representation for the current locale without the time		"4/13/2008"
		 * %X		preferred time representation for the current locale without the date		"12:53:05"
		 * %y		year as a decimal number without a century									"00" "99"
		 * %Y		year as a decimal number including the century								"2008"
		 * %Z		time zone or name or abbreviation											"UTC", "EST", "PST"
		 * %z		same as %Z 
		 * %%		a literal "%" characters													"%"
		 * d		Day of the month, 2 digits with leading zeros								"01" to "31"
		 * D		A textual representation of a day, three letters							"Mon" through "Sun"
		 * j		Day of the month without leading zeros										"1" to "31"
		 * l		A full textual representation of the day of the week (lowercase "L")		"Sunday" through "Saturday"
		 * N		ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)	"1" (for Monday) through "7" (for Sunday)
		 * S		English ordinal suffix for the day of the month, 2 characters				"st", "nd", "rd" or "th". Works well with j
		 * w		Numeric representation of the day of the week								"0" (for Sunday) through "6" (for Saturday)
		 * z		The day of the year (starting from "0")										"0" through "365"		
		 * W		ISO-8601 week number of year, weeks starting on Monday						"00" to ("52" or "53")
		 * F		A full textual representation of a month, such as January or March			"January" through "December"
		 * m		Numeric representation of a month, with leading zeros						"01" through "12"
		 * M		A short textual representation of a month, three letters					"Jan" through "Dec"
		 * n		Numeric representation of a month, without leading zeros					"1" through "12"
		 * t		Number of days in the given month											"28" through "31"
		 * L		Whether it's a leap year													"1" if it is a leap year, "0" otherwise
		 * o		ISO-8601 year number. This has the same value as Y, except that if the		"2008"
		 *		ISO week number (W) belongs to the previous or next year, that year 
		 *		is used instead.
		 * Y		A full numeric representation of a year, 4 digits							"2008"
		 * y		A two digit representation of a year										"08"
		 * a		Lowercase Ante meridiem and Post meridiem									"am" or "pm"
		 * A		Uppercase Ante meridiem and Post meridiem									"AM" or "PM"
		 * B		Swatch Internet time														"000" through "999"
		 * g		12-hour format of an hour without leading zeros								"1" through "12"
		 * G		24-hour format of an hour without leading zeros								"0" through "23"
		 * h		12-hour format of an hour with leading zeros								"01" through "12"
		 * H		24-hour format of an hour with leading zeros								"00" through "23"
		 * i		Minutes with leading zeros													"00" to "59"
		 * s		Seconds, with leading zeros													"00" through "59"
		 * u		Milliseconds																"54321"
		 * e		Timezone identifier															"UTC", "EST", "PST"
		 * I		Whether or not the date is in daylight saving time (uppercase i)			"1" if Daylight Saving Time, "0" otherwise
		 * O		Difference to Greenwich time (GMT) in hours									"+0200", "-0600"
		 * P		Difference to Greenwich time (GMT) with colon between hours and minutes		"+02:00", "-06:00"
		 * T		Timezone abbreviation														"UTC", "EST", "PST"
		 * Z		Timezone offset in seconds. The offset for timezones west of UTC is			"-43200" through "50400"
		 *			always negative, and for those east of UTC is always positive.
		 * c		ISO 8601 date																"2004-02-12T15:19:21+00:00"
		 * r		RFC 2822 formatted date														"Thu, 21 Dec 2000 16:01:07 +0200"
		 * U		Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)					"0"
		 * @param {String}   A format string consisting of one or more format spcifiers [Optional].
		 * @return {String}  A string representation of the current Date object.
		 */
		var formatReplace = function (context) {
			var y, x = context,
				t = function (v, overrideStandardFormats) {
						return x.toString(v, overrideStandardFormats);
				};
			return function (m) {
				var formatString, override = false;
				if (m.charAt(0) === "\\" || m.substring(0, 2) === "%%") {
					return m.replace("\\", "").replace("%%", "%");
				}
				switch (m) {
					case "d":
					case "%d":
						formatString = "dd";
						break;
					case "D":
					case "%a":
						formatString = "ddd";
						break;
					case "j":
					case "l":
					case "%A":
						formatString = "dddd";
						break;
					case "N":
					case "%u":
						return x.getDay() + 1;
					case "S":
						formatString = "S";
						break;
					case "w":
					case "%w":
						return x.getDay();
					case "z":
						return x.getOrdinalNumber();
					case "%j":
						return p(x.getOrdinalNumber(), 3);
					case "%U":
						var d1 = x.clone().set({month: 0, day: 1}).addDays(-1).moveToDayOfWeek(0),
							d2 = x.clone().addDays(1).moveToDayOfWeek(0, -1);
						return (d2 < d1) ? "00" : p((d2.getOrdinalNumber() - d1.getOrdinalNumber()) / 7 + 1);
					case "W":
					case "%V":
						return x.getISOWeek();
					case "%W":
						return p(x.getWeek());
					case "F":
					case "%B":
						formatString = "MMMM";
						break;
					case "m":
					case "%m":
						formatString = "MM";
						break;
					case "M":
					case "%b":
					case "%h":
						formatString = "MMM";
						break;
					case "n":
						formatString = "M";
						break;
					case "t":
						return $D.getDaysInMonth(x.getFullYear(), x.getMonth());
					case "L":
						return ($D.isLeapYear(x.getFullYear())) ? 1 : 0;
					case "o":
					case "%G":
						return x.setWeek(x.getISOWeek()).toString("yyyy");
					case "%g":
						return x.$format("%G").slice(-2);
					case "Y":
					case "%Y":
						formatString = "yyyy";
						break;
					case "y":
					case "%y":
						formatString = "yy";
						break;
					case "a":
					case "%p":
						return t("tt").toLowerCase();
					case "A":
						return t("tt").toUpperCase();
					case "g":
					case "%I":
						formatString = "h";
						break;
					case "G":
						formatString = "H";
						break;
					case "h":
						formatString = "hh";
						break;
					case "H":
					case "%H":
						formatString = "HH";
						break;
					case "i":
					case "%M":
						formatString = "mm";
						break;
					case "s":
					case "%S":
						formatString = "ss";
						break;
					case "u":
						return p(x.getMilliseconds(), 3);
					case "I":
						return (x.isDaylightSavingTime()) ? 1 : 0;
					case "O":
						return x.getUTCOffset();
					case "P":
						y = x.getUTCOffset();
						return y.substring(0, y.length - 2) + ":" + y.substring(y.length - 2);
					case "e":
					case "T":
					case "%z":
					case "%Z":
						return x.getTimezone();
					case "Z":
						return x.getTimezoneOffset() * -60;
					case "B":
						var now = new Date();
						return Math.floor(((now.getHours() * 3600) + (now.getMinutes() * 60) + now.getSeconds() + (now.getTimezoneOffset() + 60) * 60) / 86.4);
					case "c":
						return x.toISOString().replace(/\"/g, "");
					case "U":
						return $D.strtotime("now");
					case "%c":
						return t("d") + " " + t("t");
					case "%C":
						return Math.floor(x.getFullYear() / 100 + 1);
					case "%D":
						formatString = "MM/dd/yy";
						break;
					case "%n":
						return "\\n";
					case "%t":
						return "\\t";
					case "%r":
						formatString = "hh:mm tt";
						break;
					case "%R":
						formatString = "H:mm";
						break;
					case "%T":
						formatString = "H:mm:ss";
						break;
					case "%e":
						formatString = "d";
						override = true;
						break;
					case "%x":
						override = false;
						break;
					case "%X":
						formatString = "t";
						break;
					default:
						return m;
				}
				if (formatString) {
					return t(formatString, override);
				}
			};
		};

		$P.$format = function (format) {
			var formatter = formatReplace(this);
			if (!format) {
				return this._toString();
			} else {
				format.replace(/(%|\\)?.|%%/g, formatter);
			}
		};

		if (!$P.format) {
			$P.format = $P.$format;
		}
	}());

/***/ },
/* 301 */
/***/ function(module, exports) {

	(function () {
		"use strict";
		var attrs = ["years", "months", "days", "hours", "minutes", "seconds", "milliseconds"];
		var gFn = function (attr) {
			return function () {
				return this[attr];
			};
		};
		
		var sFn = function (attr) {
			return function (val) {
				this[attr] = val;
				return this;
			};
		};
		var addSetFuncs = function (context, attrs) {
			for (var i = 0; i < attrs.length ; i++) {
				var $a = attrs[i], $b = $a.slice(0, 1).toUpperCase() + $a.slice(1);
				context.prototype[$a] = 0;
				context.prototype["get" + $b] = gFn($a);
				context.prototype["set" + $b] = sFn($a);
			}
		};

		var setMonthsAndYears = function (orient, d1, d2, context) {
			function inc() {
				d1.addMonths(-orient);
				context.months++;
				if (context.months === 12) {
					context.years++;
					context.months = 0;
				}
			}
			if (orient === +1) {
				while (d1 > d2) {
					inc();
				}
			} else {
				while (d1 < d2) {
					inc();
				}
			}
			context.months--;
			context.months *= orient;
			context.years *= orient;
		};

		var adjustForDST = function(orient, startDate, endDate) {
			var hasDSTMismatch = (false === (startDate.isDaylightSavingTime() === endDate.isDaylightSavingTime()));
			if (hasDSTMismatch && orient === 1) {
				startDate.addHours(-1);
			} else if (hasDSTMismatch) {
				startDate.addHours(1);
			}
		};
		/**
		 * TimePeriod(startDate, endDate);
		 * TimePeriod(years, months, days, hours, minutes, seconds, milliseconds);
		 */
		var TimePeriod = function (years, months, days, hours, minutes, seconds, milliseconds) {
			if (arguments.length === 7) {
				this.set(years, months, days, hours, minutes, seconds, milliseconds);
			} else if (arguments.length === 2 && arguments[0] instanceof Date && arguments[1] instanceof Date) {
				var startDate = arguments[0].clone();
				var endDate = arguments[1].clone();
				var orient = (startDate > endDate) ? +1 : -1;
				this.dates = {
					start: arguments[0].clone(),
					end: arguments[1].clone()
				};

				setMonthsAndYears(orient, startDate, endDate, this);
				adjustForDST(orient, startDate, endDate);
				// // TODO - adjust for DST
				var diff = endDate - startDate;
				if (diff !== 0) {
					var ts = new TimeSpan(diff);
					this.set(this.years, this.months, ts.getDays(), ts.getHours(), ts.getMinutes(), ts.getSeconds(), ts.getMilliseconds());
				}
			}
			return this;
		};
		// create all the set functions.
		addSetFuncs(TimePeriod, attrs);
		TimePeriod.prototype.set = function (years, months, days, hours, minutes, seconds, milliseconds){
			this.setYears(years || this.getYears());
			this.setMonths(months || this.getMonths());
			this.setDays(days || this.getDays());
			this.setHours(hours || this.getHours());
			this.setMinutes(minutes || this.getMinutes());
			this.setSeconds(seconds || this.getSeconds());
			this.setMilliseconds(milliseconds || this.getMilliseconds());
		};

		Date.TimePeriod = TimePeriod;

		if (typeof window !== "undefined") {
			// keeping API compatible for v1.x 
			window.TimePeriod = TimePeriod;
		}
	}());

/***/ },
/* 302 */
/***/ function(module, exports) {

	(function () {
		"use strict";
		var gFn = function (attr) {
			return function () {
				return this[attr];
			};
		};
		
		var sFn = function (attr) {
			return function (val) {
				this[attr] = val;
				return this;
			};
		};
		var attrs = ["years", "months", "days", "hours", "minutes", "seconds", "milliseconds"];
		var addSetFuncs = function (context, attrs) {
			for (var i = 0; i < attrs.length ; i++) {
				var $a = attrs[i], $b = $a.slice(0, 1).toUpperCase() + $a.slice(1);
				context.prototype[$a] = 0;
				context.prototype["get" + $b] = gFn($a);
				context.prototype["set" + $b] = sFn($a);
			}
		};
		/**
		 * new TimeSpan(milliseconds);
		 * new TimeSpan(days, hours, minutes, seconds);
		 * new TimeSpan(days, hours, minutes, seconds, milliseconds);
		 */
		var TimeSpan = function (days, hours, minutes, seconds, milliseconds) {
			if (arguments.length === 1 && typeof days === "number") {
				var orient = (days < 0) ? -1 : +1;
				var millsLeft = Math.abs(days);
				this.setDays(Math.floor(millsLeft / 86400000) * orient);
				millsLeft = millsLeft % 86400000;
				this.setHours(Math.floor(millsLeft / 3600000) * orient);
				millsLeft = millsLeft % 3600000;
				this.setMinutes(Math.floor(millsLeft / 60000) * orient);
				millsLeft = millsLeft % 60000;
				this.setSeconds(Math.floor(millsLeft / 1000) * orient);
				millsLeft = millsLeft % 1000;
				this.setMilliseconds(millsLeft * orient);
			} else {
				this.set(days, hours, minutes, seconds, milliseconds);
			}

			this.getTotalMilliseconds = function () {
				return	(this.getDays() * 86400000) +
						(this.getHours() * 3600000) +
						(this.getMinutes() * 60000) +
						(this.getSeconds() * 1000);
			};
			
			this.compareTo = function (time) {
				var t1 = new Date(1970, 1, 1, this.getHours(), this.getMinutes(), this.getSeconds()), t2;
				if (time === null) {
					t2 = new Date(1970, 1, 1, 0, 0, 0);
				}
				else {
					t2 = new Date(1970, 1, 1, time.getHours(), time.getMinutes(), time.getSeconds());
				}
				return (t1 < t2) ? -1 : (t1 > t2) ? 1 : 0;
			};

			this.equals = function (time) {
				return (this.compareTo(time) === 0);
			};

			this.add = function (time) {
				return (time === null) ? this : this.addSeconds(time.getTotalMilliseconds() / 1000);
			};

			this.subtract = function (time) {
				return (time === null) ? this : this.addSeconds(-time.getTotalMilliseconds() / 1000);
			};

			this.addDays = function (n) {
				return new TimeSpan(this.getTotalMilliseconds() + (n * 86400000));
			};

			this.addHours = function (n) {
				return new TimeSpan(this.getTotalMilliseconds() + (n * 3600000));
			};

			this.addMinutes = function (n) {
				return new TimeSpan(this.getTotalMilliseconds() + (n * 60000));
			};

			this.addSeconds = function (n) {
				return new TimeSpan(this.getTotalMilliseconds() + (n * 1000));
			};

			this.addMilliseconds = function (n) {
				return new TimeSpan(this.getTotalMilliseconds() + n);
			};

			this.get12HourHour = function () {
				return (this.getHours() > 12) ? this.getHours() - 12 : (this.getHours() === 0) ? 12 : this.getHours();
			};

			this.getDesignator = function () {
				return (this.getHours() < 12) ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator;
			};

			this.toString = function (format) {
				this._toString = function () {
					if (this.getDays() !== null && this.getDays() > 0) {
						return this.getDays() + "." + this.getHours() + ":" + this.p(this.getMinutes()) + ":" + this.p(this.getSeconds());
					} else {
						return this.getHours() + ":" + this.p(this.getMinutes()) + ":" + this.p(this.getSeconds());
					}
				};
				
				this.p = function (s) {
					return (s.toString().length < 2) ? "0" + s : s;
				};
				
				var me = this;
				
				return format ? format.replace(/dd?|HH?|hh?|mm?|ss?|tt?/g,
				function (format) {
					switch (format) {
					case "d":
						return me.getDays();
					case "dd":
						return me.p(me.getDays());
					case "H":
						return me.getHours();
					case "HH":
						return me.p(me.getHours());
					case "h":
						return me.get12HourHour();
					case "hh":
						return me.p(me.get12HourHour());
					case "m":
						return me.getMinutes();
					case "mm":
						return me.p(me.getMinutes());
					case "s":
						return me.getSeconds();
					case "ss":
						return me.p(me.getSeconds());
					case "t":
						return ((me.getHours() < 12) ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator).substring(0, 1);
					case "tt":
						return (me.getHours() < 12) ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator;
					}
				}
				) : this._toString();
			};
			return this;
		};
		addSetFuncs(TimeSpan, attrs.slice(2));
		TimeSpan.prototype.set = function (days, hours, minutes, seconds, milliseconds){
			this.setDays(days || this.getDays());
			this.setHours(hours || this.getHours());
			this.setMinutes(minutes || this.getMinutes());
			this.setSeconds(seconds || this.getSeconds());
			this.setMilliseconds(milliseconds || this.getMilliseconds());
		};


		/**
		 * Gets the time of day for this date instances. 
		 * @return {TimeSpan} TimeSpan
		 */
		Date.prototype.getTimeOfDay = function () {
			return new TimeSpan(0, this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
		};

		Date.TimeSpan = TimeSpan;

		if (typeof window !== "undefined" ) {
			// keeping API compatible for v1.x 
			window.TimeSpan = TimeSpan;
		}
	}());

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Emitter = __webpack_require__(41);
	var Scrollbars = __webpack_require__(304);
	var template = __webpack_require__(29);
	var qs = __webpack_require__(43);
	var events = __webpack_require__(101);
	var closest = __webpack_require__(65);
	var resizable = __webpack_require__(308);
	var ItemList = __webpack_require__(132);
	var render = __webpack_require__(133);
	var debounce = __webpack_require__(309);
	var store = __webpack_require__(311).prefix('navigation');

	module.exports = Navigation;

	function Navigation() {
		Emitter.call(this);
		this.init();
		this.bind();
	}

	Navigation.prototype = Object.create(Emitter.prototype);

	Navigation.prototype.init = function Navigation_init() {
		var self = this;
		this.nav = {};
		this.redraw();
		this.el = this.nav.el;
		var roomList = this.roomList = new ItemList({
			template: 'roomlist.jade',
			selector: '.item a'
		});
		replace(qs('.rooms', this.el), roomList.el);

		var pmList = this.pmList = new ItemList({
			template: 'pmlist.jade',
			selector: '.item a'
		});
		replace(qs('.pms', this.el), pmList.el);

		this.filtering = false;

		var	roomScrollbar = new Scrollbars(qs('.rooms', this.el)),
			pmScrollbar = new Scrollbars(qs('.pms', this.el)),
			pmResizable = new resizable(qs('.pm-list', this.el), { directions: ['north'] });


		this.pmFilterEl = qs('.filter-pms', this.el);
		this.pmFilterEl.addEventListener('keyup', function(ev) {
			self.pmFilter();
		});

		// compute the height of the room list area
		// called every time the pm area is resized
		var resizeRoomList = debounce(function resizeRoomList() {
			var	totHeight = self.el.clientHeight,
				orgInfoHeight = qs('.org-info', self.el).clientHeight,
				roomWrapper = roomScrollbar.wrapper.parentNode,
				pmResizableHeight = pmResizable.element.clientHeight,
				remainingPadding = 14;
			// saving new sidebar height in localStorage
			store.set('pmListHeight', pmResizableHeight);
			roomWrapper.style.height = totHeight - orgInfoHeight - pmResizableHeight - remainingPadding + 'px';
		}, 200);


		// listening to the event fired by the resizable in the resize
		// method in the resizable component (our ubergrape fork)
		pmResizable.element.addEventListener('resize', resizeRoomList);

		// if the pm list height in not saved in localStorage,
		// the height will fall back to the default one (25%)
		pmResizable.element.style.height = store.get('pmListHeight') + 'px';
		resizeRoomList();

		// and on window resize
		window.addEventListener('resize', resizeRoomList);
	};

	function replace(from, to) {
		from.parentNode.replaceChild(to, from);
	}

	// route the events
	Navigation.prototype.bind = function Navigation_bind() {
		var self = this;
		this.events = events(this.el, {
			addroom: function (ev) {
				self.emit('addroom', closest(ev.target, 'a', true));
			}
		});
		this.events.bind('click .addroom', 'addroom');
	};

	Navigation.prototype.setLists = function Navigation_setLists(lists) {
		lists.pms.sort(this.pmCompare);
		this.pmList.setItems(lists.pms);
		this.roomList.setItems(lists.rooms);
		this.pmList.unfiltered = this.pmList.items;
	};

	Navigation.prototype.pmCompare = function Navigation_pmCompare(a, b) {

		function getStatusValue(user) {
			if (!user.active) return 0;
			if (user.status == 16) return 3;
			if (user.is_only_invited) return 1;
			return 2;
		}

		var aLastMessage = a.pm && a.active ? a.pm.latest_message_time : 0;
		var bLastMessage = b.pm && b.active ? b.pm.latest_message_time : 0;

		if (bLastMessage - aLastMessage != 0)
			return bLastMessage - aLastMessage;
		else
			return getStatusValue(b) - getStatusValue(a);
	}

	Navigation.prototype.select = function Navigation_select(item) {
		this.roomList.selectItem(null);
		this.pmList.selectItem(null);
		this[item.type + 'List'].selectItem(item);
	};

	Navigation.prototype.pmFilter = function Navigation_pmFilter() {
		var self = this;
		var str = self.pmFilterEl.value;
		var filtered_items = [];

		if (str !== '') {
			this.filtering = true;
			self.pmList.unfiltered.forEach(function(item) {
				if (item.username.startsWithIgnoreCase(str) || item.firstName.startsWithIgnoreCase(str) || item.lastName.startsWithIgnoreCase(str)) {
					filtered_items.push(item);
				}
			});
		} else {
			this.filtering = false;
			filtered_items = self.pmList.unfiltered;
		}

		self.pmList.items = filtered_items;

		self.redraw();
	};

	// redraw everything, eg when the language changes
	Navigation.prototype.redraw = function Navigation_redraw() {
		render(this.nav, template('navigation.jade'));
		if (this.pmList) this.pmList.redraw();
		if (this.roomList) this.roomList.redraw();
	};

	Navigation.prototype.onNewMessage = function Navigation_onNewMessage(line) {
		if (this.filtering) return;
		if (line.channel.type == 'pm') {
			var pmPartnerIndex = this.pmList.items.indexOf(line.channel.users[0]);
			if (pmPartnerIndex == -1) return;
			this.pmList.items.splice(pmPartnerIndex, 1);
			this.pmList.items.unshift(line.channel.users[0]);
			this.pmList.redraw();
		} else {
			if (line.channel.joined && line.author != ui.user) this.roomList.redraw();
		}
	}

	Navigation.prototype.newOrgMember = function Navigation_newOrgMember(user) {
		if (this.filtering) return;
		var newPos = this.pmList.items.length;
		this.pmList.items.every(function(pm, index) {
			if (!pm.active) {
				newPos = index;
				return false;
			}
			return true;
		});
		this.pmList.items.splice(newPos, 0, user);
		this.pmList.redraw();
	}

	Navigation.prototype.onUserDeleted = function Navigation_onUserDeleted (item) {
		// TODO unbind events
		if (this.filtering) return;
		var itemIndex = this.pmList.items.indexOf(item);
		this.pmList.items.splice(itemIndex, 1);
		this.pmList.redraw();
	};

	Navigation.prototype.deleteRoom = function Navigation_deleteRoom() {
		this.roomList.redraw();
	}

	Navigation.prototype.onChannelRead = function Navigation_onChannelRead(line) {
		if (this.filtering || ui.user == line.author) return;
		this.redraw();
	}

	Navigation.prototype.onChannelUpdate = function Navigation_onChannelUpdate() {
		this.roomList.redraw();
	}

	Navigation.prototype.onChangeUser = function Navigation_onChangeUser(user) {
		if (user == ui.user) return;
		this.pmList.redraw();
	}

	Navigation.prototype.onJoinedChannel = function Navigation_onJoinedChannel() {
		this.roomList.redraw();
	}

	Navigation.prototype.onLeftChannel = function Navigation_onLeftChannel() {
		this.roomList.redraw();
	}

	Navigation.prototype.onUserMention = function Navigation_onUserMention () {
		this.roomList.redraw();
	}

	Navigation.prototype.onOrgReady = function Navigation_onOrgReady(org) {
		var rooms = org.rooms;
		var pms = org.users.filter(function(user) {
			return self.user != user &&
			(user.active || (!user.active && user.pm && user.pm.latest_message_time));
		});
		this.setLists({ rooms: rooms, pms: pms });
		// we need this redraw for the organization logo
		// cause that is part of the navigation too
		this.redraw();
	}



/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var debounce = __webpack_require__(305);
	var classes = __webpack_require__(99);
	var events = __webpack_require__(101);

	module.exports = Scrollbars;

	Scrollbars.SIZE = __webpack_require__(307);
	Scrollbars.MIN_SIZE = 25;
	Scrollbars.CORNER = 6;
	Scrollbars.TIMEOUT = 1000;

	var positioned = ['relative', 'absolute', 'fixed'];

	function Scrollbars(element) {
		if (!(this instanceof Scrollbars))
			return new Scrollbars(element);

		var self = this;

		this.elem = element;

		// inject the wrapper
		this.wrapper = document.createElement('div');
		// inherit the classes for styling
		// TODO: also make this work with styling based on id
		this.wrapper.className = this.elem.className;
		this.elem.parentNode.replaceChild(this.wrapper, this.elem);
		this.wrapper.appendChild(this.elem);

		// save the current style, so we can restore if necessary
		var style = getComputedStyle(this.elem);
		this.elemstyle = {
			position: style.position,
			top: style.top,
			right: style.right,
			bottom: style.bottom,
			left: style.left,
		};

		classes(this.elem).add('scrollbars-override');
		setPosition(this.elem, [0, -Scrollbars.SIZE, -Scrollbars.SIZE, 0]);

		style = this.wrapper.style;
		// set the wrapper to be positioned
		// but don’t mess with already positioned elements
		if (!~positioned.indexOf(this.elemstyle.position))
			style.position = 'relative';
		style.overflow = 'hidden';

		this.events = events(this.elem, this);

		// OSX has native overlay scrollbars which have a width of 0
		// in that case just don’t create any custom ones
		if (!Scrollbars.SIZE)
			return this;

		// and create scrollbar handles
		this.handleV = handle('vertical', [0, 0, 0, undefined]);
		this.wrapper.appendChild(this.handleV);
		this.handleH = handle('horizontal', [undefined, 0, 0, 0]);
		this.wrapper.appendChild(this.handleH);

		this.dragging = null;

		// hide after some inactivity
		this.hide = debounce(function () {
			if (!self.dragging || self.dragging.elem !== self.handleV)
				self.handleV.firstChild.className = 'scrollbars-handle vertical';
			if (!self.dragging || self.dragging.elem !== self.handleH)
				self.handleH.firstChild.className = 'scrollbars-handle horizontal';
		}, Scrollbars.TIMEOUT);

		// hook them up to scroll events
		this.events.bind('scroll', 'refresh');
		this.events.bind('mouseenter', 'refresh');

		[this.handleV, this.handleH].forEach(function (handle) {
			// don’t hide handle when hovering
			handle.firstChild.addEventListener('mouseenter', function () {
				if (!self.dragging)
					self.dragging = {elem: handle};
			}, false);
			handle.firstChild.addEventListener('mouseleave', function () {
				if (self.dragging && !self.dragging.handler)
					self.dragging = null;
			}, false);

			// and do the dragging
			handle.firstChild.addEventListener('mousedown', function (ev) {
				self._startDrag(handle, ev);
				ev.preventDefault();
			}, false);
		});

		this._endDrag = function () {
			document.removeEventListener('mousemove', self.dragging.handler);
			document.removeEventListener('mouseup', self._endDrag);
			self.dragging = null;
		};
	}

	Scrollbars.prototype._startDrag = function Scrollbars__startDrag(handle, ev) {
		var vertical = handle === this.handleV;
		var self = this;
		var handler = function (ev) {
			self._mouseMove(ev);
		};
		document.addEventListener('mousemove', handler, false);
		document.addEventListener('mouseup', this._endDrag, false);
		var rect = handle.getBoundingClientRect();
		this.dragging = {
			elem: handle,
			handler: handler,
			offset: vertical ? ev.clientY - rect.top : ev.clientX - rect.left
		};
	};

	Scrollbars.prototype._mouseMove = function Scrollbars__mouseMove(ev) {
		var vertical = this.dragging.elem === this.handleV;
		var rect = this.elem.getBoundingClientRect();
		var size = handleSize(this.elem);
		var offset;
		if (vertical) {
			offset = ev.clientY - rect.top - this.dragging.offset;
			this.elem.scrollTop = offset / size.sizeH * size.sTM;
		} else {
			offset = ev.clientX - rect.left - this.dragging.offset;
			this.elem.scrollLeft = offset / size.sizeW * size.sLM;
		}
	};

	function handleSize(elem) {
		var cH = elem.clientHeight;
		var sH = elem.scrollHeight;
		var sTM = elem.scrollTopMax || Math.max(sH - cH, 0);
		var cW = elem.clientWidth;
		var sW = elem.scrollWidth;
		var sLM = elem.scrollLeftMax || Math.max(sW - cW, 0);

		var pH = cH / sH;
		var pW = cW / sW;

		var corner = sTM && sLM ? Scrollbars.CORNER : 0;

		var sizeH = cH - Math.max(Scrollbars.MIN_SIZE, pH * (cH - corner)) - corner;
		var sizeW = cW - Math.max(Scrollbars.MIN_SIZE, pW * (cW - corner)) - corner;

		return {
			corner: corner,
			sTM: sTM,
			sLM: sLM,
			sizeH: sizeH,
			sizeW: sizeW,
			pH: pH,
			pW: pW,
		};
	}

	/*
	 * Refreshes (and shows) the scrollbars
	 */
	Scrollbars.prototype.refresh = function Scrollbars_refresh() {
		if (!Scrollbars.SIZE)
			return;
		var size = handleSize(this.elem);
		var scrolledPercentage;
		// vertical
		if (size.sTM) {
			scrolledPercentage = this.elem.scrollTop / size.sTM;
			setPosition(this.handleV, [
				scrolledPercentage * size.sizeH,
				0,
				(1 - scrolledPercentage) * size.sizeH + size.corner,
				undefined
			]);
			this.handleV.firstChild.className = 'scrollbars-handle vertical show';
		}

		// horizontal
		if (size.sLM) {
			scrolledPercentage = this.elem.scrollLeft / size.sLM;
			setPosition(this.handleH, [
				undefined,
				(1 - scrolledPercentage) * size.sizeW + size.corner,
				0,
				scrolledPercentage * size.sizeW,
			]);
			this.handleH.firstChild.className = 'scrollbars-handle horizontal show';
		}

		this.hide();
	};

	Scrollbars.prototype.destroy = function Scrollbars_destroy() {
		if (this.dragging && this.dragging.handler)
			this._endDrag(); // clear global events
		this.wrapper.removeChild(this.elem);
		this.wrapper.parentNode.replaceChild(this.elem, this.wrapper);
		classes(this.elem).remove('scrollbars-override');
		this.events.unbind();

		var style = this.elem.style;
		style.top = this.elemstyle.top;
		style.right = this.elemstyle.right;
		style.left = this.elemstyle.left;
		style.bottom = this.elemstyle.bottom;

		// clear all the props, so the GC can clear them up
		this.wrapper = this.handleV = this.handleH = this.elemstyle = this.elem =
			this._endDrag = this.dragging = this.hide = this.events = null;
	};

	// create a handle
	function handle(klass, pos) {
		// a container that has the handles position
		var container = document.createElement('div');
		var style = container.style;
		style.position = 'absolute';
		setPosition(container, pos);

		// the handle itself
		var handleEl = document.createElement('div');
		handleEl.className = 'scrollbars-handle ' + klass;
		container.appendChild(handleEl);

		return container;
	}

	// set absolute positioning properties
	var props = ['top', 'right', 'bottom', 'left'];
	function setPosition(el, positions) {
		for (var i = 0; i < props.length; i++) {
			var prop = props[i];
			var pos = positions[i];
			if (typeof pos !== 'undefined')
				el.style[prop] = Math.round(pos) + 'px';
		}
	}


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var now = __webpack_require__(306);

	/**
	 * Returns a function, that, as long as it continues to be invoked, will not
	 * be triggered. The function will be called after it stops being called for
	 * N milliseconds. If `immediate` is passed, trigger the function on the
	 * leading edge, instead of the trailing.
	 *
	 * @source underscore.js
	 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
	 * @param {Function} function to wrap
	 * @param {Number} timeout in ms (`100`)
	 * @param {Boolean} whether to execute at the beginning (`false`)
	 * @api public
	 */

	module.exports = function debounce(func, wait, immediate){
	  var timeout, args, context, timestamp, result;
	  if (null == wait) wait = 100;

	  function later() {
	    var last = now() - timestamp;

	    if (last < wait && last > 0) {
	      timeout = setTimeout(later, wait - last);
	    } else {
	      timeout = null;
	      if (!immediate) {
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      }
	    }
	  };

	  return function debounced() {
	    context = this;
	    args = arguments;
	    timestamp = now();
	    var callNow = immediate && !timeout;
	    if (!timeout) timeout = setTimeout(later, wait);
	    if (callNow) {
	      result = func.apply(context, args);
	      context = args = null;
	    }

	    return result;
	  };
	};


/***/ },
/* 306 */
/***/ function(module, exports) {

	module.exports = Date.now || now

	function now() {
	    return new Date().getTime()
	}


/***/ },
/* 307 */
/***/ function(module, exports) {

	/**
	 * Scrollbar size detection.
	 */

	var div = document.createElement('div');

	div.style.width = '50px';
	div.style.height = '50px';
	div.style.overflow = 'scroll';
	div.style.position = 'absolute';
	div.style.top = '-9999px';

	document.body.appendChild(div);
	var size = div.offsetWidth - div.clientWidth;
	document.body.removeChild(div);

	module.exports = size;

/***/ },
/* 308 */
/***/ function(module, exports) {

	module.exports = resizable;

	function resizable(element, options) {
		if (!(this instanceof resizable)) return new resizable(element, options);
		this._defaults = {
			directions: ['north', 'south', 'west', 'east', 'southeast', 'southwest', 'northeast', 'northwest']
		};
		this.element = element;
		var extend = function (a, b) {
			for(var key in b) {
				if (b.hasOwnProperty(key)) {
					a[key] = b[key];
				}
			}
			return a;
		}
		this._options = extend(this._defaults, options);
		this._directions = this._options.directions;
		this._ghosting = (this._options.ghosting !== undefined) ? this._options.ghosting : false; 
		this._create();
		this._resizeEv = document.createEvent('Event');
		this._resizeEv.initEvent('resize', true, true);
	}
	resizable.prototype.setGhosting = function (ghosting) {
		if (ghosting !== undefined) {
			this._ghosting = ghosting;
		}
	}
	resizable.prototype.setDirections = function (directions) {
		var resizable = this,
			currentDirections = resizable._directions;
		if (directions === undefined) {
			directions = resizable._options.directions;
		}
		resizable._directions = directions;
		[].forEach.call(currentDirections, function (direction) {
			if (directions.indexOf(direction) === -1) {
				resizable.element.querySelector('.rsize-d-' + direction).style.display = 'none';
			}
		});
		[].forEach.call(resizable._directions, function (direction) {	
			if (resizable.element.querySelector('.rsize-d-' + direction) !== undefined) {
				resizable.element.querySelector('.rsize-d-' + direction).style.display = 'block';
			} else {
				resizable._createHandle(direction);
			}
		});
	}
	resizable.prototype._createHandle = function (direction) {
		var resizable = this,
			rh = document.createElement('div'),
			ghost,
			resize = function (e) {
				if (direction.indexOf('north') !== -1) {
					resizable.element.style.top = e.pageY + "px";
					resizable.element.style.height = (resizable._startH + (resizable._startY - e.pageY)) + "px";
				}
				if (direction.indexOf('south') !== -1) {
					resizable.element.style.height = (resizable._startH + (e.pageY - resizable._startY)) + "px";
				}
				if (direction.indexOf('east') !== -1) {
					resizable.element.style.width = (resizable._startW + (e.pageX - resizable._startX)) + "px";
				}
				if (direction.indexOf('west') !== -1) {
					resizable.element.style.left = e.pageX + "px";
					resizable.element.style.width = (resizable._startW + (resizable._startX - e.pageX)) + "px";
				}
				resizable.element.dispatchEvent(resizable._resizeEv);
			},
			stop = function () {
				if (resizable._ghosting) {
					[].forEach.call(resizable.element.parentNode.querySelectorAll('.ghost'), function (ghost) {
						ghost.remove();
					});
				}
				window.removeEventListener("mousemove", resize, true);
			},
			start = function (e) {
				e.stopPropagation();
				resizable._startX = e.pageX;
				resizable._startY = e.pageY;
				resizable._startW = resizable.element.offsetWidth;
				resizable._startH = resizable.element.offsetHeight;	
				window.addEventListener("mousemove", resize, true);
				window.addEventListener("mouseup", stop, true);
				if (resizable._ghosting) {
					ghost = document.createElement('div');
					resizable.element.parentNode.appendChild(ghost);
					ghost.className = 'ghost';
					ghost.style.border = '1px dashed #000';
					ghost.style.background = 'transparent';
					ghost.style.position = 'absolute';
					ghost.style.width = resizable.element.offsetWidth - 2 + 'px';
					ghost.style.height = resizable.element.offsetHeight - 2 + 'px';
					ghost.style.left = resizable.element.offsetLeft + 'px';
					ghost.style.top = resizable.element.offsetTop + 'px';
				}
			};
		rh.className = rh.className + ' rsize-d rsize-d-' + direction;
		rh.setAttribute('data-rsize-d', direction);
		resizable.element.appendChild(rh);
		rh.addEventListener("mousedown", start, false);
	}
	resizable.prototype._create = function () {
		var resizable = this;
		resizable.element.className = resizable.element.className + ' rsizable';
		[].forEach.call(resizable._directions, function (direction) {
			resizable._createHandle(direction);
		});
	}


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var now = __webpack_require__(310);

	/**
	 * Returns a function, that, as long as it continues to be invoked, will not
	 * be triggered. The function will be called after it stops being called for
	 * N milliseconds. If `immediate` is passed, trigger the function on the
	 * leading edge, instead of the trailing.
	 *
	 * @source underscore.js
	 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
	 * @param {Function} function to wrap
	 * @param {Number} timeout in ms (`100`)
	 * @param {Boolean} whether to execute at the beginning (`false`)
	 * @api public
	 */

	module.exports = function debounce(func, wait, immediate){
	  var timeout, args, context, timestamp, result;
	  if (null == wait) wait = 100;

	  function later() {
	    var last = now() - timestamp;

	    if (last < wait && last > 0) {
	      timeout = setTimeout(later, wait - last);
	    } else {
	      timeout = null;
	      if (!immediate) {
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      }
	    }
	  };

	  return function debounced() {
	    context = this;
	    args = arguments;
	    timestamp = now();
	    var callNow = immediate && !timeout;
	    if (!timeout) timeout = setTimeout(later, wait);
	    if (callNow) {
	      result = func.apply(context, args);
	      context = args = null;
	    }

	    return result;
	  };
	};


/***/ },
/* 310 */
/***/ function(module, exports) {

	module.exports = Date.now || now

	function now() {
	    return new Date().getTime()
	}


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	// extends pgherveou/store component with
	// a check functionality that warns
	// if a prefix is already in use

	var Store = __webpack_require__(312);

	var prefixes = [];

	module.exports = Store;

	var protoPrefix = Store.prefix;

	Store.prefix = function (prefix) {
		check(prefix);
		// the . is for highlighting the prefix
		return protoPrefix.call(this, prefix + '.');
	}

	function check(prefix) {
		if (prefixes.indexOf(prefix) > -1) console.warn('Prefix ' + prefix + ' is already taken');
		prefixes.push(prefix);
	}

/***/ },
/* 312 */
/***/ function(module, exports) {

	var ls;

	/**
	 * test ls
	 * make sur ls exists and
	 * workaround `SecurityError: DOM Exception 18`
	 */

	try {
	  ls = window.localStorage;
	  ls.setItem('store-test', 'test');
	  ls.removeItem('store-test');
	} catch(e) {
	  ls = {
	    clear: function () {},
	    getItem: function () {},
	    removeItem: function () {},
	    setItem: function () {}
	  };
	}

	/**
	 * Initialize a new store
	 *
	 * @param {String} [prefix] prefix added to localstorage keys
	 * @api private
	 */

	function Store(_) {
	  if (!(this instanceof Store)) return new Store(_);
	  this._ = _ || '';
	}

	/**
	 * expose new Store instance
	 */

	module.exports = new Store();

	/**
	 * create a new store
	 * @param {String} prefix
	 *
	 * @api public
	 */

	Store.prototype.prefix = function(prefix) {
	  return new Store(prefix);
	};

	// alias prefix with ns
	Store.prototype.ns = Store.prototype.prefix;

	/**
	 * set a key, call JSON.stringify to serialize value
	 * @param {String} key
	 * @param {Object} val
	 *
	 * @return {Number} return val.length or 0 if anything has been thrown
	 *
	 * @api public
	 */

	Store.prototype.set = function(key, val) {
	  var data;
	  try {
	    data = JSON.stringify(val || null);
	    ls.setItem(this._ + key, data);
	    return data.length;
	  } catch(e) {
	    return 0;
	  }
	};

	/**
	 * set a key, value without serializing
	 * @param {String} key
	 * @param {String} val
	 *
	 * @return {[Error]} return null or Error if anything has been thrown
	 * @api public
	 */

	Store.prototype.setItem = function(key, val) {
	  if (!val) return;
	  try {
	    ls.setItem(this._ + key, val);
	    return null;
	  } catch(e) {
	    return e;
	  }
	};

	/**
	 * get a key call JSON.parse to deserialize value
	 * @param  {String} [key]
	 * @return {Object}
	 *
	 * @api public
	 */

	Store.prototype.get = function(key) {
	  try {
	    return JSON.parse(ls.getItem(this._ + (key || '')));
	  } catch (_error) {
	    return null;
	  }
	};

	/**
	 * get Item as string without deserializing
	 * @param  {String} [key]
	 * @return {Object}
	 *
	 * @api public
	 */

	Store.prototype.getItem = function(key) {
	  return ls.getItem(this._ + (key || ''));
	};

	/**
	 * save the prefix value
	 * shortcut for store.set('', val)
	 *
	 * @param  {Object} val
	 * @api public
	 */

	Store.prototype.save = function(val) {
	  return this.set('', val);
	};

	/**
	 * unset a key
	 * @param  {String} key
	 *
	 * @api public
	 */

	Store.prototype.unset = function(key) {
	  ls.removeItem(this._ + key);
	};

	// alias unset with del
	Store.prototype.del = Store.prototype.unset;

	/**
	 * clear all keys matching prefix
	 *
	 * @api public
	 */

	Store.prototype.clear = function() {
	  var prefix = this._,
	      keys = Object.keys(ls).filter(function(key) {
	    return key.indexOf(prefix) === 0;
	  });
	  keys.forEach(function(key) {
	    ls.removeItem(key);
	  });
	};

	// alias clear with reset

	Store.prototype.reset = Store.prototype.clear;

	/**
	 * clear all values
	 *
	 * @api public
	 */

	Store.prototype.clearAll = function() {
	  ls.clear();
	};


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var qs = __webpack_require__(43);
	var template = __webpack_require__(29);
	var classes = __webpack_require__(99);
	var ItemList = __webpack_require__(132);
	var Popover = __webpack_require__(314);
	var render = __webpack_require__(133);
	var closest = __webpack_require__(65);


	module.exports = RoomPopover;

	function RoomPopover() {
		Popover.call(this);
	}

	RoomPopover.prototype = Object.create(Popover.prototype);

	RoomPopover.prototype.init = function RoomPopover_init() {
		Popover.prototype.init.call(this);
		this.content = {};
		this.redraw();
		this.content.classes = classes(this.content.el);
		this.el.appendChild(this.content.el);
		this.itemList = new ItemList({
			template: 'popovers/roomlist.jade',
			selector: '.toggle'
		});
		replace(qs('ul', this.el), this.itemList.el);
	};

	function replace(from, to) {
		from.parentNode.replaceChild(to, from);
	}

	RoomPopover.prototype.bind = function RoomPopover_bind() {
		Popover.prototype.bind.call(this);
		var self = this;

		this.events.obj.leaveRoom = function(e) {
			var roomID = closest(e.target, '.item', true).getAttribute('data-id');
			self.emit('leaveroom', roomID);
		};

		function setRoomCreation() {
			self.events.obj.toggleRoomCreation = function() {
				self.hide();
				// the popovers cancel each other 
				// setTimeout to force synchronicity
				setTimeout(function() {
					self.emit('toggleroomcreation', self.trigger)
				});
			};
			self.events.bind('click button.new', 'toggleRoomCreation');
		}
		
		// this behaviour is exceptional in our popover logic:
		// a popover opens another popover with the same trigger,
		// so we have to proxy the trigger
		this.once('show', setRoomCreation);
		this.events.bind('click li.leave', 'leaveRoom');
	};

	RoomPopover.prototype.redraw = function RoomPopover_redraw() {
		this.classes.add('room-po');
		this.classes.add('left');
		render(this.content, template('popovers/room.jade'));
		if (this.itemList) this.itemList.redraw();
	};

	RoomPopover.prototype.onMemberLeftChannel = function RoomPopover_onMemberLeftChannel (room) {
		this.itemList.redraw();
	}

	RoomPopover.prototype.onNewRoomMember = function RoomPopover_onNewRoomMember() {
		this.itemList.redraw();
	}

	RoomPopover.prototype.onNewRoom = function RoomPopover_onNewRoom() {
		this.itemList.redraw();
	}

	RoomPopover.prototype.onChannelUpdate = function RoomPopover_onChannelUpdate() {
		this.itemList.redraw();
	}

	RoomPopover.prototype.onRoomDeleted = function RoomPopover_onRoomDeleted() {
		this.itemList.redraw();
	}

	RoomPopover.prototype.onJoinedChannel = function RoomPopover_onJoinedChannel() {
		this.itemList.redraw();
	}

	RoomPopover.prototype.onLeftChannel = function RoomPopover_onLeftChannel (room) {
		if (!room.is_public) {
			var roomIndex = this.itemList.items.indexOf(room);
			this.itemList.items.splice(roomIndex, 1);
		}	
		this.itemList.redraw();
	}

	RoomPopover.prototype.setItems = function RoomPopover_setItems(items) {
		this.itemList.setItems(items);
	};

	RoomPopover.prototype.onOrgReady = function RoomPopover_onOrgReady(org) {
		this.setItems(org.rooms);
	}

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var events = __webpack_require__(101);
	var classes = __webpack_require__(99);
	var Emitter = __webpack_require__(41);

	module.exports = Popover;

	function Popover() {
		Emitter.call(this);
		this.init();
		this.bind();
	}

	Popover.prototype = Object.create(Emitter.prototype);

	Popover.prototype.init = function Popover_init() {
		this.el = document.createElement('div');
		this.classes = classes(this.el);
		this.classes.add('popover');
		this.classes.add('hide');
		this.hidden = true;
	};

	Popover.prototype.bind = function Popover_bind() {
		var self = this;
		this.events = events(this.el, {
			close: function () {
				self.hide();
			}
		});
		this.events.bind('click .close', 'close');
		document.addEventListener('click', function (ev) {
			if (self.hidden) return;
			var target = ev.target;
			var parent = target;
	        if (classes(target).has('disable-document-click-handler')) return; // TODO: refactor
			do {
				if (parent === self.el || parent === self.trigger) return;
			} while ((parent = parent.parentNode));
			self.hide();
		});
		document.addEventListener('keyup', function (ev) {
			if (self.hidden) return;
			if (ev.keyCode === 27) self.hide();
		});
	};

	Popover.prototype.show = function Popover_show(trigger) {
		this.trigger = trigger;
		this.classes.remove('hide');
		var offset = trigger.getBoundingClientRect();
		this.el.style.top = offset.top + 'px';
		this.el.style.left = offset.left + offset.width + 'px';
		document.body.appendChild(this.el);
		this.hidden = false;
		this.emit('show');
	};

	Popover.prototype.hide = function Popover_hide() {
		this.classes.add('hide');
		this.el.parentNode.removeChild(this.el);
		this.hidden = true;
		this.emit('hide');
	};

	Popover.prototype.toggle = function Popover_toggle(trigger) {
		if (this.hidden) {
			this.show(trigger);
		} else {
			this.hide();
		}
	};



/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var template = __webpack_require__(29);
	var Emitter = __webpack_require__(41);
	var render = __webpack_require__(133);
	var Popover = __webpack_require__(314);
	var classes = __webpack_require__(99);
	var qs = __webpack_require__(43);
	var events = __webpack_require__(101);
	var broker = __webpack_require__(42);
	var constants = __webpack_require__(3).constants;

	module.exports = RoomMembersPopover;

	function RoomMembersPopover() {
		this.room = new Emitter({name: '', users: new Emitter([])});
		Popover.call(this);
	}

	RoomMembersPopover.prototype = Object.create(Popover.prototype);

	RoomMembersPopover.prototype.init = function RoomMembersPopover_init() {
		Popover.prototype.init.call(this);
		this.content = {};
		this.redraw();
		this.content.classes = classes(this.content.el);
		this.el.appendChild(this.content.el);
		this.canKickMembers = false;
	};

	RoomMembersPopover.prototype.bind=  function RoomMembersPopover_bind() {
		var self = this;
		Popover.prototype.bind.call(this);
		this.events.obj.deleteRoomMember = function (ev) {
			var roomID = this.room.id;
			var memberID = ev.target.getAttribute('data-id');
			this.emit('kickMember', roomID, memberID);
		}.bind(this);
		this.events.bind('click span.btn-delete', 'deleteRoomMember');
	};

	RoomMembersPopover.prototype.redraw = function RoomMembersPopover_redraw() {
		this.classes.add('members-po');
		this.classes.add('top');
		render(this.content, template('popovers/roommembers.jade', {
			room: this.room,
			canKickMembers: this.canKickMembers
		}));
	};

	/* scroll down in the members list */
	RoomMembersPopover.prototype.scrollDown = function RoomMembersPopover_scrollDown() {
		var list = qs('.user-list', this.el);
		var scrollHeight = list.scrollHeight;
		list.scrollTop = scrollHeight;
	};

	RoomMembersPopover.prototype.setRoom = function RoomMembers_setRoom(room) {
		var self = this;
		var redraw_wrapped = function(ev) {
			self.redraw();
		};
		var user_added = function(ev) {
			self.redraw();
			self.scrollDown();
		};
		this.room.users.off('add', user_added);
		this.room.off('change', redraw_wrapped);
		this.room = room;
		room.users.on('add', user_added);
		room.on('change', redraw_wrapped);
		this.canKickMembers = ui.user === room.creator || ui.user.role >= constants.ROLE_ADMIN ? true : false;
		this.redraw();
		if (!this.hidden) this.hide();
	};

	RoomMembersPopover.prototype.onMemberLeftChannel = function RoomMembersPopover_onMemberLeftChannel(room) {
		if (room == this.room) this.redraw();
	}


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var template = __webpack_require__(29);
	var render = __webpack_require__(133);
	var Popover = __webpack_require__(314);
	var classes = __webpack_require__(99);
	var query = __webpack_require__(43);

	module.exports = UserPopover;

	function UserPopover() {
		Popover.call(this);
	}

	UserPopover.prototype = Object.create(Popover.prototype);

	UserPopover.prototype.init = function RoomPopover_init() {
		Popover.prototype.init.call(this);
		this.content = {};
		this.redraw();
		this.content.classes = classes(this.content.el);
		this.el.appendChild(this.content.el);
	};

	UserPopover.prototype.redraw = function UserPopover_redraw() {
		this.classes.add('user-po');
		this.classes.add('top');
		render(this.content, template('popovers/user.jade'));
	};

	UserPopover.prototype.show = function RoomPopover_show() {
		Popover.prototype.show.apply(this, arguments);
		// intercom button
	  query('a#Intercom', this.content.el).addEventListener("click", function(e) {
			// manually attaching the intercom-show handler here
			// because due to our indirect use of intercom (via 
			// segment's analytics.js), we cannot set the 
			// intercom settings activator id
			e.preventDefault();
			window.Intercom("show");  
		});
	};



/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var template = __webpack_require__(29);
	var render = __webpack_require__(133);
	var Popover = __webpack_require__(314);
	var classes = __webpack_require__(99);

	module.exports = OrganizationPopover;

	function OrganizationPopover() {
		Popover.call(this);
	}

	OrganizationPopover.prototype = Object.create(Popover.prototype);

	OrganizationPopover.prototype.init = function OrganizationPopover_init() {
		Popover.prototype.init.call(this);
		this.content = {};
		this.redraw();
		this.content.classes = classes(this.content.el);
		this.el.appendChild(this.content.el);
	};

	OrganizationPopover.prototype.redraw = function OrganizationPopover_redraw() {
		this.classes.add('orga-po');
		this.classes.add('left');
		render(this.content, template('popovers/organization.jade'));
	};


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	var Popover = __webpack_require__(314);
	var template = __webpack_require__(29);
	var render = __webpack_require__(133);
	var classes = __webpack_require__(99);
	var qs = __webpack_require__(43);

	module.exports = RoomCreationPopover;

	function RoomCreationPopover() {
		Popover.call(this);
	}

	RoomCreationPopover.prototype = Object.create(Popover.prototype);

	RoomCreationPopover.prototype.init = function RoomCreationPopover_init() {
		Popover.prototype.init.call(this);
		this.content = {};
		this.redraw();
		this.content.classes = classes(this.content.el);
		this.el.appendChild(this.content.el);
		this.form = qs('form.create-room-form', this.el);
		this.newRoomName = this.form['newroom-name'];
		this.createButton = qs('input.create', this.form);
	}

	RoomCreationPopover.prototype.bind = function RoomCreationPopover_bind() {
		Popover.prototype.bind.call(this);

		this.events.obj.createRoom = function(e) {
			e.preventDefault();
			var room = {
				'name': this.newRoomName.value.trim(),
				'is_public': qs('input:checked', this.form).value
			};
			this.emit('createroom', room);
		}.bind(this);
		this.events.obj.resetValidity = function() {
			this.newRoomName.setCustomValidity('');
		}.bind(this);
		this.events.obj.toggleAddRoom = function () {
			this.emit('toggleaddroom', this.trigger) 
		}.bind(this);
		this.events.obj.goBack = function () {
			this.hide();
			// the popovers cancel each other 
			// setTimeout to force synchronicity
			setTimeout(this.events.obj.toggleAddRoom);
		}.bind(this);

		this.events.bind('submit form.create-room-form', 'createRoom');
		this.events.bind('click input.back', 'goBack');
		this.events.bind('keydown input#newroom-name', 'resetValidity');

		this.on('show', function() {
			this.newRoomName.focus();
		});
		this.on('hide', function() {
			this.form.reset();
		});
	}

	RoomCreationPopover.prototype.redraw = function RoomCreationPopover_redraw() {
		this.classes.add('left');	
		render(this.content, template('popovers/roomcreation.jade'));
	}

	RoomCreationPopover.prototype.errorFeedback = function RoomCreationPopover_errorFeedback(err) {
		this.newRoomName.setCustomValidity(err.msg);
		this.createButton.click();
	}

	RoomCreationPopover.prototype.end = function RoomCreationPopover_end() {
		this.hide();
	}

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Emitter = __webpack_require__(41);
	var template = __webpack_require__(29);
	var qs = __webpack_require__(43);
	var events = __webpack_require__(101);
	var render = __webpack_require__(133);
	var debounce = __webpack_require__(309);
	var classes = __webpack_require__(99);
	var constants = __webpack_require__(3).constants;
	var keyname = __webpack_require__(320);

	module.exports = ChatHeader;

	function ChatHeader() {
		Emitter.call(this);
		this.room = new Emitter({name: '', users: []});
		this.redraw = this.redraw.bind(this);
		this.redraw();
		this.init();
		this.bind();
	}

	ChatHeader.prototype = Object.create(Emitter.prototype);

	ChatHeader.prototype.init = function ChatHeader_init() {
		this.classes = classes(this.el);
		this.searchForm = qs('.search-form', this.el);
		this.searchInput = qs('.search', this.el);
		this.q = null;
		this.editOptions = {
			canRenameRoom: false,
			renamingRoom: false
		};
		this.mode = 'chat';
	};

	ChatHeader.prototype.bind = function ChatHeader_bind() {
		var self = this;

		this.events = events(this.el, {
			'toggleUserMenu': function () {
				self.emit('toggleusermenu', qs('.user-menu-wrap', self.el));
			},
			'toggleMembersMenu': function (e) {
				self.emit('togglemembersmenu', qs('.room-users-wrap', self.el));
			},
			'toggleMembersMenu1': function (e) {
				self.emit('togglemembersmenu', qs('.option-add-users', self.el));
			},
			'toggleDeleteRoomDialog': function(e) {
				self.emit('toggledeleteroomdialog', self.room);
			},
			'toggleRoomRename': function() {
				self.editOptions.renamingRoom = true;
				self.redraw();
				var	roomNameInput = qs('input.room-name', this.el),
					roomName = roomNameInput.value;
				roomNameInput.focus();
				roomNameInput.setSelectionRange(roomName.length,roomName.length);
			},
			'stopRoomRename': function() {
				self.editOptions.renamingRoom = false;
				self.redraw();
			},
			'confirmRoomRename': function() {
				var newRoomName = qs('input.room-name', this.el).value;
				self.emit('confirmroomrename', self.room.id, newRoomName);
			},
			'roomRenameShortcuts' : function(e) {
				switch(keyname(e.which)) {
					case 'enter':
						this.confirmRoomRename();
					default:
						e.target.setCustomValidity('');
				}
			},
			'preventFormSubmission' : function(e) {
				e.preventDefault();
			}
		});

		this.events.bind('click .user-menu-wrap', 'toggleUserMenu');
		this.events.bind('click .option-add-users', 'toggleMembersMenu1');
		this.events.bind('click .room-users-wrap', 'toggleMembersMenu');
		this.events.bind('click .option-delete-room', 'toggleDeleteRoomDialog');
		this.events.bind('click div.room-name.editable', 'toggleRoomRename');
		this.events.bind('click .option-rename-room', 'toggleRoomRename');
		this.events.bind('click .option-rename-cancel', 'stopRoomRename');
		this.events.bind('click .option-rename-ok', 'confirmRoomRename');
		this.events.bind('keyup input.room-name', 'roomRenameShortcuts');
		this.events.bind('submit form.room-rename', 'preventFormSubmission');
		this.events.bind('submit form.search-form', 'preventFormSubmission');

		var	callbacks = this.events.obj;

		document.addEventListener('keyup', function(e) {		
			if (keyname(e.which) == 'esc') callbacks.stopRoomRename();		
		});

		var startSearching = debounce(function () {
			self.emit('searching', self.q);
		}, 200, false);

		this.searchInput.addEventListener('keyup', function () {
			var q = (qs('input.search', self.el).value || this.value).replace(/^\s+|\s+$/g, '');
			if (q.length !== 0 && self.q !== q) {
				self.q = q;
				startSearching();
			} else if (q.length === 0 && self.q !== q) {
				self.q = q;
				self.emit("stopsearching");
			}
		});
	};

	ChatHeader.prototype.redraw = function ChatHeader_redraw() {
		var vdom = template('chatheader.jade', {
			room: this.room,
			editOptions: this.editOptions,
			mode: this.mode
		});
		render(this, vdom);
	};

	ChatHeader.prototype.clearSearch = function ChatHeader_clearSearch() {
		this.searchInput.value = '';
	};

	ChatHeader.prototype.setRoom = function ChatHeader_setRoom(room, msgID) {
		this.room.off('change', this.redraw);
		this.room = room;
		this.editOptions.canRenameRoom = ( (this.room.creator && ui.user == this.room.creator) || ui.user.role >= constants.ROLE_ADMIN) ? true : false;
		this.editOptions.renamingRoom = false;
		this.mode = msgID ? 'search' : 'chat',
		room.on('change', this.redraw);
		this.redraw();
	};

	ChatHeader.prototype.channelUpdate = function ChatHeader_channelUpdate() {
		this.editOptions.renamingRoom = false;
		this.redraw();
	}

	ChatHeader.prototype.roomRenameError = function ChatHeader_roomRenameError(err) {
		qs('input.room-name', this.el).setCustomValidity(err.details.msg);
		qs('input.submit-rename', this.el).click();
	}

	ChatHeader.prototype.onNewRoomMember = function ChatHeader_onNewRoomMember(room) {
		if (room == this.room) this.redraw();
	}

	ChatHeader.prototype.onMemberLeftChannel = function ChatHeader_onMemberLeftChannel(room) {
		if (room == this.room) this.redraw();
	}

	ChatHeader.prototype.onSwitchToChatMode = function ChatHeader_onSwitchToChatMode () {
		this.mode = 'chat';
		this.redraw();
	}

	ChatHeader.prototype.onSwitchToSearchMode = function ChatHeader_onSwitchToChatMode () {
		this.mode = 'search';
		this.redraw();
	}


/***/ },
/* 320 */
/***/ function(module, exports) {

	
	/**
	 * Key name map.
	 */

	var map = {
	  8: 'backspace',
	  9: 'tab',
	  13: 'enter',
	  16: 'shift',
	  17: 'ctrl',
	  18: 'alt',
	  20: 'capslock',
	  27: 'esc',
	  32: 'space',
	  33: 'pageup',
	  34: 'pagedown',
	  35: 'end',
	  36: 'home',
	  37: 'left',
	  38: 'up',
	  39: 'right',
	  40: 'down',
	  45: 'ins',
	  46: 'del',
	  91: 'meta',
	  93: 'meta',
	  224: 'meta'
	};

	/**
	 * Return key name for `n`.
	 *
	 * @param {Number} n
	 * @return {String}
	 * @api public
	 */

	module.exports = function(n){
	  return map[n];
	};

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Emitter = __webpack_require__(41);
	var template = __webpack_require__(29);
	var events = __webpack_require__(101);
	var q = __webpack_require__(43);
	var debounce = __webpack_require__(309);

	var staticurl = __webpack_require__(24);
	var constants = __webpack_require__(3).constants;
	var render = __webpack_require__(133);

	var IMAGES_BASE = staticurl('app/cg/images');

	var images = {
		emojiSheet: IMAGES_BASE + '/emoji_sheet_32_optimized.png',
	    traubyReading: IMAGES_BASE + '/trauby-reading.png',
	    traubyJuggling: IMAGES_BASE + '/trauby-juggling.png',
	    noDetail: IMAGES_BASE + '/no-detail.png',
	    spinner: staticurl('/images/loading.gif')
	};

	__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"grape-input\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	function GrapeInputIntegration() {
		Emitter.call(this);
		this.room = null;
		this.previous = null;
		this.org = null;
		this.redraw();
		this.placeholder = 'Enter a message ...';
		this.typing = false;
	}

	GrapeInputIntegration.prototype = Object.create(Emitter.prototype);
	module.exports = GrapeInputIntegration;

	GrapeInputIntegration.prototype.init = function () {
		if (this.initialized) return;
		this.initialized = true;
		this.bindEvents();
		this.input = q('grape-input', this.el);
		images.orgLogo = this.org.logo;
		this.setProps();
	};

	GrapeInputIntegration.prototype.setProps = function (newProps) {
		var props = {
			images: images,
			customEmojis: this.org.custom_emojis,
			focused: true,
			placeholder: this.placeholder,
			hasIntegrations: this.org.has_integrations
		};

		for (var name in newProps) props[name] = newProps[name];
		this.input.props = props;
	};

	GrapeInputIntegration.prototype.bindEvents = function () {
		this.events = events(this.el, this);
		this.events.bind('click .js-markdown-tips', 'onMarkdownTipsShow');
		this.events.bind('mousedown .js-emoji-browser-button', 'onOpenEmojiBrowser');
		this.events.bind('mousedown .js-search-browser-button', 'onOpenSearchBrowser');
		this.events.bind('grapeComplete grape-input', 'onComplete');
		this.events.bind('grapeFilterSelect grape-input', 'onFilterSelect');
		this.events.bind('grapeEditPrevious grape-input', 'onPreviousEdit');
		this.events.bind('grapeAbort grape-input', 'onAbort');
		this.events.bind('grapeChange grape-input', 'onChange');
		this.events.bind('grapeSubmit grape-input', 'onSubmit');
		this.events.bind('grapeFocus grape-input', 'onFocus');
		this.events.bind('grapeBlur grape-input', 'onBlur');
		this.events.bind('grapeAddIntegration grape-input', 'onAddIntegration');
		this.events.bind('grapeSearch grape-input', 'onSearch');
		this.events.bind('grapeInsertItem grape-input', 'onInsertItem');
	};

	GrapeInputIntegration.prototype.setRoom = function (room) {
		this.completePreviousEdit();
	    if (!room || (room.type == "pm" && !room.users[0].active)) {
	    	this.disable();
		}
		else {
			this.enable();
		}
		this.room = room;
	};

	GrapeInputIntegration.prototype.disable = function () {
		if (this.input.props.disabled) return;
		this.completePreviousEdit();
		this.el.classList.add('disabled');
		this.setProps({
			disabled: true,
			placeholder: 'You cannot reply to this conversation.'
		});
	};

	GrapeInputIntegration.prototype.enable = function () {
		if (!this.input.props.disabled) return;
		this.el.classList.remove('disabled');
		this.setProps({
			disabled: false,
			placeholder: this.placeholder
		});
	};

	GrapeInputIntegration.prototype.redraw = function () {
		var vdom = template('grapeinputintegration.jade', {});
		render(this, vdom);
	};

	GrapeInputIntegration.prototype.showSearchBrowser = function (key) {
		// Show browser immediately with empty state.
		this.setProps({
			type: 'search',
			data: this.input.props.data,
			isLoading: true
		});

		this.emit('autocomplete', key, function (err, data) {
			if (err) return this.emit('error', err);
			this.setProps({
				type: 'search',
				data: data
			});
		}.bind(this));
	};

	GrapeInputIntegration.prototype.showUsersAndRooms = function (key) {
		key = key.toLowerCase();
		var users = this.findUsers(key);
		var rooms = this.findRooms(key);
		var data = users.concat(rooms);
		this.setProps({
			type: 'user',
			data: data
		});
	};

	GrapeInputIntegration.prototype.showEmojiBrowser = function () {
		this.setProps({type: 'emoji'});
	};

	GrapeInputIntegration.prototype.findUsers = function (key) {
		var users = this.org.users.toArray();

		// Remove unactive users.
		users = users.filter(function(user) {
			return user.active;
		});

		// Map to a unified data structure.
		users = users.map(function (user) {
			var name = user.username;
			if (user.firstName) {
				name = user.firstName;
				if (user.lastName) name += ' ' + user.lastName;
			}

			return {
				id: user.id,
				name: name,
				username: user.username,
				iconURL: user.avatar,
				type: 'user'
			};
		});

		// Do the search.
		users = users.filter(function(user) {
			if (user.name.toLowerCase().indexOf(key) >= 0 ||
				user.username.toLowerCase().indexOf(key) >= 0) {
				return true;
			}
		});

		return users;
	};

	GrapeInputIntegration.prototype.findRooms = function (key) {
		var rooms = this.org.rooms.toArray();

		rooms = rooms.map(function (room) {
			return {
				id: room.id,
				type: 'room',
				name: room.name,
				slug: room.slug
			};
		});

		// Do the search.
		rooms = rooms.filter(function(room) {
			return room.name.toLowerCase().indexOf(key) >= 0;
		});

		return rooms;
	};

	GrapeInputIntegration.prototype.completePreviousEdit = function () {
		if (!this.previous) return;
		this.previous.el.classList.remove('editing');
		this.el.classList.remove('editing-previous');
		this.input.setTextContent('');
		this.previous = null;
	};

	GrapeInputIntegration.prototype.editMessage = function (msg) {
		this.completePreviousEdit();
		var el = q('.message[data-id="' + msg.id + '"]');
		el.classList.add('editing');
		this.el.classList.add('editing-previous');
		this.input.setTextContent(msg.text);
		this.previous = {
			msg: msg,
			el: el
		};
	};

	GrapeInputIntegration.prototype.findPreviousMessage = function () {
		var message;
		var history = this.room.history.slice();
		history.reverse();
		history.some(function(msg) {
			// TODO avoid globals.
			if (msg.author == ui.user && !msg.attachments.length) {
				message = msg;
				return true;
			}
		});

		return message;
	};

	GrapeInputIntegration.prototype.debouncedStopTyping = debounce(function () {
		this.typing = false;
		this.emit('stoptyping', this.room);
	}, 1000);

	GrapeInputIntegration.prototype.getAttachments = function (objects) {
		// Find embeddable images.
		objects = objects.filter(function (obj) {
			if (isImage(obj.mime_type) &&
				obj.detail &&
				obj.detail.preview &&
				obj.detail.preview.embeddable) {
				return true;
			}
			return false;
		});

		var attachments = objects.map(function (obj) {
			var image = obj.detail.preview.image;

			return {
				name: obj.name,
				url: obj.url,
				source: obj.service,
				mime_type: obj.mime_type,
				thumbnail_url: image.url,
				thumbnail_width: image.width,
				thumbnail_height: image.height
			};
		});

		return attachments;
	};

	GrapeInputIntegration.prototype.onMarkdownTipsShow = function () {
		this.emit('showmarkdowntips');
	};

	GrapeInputIntegration.prototype.onComplete = function (e) {
		var query = e.detail;

		switch (query.trigger) {
			case '#':
				this.showSearchBrowser(query.key)
				break;
			case '@':
				this.showUsersAndRooms(query.key)
				break;
			case ':':
				this.showEmojiBrowser()
				break;
		}
	};

	GrapeInputIntegration.prototype.onFilterSelect = function (e) {
		this.emit('autocomplete', e.detail.key, function (err, data) {
			if (err) return this.emit('error', err);
			this.setProps({
				type: 'search',
				data: data
			});
		}.bind(this));
	};

	GrapeInputIntegration.prototype.onPreviousEdit = function () {
		var msg = this.findPreviousMessage();
		if (msg) this.editMessage(msg);
	};

	GrapeInputIntegration.prototype.onAbort = function (e) {
		var data = e.detail;

		// Don't abort editing if browser has been open.
		if (!data.type) this.completePreviousEdit();
	    if (data.type == 'search' && data.reason == 'esc') {
	    	analytics.track('abort autocomplete', data);
	    }
	};

	GrapeInputIntegration.prototype.onChange = function () {
		if (!this.typing) {
			this.typing = true;
			this.emit('starttyping', this.room);
		}
		this.debouncedStopTyping();
	};

	GrapeInputIntegration.prototype.onSubmit = function (e) {
		var data = e.detail;

		if (this.previous) {
			this.emit('update', this.previous.msg, data.content);
			this.completePreviousEdit();
		}
		else {
			this.emit('input', this.room, data.content);
			var attachments = this.getAttachments(data.objects);
			if (attachments.length) {
				this.emit('input', this.room, '', {attachments: attachments});
			}
			this.input.setTextContent('');
		}
	};

	GrapeInputIntegration.prototype.onFocus = function () {
		this.el.classList.add('focus');
	};

	GrapeInputIntegration.prototype.onBlur = function () {
		this.el.classList.remove('focus');
	};

	GrapeInputIntegration.prototype.onOpenEmojiBrowser = function (e) {
		e.preventDefault();
		this.showEmojiBrowser();
	};

	GrapeInputIntegration.prototype.onOpenSearchBrowser = function (e) {
		e.preventDefault();
		this.showSearchBrowser('');
	};

	GrapeInputIntegration.prototype.onOrgReady = function (org) {
		this.org = org;
		this.init();
	};

	GrapeInputIntegration.prototype.onAddIntegration = function () {
		location.href = '/services/list'
	};

	GrapeInputIntegration.prototype.onSearch = function (e) {
		analytics.track('open grape-browser', e.detail);
	};

	GrapeInputIntegration.prototype.onInsertItem = function (e) {
		analytics.track('insert autocomplete object', e.detail);
	};

	function isImage(mime) {
		return String(mime).substr(0, 5) == 'image';
	}


/***/ },
/* 322 */,
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Emitter = __webpack_require__(41);
	var render = __webpack_require__(133);
	var raf = __webpack_require__(324);
	var template = __webpack_require__(29);
	var debounce = __webpack_require__(309);
	var Scrollbars = __webpack_require__(304);
	var qs = __webpack_require__(43);
	var classes = __webpack_require__(99);
	var closest = __webpack_require__(65);
	var events = __webpack_require__(101);
	var zoom = __webpack_require__(325);

	// WTFjshint
	var focus = __webpack_require__(116); // jshint ignore:line
	var InfiniteScroll = __webpack_require__(326);
	var Line = __webpack_require__(3).models.Line; // TODO: clean this up a bit

	template.locals.tz = __webpack_require__(327);

	module.exports = HistoryView;

	// TODO set firstMsgTime for thr very first message in a room
	function HistoryView() {
		Emitter.call(this);
		this.mode = 'chat'; // can be either "search" or "chat"
		this.redraw = this.redraw.bind(this);
		this.queueDraw = this.queueDraw.bind(this);
		this.room = {history: new Emitter([])};
		this.lastwindow = {lastmsg: null, sH: 0};
		this.init();
		this.bind();
		this.scroll = new InfiniteScroll(this.scrollWindow, this._scrolled.bind(this), 0);
		this.scrollMode = 'automatic';
		this.on('needhistory', function () { this.room.loading = true; });
		this.unsentBuffer = {};
		this.requestedMsgID = null;
		this.isFirstMsgLoaded = false;
		this.isLastMsgLoaded = false;
	}

	HistoryView.prototype = Object.create(Emitter.prototype);

	HistoryView.prototype.init = function HistoryView_init() {
		var el = this.scrollWindow = document.createElement('div');
		el.className = 'chat';
		this.history = {};
		this.typing = {};
		this.redraw();
		el.appendChild(this.history.el);
		this.redrawTyping();
		el.appendChild(this.typing.el);
		// and make it work with custom scrollbars
		document.createElement('div').appendChild(el);
		var scr = new Scrollbars(el);
		this.el = scr.wrapper;
	};

	HistoryView.prototype.bind = function HistoryView_bind() {
		this.events = events(this.el, this);
		this.events.bind('click i.btn-delete', 'deleteMessage');
		this.events.bind('click i.btn-edit', 'selectForEditing');
		this.events.bind('click i.btn-delete-from-buffer', 'removeFromBuffer');
		this.events.bind('click a.show-invite', 'toggleInvite');
		this.events.bind('click a.show-more', 'expandActivityList');
		this.events.bind('click a.show-less', 'collapseActivityList');
		this.events.bind('click div.resend', 'resend');
		this.events.bind('click div.load-newer-history', 'loadNewHistory');
		this.events.bind('click div.load-older-history', 'loadOldHistory');
		this.events.bind('click div.load-newest-history', 'loadNewestHistory');
		var debouncedUpdateRead = debounce(this.updateRead.bind(this), 1500);
		focus.on('focus', debouncedUpdateRead);
		this.scrollWindow.addEventListener('scroll', function () {
			this.scrollMode = 'manual';
		}.bind(this));
	};

	HistoryView.prototype.onOrgReady = function HistoryView_onOrgReady (org) {
		if (Object.keys(this.unsentBuffer) != 0) return;
		org.rooms.forEach( function (room) {
			this.unsentBuffer[room.id] = [];
		}.bind(this));
		org.pms.forEach( function (pm) {
			this.unsentBuffer[pm.id] = [];
		}.bind(this));
	}

	HistoryView.prototype.deleteMessage = function HistoryView_deleteMessage(ev) {
		var el = closest(ev.target, '.message', true);
		classes(el).add('removing');
		if (confirm("Delete the selected Message?")) {
			var id = el.getAttribute('data-id');
			this.emit('deleteMessage', this.room, id);
		}
		classes(el).remove('removing');
	};

	HistoryView.prototype.removeFromBuffer = function HistoryView_removeFromBuffer (ev) {
		var msgClientSideID = closest(ev.target, '.message', true).getAttribute('data-id');
		var bufferedMsg = this.findBufferedMsg(msgClientSideID);
		if (!bufferedMsg) return;
		var roomUnsentMsgs = this.unsentBuffer[this.room.id];
		roomUnsentMsgs.splice(roomUnsentMsgs.indexOf(bufferedMsg), 1);
		this.queueDraw();
	};

	HistoryView.prototype.loadNewHistory = function HistoryView_loadNewHistory () {
		var options = {
			time_from	: this.room.searchHistory[this.room.searchHistory.length - 1].time,
			sort		: 'time:asc',
			limit		: 5
		}
		this.emit('loadHistoryForSearch', 'new', this.room, options);
	};

	HistoryView.prototype.loadNewestHistory = function HistoryView_loadNewestHistory () {
		this.emit('switchToChatMode', this.room);
	};

	HistoryView.prototype.loadOldHistory = function HistoryView_loadOldHistory () {
		var options = {
			time_to	: this.room.searchHistory[0].time,
			limit	: 5
		};
		this.emit('loadHistoryForSearch', 'old', this.room, options);
	};

	HistoryView.prototype.selectForEditing = function HistoryView_selectForEditing(ev) {
		var el = closest(ev.target, '.message', true);
		classes(el).add('editing');
		var msg = this.room.history.find("id=='" + el.getAttribute('data-id') + "'");
		this.emit('selectedforediting', msg, this.room);
	};

	HistoryView.prototype.unselectForEditing = function () {
		var msg = qs(".message.editing", this.el);
		if (msg) {
			classes(msg).add('edited');
			classes(msg).remove('editing');
		}
	};

	// only group messages that are X seconds apart
	var TIME_THRESHOLD = 5 * 60 * 1000;

	function groupHistory(history) {
		var groups = [];
		var counter = 1;
		var last;
		var group;

		for (var i = 0; i < history.length; i++) {
			var	line			= history[i],
				author			= line.author,
				isService		= author.type == "service",
				isTimeSpanShort	= last && last.time.getTime() + TIME_THRESHOLD > line.time.getTime(),
				hasSameTitle	= last && line.title && line.title == last.title && !line.objects,
				hasSameMsg		= last && last.message && line.message && last.message == line.message,
				hasSameAuthor	= last && last.author.id == author.id,
				isGroupable		= isTimeSpanShort && hasSameAuthor;

			if (isGroupable) {
				if (isService && ( hasSameTitle || hasSameMsg )) {
					group.pop();
					counter++;
					line.times = counter.toString(); // convert to string cause jade gets crazy with numbers		
				}
			} else {
				groups.push(group = []); 
				counter = 1;		
			}

			group.push(last = line);
		}
		return groups;
	};

	HistoryView.prototype.redraw = function HistoryView_redraw() {
		this.queued = false;

		if (this.mode === 'chat') {
			// update the read messages. Do this before we redraw, so the new message
			// indicator is up to date
			if (this.room.history.length && (!this.lastwindow.lastmsg ||
				(this.scrollMode === 'automatic' && focus.state === 'focus'))) {
				this.emit('hasread', this.room, this.room.history[this.room.history.length - 1]);
			}
			// create a copy of the history
			var history = this.room.history.slice();
			// merge buffered messages with copy of history
			if (this.unsentBuffer) {
				var roomUnsentMsgs = this.unsentBuffer[this.room.id];
				if (roomUnsentMsgs) history = history.concat(roomUnsentMsgs);			
			};
		} else {
			var history = this.room.searchHistory.slice();
			var requestedMsg = history.filter( function (msg) {
					return msg.id === this.requestedMsgID;
				}.bind(this))[0];
			var prevMsgID = history.indexOf(requestedMsg) > 0 ? history[history.indexOf(requestedMsg) - 1].id : this.requestedMsgID;
		}

		// eventually group history
		var groupedHistory = groupHistory(history);

		render(this.history, template('chathistory.jade', {
			room: this.room,
			history: groupedHistory,
			mode: this.mode,
			requestedMsgID: this.requestedMsgID,
			isFirstMsgLoaded: this.isFirstMsgLoaded,
			isLastMsgLoaded: this.isLastMsgLoaded
		}));

		if (this.lastwindow.lastmsg !== this.room.history[0])
			this.scrollWindow.scrollTop += this.scrollWindow.scrollHeight - this.lastwindow.sH;

		this.lastwindow = { lastmsg: this.room.history[0], sH: this.scrollWindow.scrollHeight };

		if (this.scrollMode === 'automatic') {
			if (this.mode === 'chat') return this.scrollBottom();
			var prevMsgEl = qs("div.message[data-id='" + prevMsgID + "']", this.el);
			var requestedMsgEl = qs("div.message[data-id='" + requestedMsg.id + "']", this.el);
			var scrollTarget = prevMsgEl ? prevMsgEl : requestedMsgEl;
			scrollTarget.scrollIntoView();
		}
	};

	HistoryView.prototype.scrollBottom = function() {
		this.scrollWindow.scrollTop = this.scrollWindow.scrollHeight;
	};

	HistoryView.prototype.updateRead = function HistoryView_updateRead () {
		if (focus.state !== 'focus') return; // we get scroll events even when the window is not focused
		var bottomElem = this._findBottomVisible();
		if (!bottomElem) return;
		var line = Line.get(bottomElem.getAttribute('data-id'));
		if (!line || line.time < this.room.latest_message_time) return;
		this.emit('hasread', this.room, line);
		this.queueDraw()
	};

	HistoryView.prototype.queueDraw = function HistoryView_queueDraw() {
		if (this.queued) return;
		this.queued = true;
		raf(this.redraw);
	};

	HistoryView.prototype._scrolled = function HistoryView__scrolled(direction, done) {
		if (this.mode === 'search') return;
		if (direction === 'bottom') {
			this.scrollMode = 'automatic';
			var debouncedUpdateRead	= debounce(this.updateRead.bind(this), 1500)
			debouncedUpdateRead();
			return done();
		} else {
			if (!this.room.empty) done();
		}
		var oldestLine = this.room.history[0];
		var options = {time_to: oldestLine && oldestLine.time || new Date()};
		this.emit('needhistory', this.room, options);
	};

	HistoryView.prototype.firstMsgLoaded = function HistoryView_firstMsgLoaded (history) {
		var firstLoadedMsg = history[0];
		if (firstLoadedMsg && new Date(firstLoadedMsg.time).getTime() === this.room.first_message_time)
			return true;
		return false;
	};

	HistoryView.prototype.lastMsgLoaded = function HistoryView_lastMsgLoaded (history) {
		var lastLoadedMsg = history[history.length - 1];
		if (lastLoadedMsg && new Date(lastLoadedMsg.time).getTime() === this.room.latest_message_time)
			return true;
		return false;
	};

	HistoryView.prototype.onGotHistory = function HistoryView_onGotHistory (direction) {
		this.room.loading = false;
		this.room.empty = false;
		var displayedHistory = this.mode === 'chat' ? this.room.history : this.room.searchHistory;
		this.isFirstMsgLoaded = this.firstMsgLoaded(displayedHistory);
		this.isLastMsgLoaded = this.lastMsgLoaded(displayedHistory);
		this.queueDraw();
	};

	HistoryView.prototype.noHistory = function HistoryView_noHistory() {
		this.room.empty = true;
		this.room.loading = false;
		this.isFirstMsgLoaded = false;
		this.isLastMsgLoaded = false;
		this.queueDraw();
	};

	HistoryView.prototype._findBottomVisible = function HistoryView__findBottomVisible() {
		var history = this.history.el;
		var scrollWindow = this.scrollWindow;
		var scrollBottom = scrollWindow.offsetTop + scrollWindow.scrollTop + scrollWindow.clientHeight;
		for (var i = history.children.length - 1; i >= 0; i--) {
			var child = history.children[i];
			var childBottom = child.offsetTop + child.offsetHeight;
			if (childBottom <= scrollBottom) return child;
		}
	};

	HistoryView.prototype.setRoom = function HistoryView_setRoom(room, msgID) {
		var self = this;
		this.requestedMsgID = null;
		if (this.room) this.room.history.off('removed');
		this.room = room;
		this.scroll.reset(); // reset, otherwise we won't get future events
		this.scrollMode = 'automatic';
		if (!msgID) {
			if (this.room.empty === undefined) {
				this.emit('needhistory', room);
			} else {
				this.isFirstMsgLoaded = this.firstMsgLoaded(room.history);
				this.isLastMsgLoaded = this.lastMsgLoaded(room.history);
			}
			this.mode = 'chat';
			this.queueDraw();
		} else {
			this.emit('requestMessage', room, msgID);
			this.room.loading = true;
		}
		this.redrawTyping();
		
		room.history.on('remove', function (msg, idx) {
			// find removed element and highlight it....
			// then redraw after timeout
			var el = qs("div.message[data-id='" + msg.id + "']", self.el);
			classes(el).add('removed');
			setTimeout(function () {
				// vdom seems to bug a bit so remove the class manually
				// otherwise queueDraw() should be enough
				classes(el).remove('removed');
				self.queueDraw();
			}, 1000);
		});
		room.off('change typing');
		room.on('change typing', function() {
			self.redrawTyping();
		});
	};

	HistoryView.prototype.redrawTyping = function HistoryView_redrawTyping() {
		render(this.typing, template('typingnotifications.jade', {
			room: this.room,
			mode: this.mode
		}));
	};

	HistoryView.prototype.toggleInvite = function HistoryView_toggleInvite (ev) {
		this.emit('toggleinvite', qs('.room-header .room-users-wrap'));
	};

	HistoryView.prototype.expandActivityList = function HistoryView_expandActivityList (ev) {
		var el = closest(ev.target, 'ul', true);
		classes(el).remove('list-previewed');
	};

	HistoryView.prototype.collapseActivityList = function HistoryView_collapseActivityList (ev) {
		var el = closest(ev.target, 'ul', true);
		classes(el).add('list-previewed');
	}

	HistoryView.prototype.onInput = function HistoryView_onInput (room, msg, options) {
		if (this.mode === 'search') this.emit('switchToChatMode', room);
		var attachments = options && options.attachments ? options.attachments : [];
		var newMessage = {
			clientSideID: (Math.random() + 1).toString(36).substring(7),
			text: msg,
			status: "pending",
			author: ui.user,
			time: new Date(),
			attachments: attachments,
			read: true,
			channel: room
		};
		this.unsentBuffer[room.id].push(newMessage);
		this.scrollMode = 'automatic';
		this.queueDraw();
		this.handlePendingMsg(newMessage);
	};

	HistoryView.prototype.findBufferedMsg = function HistoryView_findBufferedMsg (clientSideID) {
		var bufferedMsg = null;
		this.unsentBuffer[this.room.id].every(function(message) {
			if (clientSideID == message.clientSideID) {
				bufferedMsg = message;
				return false;
			}
			return true;
		});
		return bufferedMsg;
	};

	HistoryView.prototype.onNewMessage = function HistoryView_onNewMessage (line) {
		if (line.channel != this.room || this.mode === 'search') return;
		if (line.author == ui.user) {
			var bufferedMsg = this.findBufferedMsg(line.clientside_id);
			var roomUnsentMsgs = this.unsentBuffer[line.channel.id];
			if (bufferedMsg) roomUnsentMsgs.splice(roomUnsentMsgs.indexOf(bufferedMsg), 1);
		}
		setTimeout(this.queueDraw.bind(this), 200); // give pending msg enough time to complete bubbly effect
	};

	HistoryView.prototype.onNewPMOpened = function HistoryView_onNewPMOpened (pm) {
		// on new pms opened by the visitor
		this.unsentBuffer[pm.id] = [];
	};

	HistoryView.prototype.onNewRoom = function HistoryView_onNewRoon (channel) {
		// on new public rooms
		// new private rooms the visitor get invited to
		// new pms opened by the pm partner
		this.unsentBuffer[channel.id] = [];
	};

	HistoryView.prototype.onFocusMessage = function HistoryView_onFocusMessage (msgID) {
		this.mode = 'search';
		this.emit('switchToSearchMode');
		this.scroll.reset(); // reset, otherwise we won't get future events
		this.requestedMsgID = msgID;
		this.room.loading = false;
		this.room.empty = false;
		this.isFirstMsgLoaded = this.firstMsgLoaded(this.room.searchHistory);
		this.isLastMsgLoaded = this.lastMsgLoaded(this.room.searchHistory);
		this.redrawTyping();
		this.queueDraw();
	};

	HistoryView.prototype.resend = function HistoryView_resend (e) {
		var clientSideID = e.target.getAttribute('data-id');
		var bufferedMsg = this.findBufferedMsg(clientSideID);
		if (!bufferedMsg) return;
		bufferedMsg.status = "pending";
		this.queueDraw();
		this.handlePendingMsg(bufferedMsg);
	};

	HistoryView.prototype.handlePendingMsg = function HistoryView_handlePendingMsg (msg) {
		var options = {
			clientside_id: msg.clientSideID,
			attachments: msg.attachments		
		}
		this.emit('send', msg.channel, msg.text, options);

		setTimeout(function() {
			if (this.unsentBuffer[msg.channel.id].indexOf(msg) > -1) {
				msg.status = "unsent";
				this.queueDraw();
			}
		}.bind(this), 10000);
	};

	HistoryView.prototype.onUploading = function HistoryView_onUploading () {
		if (this.mode === 'chat') return;
		this.emit('switchToChatMode', this.room);
	};

/***/ },
/* 324 */
/***/ function(module, exports) {

	/**
	 * Expose `requestAnimationFrame()`.
	 */

	exports = module.exports = window.requestAnimationFrame
	  || window.webkitRequestAnimationFrame
	  || window.mozRequestAnimationFrame
	  || fallback;

	/**
	 * Fallback implementation.
	 */

	var prev = new Date().getTime();
	function fallback(fn) {
	  var curr = new Date().getTime();
	  var ms = Math.max(0, 16 - (curr - prev));
	  var req = setTimeout(fn, ms);
	  prev = curr;
	  return req;
	}

	/**
	 * Cancel.
	 */

	var cancel = window.cancelAnimationFrame
	  || window.webkitCancelAnimationFrame
	  || window.mozCancelAnimationFrame
	  || window.clearTimeout;

	exports.cancel = function(id){
	  cancel.call(window, id);
	};


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies
	 */

	var emitter = __webpack_require__(41);
	var transform = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"transform-property\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var redraw = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"redraw\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var afterTransition = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"after-transition\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var scale = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"scale-to-bounds\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var viewport = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"viewport\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var has3d = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"has-translate3d\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var Overlay = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"overlay\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var delegate = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"delegate\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var events = __webpack_require__(101);
	var nextTick = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"next-tick\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	/**
	 * Create the supported translate string.
	 * @param  {Int} x coordinate
	 * @param  {Int} y coordinate
	 * @return {String}
	 */

	function translateString(x, y){
	  return has3d
	    ? 'translate3d('+ x +'px, '+ y +'px, 0)'
	    : 'translate('+ x +'px, '+ y + 'px)';
	}

	/**
	 * Bootstrap-style API that allows designers to invoke zooming
	 * the element using markup
	 */

	var zoomListener = delegate.bind(document, '[data-zoom-url]', 'click', function(e){
	  new Zoom(e.target).show();
	});



	/**
	 * Javascript API.
	 * @param  {Element} el
	 * @param  {String} url
	 * @return {Zoom}
	 */

	module.exports = exports = Zoom;

	/**
	 * Zoom Constructor
	 * @param {Element} el
	 * @param {String} url
	 */

	function Zoom(el, url){
	  if (!(this instanceof Zoom)) return new Zoom(el, url);
	  this.thumb = el;
	  if (this.thumb.getAttribute('data-zoom-overlay')) this.overlay();
	  this.padding();
	  this.backgroundURL = url;
	  this.viewport = {};
	}

	emitter(Zoom.prototype);

	/**
	 * Enable overlay.
	 * @return {Zoom}
	 */

	Zoom.prototype.overlay = function(){
	  this._overlay = new Overlay('image-zoom-overlay');
	  return this;
	};

	/**
	 * Set padding (or should this be margin?) around the zoomed
	 * image.
	 *
	 * @param  {Number} num in pixels
	 * @return {Zoom}
	 */

	Zoom.prototype.padding = function(num){
	  this._padding = num || this.thumb.getAttribute('data-zoom-padding') || 0;
	  return this;
	};

	/**
	 * While our image is loading, we add a loading
	 * class to our target element.
	 *
	 * @param  {Function} fn
	 */

	Zoom.prototype.loadImage = function(fn){
	  if (this.hasLoaded) return fn();
	  var img = this.clone = new Image();
	  this.loaderTimer = setTimeout(function(){
	    if (!this.hasLoaded) this.loading();
	  }.bind(this), 50);
	  this.clone.onload = function(){
	    this.hasLoaded = true;
	    this.finishLoading();
	    this.imageWidth = img.width;
	    this.imageHeight = img.height;
	    fn();
	  }.bind(this);
	  img.src = this.src;
	};

	/**
	 * Add loading class
	 *
	 * @return {Zoom}
	 */

	Zoom.prototype.loading = function(){
	  this.emit('loading', this.thumb);
	  this.thumb.classList.add('loading');
	  return this;
	};

	/**
	 * Remove loading class
	 *
	 * @return {Zoom}
	 */

	Zoom.prototype.finishLoading = function(){
	  this.emit('end-loading', this.thumb);
	  window.clearTimeout(this.loaderTimer);
	  this.thumb.classList.remove('loading');
	  return this;
	};

	/**
	 * Get image dimensions
	 *
	 * @return {Zoom}
	 */

	Zoom.prototype.getDimensions = function(){
	  var pos = this.thumb.getBoundingClientRect();
	  this.origin = {
	    x : pos.left,
	    y : pos.top,
	    w : this.thumb.clientWidth,
	    h : this.thumb.clientHeight
	  };
	  this.src = this.thumb.getAttribute('data-zoom-url')
	    || this.backgroundURL
	    || this.thumb.src;
	  return this;
	};

	/**
	 * Append a clone of the image to the DOM in
	 * prep for our zoom animation.
	 *
	 * @return {Zoom}
	 */

	Zoom.prototype.appendClone = function(){
	  this.clone.classList.add('zoom-image-clone');
	  this.windowEvents = events(window, this);
	  this.windowEvents.bind('resize');
	  document.body.appendChild(this.clone);
	  return this;
	};

	/**
	 * On resize handler - recalc position of zoomed
	 * image.
	 */

	Zoom.prototype.onresize = function(){
	  this.determineZoomedSize();
	  this.updateStyles();
	};

	/**
	 * Determine size of zoomed image
	 *
	 * @return {Zoom}
	 */

	Zoom.prototype.determineZoomedSize = function(){
	  // image size
	  var iw = this.imageWidth;
	  var ih = this.imageHeight;

	  // viewport size
	  var vp = viewport();

	  // zoomed image max size
	  var target = scale(iw, ih, vp.width - this._padding, vp.height - this._padding);

	  // determine left & top position of zoomed image
	  var left = (vp.width / 2) - (target.width / 2);
	  var top = (vp.height / 2) - (target.height / 2);

	  this.target = {
	    x : left,
	    y: top,
	    w: target.width,
	    h: target.height
	  };

	  return this;
	};

	/**
	 * Yodate zoom styles
	 *
	 * @return {Zoom}
	 */

	Zoom.prototype.updateStyles = function(){
	  var t = this.target;
	  var s = this.clone.style;
	  s.width = t.w + 'px';
	  s.height = t.h + 'px';
	  s.left = t.x + 'px';
	  s.top = t.y + 'px';
	  this.emit('position updated', t);
	  return this;
	};

	/**
	 * Set original dimensions
	 *
	 * @return {Zoom}
	 */

	Zoom.prototype.setOriginalDeminsions = function(){
	  var o = this.origin;
	  var t = this.target;
	  this.updateStyles();

	  if (transform){
	    var scale = o.w / t.w;
	    var translateX = (o.x + (o.w / 2)) - (t.x + (t.w / 2));
	    var translateY = (o.y + (o.h / 2)) - (t.y + (t.h / 2));
	    var translate3d = translateString(translateX, translateY);
	    var scaleProp = ' scale('+ scale +')';
	    this.clone.style[transform] = translate3d + scaleProp;
	  }

	  return this;
	};

	/**
	 * Set transition Position
	 * @return {Zoom}
	 */

	Zoom.prototype.setTargetPosition = function(){
	  if (transform){
	    this.clone.style[transform] = translateString(0, 0) + ' scale(1)';
	  }
	  return this;
	};

	/**
	 * Show our zoomed image
	 *
	 * @param  {Event} e
	 */

	Zoom.prototype.show = function(e){
	  if (e) e.preventDefault();
	  if (this.isZoomed || this.isShowing) return;
	  this.getDimensions();
	  this.cancelZoom = false;
	  this.isShowing = true;

	  function onImageLoad() {
	    if (this.cancelZoom) return;
	    this.emit('showing');
	    if (this._overlay) this._overlay.show();
	    this.determineZoomedSize()
	      .setOriginalDeminsions()
	      .appendClone();
	    this.thumb.style.opacity = 0;
	    redraw(this.clone);
	    this.setTargetPosition();
	    this.isZoomed = true;
	    afterTransition.once(this.clone, function(){
	      this.emit('shown');
	    }.bind(this));
	  }

	  // bind these events before the image has loaded, so that
	  // it in effect 'cancels' the load if the user clicks
	  // outside the image while it is loading

	  nextTick(function(){
	    this.docEvents = events(document, this);
	    this.docEvents.bind('touchstart', 'hide');
	    this.docEvents.bind('click', 'hide');
	  }.bind(this));

	  this.loadImage(onImageLoad.bind(this));
	  return this;
	};

	/**
	 * Hide our zoomed image
	 * @param  {Event} e
	 * @return {Zoom}
	 */

	Zoom.prototype.hide = function(){
	  this.isShowing = false;

	  // cancel a loading state
	  if (!this.isZoomed) {
	    this.cancelZoom = true;
	    if (this.docEvents) this.docEvents.unbind();
	    this.emit('cancel');
	    this.finishLoading();
	    if (this._overlay) this._overlay.hide();
	    this.emit('hiding');
	    this.emit('hidden');
	    this.isZoomed = false;
	    return;
	  }

	  // hide our zoomed image
	  this.windowEvents.unbind();
	  this.docEvents.unbind();
	  this.setOriginalDeminsions();
	  this.emit('hiding');
	  if (this._overlay) this._overlay.hide();
	  this.isZoomed = false;
	  afterTransition.once(this.clone, function(){
	    this.thumb.style.opacity = 1;
	    this.clone.parentNode.removeChild(this.clone);
	    this.emit('hidden');
	  }.bind(this));
	  return this;
	};

	/**
	 * Enable plugin usage
	 *
	 * @param  {function} plugin
	 * @param  {Object} options
	 * @return {Zoom}
	 */

	Zoom.prototype.use = function(plugin, options){
	  plugin(this, options);
	  return this;
	};

	/**
	 * Unbind our event listener
	 */

	exports.stopListening = function(){
	  delegate.unbind(document, 'click', zoomListener, false);
	};


/***/ },
/* 326 */
/***/ function(module, exports) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	// TODO: this really makes sense to upstream
	module.exports = InfiniteScroll;

	function InfiniteScroll(el, fn, margin) {
		this.elem = el;
		this.fn = fn;
		this.margin = margin || 10;
		this.reset();
		this.bind();
	}

	InfiniteScroll.prototype.bind = function InfiniteScroll_bind() {
		var self = this;
		var elem = this.elem;
		var fn = this.fn;
		elem.addEventListener('scroll', function () {
			var sT = elem.scrollTop;
			var sTM = elem.scrollTopMax || Math.max(elem.scrollHeight - elem.clientHeight, 0);
			if (!self._top && sT < self.margin) {
				self._top = true;
				fn('top', function () { self._top = false; });
			} else if (!self._bottom && sT > sTM - self.margin) {
				self._bottom = true;
				fn('bottom', function () { self._bottom = false; });
			}
		});
	};

	InfiniteScroll.prototype.reset = function InfiniteScroll_reset() {
		this._top = this._bottom = false;
	};


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	var moment = module.exports = __webpack_require__(328);
	moment.tz.load(__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./data/packed/latest.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())));


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//! moment-timezone.js
	//! version : 0.2.0
	//! author : Tim Wood
	//! license : MIT
	//! github.com/moment/moment-timezone

	(function (root, factory) {
		"use strict";

		/*global define*/
		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));                 // AMD
		} else if (typeof exports === 'object') {
			module.exports = factory(require('moment')); // Node
		} else {
			factory(root.moment);                        // Browser
		}
	}(this, function (moment) {
		"use strict";

		// Do not load moment-timezone a second time.
		if (moment.tz !== undefined) { return moment; }

		var VERSION = "0.2.0",
			zones = {},
			links = {};

		/************************************
			Unpacking
		************************************/

		function charCodeToInt(charCode) {
			if (charCode > 96) {
				return charCode - 87;
			} else if (charCode > 64) {
				return charCode - 29;
			}
			return charCode - 48;
		}

		function unpackBase60(string) {
			var i = 0,
				parts = string.split('.'),
				whole = parts[0],
				fractional = parts[1] || '',
				multiplier = 1,
				num,
				out = 0,
				sign = 1;

			// handle negative numbers
			if (string.charCodeAt(0) === 45) {
				i = 1;
				sign = -1;
			}

			// handle digits before the decimal
			for (i; i < whole.length; i++) {
				num = charCodeToInt(whole.charCodeAt(i));
				out = 60 * out + num;
			}

			// handle digits after the decimal
			for (i = 0; i < fractional.length; i++) {
				multiplier = multiplier / 60;
				num = charCodeToInt(fractional.charCodeAt(i));
				out += num * multiplier;
			}

			return out * sign;
		}

		function arrayToInt (array) {
			for (var i = 0; i < array.length; i++) {
				array[i] = unpackBase60(array[i]);
			}
		}

		function intToUntil (array, length) {
			for (var i = 0; i < length; i++) {
				array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
			}

			array[length - 1] = Infinity;
		}

		function mapIndices (source, indices) {
			var out = [], i;

			for (i = 0; i < indices.length; i++) {
				out[i] = source[indices[i]];
			}

			return out;
		}

		function unpack (string) {
			var data = string.split('|'),
				offsets = data[2].split(' '),
				indices = data[3].split(''),
				untils  = data[4].split(' ');

			arrayToInt(offsets);
			arrayToInt(indices);
			arrayToInt(untils);

			intToUntil(untils, indices.length);

			return {
				name    : data[0],
				abbrs   : mapIndices(data[1].split(' '), indices),
				offsets : mapIndices(offsets, indices),
				untils  : untils
			};
		}

		/************************************
			Zone object
		************************************/

		function Zone (packedString) {
			if (packedString) {
				this._set(unpack(packedString));
			}
		}

		Zone.prototype = {
			_set : function (unpacked) {
				this.name    = unpacked.name;
				this.abbrs   = unpacked.abbrs;
				this.untils  = unpacked.untils;
				this.offsets = unpacked.offsets;
			},

			_index : function (timestamp) {
				var target = +timestamp,
					untils = this.untils,
					i;

				for (i = 0; i < untils.length; i++) {
					if (target < untils[i]) {
						return i;
					}
				}
			},

			parse : function (timestamp) {
				var target  = +timestamp,
					offsets = this.offsets,
					untils  = this.untils,
					max     = untils.length - 1,
					offset, offsetNext, offsetPrev, i;

				for (i = 0; i < max; i++) {
					offset     = offsets[i];
					offsetNext = offsets[i + 1];
					offsetPrev = offsets[i ? i - 1 : i];

					if (offset < offsetNext && tz.moveAmbiguousForward) {
						offset = offsetNext;
					} else if (offset > offsetPrev && tz.moveInvalidForward) {
						offset = offsetPrev;
					}

					if (target < untils[i] - (offset * 60000)) {
						return offsets[i];
					}
				}

				return offsets[max];
			},

			abbr : function (mom) {
				return this.abbrs[this._index(mom)];
			},

			offset : function (mom) {
				return this.offsets[this._index(mom)];
			}
		};

		/************************************
			Global Methods
		************************************/

		function normalizeName (name) {
			return (name || '').toLowerCase().replace(/\//g, '_');
		}

		function addZone (packed) {
			var i, zone, zoneName;

			if (typeof packed === "string") {
				packed = [packed];
			}

			for (i = 0; i < packed.length; i++) {
				zone = new Zone(packed[i]);
				zoneName = normalizeName(zone.name);
				zones[zoneName] = zone;
				upgradeLinksToZones(zoneName);
			}
		}

		function getZone (name) {
			return zones[normalizeName(name)] || null;
		}

		function getNames () {
			var i, out = [];

			for (i in zones) {
				if (zones.hasOwnProperty(i) && zones[i]) {
					out.push(zones[i].name);
				}
			}

			return out.sort();
		}

		function addLink (aliases) {
			var i, alias;

			if (typeof aliases === "string") {
				aliases = [aliases];
			}

			for (i = 0; i < aliases.length; i++) {
				alias = aliases[i].split('|');
				pushLink(alias[0], alias[1]);
				pushLink(alias[1], alias[0]);
			}
		}

		function upgradeLinksToZones (zoneName) {
			if (!links[zoneName]) {
				return;
			}

			var i,
				zone = zones[zoneName],
				linkNames = links[zoneName];

			for (i = 0; i < linkNames.length; i++) {
				copyZoneWithName(zone, linkNames[i]);
			}

			links[zoneName] = null;
		}

		function copyZoneWithName (zone, name) {
			var linkZone = zones[normalizeName(name)] = new Zone();
			linkZone._set(zone);
			linkZone.name = name;
		}

		function pushLink (zoneName, linkName) {
			zoneName = normalizeName(zoneName);

			if (zones[zoneName]) {
				copyZoneWithName(zones[zoneName], linkName);
			} else {
				links[zoneName] = links[zoneName] || [];
				links[zoneName].push(linkName);
			}
		}

		function loadData (data) {
			addZone(data.zones);
			addLink(data.links);
			tz.dataVersion = data.version;
		}

		function zoneExists (name) {
			if (!zoneExists.didShowError) {
				zoneExists.didShowError = true;
				if (typeof console !== 'undefined' && typeof console.error === 'function') {
					console.error("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
				}
			}
			return !!getZone(name);
		}

		function needsOffset (m) {
			return !!(m._a && (m._tzm === undefined));
		}

		function logError (message) {
			if (typeof console !== 'undefined' && typeof console.error === 'function') {
				console.error(message);
			}
		}

		/************************************
			moment.tz namespace
		************************************/

		function tz () {
			var args = Array.prototype.slice.call(arguments, 0, -1),
				name = arguments[arguments.length - 1],
				zone = getZone(name),
				out  = moment.utc.apply(null, args);

			if (zone && needsOffset(out)) {
				out.add('minutes', zone.parse(out));
			}

			out.tz(name);

			return out;
		}

		tz.version      = VERSION;
		tz.dataVersion  = '';
		tz._zones       = zones;
		tz._links       = links;
		tz.add          = addZone;
		tz.link         = addLink;
		tz.load         = loadData;
		tz.zone         = getZone;
		tz.zoneExists   = zoneExists; // deprecated in 0.1.0
		tz.names        = getNames;
		tz.Zone         = Zone;
		tz.unpack       = unpack;
		tz.unpackBase60 = unpackBase60;
		tz.needsOffset  = needsOffset;
		tz.moveInvalidForward   = true;
		tz.moveAmbiguousForward = false;

		/************************************
			Interface with Moment.js
		************************************/

		var fn = moment.fn;

		moment.tz = tz;

		moment.updateOffset = function (mom, keepTime) {
			var offset;
			if (mom._z) {
				offset = mom._z.offset(mom);
				if (Math.abs(offset) < 16) {
					offset = offset / 60;
				}
				mom.zone(offset, keepTime);
			}
		};

		fn.tz = function (name) {
			if (name) {
				this._z = getZone(name);
				if (this._z) {
					moment.updateOffset(this);
				} else {
					logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
				}
				return this;
			}
			if (this._z) { return this._z.name; }
		};

		function abbrWrap (old) {
			return function () {
				if (this._z) { return this._z.abbr(this); }
				return old.call(this);
			};
		}

		function resetZoneWrap (old) {
			return function () {
				this._z = null;
				return old.call(this);
			};
		}

		fn.zoneName = abbrWrap(fn.zoneName);
		fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
		fn.utc      = resetZoneWrap(fn.utc);

		// Cloning a moment should include the _z property.
		moment.momentProperties._z = null;

		// INJECT DATA

		return moment;
	}));


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {//! moment.js
	//! version : 2.7.0
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	(function (undefined) {

	    /************************************
	        Constants
	    ************************************/

	    var moment,
	        VERSION = "2.7.0",
	        // the global-scope this is NOT the global object in Node.js
	        globalScope = typeof global !== 'undefined' ? global : this,
	        oldGlobalMoment,
	        round = Math.round,
	        i,

	        YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,

	        // internal storage for language config files
	        languages = {},

	        // moment internal properties
	        momentProperties = {
	            _isAMomentObject: null,
	            _i : null,
	            _f : null,
	            _l : null,
	            _strict : null,
	            _tzm : null,
	            _isUTC : null,
	            _offset : null,  // optional. Combine with _isUTC
	            _pf : null,
	            _lang : null  // optional
	        },

	        // check for nodeJS
	        hasModule = (typeof module !== 'undefined' && module.exports),

	        // ASP.NET json date format regex
	        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
	        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

	        // format tokens
	        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

	        // parsing token regexes
	        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
	        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
	        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
	        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
	        parseTokenDigits = /\d+/, // nonzero number of digits
	        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
	        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        parseTokenT = /T/i, // T (ISO separator)
	        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
	        parseTokenOrdinal = /\d{1,2}/,

	        //strict parsing regexes
	        parseTokenOneDigit = /\d/, // 0 - 9
	        parseTokenTwoDigits = /\d\d/, // 00 - 99
	        parseTokenThreeDigits = /\d{3}/, // 000 - 999
	        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
	        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
	        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

	        // iso 8601 regex
	        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

	        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
	            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
	            ['YYYY-DDD', /\d{4}-\d{3}/]
	        ],

	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
	            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
	            ['HH:mm', /(T| )\d\d:\d\d/],
	            ['HH', /(T| )\d\d/]
	        ],

	        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
	        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

	        // getter and setter names
	        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
	        unitMillisecondFactors = {
	            'Milliseconds' : 1,
	            'Seconds' : 1e3,
	            'Minutes' : 6e4,
	            'Hours' : 36e5,
	            'Days' : 864e5,
	            'Months' : 2592e6,
	            'Years' : 31536e6
	        },

	        unitAliases = {
	            ms : 'millisecond',
	            s : 'second',
	            m : 'minute',
	            h : 'hour',
	            d : 'day',
	            D : 'date',
	            w : 'week',
	            W : 'isoWeek',
	            M : 'month',
	            Q : 'quarter',
	            y : 'year',
	            DDD : 'dayOfYear',
	            e : 'weekday',
	            E : 'isoWeekday',
	            gg: 'weekYear',
	            GG: 'isoWeekYear'
	        },

	        camelFunctions = {
	            dayofyear : 'dayOfYear',
	            isoweekday : 'isoWeekday',
	            isoweek : 'isoWeek',
	            weekyear : 'weekYear',
	            isoweekyear : 'isoWeekYear'
	        },

	        // format function strings
	        formatFunctions = {},

	        // default relative time thresholds
	        relativeTimeThresholds = {
	          s: 45,   //seconds to minutes
	          m: 45,   //minutes to hours
	          h: 22,   //hours to days
	          dd: 25,  //days to month (month == 1)
	          dm: 45,  //days to months (months > 1)
	          dy: 345  //days to year
	        },

	        // tokens to ordinalize and pad
	        ordinalizeTokens = 'DDD w W M D d'.split(' '),
	        paddedTokens = 'M D H h m s w W'.split(' '),

	        formatTokenFunctions = {
	            M    : function () {
	                return this.month() + 1;
	            },
	            MMM  : function (format) {
	                return this.lang().monthsShort(this, format);
	            },
	            MMMM : function (format) {
	                return this.lang().months(this, format);
	            },
	            D    : function () {
	                return this.date();
	            },
	            DDD  : function () {
	                return this.dayOfYear();
	            },
	            d    : function () {
	                return this.day();
	            },
	            dd   : function (format) {
	                return this.lang().weekdaysMin(this, format);
	            },
	            ddd  : function (format) {
	                return this.lang().weekdaysShort(this, format);
	            },
	            dddd : function (format) {
	                return this.lang().weekdays(this, format);
	            },
	            w    : function () {
	                return this.week();
	            },
	            W    : function () {
	                return this.isoWeek();
	            },
	            YY   : function () {
	                return leftZeroFill(this.year() % 100, 2);
	            },
	            YYYY : function () {
	                return leftZeroFill(this.year(), 4);
	            },
	            YYYYY : function () {
	                return leftZeroFill(this.year(), 5);
	            },
	            YYYYYY : function () {
	                var y = this.year(), sign = y >= 0 ? '+' : '-';
	                return sign + leftZeroFill(Math.abs(y), 6);
	            },
	            gg   : function () {
	                return leftZeroFill(this.weekYear() % 100, 2);
	            },
	            gggg : function () {
	                return leftZeroFill(this.weekYear(), 4);
	            },
	            ggggg : function () {
	                return leftZeroFill(this.weekYear(), 5);
	            },
	            GG   : function () {
	                return leftZeroFill(this.isoWeekYear() % 100, 2);
	            },
	            GGGG : function () {
	                return leftZeroFill(this.isoWeekYear(), 4);
	            },
	            GGGGG : function () {
	                return leftZeroFill(this.isoWeekYear(), 5);
	            },
	            e : function () {
	                return this.weekday();
	            },
	            E : function () {
	                return this.isoWeekday();
	            },
	            a    : function () {
	                return this.lang().meridiem(this.hours(), this.minutes(), true);
	            },
	            A    : function () {
	                return this.lang().meridiem(this.hours(), this.minutes(), false);
	            },
	            H    : function () {
	                return this.hours();
	            },
	            h    : function () {
	                return this.hours() % 12 || 12;
	            },
	            m    : function () {
	                return this.minutes();
	            },
	            s    : function () {
	                return this.seconds();
	            },
	            S    : function () {
	                return toInt(this.milliseconds() / 100);
	            },
	            SS   : function () {
	                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
	            },
	            SSS  : function () {
	                return leftZeroFill(this.milliseconds(), 3);
	            },
	            SSSS : function () {
	                return leftZeroFill(this.milliseconds(), 3);
	            },
	            Z    : function () {
	                var a = -this.zone(),
	                    b = "+";
	                if (a < 0) {
	                    a = -a;
	                    b = "-";
	                }
	                return b + leftZeroFill(toInt(a / 60), 2) + ":" + leftZeroFill(toInt(a) % 60, 2);
	            },
	            ZZ   : function () {
	                var a = -this.zone(),
	                    b = "+";
	                if (a < 0) {
	                    a = -a;
	                    b = "-";
	                }
	                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
	            },
	            z : function () {
	                return this.zoneAbbr();
	            },
	            zz : function () {
	                return this.zoneName();
	            },
	            X    : function () {
	                return this.unix();
	            },
	            Q : function () {
	                return this.quarter();
	            }
	        },

	        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

	    // Pick the first defined of two or three arguments. dfl comes from
	    // default.
	    function dfl(a, b, c) {
	        switch (arguments.length) {
	            case 2: return a != null ? a : b;
	            case 3: return a != null ? a : b != null ? b : c;
	            default: throw new Error("Implement me");
	        }
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object, and es5 standard is not very
	        // helpful.
	        return {
	            empty : false,
	            unusedTokens : [],
	            unusedInput : [],
	            overflow : -2,
	            charsLeftOver : 0,
	            nullInput : false,
	            invalidMonth : null,
	            invalidFormat : false,
	            userInvalidated : false,
	            iso: false
	        };
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;
	        function printMsg() {
	            if (moment.suppressDeprecationWarnings === false &&
	                    typeof console !== 'undefined' && console.warn) {
	                console.warn("Deprecation warning: " + msg);
	            }
	        }
	        return extend(function () {
	            if (firstTime) {
	                printMsg();
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    function padToken(func, count) {
	        return function (a) {
	            return leftZeroFill(func.call(this, a), count);
	        };
	    }
	    function ordinalizeToken(func, period) {
	        return function (a) {
	            return this.lang().ordinal(func.call(this, a), period);
	        };
	    }

	    while (ordinalizeTokens.length) {
	        i = ordinalizeTokens.pop();
	        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
	    }
	    while (paddedTokens.length) {
	        i = paddedTokens.pop();
	        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
	    }
	    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


	    /************************************
	        Constructors
	    ************************************/

	    function Language() {

	    }

	    // Moment prototype object
	    function Moment(config) {
	        checkOverflow(config);
	        extend(this, config);
	    }

	    // Duration Constructor
	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 36e5; // 1000 * 60 * 60
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;

	        this._data = {};

	        this._bubble();
	    }

	    /************************************
	        Helpers
	    ************************************/


	    function extend(a, b) {
	        for (var i in b) {
	            if (b.hasOwnProperty(i)) {
	                a[i] = b[i];
	            }
	        }

	        if (b.hasOwnProperty("toString")) {
	            a.toString = b.toString;
	        }

	        if (b.hasOwnProperty("valueOf")) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function cloneMoment(m) {
	        var result = {}, i;
	        for (i in m) {
	            if (m.hasOwnProperty(i) && momentProperties.hasOwnProperty(i)) {
	                result[i] = m[i];
	            }
	        }

	        return result;
	    }

	    function absRound(number) {
	        if (number < 0) {
	            return Math.ceil(number);
	        } else {
	            return Math.floor(number);
	        }
	    }

	    // left zero fill a number
	    // see http://jsperf.com/left-zero-filling for performance comparison
	    function leftZeroFill(number, targetLength, forceSign) {
	        var output = '' + Math.abs(number),
	            sign = number >= 0;

	        while (output.length < targetLength) {
	            output = '0' + output;
	        }
	        return (sign ? (forceSign ? '+' : '') : '-') + output;
	    }

	    // helper function for _.addTime and _.subtractTime
	    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = duration._days,
	            months = duration._months;
	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (milliseconds) {
	            mom._d.setTime(+mom._d + milliseconds * isAdding);
	        }
	        if (days) {
	            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            moment.updateOffset(mom, days || months);
	        }
	    }

	    // check if is an array
	    function isArray(input) {
	        return Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isDate(input) {
	        return  Object.prototype.toString.call(input) === '[object Date]' ||
	                input instanceof Date;
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function normalizeUnits(units) {
	        if (units) {
	            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
	            units = unitAliases[units] || camelFunctions[lowered] || lowered;
	        }
	        return units;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (inputObject.hasOwnProperty(prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    function makeList(field) {
	        var count, setter;

	        if (field.indexOf('week') === 0) {
	            count = 7;
	            setter = 'day';
	        }
	        else if (field.indexOf('month') === 0) {
	            count = 12;
	            setter = 'month';
	        }
	        else {
	            return;
	        }

	        moment[field] = function (format, index) {
	            var i, getter,
	                method = moment.fn._lang[field],
	                results = [];

	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }

	            getter = function (i) {
	                var m = moment().utc().set(setter, i);
	                return method.call(moment.fn._lang, m, format || '');
	            };

	            if (index != null) {
	                return getter(index);
	            }
	            else {
	                for (i = 0; i < count; i++) {
	                    results.push(getter(i));
	                }
	                return results;
	            }
	        };
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            if (coercedNumber >= 0) {
	                value = Math.floor(coercedNumber);
	            } else {
	                value = Math.ceil(coercedNumber);
	            }
	        }

	        return value;
	    }

	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }

	    function weeksInYear(year, dow, doy) {
	        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
	    }

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    function checkOverflow(m) {
	        var overflow;
	        if (m._a && m._pf.overflow === -2) {
	            overflow =
	                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
	                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
	                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
	                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
	                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
	                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }

	            m._pf.overflow = overflow;
	        }
	    }

	    function isValid(m) {
	        if (m._isValid == null) {
	            m._isValid = !isNaN(m._d.getTime()) &&
	                m._pf.overflow < 0 &&
	                !m._pf.empty &&
	                !m._pf.invalidMonth &&
	                !m._pf.nullInput &&
	                !m._pf.invalidFormat &&
	                !m._pf.userInvalidated;

	            if (m._strict) {
	                m._isValid = m._isValid &&
	                    m._pf.charsLeftOver === 0 &&
	                    m._pf.unusedTokens.length === 0;
	            }
	        }
	        return m._isValid;
	    }

	    function normalizeLanguage(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function makeAs(input, model) {
	        return model._isUTC ? moment(input).zone(model._offset || 0) :
	            moment(input).local();
	    }

	    /************************************
	        Languages
	    ************************************/


	    extend(Language.prototype, {

	        set : function (config) {
	            var prop, i;
	            for (i in config) {
	                prop = config[i];
	                if (typeof prop === 'function') {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	        },

	        _months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
	        months : function (m) {
	            return this._months[m.month()];
	        },

	        _monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
	        monthsShort : function (m) {
	            return this._monthsShort[m.month()];
	        },

	        monthsParse : function (monthName) {
	            var i, mom, regex;

	            if (!this._monthsParse) {
	                this._monthsParse = [];
	            }

	            for (i = 0; i < 12; i++) {
	                // make the regex if we don't have it already
	                if (!this._monthsParse[i]) {
	                    mom = moment.utc([2000, i]);
	                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	                }
	                // test the regex
	                if (this._monthsParse[i].test(monthName)) {
	                    return i;
	                }
	            }
	        },

	        _weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
	        weekdays : function (m) {
	            return this._weekdays[m.day()];
	        },

	        _weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
	        weekdaysShort : function (m) {
	            return this._weekdaysShort[m.day()];
	        },

	        _weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
	        weekdaysMin : function (m) {
	            return this._weekdaysMin[m.day()];
	        },

	        weekdaysParse : function (weekdayName) {
	            var i, mom, regex;

	            if (!this._weekdaysParse) {
	                this._weekdaysParse = [];
	            }

	            for (i = 0; i < 7; i++) {
	                // make the regex if we don't have it already
	                if (!this._weekdaysParse[i]) {
	                    mom = moment([2000, 1]).day(i);
	                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	                }
	                // test the regex
	                if (this._weekdaysParse[i].test(weekdayName)) {
	                    return i;
	                }
	            }
	        },

	        _longDateFormat : {
	            LT : "h:mm A",
	            L : "MM/DD/YYYY",
	            LL : "MMMM D YYYY",
	            LLL : "MMMM D YYYY LT",
	            LLLL : "dddd, MMMM D YYYY LT"
	        },
	        longDateFormat : function (key) {
	            var output = this._longDateFormat[key];
	            if (!output && this._longDateFormat[key.toUpperCase()]) {
	                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
	                    return val.slice(1);
	                });
	                this._longDateFormat[key] = output;
	            }
	            return output;
	        },

	        isPM : function (input) {
	            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	            // Using charAt should be more compatible.
	            return ((input + '').toLowerCase().charAt(0) === 'p');
	        },

	        _meridiemParse : /[ap]\.?m?\.?/i,
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'pm' : 'PM';
	            } else {
	                return isLower ? 'am' : 'AM';
	            }
	        },

	        _calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendar[key];
	            return typeof output === 'function' ? output.apply(mom) : output;
	        },

	        _relativeTime : {
	            future : "in %s",
	            past : "%s ago",
	            s : "a few seconds",
	            m : "a minute",
	            mm : "%d minutes",
	            h : "an hour",
	            hh : "%d hours",
	            d : "a day",
	            dd : "%d days",
	            M : "a month",
	            MM : "%d months",
	            y : "a year",
	            yy : "%d years"
	        },
	        relativeTime : function (number, withoutSuffix, string, isFuture) {
	            var output = this._relativeTime[string];
	            return (typeof output === 'function') ?
	                output(number, withoutSuffix, string, isFuture) :
	                output.replace(/%d/i, number);
	        },
	        pastFuture : function (diff, output) {
	            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
	        },

	        ordinal : function (number) {
	            return this._ordinal.replace("%d", number);
	        },
	        _ordinal : "%d",

	        preparse : function (string) {
	            return string;
	        },

	        postformat : function (string) {
	            return string;
	        },

	        week : function (mom) {
	            return weekOfYear(mom, this._week.dow, this._week.doy).week;
	        },

	        _week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        },

	        _invalidDate: 'Invalid date',
	        invalidDate: function () {
	            return this._invalidDate;
	        }
	    });

	    // Loads a language definition into the `languages` cache.  The function
	    // takes a key and optionally values.  If not in the browser and no values
	    // are provided, it will load the language file module.  As a convenience,
	    // this function also returns the language values.
	    function loadLang(key, values) {
	        values.abbr = key;
	        if (!languages[key]) {
	            languages[key] = new Language();
	        }
	        languages[key].set(values);
	        return languages[key];
	    }

	    // Remove a language from the `languages` cache. Mostly useful in tests.
	    function unloadLang(key) {
	        delete languages[key];
	    }

	    // Determines which language definition to use and returns it.
	    //
	    // With no parameters, it will return the global language.  If you
	    // pass in a language key, such as 'en', it will return the
	    // definition for 'en', so long as 'en' has already been loaded using
	    // moment.lang.
	    function getLangDefinition(key) {
	        var i = 0, j, lang, next, split,
	            get = function (k) {
	                if (!languages[k] && hasModule) {
	                    try {
	                        __webpack_require__(331)("./" + k);
	                    } catch (e) { }
	                }
	                return languages[k];
	            };

	        if (!key) {
	            return moment.fn._lang;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            lang = get(key);
	            if (lang) {
	                return lang;
	            }
	            key = [key];
	        }

	        //pick the language from the array
	        //try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	        //substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	        while (i < key.length) {
	            split = normalizeLanguage(key[i]).split('-');
	            j = split.length;
	            next = normalizeLanguage(key[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                lang = get(split.slice(0, j).join('-'));
	                if (lang) {
	                    return lang;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return moment.fn._lang;
	    }

	    /************************************
	        Formatting
	    ************************************/


	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, "");
	        }
	        return input.replace(/\\/g, "");
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = "";
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {

	        if (!m.isValid()) {
	            return m.lang().invalidDate();
	        }

	        format = expandFormat(format, m.lang());

	        if (!formatFunctions[format]) {
	            formatFunctions[format] = makeFormatFunction(format);
	        }

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, lang) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return lang.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }


	    /************************************
	        Parsing
	    ************************************/


	    // get the regex to find the next token
	    function getParseRegexForToken(token, config) {
	        var a, strict = config._strict;
	        switch (token) {
	        case 'Q':
	            return parseTokenOneDigit;
	        case 'DDDD':
	            return parseTokenThreeDigits;
	        case 'YYYY':
	        case 'GGGG':
	        case 'gggg':
	            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
	        case 'Y':
	        case 'G':
	        case 'g':
	            return parseTokenSignedNumber;
	        case 'YYYYYY':
	        case 'YYYYY':
	        case 'GGGGG':
	        case 'ggggg':
	            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
	        case 'S':
	            if (strict) { return parseTokenOneDigit; }
	            /* falls through */
	        case 'SS':
	            if (strict) { return parseTokenTwoDigits; }
	            /* falls through */
	        case 'SSS':
	            if (strict) { return parseTokenThreeDigits; }
	            /* falls through */
	        case 'DDD':
	            return parseTokenOneToThreeDigits;
	        case 'MMM':
	        case 'MMMM':
	        case 'dd':
	        case 'ddd':
	        case 'dddd':
	            return parseTokenWord;
	        case 'a':
	        case 'A':
	            return getLangDefinition(config._l)._meridiemParse;
	        case 'X':
	            return parseTokenTimestampMs;
	        case 'Z':
	        case 'ZZ':
	            return parseTokenTimezone;
	        case 'T':
	            return parseTokenT;
	        case 'SSSS':
	            return parseTokenDigits;
	        case 'MM':
	        case 'DD':
	        case 'YY':
	        case 'GG':
	        case 'gg':
	        case 'HH':
	        case 'hh':
	        case 'mm':
	        case 'ss':
	        case 'ww':
	        case 'WW':
	            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
	        case 'M':
	        case 'D':
	        case 'd':
	        case 'H':
	        case 'h':
	        case 'm':
	        case 's':
	        case 'w':
	        case 'W':
	        case 'e':
	        case 'E':
	            return parseTokenOneOrTwoDigits;
	        case 'Do':
	            return parseTokenOrdinal;
	        default :
	            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), "i"));
	            return a;
	        }
	    }

	    function timezoneMinutesFromString(string) {
	        string = string || "";
	        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
	            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
	            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
	            minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return parts[0] === '+' ? -minutes : minutes;
	    }

	    // function to convert string input to date
	    function addTimeToArrayFromToken(token, input, config) {
	        var a, datePartArray = config._a;

	        switch (token) {
	        // QUARTER
	        case 'Q':
	            if (input != null) {
	                datePartArray[MONTH] = (toInt(input) - 1) * 3;
	            }
	            break;
	        // MONTH
	        case 'M' : // fall through to MM
	        case 'MM' :
	            if (input != null) {
	                datePartArray[MONTH] = toInt(input) - 1;
	            }
	            break;
	        case 'MMM' : // fall through to MMMM
	        case 'MMMM' :
	            a = getLangDefinition(config._l).monthsParse(input);
	            // if we didn't find a month name, mark the date as invalid.
	            if (a != null) {
	                datePartArray[MONTH] = a;
	            } else {
	                config._pf.invalidMonth = input;
	            }
	            break;
	        // DAY OF MONTH
	        case 'D' : // fall through to DD
	        case 'DD' :
	            if (input != null) {
	                datePartArray[DATE] = toInt(input);
	            }
	            break;
	        case 'Do' :
	            if (input != null) {
	                datePartArray[DATE] = toInt(parseInt(input, 10));
	            }
	            break;
	        // DAY OF YEAR
	        case 'DDD' : // fall through to DDDD
	        case 'DDDD' :
	            if (input != null) {
	                config._dayOfYear = toInt(input);
	            }

	            break;
	        // YEAR
	        case 'YY' :
	            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
	            break;
	        case 'YYYY' :
	        case 'YYYYY' :
	        case 'YYYYYY' :
	            datePartArray[YEAR] = toInt(input);
	            break;
	        // AM / PM
	        case 'a' : // fall through to A
	        case 'A' :
	            config._isPm = getLangDefinition(config._l).isPM(input);
	            break;
	        // 24 HOUR
	        case 'H' : // fall through to hh
	        case 'HH' : // fall through to hh
	        case 'h' : // fall through to hh
	        case 'hh' :
	            datePartArray[HOUR] = toInt(input);
	            break;
	        // MINUTE
	        case 'm' : // fall through to mm
	        case 'mm' :
	            datePartArray[MINUTE] = toInt(input);
	            break;
	        // SECOND
	        case 's' : // fall through to ss
	        case 'ss' :
	            datePartArray[SECOND] = toInt(input);
	            break;
	        // MILLISECOND
	        case 'S' :
	        case 'SS' :
	        case 'SSS' :
	        case 'SSSS' :
	            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
	            break;
	        // UNIX TIMESTAMP WITH MS
	        case 'X':
	            config._d = new Date(parseFloat(input) * 1000);
	            break;
	        // TIMEZONE
	        case 'Z' : // fall through to ZZ
	        case 'ZZ' :
	            config._useUTC = true;
	            config._tzm = timezoneMinutesFromString(input);
	            break;
	        // WEEKDAY - human
	        case 'dd':
	        case 'ddd':
	        case 'dddd':
	            a = getLangDefinition(config._l).weekdaysParse(input);
	            // if we didn't get a weekday name, mark the date as invalid
	            if (a != null) {
	                config._w = config._w || {};
	                config._w['d'] = a;
	            } else {
	                config._pf.invalidWeekday = input;
	            }
	            break;
	        // WEEK, WEEK DAY - numeric
	        case 'w':
	        case 'ww':
	        case 'W':
	        case 'WW':
	        case 'd':
	        case 'e':
	        case 'E':
	            token = token.substr(0, 1);
	            /* falls through */
	        case 'gggg':
	        case 'GGGG':
	        case 'GGGGG':
	            token = token.substr(0, 2);
	            if (input) {
	                config._w = config._w || {};
	                config._w[token] = toInt(input);
	            }
	            break;
	        case 'gg':
	        case 'GG':
	            config._w = config._w || {};
	            config._w[token] = moment.parseTwoDigitYear(input);
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, lang;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
	            week = dfl(w.W, 1);
	            weekday = dfl(w.E, 1);
	        } else {
	            lang = getLangDefinition(config._l);
	            dow = lang._week.dow;
	            doy = lang._week.doy;

	            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
	            week = dfl(w.w, 1);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < dow) {
	                    ++week;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function dateFromConfig(config) {
	        var i, date, input = [], currentDate, yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                config._pf._overflowDayOfYear = true;
	            }

	            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
	        // Apply timezone offset from input. The actual zone can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
	        }
	    }

	    function dateFromObject(config) {
	        var normalizedInput;

	        if (config._d) {
	            return;
	        }

	        normalizedInput = normalizeObjectUnits(config._i);
	        config._a = [
	            normalizedInput.year,
	            normalizedInput.month,
	            normalizedInput.day,
	            normalizedInput.hour,
	            normalizedInput.minute,
	            normalizedInput.second,
	            normalizedInput.millisecond
	        ];

	        dateFromConfig(config);
	    }

	    function currentDateArray(config) {
	        var now = new Date();
	        if (config._useUTC) {
	            return [
	                now.getUTCFullYear(),
	                now.getUTCMonth(),
	                now.getUTCDate()
	            ];
	        } else {
	            return [now.getFullYear(), now.getMonth(), now.getDate()];
	        }
	    }

	    // date from string and format string
	    function makeDateFromStringAndFormat(config) {

	        if (config._f === moment.ISO_8601) {
	            parseISO(config);
	            return;
	        }

	        config._a = [];
	        config._pf.empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var lang = getLangDefinition(config._l),
	            string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, lang).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    config._pf.unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    config._pf.empty = false;
	                }
	                else {
	                    config._pf.unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                config._pf.unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            config._pf.unusedInput.push(string);
	        }

	        // handle am pm
	        if (config._isPm && config._a[HOUR] < 12) {
	            config._a[HOUR] += 12;
	        }
	        // if is 12 am, change hours to 0
	        if (config._isPm === false && config._a[HOUR] === 12) {
	            config._a[HOUR] = 0;
	        }

	        dateFromConfig(config);
	        checkOverflow(config);
	    }

	    function unescapeFormat(s) {
	        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        });
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function regexpEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    // date from string and array of format strings
	    function makeDateFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            config._pf.invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = extend({}, config);
	            tempConfig._pf = defaultParsingFlags();
	            tempConfig._f = config._f[i];
	            makeDateFromStringAndFormat(tempConfig);

	            if (!isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += tempConfig._pf.charsLeftOver;

	            //or tokens
	            currentScore += tempConfig._pf.unusedTokens.length * 10;

	            tempConfig._pf.score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    // date from iso format
	    function parseISO(config) {
	        var i, l,
	            string = config._i,
	            match = isoRegex.exec(string);

	        if (match) {
	            config._pf.iso = true;
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(string)) {
	                    // match[5] should be "T" or undefined
	                    config._f = isoDates[i][0] + (match[6] || " ");
	                    break;
	                }
	            }
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(string)) {
	                    config._f += isoTimes[i][0];
	                    break;
	                }
	            }
	            if (string.match(parseTokenTimezone)) {
	                config._f += "Z";
	            }
	            makeDateFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function makeDateFromString(config) {
	        parseISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            moment.createFromInputFallback(config);
	        }
	    }

	    function makeDateFromInput(config) {
	        var input = config._i,
	            matched = aspNetJsonRegex.exec(input);

	        if (input === undefined) {
	            config._d = new Date();
	        } else if (matched) {
	            config._d = new Date(+matched[1]);
	        } else if (typeof input === 'string') {
	            makeDateFromString(config);
	        } else if (isArray(input)) {
	            config._a = input.slice(0);
	            dateFromConfig(config);
	        } else if (isDate(input)) {
	            config._d = new Date(+input);
	        } else if (typeof(input) === 'object') {
	            dateFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            moment.createFromInputFallback(config);
	        }
	    }

	    function makeDate(y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);

	        //the date constructor doesn't accept years < 1970
	        if (y < 1970) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function makeUTCDate(y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	        if (y < 1970) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    function parseWeekday(input, language) {
	        if (typeof input === 'string') {
	            if (!isNaN(input)) {
	                input = parseInt(input, 10);
	            }
	            else {
	                input = language.weekdaysParse(input);
	                if (typeof input !== 'number') {
	                    return null;
	                }
	            }
	        }
	        return input;
	    }

	    /************************************
	        Relative Time
	    ************************************/


	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {
	        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function relativeTime(milliseconds, withoutSuffix, lang) {
	        var seconds = round(Math.abs(milliseconds) / 1000),
	            minutes = round(seconds / 60),
	            hours = round(minutes / 60),
	            days = round(hours / 24),
	            years = round(days / 365),
	            args = seconds < relativeTimeThresholds.s  && ['s', seconds] ||
	                minutes === 1 && ['m'] ||
	                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
	                hours === 1 && ['h'] ||
	                hours < relativeTimeThresholds.h && ['hh', hours] ||
	                days === 1 && ['d'] ||
	                days <= relativeTimeThresholds.dd && ['dd', days] ||
	                days <= relativeTimeThresholds.dm && ['M'] ||
	                days < relativeTimeThresholds.dy && ['MM', round(days / 30)] ||
	                years === 1 && ['y'] || ['yy', years];
	        args[2] = withoutSuffix;
	        args[3] = milliseconds > 0;
	        args[4] = lang;
	        return substituteTimeAgo.apply({}, args);
	    }


	    /************************************
	        Week of Year
	    ************************************/


	    // firstDayOfWeek       0 = sun, 6 = sat
	    //                      the day of the week that starts the week
	    //                      (usually sunday or monday)
	    // firstDayOfWeekOfYear 0 = sun, 6 = sat
	    //                      the first week is the week that contains the first
	    //                      of this day of the week
	    //                      (eg. ISO weeks use thursday (4))
	    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
	        var end = firstDayOfWeekOfYear - firstDayOfWeek,
	            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
	            adjustedMoment;


	        if (daysToDayOfWeek > end) {
	            daysToDayOfWeek -= 7;
	        }

	        if (daysToDayOfWeek < end - 7) {
	            daysToDayOfWeek += 7;
	        }

	        adjustedMoment = moment(mom).add('d', daysToDayOfWeek);
	        return {
	            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
	            year: adjustedMoment.year()
	        };
	    }

	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
	        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

	        d = d === 0 ? 7 : d;
	        weekday = weekday != null ? weekday : firstDayOfWeek;
	        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
	        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

	        return {
	            year: dayOfYear > 0 ? year : year - 1,
	            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
	        };
	    }

	    /************************************
	        Top Level Functions
	    ************************************/

	    function makeMoment(config) {
	        var input = config._i,
	            format = config._f;

	        if (input === null || (format === undefined && input === '')) {
	            return moment.invalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = getLangDefinition().preparse(input);
	        }

	        if (moment.isMoment(input)) {
	            config = cloneMoment(input);

	            config._d = new Date(+input._d);
	        } else if (format) {
	            if (isArray(format)) {
	                makeDateFromStringAndArray(config);
	            } else {
	                makeDateFromStringAndFormat(config);
	            }
	        } else {
	            makeDateFromInput(config);
	        }

	        return new Moment(config);
	    }

	    moment = function (input, format, lang, strict) {
	        var c;

	        if (typeof(lang) === "boolean") {
	            strict = lang;
	            lang = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c = {};
	        c._isAMomentObject = true;
	        c._i = input;
	        c._f = format;
	        c._l = lang;
	        c._strict = strict;
	        c._isUTC = false;
	        c._pf = defaultParsingFlags();

	        return makeMoment(c);
	    };

	    moment.suppressDeprecationWarnings = false;

	    moment.createFromInputFallback = deprecate(
	            "moment construction falls back to js Date. This is " +
	            "discouraged and will be removed in upcoming major " +
	            "release. Please refer to " +
	            "https://github.com/moment/moment/issues/1407 for more info.",
	            function (config) {
	        config._d = new Date(config._i);
	    });

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return moment();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    moment.min = function () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    };

	    moment.max = function () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    };

	    // creating with utc
	    moment.utc = function (input, format, lang, strict) {
	        var c;

	        if (typeof(lang) === "boolean") {
	            strict = lang;
	            lang = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c = {};
	        c._isAMomentObject = true;
	        c._useUTC = true;
	        c._isUTC = true;
	        c._l = lang;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	        c._pf = defaultParsingFlags();

	        return makeMoment(c).utc();
	    };

	    // creating with unix timestamp (in seconds)
	    moment.unix = function (input) {
	        return moment(input * 1000);
	    };

	    // duration
	    moment.duration = function (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            parseIso;

	        if (moment.isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
	            sign = (match[1] === "-") ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(match[MILLISECOND]) * sign
	            };
	        } else if (!!(match = isoDurationRegex.exec(input))) {
	            sign = (match[1] === "-") ? -1 : 1;
	            parseIso = function (inp) {
	                // We'd normally use ~~inp for this, but unfortunately it also
	                // converts floats to ints.
	                // inp may be undefined, so careful calling replace on it.
	                var res = inp && parseFloat(inp.replace(',', '.'));
	                // apply sign while we're at it
	                return (isNaN(res) ? 0 : res) * sign;
	            };
	            duration = {
	                y: parseIso(match[2]),
	                M: parseIso(match[3]),
	                d: parseIso(match[4]),
	                h: parseIso(match[5]),
	                m: parseIso(match[6]),
	                s: parseIso(match[7]),
	                w: parseIso(match[8])
	            };
	        }

	        ret = new Duration(duration);

	        if (moment.isDuration(input) && input.hasOwnProperty('_lang')) {
	            ret._lang = input._lang;
	        }

	        return ret;
	    };

	    // version number
	    moment.version = VERSION;

	    // default format
	    moment.defaultFormat = isoFormat;

	    // constant that refers to the ISO standard
	    moment.ISO_8601 = function () {};

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    moment.momentProperties = momentProperties;

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    moment.updateOffset = function () {};

	    // This function allows you to set a threshold for relative time strings
	    moment.relativeTimeThreshold = function(threshold, limit) {
	      if (relativeTimeThresholds[threshold] === undefined) {
	        return false;
	      }
	      relativeTimeThresholds[threshold] = limit;
	      return true;
	    };

	    // This function will load languages and then set the global language.  If
	    // no arguments are passed in, it will simply return the current global
	    // language key.
	    moment.lang = function (key, values) {
	        var r;
	        if (!key) {
	            return moment.fn._lang._abbr;
	        }
	        if (values) {
	            loadLang(normalizeLanguage(key), values);
	        } else if (values === null) {
	            unloadLang(key);
	            key = 'en';
	        } else if (!languages[key]) {
	            getLangDefinition(key);
	        }
	        r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);
	        return r._abbr;
	    };

	    // returns language data
	    moment.langData = function (key) {
	        if (key && key._lang && key._lang._abbr) {
	            key = key._lang._abbr;
	        }
	        return getLangDefinition(key);
	    };

	    // compare moment object
	    moment.isMoment = function (obj) {
	        return obj instanceof Moment ||
	            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));
	    };

	    // for typechecking Duration objects
	    moment.isDuration = function (obj) {
	        return obj instanceof Duration;
	    };

	    for (i = lists.length - 1; i >= 0; --i) {
	        makeList(lists[i]);
	    }

	    moment.normalizeUnits = function (units) {
	        return normalizeUnits(units);
	    };

	    moment.invalid = function (flags) {
	        var m = moment.utc(NaN);
	        if (flags != null) {
	            extend(m._pf, flags);
	        }
	        else {
	            m._pf.userInvalidated = true;
	        }

	        return m;
	    };

	    moment.parseZone = function () {
	        return moment.apply(null, arguments).parseZone();
	    };

	    moment.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    /************************************
	        Moment Prototype
	    ************************************/


	    extend(moment.fn = Moment.prototype, {

	        clone : function () {
	            return moment(this);
	        },

	        valueOf : function () {
	            return +this._d + ((this._offset || 0) * 60000);
	        },

	        unix : function () {
	            return Math.floor(+this / 1000);
	        },

	        toString : function () {
	            return this.clone().lang('en').format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
	        },

	        toDate : function () {
	            return this._offset ? new Date(+this) : this._d;
	        },

	        toISOString : function () {
	            var m = moment(this).utc();
	            if (0 < m.year() && m.year() <= 9999) {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            } else {
	                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        },

	        toArray : function () {
	            var m = this;
	            return [
	                m.year(),
	                m.month(),
	                m.date(),
	                m.hours(),
	                m.minutes(),
	                m.seconds(),
	                m.milliseconds()
	            ];
	        },

	        isValid : function () {
	            return isValid(this);
	        },

	        isDSTShifted : function () {

	            if (this._a) {
	                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
	            }

	            return false;
	        },

	        parsingFlags : function () {
	            return extend({}, this._pf);
	        },

	        invalidAt: function () {
	            return this._pf.overflow;
	        },

	        utc : function () {
	            return this.zone(0);
	        },

	        local : function () {
	            this.zone(0);
	            this._isUTC = false;
	            return this;
	        },

	        format : function (inputString) {
	            var output = formatMoment(this, inputString || moment.defaultFormat);
	            return this.lang().postformat(output);
	        },

	        add : function (input, val) {
	            var dur;
	            // switch args to support add('s', 1) and add(1, 's')
	            if (typeof input === 'string' && typeof val === 'string') {
	                dur = moment.duration(isNaN(+val) ? +input : +val, isNaN(+val) ? val : input);
	            } else if (typeof input === 'string') {
	                dur = moment.duration(+val, input);
	            } else {
	                dur = moment.duration(input, val);
	            }
	            addOrSubtractDurationFromMoment(this, dur, 1);
	            return this;
	        },

	        subtract : function (input, val) {
	            var dur;
	            // switch args to support subtract('s', 1) and subtract(1, 's')
	            if (typeof input === 'string' && typeof val === 'string') {
	                dur = moment.duration(isNaN(+val) ? +input : +val, isNaN(+val) ? val : input);
	            } else if (typeof input === 'string') {
	                dur = moment.duration(+val, input);
	            } else {
	                dur = moment.duration(input, val);
	            }
	            addOrSubtractDurationFromMoment(this, dur, -1);
	            return this;
	        },

	        diff : function (input, units, asFloat) {
	            var that = makeAs(input, this),
	                zoneDiff = (this.zone() - that.zone()) * 6e4,
	                diff, output;

	            units = normalizeUnits(units);

	            if (units === 'year' || units === 'month') {
	                // average number of days in the months in the given dates
	                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
	                // difference in months
	                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
	                // adjust by taking difference in days, average number of days
	                // and dst in the given months.
	                output += ((this - moment(this).startOf('month')) -
	                        (that - moment(that).startOf('month'))) / diff;
	                // same as above but with zones, to negate all dst
	                output -= ((this.zone() - moment(this).startOf('month').zone()) -
	                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;
	                if (units === 'year') {
	                    output = output / 12;
	                }
	            } else {
	                diff = (this - that);
	                output = units === 'second' ? diff / 1e3 : // 1000
	                    units === 'minute' ? diff / 6e4 : // 1000 * 60
	                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
	                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                    diff;
	            }
	            return asFloat ? output : absRound(output);
	        },

	        from : function (time, withoutSuffix) {
	            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);
	        },

	        fromNow : function (withoutSuffix) {
	            return this.from(moment(), withoutSuffix);
	        },

	        calendar : function (time) {
	            // We want to compare the start of today, vs this.
	            // Getting start-of-today depends on whether we're zone'd or not.
	            var now = time || moment(),
	                sod = makeAs(now, this).startOf('day'),
	                diff = this.diff(sod, 'days', true),
	                format = diff < -6 ? 'sameElse' :
	                    diff < -1 ? 'lastWeek' :
	                    diff < 0 ? 'lastDay' :
	                    diff < 1 ? 'sameDay' :
	                    diff < 2 ? 'nextDay' :
	                    diff < 7 ? 'nextWeek' : 'sameElse';
	            return this.format(this.lang().calendar(format, this));
	        },

	        isLeapYear : function () {
	            return isLeapYear(this.year());
	        },

	        isDST : function () {
	            return (this.zone() < this.clone().month(0).zone() ||
	                this.zone() < this.clone().month(5).zone());
	        },

	        day : function (input) {
	            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	            if (input != null) {
	                input = parseWeekday(input, this.lang());
	                return this.add({ d : input - day });
	            } else {
	                return day;
	            }
	        },

	        month : makeAccessor('Month', true),

	        startOf: function (units) {
	            units = normalizeUnits(units);
	            // the following switch intentionally omits break keywords
	            // to utilize falling through the cases.
	            switch (units) {
	            case 'year':
	                this.month(0);
	                /* falls through */
	            case 'quarter':
	            case 'month':
	                this.date(1);
	                /* falls through */
	            case 'week':
	            case 'isoWeek':
	            case 'day':
	                this.hours(0);
	                /* falls through */
	            case 'hour':
	                this.minutes(0);
	                /* falls through */
	            case 'minute':
	                this.seconds(0);
	                /* falls through */
	            case 'second':
	                this.milliseconds(0);
	                /* falls through */
	            }

	            // weeks are a special case
	            if (units === 'week') {
	                this.weekday(0);
	            } else if (units === 'isoWeek') {
	                this.isoWeekday(1);
	            }

	            // quarters are also special
	            if (units === 'quarter') {
	                this.month(Math.floor(this.month() / 3) * 3);
	            }

	            return this;
	        },

	        endOf: function (units) {
	            units = normalizeUnits(units);
	            return this.startOf(units).add((units === 'isoWeek' ? 'week' : units), 1).subtract('ms', 1);
	        },

	        isAfter: function (input, units) {
	            units = typeof units !== 'undefined' ? units : 'millisecond';
	            return +this.clone().startOf(units) > +moment(input).startOf(units);
	        },

	        isBefore: function (input, units) {
	            units = typeof units !== 'undefined' ? units : 'millisecond';
	            return +this.clone().startOf(units) < +moment(input).startOf(units);
	        },

	        isSame: function (input, units) {
	            units = units || 'ms';
	            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
	        },

	        min: deprecate(
	                 "moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",
	                 function (other) {
	                     other = moment.apply(null, arguments);
	                     return other < this ? this : other;
	                 }
	         ),

	        max: deprecate(
	                "moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",
	                function (other) {
	                    other = moment.apply(null, arguments);
	                    return other > this ? this : other;
	                }
	        ),

	        // keepTime = true means only change the timezone, without affecting
	        // the local hour. So 5:31:26 +0300 --[zone(2, true)]--> 5:31:26 +0200
	        // It is possible that 5:31:26 doesn't exist int zone +0200, so we
	        // adjust the time as needed, to be valid.
	        //
	        // Keeping the time actually adds/subtracts (one hour)
	        // from the actual represented time. That is why we call updateOffset
	        // a second time. In case it wants us to change the offset again
	        // _changeInProgress == true case, then we have to adjust, because
	        // there is no such time in the given timezone.
	        zone : function (input, keepTime) {
	            var offset = this._offset || 0;
	            if (input != null) {
	                if (typeof input === "string") {
	                    input = timezoneMinutesFromString(input);
	                }
	                if (Math.abs(input) < 16) {
	                    input = input * 60;
	                }
	                this._offset = input;
	                this._isUTC = true;
	                if (offset !== input) {
	                    if (!keepTime || this._changeInProgress) {
	                        addOrSubtractDurationFromMoment(this,
	                                moment.duration(offset - input, 'm'), 1, false);
	                    } else if (!this._changeInProgress) {
	                        this._changeInProgress = true;
	                        moment.updateOffset(this, true);
	                        this._changeInProgress = null;
	                    }
	                }
	            } else {
	                return this._isUTC ? offset : this._d.getTimezoneOffset();
	            }
	            return this;
	        },

	        zoneAbbr : function () {
	            return this._isUTC ? "UTC" : "";
	        },

	        zoneName : function () {
	            return this._isUTC ? "Coordinated Universal Time" : "";
	        },

	        parseZone : function () {
	            if (this._tzm) {
	                this.zone(this._tzm);
	            } else if (typeof this._i === 'string') {
	                this.zone(this._i);
	            }
	            return this;
	        },

	        hasAlignedHourOffset : function (input) {
	            if (!input) {
	                input = 0;
	            }
	            else {
	                input = moment(input).zone();
	            }

	            return (this.zone() - input) % 60 === 0;
	        },

	        daysInMonth : function () {
	            return daysInMonth(this.year(), this.month());
	        },

	        dayOfYear : function (input) {
	            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
	            return input == null ? dayOfYear : this.add("d", (input - dayOfYear));
	        },

	        quarter : function (input) {
	            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	        },

	        weekYear : function (input) {
	            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;
	            return input == null ? year : this.add("y", (input - year));
	        },

	        isoWeekYear : function (input) {
	            var year = weekOfYear(this, 1, 4).year;
	            return input == null ? year : this.add("y", (input - year));
	        },

	        week : function (input) {
	            var week = this.lang().week(this);
	            return input == null ? week : this.add("d", (input - week) * 7);
	        },

	        isoWeek : function (input) {
	            var week = weekOfYear(this, 1, 4).week;
	            return input == null ? week : this.add("d", (input - week) * 7);
	        },

	        weekday : function (input) {
	            var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;
	            return input == null ? weekday : this.add("d", input - weekday);
	        },

	        isoWeekday : function (input) {
	            // behaves the same as moment#day except
	            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	            // as a setter, sunday should belong to the previous week.
	            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
	        },

	        isoWeeksInYear : function () {
	            return weeksInYear(this.year(), 1, 4);
	        },

	        weeksInYear : function () {
	            var weekInfo = this._lang._week;
	            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	        },

	        get : function (units) {
	            units = normalizeUnits(units);
	            return this[units]();
	        },

	        set : function (units, value) {
	            units = normalizeUnits(units);
	            if (typeof this[units] === 'function') {
	                this[units](value);
	            }
	            return this;
	        },

	        // If passed a language key, it will set the language for this
	        // instance.  Otherwise, it will return the language configuration
	        // variables for this instance.
	        lang : function (key) {
	            if (key === undefined) {
	                return this._lang;
	            } else {
	                this._lang = getLangDefinition(key);
	                return this;
	            }
	        }
	    });

	    function rawMonthSetter(mom, value) {
	        var dayOfMonth;

	        // TODO: Move this out of here!
	        if (typeof value === 'string') {
	            value = mom.lang().monthsParse(value);
	            // TODO: Another silent failure?
	            if (typeof value !== 'number') {
	                return mom;
	            }
	        }

	        dayOfMonth = Math.min(mom.date(),
	                daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function rawGetter(mom, unit) {
	        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
	    }

	    function rawSetter(mom, unit, value) {
	        if (unit === 'Month') {
	            return rawMonthSetter(mom, value);
	        } else {
	            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }

	    function makeAccessor(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                rawSetter(this, unit, value);
	                moment.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return rawGetter(this, unit);
	            }
	        };
	    }

	    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
	    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
	    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
	    // moment.fn.month is defined separately
	    moment.fn.date = makeAccessor('Date', true);
	    moment.fn.dates = deprecate("dates accessor is deprecated. Use date instead.", makeAccessor('Date', true));
	    moment.fn.year = makeAccessor('FullYear', true);
	    moment.fn.years = deprecate("years accessor is deprecated. Use year instead.", makeAccessor('FullYear', true));

	    // add plural methods
	    moment.fn.days = moment.fn.day;
	    moment.fn.months = moment.fn.month;
	    moment.fn.weeks = moment.fn.week;
	    moment.fn.isoWeeks = moment.fn.isoWeek;
	    moment.fn.quarters = moment.fn.quarter;

	    // add aliased format methods
	    moment.fn.toJSON = moment.fn.toISOString;

	    /************************************
	        Duration Prototype
	    ************************************/


	    extend(moment.duration.fn = Duration.prototype, {

	        _bubble : function () {
	            var milliseconds = this._milliseconds,
	                days = this._days,
	                months = this._months,
	                data = this._data,
	                seconds, minutes, hours, years;

	            // The following code bubbles up values, see the tests for
	            // examples of what that means.
	            data.milliseconds = milliseconds % 1000;

	            seconds = absRound(milliseconds / 1000);
	            data.seconds = seconds % 60;

	            minutes = absRound(seconds / 60);
	            data.minutes = minutes % 60;

	            hours = absRound(minutes / 60);
	            data.hours = hours % 24;

	            days += absRound(hours / 24);
	            data.days = days % 30;

	            months += absRound(days / 30);
	            data.months = months % 12;

	            years = absRound(months / 12);
	            data.years = years;
	        },

	        weeks : function () {
	            return absRound(this.days() / 7);
	        },

	        valueOf : function () {
	            return this._milliseconds +
	              this._days * 864e5 +
	              (this._months % 12) * 2592e6 +
	              toInt(this._months / 12) * 31536e6;
	        },

	        humanize : function (withSuffix) {
	            var difference = +this,
	                output = relativeTime(difference, !withSuffix, this.lang());

	            if (withSuffix) {
	                output = this.lang().pastFuture(difference, output);
	            }

	            return this.lang().postformat(output);
	        },

	        add : function (input, val) {
	            // supports only 2.0-style add(1, 's') or add(moment)
	            var dur = moment.duration(input, val);

	            this._milliseconds += dur._milliseconds;
	            this._days += dur._days;
	            this._months += dur._months;

	            this._bubble();

	            return this;
	        },

	        subtract : function (input, val) {
	            var dur = moment.duration(input, val);

	            this._milliseconds -= dur._milliseconds;
	            this._days -= dur._days;
	            this._months -= dur._months;

	            this._bubble();

	            return this;
	        },

	        get : function (units) {
	            units = normalizeUnits(units);
	            return this[units.toLowerCase() + 's']();
	        },

	        as : function (units) {
	            units = normalizeUnits(units);
	            return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();
	        },

	        lang : moment.fn.lang,

	        toIsoString : function () {
	            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	            var years = Math.abs(this.years()),
	                months = Math.abs(this.months()),
	                days = Math.abs(this.days()),
	                hours = Math.abs(this.hours()),
	                minutes = Math.abs(this.minutes()),
	                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

	            if (!this.asSeconds()) {
	                // this is the same as C#'s (Noda) and python (isodate)...
	                // but not other JS (goog.date)
	                return 'P0D';
	            }

	            return (this.asSeconds() < 0 ? '-' : '') +
	                'P' +
	                (years ? years + 'Y' : '') +
	                (months ? months + 'M' : '') +
	                (days ? days + 'D' : '') +
	                ((hours || minutes || seconds) ? 'T' : '') +
	                (hours ? hours + 'H' : '') +
	                (minutes ? minutes + 'M' : '') +
	                (seconds ? seconds + 'S' : '');
	        }
	    });

	    function makeDurationGetter(name) {
	        moment.duration.fn[name] = function () {
	            return this._data[name];
	        };
	    }

	    function makeDurationAsGetter(name, factor) {
	        moment.duration.fn['as' + name] = function () {
	            return +this / factor;
	        };
	    }

	    for (i in unitMillisecondFactors) {
	        if (unitMillisecondFactors.hasOwnProperty(i)) {
	            makeDurationAsGetter(i, unitMillisecondFactors[i]);
	            makeDurationGetter(i.toLowerCase());
	        }
	    }

	    makeDurationAsGetter('Weeks', 6048e5);
	    moment.duration.fn.asMonths = function () {
	        return (+this - this.years() * 31536e6) / 2592e6 + this.years() * 12;
	    };


	    /************************************
	        Default Lang
	    ************************************/


	    // Set default language, other languages will inherit from English.
	    moment.lang('en', {
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    /* EMBED_LANGUAGES */

	    /************************************
	        Exposing Moment
	    ************************************/

	    function makeGlobal(shouldDeprecate) {
	        /*global ender:false */
	        if (typeof ender !== 'undefined') {
	            return;
	        }
	        oldGlobalMoment = globalScope.moment;
	        if (shouldDeprecate) {
	            globalScope.moment = deprecate(
	                    "Accessing Moment through the global scope is " +
	                    "deprecated, and will be removed in an upcoming " +
	                    "release.",
	                    moment);
	        } else {
	            globalScope.moment = moment;
	        }
	    }

	    // CommonJS module is defined
	    if (hasModule) {
	        module.exports = moment;
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	            if (module.config && module.config() && module.config().noGlobal === true) {
	                // release the global variable
	                globalScope.moment = oldGlobalMoment;
	            }

	            return moment;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	        makeGlobal(true);
	    } else {
	        makeGlobal();
	    }
	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(330)(module)))

/***/ },
/* 330 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./ar": 332,
		"./ar-ma": 333,
		"./ar-ma.js": 333,
		"./ar-sa": 334,
		"./ar-sa.js": 334,
		"./ar.js": 332,
		"./az": 335,
		"./az.js": 335,
		"./bg": 336,
		"./bg.js": 336,
		"./bn": 337,
		"./bn.js": 337,
		"./br": 338,
		"./br.js": 338,
		"./bs": 339,
		"./bs.js": 339,
		"./ca": 340,
		"./ca.js": 340,
		"./cs": 341,
		"./cs.js": 341,
		"./cv": 342,
		"./cv.js": 342,
		"./cy": 343,
		"./cy.js": 343,
		"./da": 344,
		"./da.js": 344,
		"./de": 345,
		"./de-at": 346,
		"./de-at.js": 346,
		"./de.js": 345,
		"./el": 347,
		"./el.js": 347,
		"./en-au": 348,
		"./en-au.js": 348,
		"./en-ca": 349,
		"./en-ca.js": 349,
		"./en-gb": 350,
		"./en-gb.js": 350,
		"./eo": 351,
		"./eo.js": 351,
		"./es": 352,
		"./es.js": 352,
		"./et": 353,
		"./et.js": 353,
		"./eu": 354,
		"./eu.js": 354,
		"./fa": 355,
		"./fa.js": 355,
		"./fi": 356,
		"./fi.js": 356,
		"./fo": 357,
		"./fo.js": 357,
		"./fr": 358,
		"./fr-ca": 359,
		"./fr-ca.js": 359,
		"./fr.js": 358,
		"./gl": 360,
		"./gl.js": 360,
		"./he": 361,
		"./he.js": 361,
		"./hi": 362,
		"./hi.js": 362,
		"./hr": 363,
		"./hr.js": 363,
		"./hu": 364,
		"./hu.js": 364,
		"./hy-am": 365,
		"./hy-am.js": 365,
		"./id": 366,
		"./id.js": 366,
		"./is": 367,
		"./is.js": 367,
		"./it": 368,
		"./it.js": 368,
		"./ja": 369,
		"./ja.js": 369,
		"./ka": 370,
		"./ka.js": 370,
		"./km": 371,
		"./km.js": 371,
		"./ko": 372,
		"./ko.js": 372,
		"./lb": 373,
		"./lb.js": 373,
		"./lt": 374,
		"./lt.js": 374,
		"./lv": 375,
		"./lv.js": 375,
		"./mk": 376,
		"./mk.js": 376,
		"./ml": 377,
		"./ml.js": 377,
		"./mr": 378,
		"./mr.js": 378,
		"./ms-my": 379,
		"./ms-my.js": 379,
		"./nb": 380,
		"./nb.js": 380,
		"./ne": 381,
		"./ne.js": 381,
		"./nl": 382,
		"./nl.js": 382,
		"./nn": 383,
		"./nn.js": 383,
		"./pl": 384,
		"./pl.js": 384,
		"./pt": 385,
		"./pt-br": 386,
		"./pt-br.js": 386,
		"./pt.js": 385,
		"./ro": 387,
		"./ro.js": 387,
		"./ru": 388,
		"./ru.js": 388,
		"./sk": 389,
		"./sk.js": 389,
		"./sl": 390,
		"./sl.js": 390,
		"./sq": 391,
		"./sq.js": 391,
		"./sr": 392,
		"./sr-cyrl": 393,
		"./sr-cyrl.js": 393,
		"./sr.js": 392,
		"./sv": 394,
		"./sv.js": 394,
		"./ta": 395,
		"./ta.js": 395,
		"./th": 396,
		"./th.js": 396,
		"./tl-ph": 397,
		"./tl-ph.js": 397,
		"./tr": 398,
		"./tr.js": 398,
		"./tzm": 399,
		"./tzm-latn": 400,
		"./tzm-latn.js": 400,
		"./tzm.js": 399,
		"./uk": 401,
		"./uk.js": 401,
		"./uz": 402,
		"./uz.js": 402,
		"./vi": 403,
		"./vi.js": 403,
		"./zh-cn": 404,
		"./zh-cn.js": 404,
		"./zh-tw": 405,
		"./zh-tw.js": 405
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 331;


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Arabic (ar)
	// author : Abdel Said : https://github.com/abdelsaid
	// changes in months, weekdays : Ahmed Elkhatib

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };

	    return moment.lang('ar', {
	        months : "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
	        monthsShort : "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
	        weekdays : "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
	        weekdaysShort : "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
	        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return "ص";
	            } else {
	                return "م";
	            }
	        },
	        calendar : {
	            sameDay: "[اليوم على الساعة] LT",
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "في %s",
	            past : "منذ %s",
	            s : "ثوان",
	            m : "دقيقة",
	            mm : "%d دقائق",
	            h : "ساعة",
	            hh : "%d ساعات",
	            d : "يوم",
	            dd : "%d أيام",
	            M : "شهر",
	            MM : "%d أشهر",
	            y : "سنة",
	            yy : "%d سنوات"
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Moroccan Arabic (ar-ma)
	// author : ElFadili Yassine : https://github.com/ElFadiliY
	// author : Abdel Said : https://github.com/abdelsaid

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('ar-ma', {
	        months : "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
	        monthsShort : "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
	        weekdays : "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
	        weekdaysShort : "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
	        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[اليوم على الساعة] LT",
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "في %s",
	            past : "منذ %s",
	            s : "ثوان",
	            m : "دقيقة",
	            mm : "%d دقائق",
	            h : "ساعة",
	            hh : "%d ساعات",
	            d : "يوم",
	            dd : "%d أيام",
	            M : "شهر",
	            MM : "%d أشهر",
	            y : "سنة",
	            yy : "%d سنوات"
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Arabic Saudi Arabia (ar-sa)
	// author : Suhail Alkowaileet : https://github.com/xsoh

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };

	    return moment.lang('ar-sa', {
	        months : "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
	        monthsShort : "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
	        weekdays : "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
	        weekdaysShort : "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
	        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return "ص";
	            } else {
	                return "م";
	            }
	        },
	        calendar : {
	            sameDay: "[اليوم على الساعة] LT",
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "في %s",
	            past : "منذ %s",
	            s : "ثوان",
	            m : "دقيقة",
	            mm : "%d دقائق",
	            h : "ساعة",
	            hh : "%d ساعات",
	            d : "يوم",
	            dd : "%d أيام",
	            M : "شهر",
	            MM : "%d أشهر",
	            y : "سنة",
	            yy : "%d سنوات"
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : azerbaijani (az)
	// author : topchiyev : https://github.com/topchiyev

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {

	    var suffixes = {
	        1: "-inci",
	        5: "-inci",
	        8: "-inci",
	        70: "-inci",
	        80: "-inci",

	        2: "-nci",
	        7: "-nci",
	        20: "-nci",
	        50: "-nci",

	        3: "-üncü",
	        4: "-üncü",
	        100: "-üncü",

	        6: "-ncı",

	        9: "-uncu",
	        10: "-uncu",
	        30: "-uncu",

	        60: "-ıncı",
	        90: "-ıncı"
	    };
	    return moment.lang('az', {
	        months : "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
	        monthsShort : "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
	        weekdays : "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),
	        weekdaysShort : "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
	        weekdaysMin : "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD.MM.YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[sabah saat] LT',
	            nextWeek : '[gələn həftə] dddd [saat] LT',
	            lastDay : '[dünən] LT',
	            lastWeek : '[keçən həftə] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s sonra",
	            past : "%s əvvəl",
	            s : "birneçə saniyyə",
	            m : "bir dəqiqə",
	            mm : "%d dəqiqə",
	            h : "bir saat",
	            hh : "%d saat",
	            d : "bir gün",
	            dd : "%d gün",
	            M : "bir ay",
	            MM : "%d ay",
	            y : "bir il",
	            yy : "%d il"
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return "gecə";
	            } else if (hour < 12) {
	                return "səhər";
	            } else if (hour < 17) {
	                return "gündüz";
	            } else {
	                return "axşam";
	            }
	        },
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + "-ıncı";
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;

	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : bulgarian (bg)
	// author : Krasen Borisov : https://github.com/kraz

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('bg', {
	        months : "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
	        monthsShort : "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
	        weekdays : "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
	        weekdaysShort : "нед_пон_вто_сря_чет_пет_съб".split("_"),
	        weekdaysMin : "нд_пн_вт_ср_чт_пт_сб".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "D.MM.YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[Днес в] LT',
	            nextDay : '[Утре в] LT',
	            nextWeek : 'dddd [в] LT',
	            lastDay : '[Вчера в] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "след %s",
	            past : "преди %s",
	            s : "няколко секунди",
	            m : "минута",
	            mm : "%d минути",
	            h : "час",
	            hh : "%d часа",
	            d : "ден",
	            dd : "%d дни",
	            M : "месец",
	            MM : "%d месеца",
	            y : "година",
	            yy : "%d години"
	        },
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Bengali (bn)
	// author : Kaushik Gandhi : https://github.com/kaushikgandhi

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '১',
	        '2': '২',
	        '3': '৩',
	        '4': '৪',
	        '5': '৫',
	        '6': '৬',
	        '7': '৭',
	        '8': '৮',
	        '9': '৯',
	        '0': '০'
	    },
	    numberMap = {
	        '১': '1',
	        '২': '2',
	        '৩': '3',
	        '৪': '4',
	        '৫': '5',
	        '৬': '6',
	        '৭': '7',
	        '৮': '8',
	        '৯': '9',
	        '০': '0'
	    };

	    return moment.lang('bn', {
	        months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split("_"),
	        monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split("_"),
	        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার'.split("_"),
	        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি'.split("_"),
	        weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split("_"),
	        longDateFormat : {
	            LT : "A h:mm সময়",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY, LT",
	            LLLL : "dddd, D MMMM YYYY, LT"
	        },
	        calendar : {
	            sameDay : '[আজ] LT',
	            nextDay : '[আগামীকাল] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[গতকাল] LT',
	            lastWeek : '[গত] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s পরে",
	            past : "%s আগে",
	            s : "কএক সেকেন্ড",
	            m : "এক মিনিট",
	            mm : "%d মিনিট",
	            h : "এক ঘন্টা",
	            hh : "%d ঘন্টা",
	            d : "এক দিন",
	            dd : "%d দিন",
	            M : "এক মাস",
	            MM : "%d মাস",
	            y : "এক বছর",
	            yy : "%d বছর"
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        //Bengali is a vast language its spoken 
	        //in different forms in various parts of the world.
	        //I have just generalized with most common one used
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return "রাত";
	            } else if (hour < 10) {
	                return "শকাল";
	            } else if (hour < 17) {
	                return "দুপুর";
	            } else if (hour < 20) {
	                return "বিকেল";
	            } else {
	                return "রাত";
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : breton (br)
	// author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            'mm': "munutenn",
	            'MM': "miz",
	            'dd': "devezh"
	        };
	        return number + ' ' + mutation(format[key], number);
	    }

	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	        }
	    }

	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }

	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }

	    function softMutation(text) {
	        var mutationTable = {
	            'm': 'v',
	            'b': 'v',
	            'd': 'z'
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }

	    return moment.lang('br', {
	        months : "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
	        monthsShort : "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
	        weekdays : "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
	        weekdaysShort : "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
	        weekdaysMin : "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
	        longDateFormat : {
	            LT : "h[e]mm A",
	            L : "DD/MM/YYYY",
	            LL : "D [a viz] MMMM YYYY",
	            LLL : "D [a viz] MMMM YYYY LT",
	            LLLL : "dddd, D [a viz] MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[Hiziv da] LT',
	            nextDay : '[Warc\'hoazh da] LT',
	            nextWeek : 'dddd [da] LT',
	            lastDay : '[Dec\'h da] LT',
	            lastWeek : 'dddd [paset da] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "a-benn %s",
	            past : "%s 'zo",
	            s : "un nebeud segondennoù",
	            m : "ur vunutenn",
	            mm : relativeTimeWithMutation,
	            h : "un eur",
	            hh : "%d eur",
	            d : "un devezh",
	            dd : relativeTimeWithMutation,
	            M : "ur miz",
	            MM : relativeTimeWithMutation,
	            y : "ur bloaz",
	            yy : specialMutationForYears
	        },
	        ordinal : function (number) {
	            var output = (number === 1) ? 'añ' : 'vet';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : bosnian (bs)
	// author : Nedim Cholich : https://github.com/frontyard
	// based on (hr) translation by Bojan Marković

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {

	    function translate(number, withoutSuffix, key) {
	        var result = number + " ";
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }

	    return moment.lang('bs', {
			months : "januar_februar_mart_april_maj_juni_juli_avgust_septembar_oktobar_novembar_decembar".split("_"),
			monthsShort : "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
	        weekdays : "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
	        weekdaysShort : "ned._pon._uto._sri._čet._pet._sub.".split("_"),
	        weekdaysMin : "ne_po_ut_sr_če_pe_su".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "DD. MM. YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY LT",
	            LLLL : "dddd, D. MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "za %s",
	            past   : "prije %s",
	            s      : "par sekundi",
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : "dan",
	            dd     : translate,
	            M      : "mjesec",
	            MM     : translate,
	            y      : "godinu",
	            yy     : translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : catalan (ca)
	// author : Juan G. Hurtado : https://github.com/juanghurtado

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('ca', {
	        months : "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
	        monthsShort : "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),
	        weekdays : "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
	        weekdaysShort : "dg._dl._dt._dc._dj._dv._ds.".split("_"),
	        weekdaysMin : "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : function () {
	                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextDay : function () {
	                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastDay : function () {
	                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "en %s",
	            past : "fa %s",
	            s : "uns segons",
	            m : "un minut",
	            mm : "%d minuts",
	            h : "una hora",
	            hh : "%d hores",
	            d : "un dia",
	            dd : "%d dies",
	            M : "un mes",
	            MM : "%d mesos",
	            y : "un any",
	            yy : "%d anys"
	        },
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : czech (cs)
	// author : petrbela : https://github.com/petrbela

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var months = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),
	        monthsShort = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");

	    function plural(n) {
	        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	    }

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + " ";
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	        }
	    }

	    return moment.lang('cs', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        weekdays : "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
	        weekdaysShort : "ne_po_út_st_čt_pá_so".split("_"),
	        weekdaysMin : "ne_po_út_st_čt_pá_so".split("_"),
	        longDateFormat : {
	            LT: "H.mm",
	            L : "DD. MM. YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY LT",
	            LLLL : "dddd D. MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[dnes v] LT",
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: "L"
	        },
	        relativeTime : {
	            future : "za %s",
	            past : "před %s",
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : chuvash (cv)
	// author : Anatoly Mironov : https://github.com/mirontoli

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('cv', {
	        months : "кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав".split("_"),
	        monthsShort : "кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш".split("_"),
	        weekdays : "вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун".split("_"),
	        weekdaysShort : "выр_тун_ытл_юн_кĕç_эрн_шăм".split("_"),
	        weekdaysMin : "вр_тн_ыт_юн_кç_эр_шм".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD-MM-YYYY",
	            LL : "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]",
	            LLL : "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT",
	            LLLL : "dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT"
	        },
	        calendar : {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ĕнер] LT [сехетре]',
	            nextWeek: '[Çитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнĕ] dddd LT [сехетре]',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (output) {
	                var affix = /сехет$/i.exec(output) ? "рен" : /çул$/i.exec(output) ? "тан" : "ран";
	                return output + affix;
	            },
	            past : "%s каялла",
	            s : "пĕр-ик çеккунт",
	            m : "пĕр минут",
	            mm : "%d минут",
	            h : "пĕр сехет",
	            hh : "%d сехет",
	            d : "пĕр кун",
	            dd : "%d кун",
	            M : "пĕр уйăх",
	            MM : "%d уйăх",
	            y : "пĕр çул",
	            yy : "%d çул"
	        },
	        ordinal : '%d-мĕш',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Welsh (cy)
	// author : Robert Allen

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang("cy", {
	        months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
	        monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
	        weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
	        weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
	        weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: "HH:mm",
	            L: "DD/MM/YYYY",
	            LL: "D MMMM YYYY",
	            LLL: "D MMMM YYYY LT",
	            LLLL: "dddd, D MMMM YYYY LT"
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: "mewn %s",
	            past: "%s yn ôl",
	            s: "ychydig eiliadau",
	            m: "munud",
	            mm: "%d munud",
	            h: "awr",
	            hh: "%d awr",
	            d: "diwrnod",
	            dd: "%d diwrnod",
	            M: "mis",
	            MM: "%d mis",
	            y: "blwyddyn",
	            yy: "%d flynedd"
	        },
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	                ];

	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }

	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : danish (da)
	// author : Ulrik Nielsen : https://github.com/mrbase

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('da', {
	        months : "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
	        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
	        weekdays : "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
	        weekdaysShort : "søn_man_tir_ons_tor_fre_lør".split("_"),
	        weekdaysMin : "sø_ma_ti_on_to_fr_lø".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY LT",
	            LLLL : "dddd [d.] D. MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[I dag kl.] LT',
	            nextDay : '[I morgen kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[I går kl.] LT',
	            lastWeek : '[sidste] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "om %s",
	            past : "%s siden",
	            s : "få sekunder",
	            m : "et minut",
	            mm : "%d minutter",
	            h : "en time",
	            hh : "%d timer",
	            d : "en dag",
	            dd : "%d dage",
	            M : "en måned",
	            MM : "%d måneder",
	            y : "et år",
	            yy : "%d år"
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : german (de)
	// author : lluchs : https://github.com/lluchs
	// author: Menelion Elensúle: https://github.com/Oire

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    return moment.lang('de', {
	        months : "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
	        monthsShort : "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
	        weekdays : "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
	        weekdaysShort : "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
	        weekdaysMin : "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
	        longDateFormat : {
	            LT: "HH:mm [Uhr]",
	            L : "DD.MM.YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY LT",
	            LLLL : "dddd, D. MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[Heute um] LT",
	            sameElse: "L",
	            nextDay: '[Morgen um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gestern um] LT',
	            lastWeek: '[letzten] dddd [um] LT'
	        },
	        relativeTime : {
	            future : "in %s",
	            past : "vor %s",
	            s : "ein paar Sekunden",
	            m : processRelativeTime,
	            mm : "%d Minuten",
	            h : processRelativeTime,
	            hh : "%d Stunden",
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : austrian german (de-at)
	// author : lluchs : https://github.com/lluchs
	// author: Menelion Elensúle: https://github.com/Oire
	// author : Martin Groller : https://github.com/MadMG

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    return moment.lang('de-at', {
	        months : "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
	        monthsShort : "Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
	        weekdays : "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
	        weekdaysShort : "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
	        weekdaysMin : "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
	        longDateFormat : {
	            LT: "HH:mm [Uhr]",
	            L : "DD.MM.YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY LT",
	            LLLL : "dddd, D. MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[Heute um] LT",
	            sameElse: "L",
	            nextDay: '[Morgen um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gestern um] LT',
	            lastWeek: '[letzten] dddd [um] LT'
	        },
	        relativeTime : {
	            future : "in %s",
	            past : "vor %s",
	            s : "ein paar Sekunden",
	            m : processRelativeTime,
	            mm : "%d Minuten",
	            h : processRelativeTime,
	            hh : "%d Stunden",
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : modern greek (el)
	// author : Aggelos Karalias : https://github.com/mehiel

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('el', {
	        monthsNominativeEl : "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
	        monthsGenitiveEl : "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
	        months : function (momentToFormat, format) {
	            if (/D/.test(format.substring(0, format.indexOf("MMMM")))) { // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort : "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
	        weekdays : "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
	        weekdaysShort : "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
	        weekdaysMin : "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        longDateFormat : {
	            LT : "h:mm A",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendarEl : {
	            sameDay : '[Σήμερα {}] LT',
	            nextDay : '[Αύριο {}] LT',
	            nextWeek : 'dddd [{}] LT',
	            lastDay : '[Χθες {}] LT',
	            lastWeek : function() {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();

	            if (typeof output === 'function') {
	                output = output.apply(mom);
	            }

	            return output.replace("{}", (hours % 12 === 1 ? "στη" : "στις"));
	        },
	        relativeTime : {
	            future : "σε %s",
	            past : "%s πριν",
	            s : "δευτερόλεπτα",
	            m : "ένα λεπτό",
	            mm : "%d λεπτά",
	            h : "μία ώρα",
	            hh : "%d ώρες",
	            d : "μία μέρα",
	            dd : "%d μέρες",
	            M : "ένας μήνας",
	            MM : "%d μήνες",
	            y : "ένας χρόνος",
	            yy : "%d χρόνια"
	        },
	        ordinal : function (number) {
	            return number + 'η';
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : australian english (en-au)

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('en-au', {
	        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
	        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
	        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
	        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
	        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
	        longDateFormat : {
	            LT : "h:mm A",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "in %s",
	            past : "%s ago",
	            s : "a few seconds",
	            m : "a minute",
	            mm : "%d minutes",
	            h : "an hour",
	            hh : "%d hours",
	            d : "a day",
	            dd : "%d days",
	            M : "a month",
	            MM : "%d months",
	            y : "a year",
	            yy : "%d years"
	        },
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~ (number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : canadian english (en-ca)
	// author : Jonathan Abourbih : https://github.com/jonbca

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('en-ca', {
	        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
	        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
	        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
	        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
	        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
	        longDateFormat : {
	            LT : "h:mm A",
	            L : "YYYY-MM-DD",
	            LL : "D MMMM, YYYY",
	            LLL : "D MMMM, YYYY LT",
	            LLLL : "dddd, D MMMM, YYYY LT"
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "in %s",
	            past : "%s ago",
	            s : "a few seconds",
	            m : "a minute",
	            mm : "%d minutes",
	            h : "an hour",
	            hh : "%d hours",
	            d : "a day",
	            dd : "%d days",
	            M : "a month",
	            MM : "%d months",
	            y : "a year",
	            yy : "%d years"
	        },
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~ (number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	}));


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : great britain english (en-gb)
	// author : Chris Gedrim : https://github.com/chrisgedrim

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('en-gb', {
	        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
	        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
	        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
	        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
	        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "in %s",
	            past : "%s ago",
	            s : "a few seconds",
	            m : "a minute",
	            mm : "%d minutes",
	            h : "an hour",
	            hh : "%d hours",
	            d : "a day",
	            dd : "%d days",
	            M : "a month",
	            MM : "%d months",
	            y : "a year",
	            yy : "%d years"
	        },
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~ (number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : esperanto (eo)
	// author : Colin Dean : https://github.com/colindean
	// komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('eo', {
	        months : "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
	        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),
	        weekdays : "Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),
	        weekdaysShort : "Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),
	        weekdaysMin : "Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "YYYY-MM-DD",
	            LL : "D[-an de] MMMM, YYYY",
	            LLL : "D[-an de] MMMM, YYYY LT",
	            LLLL : "dddd, [la] D[-an de] MMMM, YYYY LT"
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar : {
	            sameDay : '[Hodiaŭ je] LT',
	            nextDay : '[Morgaŭ je] LT',
	            nextWeek : 'dddd [je] LT',
	            lastDay : '[Hieraŭ je] LT',
	            lastWeek : '[pasinta] dddd [je] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "je %s",
	            past : "antaŭ %s",
	            s : "sekundoj",
	            m : "minuto",
	            mm : "%d minutoj",
	            h : "horo",
	            hh : "%d horoj",
	            d : "tago",//ne 'diurno', ĉar estas uzita por proksimumo
	            dd : "%d tagoj",
	            M : "monato",
	            MM : "%d monatoj",
	            y : "jaro",
	            yy : "%d jaroj"
	        },
	        ordinal : "%da",
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : spanish (es)
	// author : Julio Napurí : https://github.com/julionc

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var monthsShortDot = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
	        monthsShort = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");

	    return moment.lang('es', {
	        months : "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        weekdays : "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
	        weekdaysShort : "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
	        weekdaysMin : "Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "DD/MM/YYYY",
	            LL : "D [de] MMMM [del] YYYY",
	            LLL : "D [de] MMMM [del] YYYY LT",
	            LLLL : "dddd, D [de] MMMM [del] YYYY LT"
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "en %s",
	            past : "hace %s",
	            s : "unos segundos",
	            m : "un minuto",
	            mm : "%d minutos",
	            h : "una hora",
	            hh : "%d horas",
	            d : "un día",
	            dd : "%d días",
	            M : "un mes",
	            MM : "%d meses",
	            y : "un año",
	            yy : "%d años"
	        },
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : estonian (et)
	// author : Henry Kehlmann : https://github.com/madhenry
	// improvements : Illimar Tambek : https://github.com/ragulka

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            'm' : ['ühe minuti', 'üks minut'],
	            'mm': [number + ' minuti', number + ' minutit'],
	            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	            'hh': [number + ' tunni', number + ' tundi'],
	            'd' : ['ühe päeva', 'üks päev'],
	            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	            'MM': [number + ' kuu', number + ' kuud'],
	            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	            'yy': [number + ' aasta', number + ' aastat']
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }

	    return moment.lang('et', {
	        months        : "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
	        monthsShort   : "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
	        weekdays      : "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
	        weekdaysShort : "P_E_T_K_N_R_L".split("_"),
	        weekdaysMin   : "P_E_T_K_N_R_L".split("_"),
	        longDateFormat : {
	            LT   : "H:mm",
	            L    : "DD.MM.YYYY",
	            LL   : "D. MMMM YYYY",
	            LLL  : "D. MMMM YYYY LT",
	            LLLL : "dddd, D. MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay  : '[Täna,] LT',
	            nextDay  : '[Homme,] LT',
	            nextWeek : '[Järgmine] dddd LT',
	            lastDay  : '[Eile,] LT',
	            lastWeek : '[Eelmine] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s pärast",
	            past   : "%s tagasi",
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : '%d päeva',
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : euskara (eu)
	// author : Eneko Illarramendi : https://github.com/eillarra

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('eu', {
	        months : "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
	        monthsShort : "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
	        weekdays : "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
	        weekdaysShort : "ig._al._ar._az._og._ol._lr.".split("_"),
	        weekdaysMin : "ig_al_ar_az_og_ol_lr".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "YYYY-MM-DD",
	            LL : "YYYY[ko] MMMM[ren] D[a]",
	            LLL : "YYYY[ko] MMMM[ren] D[a] LT",
	            LLLL : "dddd, YYYY[ko] MMMM[ren] D[a] LT",
	            l : "YYYY-M-D",
	            ll : "YYYY[ko] MMM D[a]",
	            lll : "YYYY[ko] MMM D[a] LT",
	            llll : "ddd, YYYY[ko] MMM D[a] LT"
	        },
	        calendar : {
	            sameDay : '[gaur] LT[etan]',
	            nextDay : '[bihar] LT[etan]',
	            nextWeek : 'dddd LT[etan]',
	            lastDay : '[atzo] LT[etan]',
	            lastWeek : '[aurreko] dddd LT[etan]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s barru",
	            past : "duela %s",
	            s : "segundo batzuk",
	            m : "minutu bat",
	            mm : "%d minutu",
	            h : "ordu bat",
	            hh : "%d ordu",
	            d : "egun bat",
	            dd : "%d egun",
	            M : "hilabete bat",
	            MM : "%d hilabete",
	            y : "urte bat",
	            yy : "%d urte"
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Persian Language
	// author : Ebrahim Byagowi : https://github.com/ebraminio

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '۱',
	        '2': '۲',
	        '3': '۳',
	        '4': '۴',
	        '5': '۵',
	        '6': '۶',
	        '7': '۷',
	        '8': '۸',
	        '9': '۹',
	        '0': '۰'
	    }, numberMap = {
	        '۱': '1',
	        '۲': '2',
	        '۳': '3',
	        '۴': '4',
	        '۵': '5',
	        '۶': '6',
	        '۷': '7',
	        '۸': '8',
	        '۹': '9',
	        '۰': '0'
	    };

	    return moment.lang('fa', {
	        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return "قبل از ظهر";
	            } else {
	                return "بعد از ظهر";
	            }
	        },
	        calendar : {
	            sameDay : '[امروز ساعت] LT',
	            nextDay : '[فردا ساعت] LT',
	            nextWeek : 'dddd [ساعت] LT',
	            lastDay : '[دیروز ساعت] LT',
	            lastWeek : 'dddd [پیش] [ساعت] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'در %s',
	            past : '%s پیش',
	            s : 'چندین ثانیه',
	            m : 'یک دقیقه',
	            mm : '%d دقیقه',
	            h : 'یک ساعت',
	            hh : '%d ساعت',
	            d : 'یک روز',
	            dd : '%d روز',
	            M : 'یک ماه',
	            MM : '%d ماه',
	            y : 'یک سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        ordinal : '%dم',
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : finnish (fi)
	// author : Tarmo Aidantausta : https://github.com/bleadof

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
	        numbersFuture = ['nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	                          numbersPast[7], numbersPast[8], numbersPast[9]];

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = "";
	        switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	        }
	        result = verbalNumber(number, isFuture) + " " + result;
	        return result;
	    }

	    function verbalNumber(number, isFuture) {
	        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	    }

	    return moment.lang('fi', {
	        months : "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
	        monthsShort : "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
	        weekdays : "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
	        weekdaysShort : "su_ma_ti_ke_to_pe_la".split("_"),
	        weekdaysMin : "su_ma_ti_ke_to_pe_la".split("_"),
	        longDateFormat : {
	            LT : "HH.mm",
	            L : "DD.MM.YYYY",
	            LL : "Do MMMM[ta] YYYY",
	            LLL : "Do MMMM[ta] YYYY, [klo] LT",
	            LLLL : "dddd, Do MMMM[ta] YYYY, [klo] LT",
	            l : "D.M.YYYY",
	            ll : "Do MMM YYYY",
	            lll : "Do MMM YYYY, [klo] LT",
	            llll : "ddd, Do MMM YYYY, [klo] LT"
	        },
	        calendar : {
	            sameDay : '[tänään] [klo] LT',
	            nextDay : '[huomenna] [klo] LT',
	            nextWeek : 'dddd [klo] LT',
	            lastDay : '[eilen] [klo] LT',
	            lastWeek : '[viime] dddd[na] [klo] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s päästä",
	            past : "%s sitten",
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinal : "%d.",
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : faroese (fo)
	// author : Ragnar Johannesen : https://github.com/ragnar123

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('fo', {
	        months : "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
	        monthsShort : "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
	        weekdays : "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
	        weekdaysShort : "sun_mán_týs_mik_hós_frí_ley".split("_"),
	        weekdaysMin : "su_má_tý_mi_hó_fr_le".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D. MMMM, YYYY LT"
	        },
	        calendar : {
	            sameDay : '[Í dag kl.] LT',
	            nextDay : '[Í morgin kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[Í gjár kl.] LT',
	            lastWeek : '[síðstu] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "um %s",
	            past : "%s síðani",
	            s : "fá sekund",
	            m : "ein minutt",
	            mm : "%d minuttir",
	            h : "ein tími",
	            hh : "%d tímar",
	            d : "ein dagur",
	            dd : "%d dagar",
	            M : "ein mánaði",
	            MM : "%d mánaðir",
	            y : "eitt ár",
	            yy : "%d ár"
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : french (fr)
	// author : John Fischer : https://github.com/jfroffice

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('fr', {
	        months : "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
	        monthsShort : "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
	        weekdays : "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
	        weekdaysShort : "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
	        weekdaysMin : "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[Aujourd'hui à] LT",
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "dans %s",
	            past : "il y a %s",
	            s : "quelques secondes",
	            m : "une minute",
	            mm : "%d minutes",
	            h : "une heure",
	            hh : "%d heures",
	            d : "un jour",
	            dd : "%d jours",
	            M : "un mois",
	            MM : "%d mois",
	            y : "un an",
	            yy : "%d ans"
	        },
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : '');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : canadian french (fr-ca)
	// author : Jonathan Abourbih : https://github.com/jonbca

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('fr-ca', {
	        months : "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
	        monthsShort : "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
	        weekdays : "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
	        weekdaysShort : "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
	        weekdaysMin : "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "YYYY-MM-DD",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[Aujourd'hui à] LT",
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "dans %s",
	            past : "il y a %s",
	            s : "quelques secondes",
	            m : "une minute",
	            mm : "%d minutes",
	            h : "une heure",
	            hh : "%d heures",
	            d : "un jour",
	            dd : "%d jours",
	            M : "un mois",
	            MM : "%d mois",
	            y : "un an",
	            yy : "%d ans"
	        },
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : '');
	        }
	    });
	}));


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : galician (gl)
	// author : Juan G. Hurtado : https://github.com/juanghurtado

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('gl', {
	        months : "Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),
	        monthsShort : "Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),
	        weekdays : "Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),
	        weekdaysShort : "Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),
	        weekdaysMin : "Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            lastDay : function () {
	                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	            },
	            lastWeek : function () {
	                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (str) {
	                if (str === "uns segundos") {
	                    return "nuns segundos";
	                }
	                return "en " + str;
	            },
	            past : "hai %s",
	            s : "uns segundos",
	            m : "un minuto",
	            mm : "%d minutos",
	            h : "unha hora",
	            hh : "%d horas",
	            d : "un día",
	            dd : "%d días",
	            M : "un mes",
	            MM : "%d meses",
	            y : "un ano",
	            yy : "%d anos"
	        },
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Hebrew (he)
	// author : Tomer Cohen : https://github.com/tomer
	// author : Moshe Simantov : https://github.com/DevelopmentIL
	// author : Tal Ater : https://github.com/TalAter

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('he', {
	        months : "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
	        monthsShort : "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
	        weekdays : "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
	        weekdaysShort : "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
	        weekdaysMin : "א_ב_ג_ד_ה_ו_ש".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D [ב]MMMM YYYY",
	            LLL : "D [ב]MMMM YYYY LT",
	            LLLL : "dddd, D [ב]MMMM YYYY LT",
	            l : "D/M/YYYY",
	            ll : "D MMM YYYY",
	            lll : "D MMM YYYY LT",
	            llll : "ddd, D MMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[היום ב־]LT',
	            nextDay : '[מחר ב־]LT',
	            nextWeek : 'dddd [בשעה] LT',
	            lastDay : '[אתמול ב־]LT',
	            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "בעוד %s",
	            past : "לפני %s",
	            s : "מספר שניות",
	            m : "דקה",
	            mm : "%d דקות",
	            h : "שעה",
	            hh : function (number) {
	                if (number === 2) {
	                    return "שעתיים";
	                }
	                return number + " שעות";
	            },
	            d : "יום",
	            dd : function (number) {
	                if (number === 2) {
	                    return "יומיים";
	                }
	                return number + " ימים";
	            },
	            M : "חודש",
	            MM : function (number) {
	                if (number === 2) {
	                    return "חודשיים";
	                }
	                return number + " חודשים";
	            },
	            y : "שנה",
	            yy : function (number) {
	                if (number === 2) {
	                    return "שנתיים";
	                }
	                return number + " שנים";
	            }
	        }
	    });
	}));


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : hindi (hi)
	// author : Mayank Singhal : https://github.com/mayanksinghal

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    return moment.lang('hi', {
	        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split("_"),
	        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split("_"),
	        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split("_"),
	        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split("_"),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split("_"),
	        longDateFormat : {
	            LT : "A h:mm बजे",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY, LT",
	            LLLL : "dddd, D MMMM YYYY, LT"
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[कल] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[कल] LT',
	            lastWeek : '[पिछले] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s में",
	            past : "%s पहले",
	            s : "कुछ ही क्षण",
	            m : "एक मिनट",
	            mm : "%d मिनट",
	            h : "एक घंटा",
	            hh : "%d घंटे",
	            d : "एक दिन",
	            dd : "%d दिन",
	            M : "एक महीने",
	            MM : "%d महीने",
	            y : "एक वर्ष",
	            yy : "%d वर्ष"
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return "रात";
	            } else if (hour < 10) {
	                return "सुबह";
	            } else if (hour < 17) {
	                return "दोपहर";
	            } else if (hour < 20) {
	                return "शाम";
	            } else {
	                return "रात";
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : hrvatski (hr)
	// author : Bojan Marković : https://github.com/bmarkovic

	// based on (sl) translation by Robert Sedovšek

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {

	    function translate(number, withoutSuffix, key) {
	        var result = number + " ";
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }

	    return moment.lang('hr', {
	        months : "sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),
	        monthsShort : "sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
	        weekdays : "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
	        weekdaysShort : "ned._pon._uto._sri._čet._pet._sub.".split("_"),
	        weekdaysMin : "ne_po_ut_sr_če_pe_su".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "DD. MM. YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY LT",
	            LLLL : "dddd, D. MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "za %s",
	            past   : "prije %s",
	            s      : "par sekundi",
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : "dan",
	            dd     : translate,
	            M      : "mjesec",
	            MM     : translate,
	            y      : "godinu",
	            yy     : translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : hungarian (hu)
	// author : Adam Brunner : https://github.com/adambrunner

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');

	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number,
	            suffix;

	        switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }

	        return '';
	    }

	    function week(isFuture) {
	        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	    }

	    return moment.lang('hu', {
	        months : "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
	        monthsShort : "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),
	        weekdays : "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
	        weekdaysShort : "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
	        weekdaysMin : "v_h_k_sze_cs_p_szo".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "YYYY.MM.DD.",
	            LL : "YYYY. MMMM D.",
	            LLL : "YYYY. MMMM D., LT",
	            LLLL : "YYYY. MMMM D., dddd LT"
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar : {
	            sameDay : '[ma] LT[-kor]',
	            nextDay : '[holnap] LT[-kor]',
	            nextWeek : function () {
	                return week.call(this, true);
	            },
	            lastDay : '[tegnap] LT[-kor]',
	            lastWeek : function () {
	                return week.call(this, false);
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s múlva",
	            past : "%s",
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Armenian (hy-am)
	// author : Armendarabyan : https://github.com/armendarabyan

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {

	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_'),
	            'accusative': 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_')
	        },

	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return months[nounCase][m.month()];
	    }

	    function monthsShortCaseReplace(m, format) {
	        var monthsShort = 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_');

	        return monthsShort[m.month()];
	    }

	    function weekdaysCaseReplace(m, format) {
	        var weekdays = 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_');

	        return weekdays[m.day()];
	    }

	    return moment.lang('hy-am', {
	        months : monthsCaseReplace,
	        monthsShort : monthsShortCaseReplace,
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
	        weekdaysMin : "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD.MM.YYYY",
	            LL : "D MMMM YYYY թ.",
	            LLL : "D MMMM YYYY թ., LT",
	            LLLL : "dddd, D MMMM YYYY թ., LT"
	        },
	        calendar : {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "%s հետո",
	            past : "%s առաջ",
	            s : "մի քանի վայրկյան",
	            m : "րոպե",
	            mm : "%d րոպե",
	            h : "ժամ",
	            hh : "%d ժամ",
	            d : "օր",
	            dd : "%d օր",
	            M : "ամիս",
	            MM : "%d ամիս",
	            y : "տարի",
	            yy : "%d տարի"
	        },

	        meridiem : function (hour) {
	            if (hour < 4) {
	                return "գիշերվա";
	            } else if (hour < 12) {
	                return "առավոտվա";
	            } else if (hour < 17) {
	                return "ցերեկվա";
	            } else {
	                return "երեկոյան";
	            }
	        },

	        ordinal: function (number, period) {
	            switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	            }
	        },

	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Bahasa Indonesia (id)
	// author : Mohammad Satrio Utomo : https://github.com/tyok
	// reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('id', {
	        months : "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
	        monthsShort : "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),
	        weekdays : "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
	        weekdaysShort : "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
	        weekdaysMin : "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
	        longDateFormat : {
	            LT : "HH.mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY [pukul] LT",
	            LLLL : "dddd, D MMMM YYYY [pukul] LT"
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Besok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kemarin pukul] LT',
	            lastWeek : 'dddd [lalu pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "dalam %s",
	            past : "%s yang lalu",
	            s : "beberapa detik",
	            m : "semenit",
	            mm : "%d menit",
	            h : "sejam",
	            hh : "%d jam",
	            d : "sehari",
	            dd : "%d hari",
	            M : "sebulan",
	            MM : "%d bulan",
	            y : "setahun",
	            yy : "%d tahun"
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : icelandic (is)
	// author : Hinrik Örn Sigurðsson : https://github.com/hinrik

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + " ";
	        switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }

	    return moment.lang('is', {
	        months : "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
	        monthsShort : "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
	        weekdays : "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
	        weekdaysShort : "sun_mán_þri_mið_fim_fös_lau".split("_"),
	        weekdaysMin : "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "DD/MM/YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY [kl.] LT",
	            LLLL : "dddd, D. MMMM YYYY [kl.] LT"
	        },
	        calendar : {
	            sameDay : '[í dag kl.] LT',
	            nextDay : '[á morgun kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[í gær kl.] LT',
	            lastWeek : '[síðasta] dddd [kl.] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "eftir %s",
	            past : "fyrir %s síðan",
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : "klukkustund",
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : italian (it)
	// author : Lorenzo : https://github.com/aliem
	// author: Mattia Larentis: https://github.com/nostalgiaz

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('it', {
	        months : "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
	        monthsShort : "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
	        weekdays : "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),
	        weekdaysShort : "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),
	        weekdaysMin : "D_L_Ma_Me_G_V_S".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: '[lo scorso] dddd [alle] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return ((/^[0-9].+$/).test(s) ? "tra" : "in") + " " + s;
	            },
	            past : "%s fa",
	            s : "alcuni secondi",
	            m : "un minuto",
	            mm : "%d minuti",
	            h : "un'ora",
	            hh : "%d ore",
	            d : "un giorno",
	            dd : "%d giorni",
	            M : "un mese",
	            MM : "%d mesi",
	            y : "un anno",
	            yy : "%d anni"
	        },
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : japanese (ja)
	// author : LI Long : https://github.com/baryon

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('ja', {
	        months : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
	        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
	        weekdays : "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
	        weekdaysShort : "日_月_火_水_木_金_土".split("_"),
	        weekdaysMin : "日_月_火_水_木_金_土".split("_"),
	        longDateFormat : {
	            LT : "Ah時m分",
	            L : "YYYY/MM/DD",
	            LL : "YYYY年M月D日",
	            LLL : "YYYY年M月D日LT",
	            LLLL : "YYYY年M月D日LT dddd"
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return "午前";
	            } else {
	                return "午後";
	            }
	        },
	        calendar : {
	            sameDay : '[今日] LT',
	            nextDay : '[明日] LT',
	            nextWeek : '[来週]dddd LT',
	            lastDay : '[昨日] LT',
	            lastWeek : '[前週]dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s後",
	            past : "%s前",
	            s : "数秒",
	            m : "1分",
	            mm : "%d分",
	            h : "1時間",
	            hh : "%d時間",
	            d : "1日",
	            dd : "%d日",
	            M : "1ヶ月",
	            MM : "%dヶ月",
	            y : "1年",
	            yy : "%d年"
	        }
	    });
	}));


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Georgian (ka)
	// author : Irakli Janiashvili : https://github.com/irakli-janiashvili

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {

	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	            'accusative': 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	        },

	        nounCase = (/D[oD] *MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return months[nounCase][m.month()];
	    }

	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	            'accusative': 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_')
	        },

	        nounCase = (/(წინა|შემდეგ)/).test(format) ?
	            'accusative' :
	            'nominative';

	        return weekdays[nounCase][m.day()];
	    }

	    return moment.lang('ka', {
	        months : monthsCaseReplace,
	        monthsShort : "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
	        weekdaysMin : "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
	        longDateFormat : {
	            LT : "h:mm A",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[დღეს] LT[-ზე]',
	            nextDay : '[ხვალ] LT[-ზე]',
	            lastDay : '[გუშინ] LT[-ზე]',
	            nextWeek : '[შემდეგ] dddd LT[-ზე]',
	            lastWeek : '[წინა] dddd LT-ზე',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                    s.replace(/ი$/, "ში") :
	                    s + "ში";
	            },
	            past : function (s) {
	                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                    return s.replace(/(ი|ე)$/, "ის წინ");
	                }
	                if ((/წელი/).test(s)) {
	                    return s.replace(/წელი$/, "წლის წინ");
	                }
	            },
	            s : "რამდენიმე წამი",
	            m : "წუთი",
	            mm : "%d წუთი",
	            h : "საათი",
	            hh : "%d საათი",
	            d : "დღე",
	            dd : "%d დღე",
	            M : "თვე",
	            MM : "%d თვე",
	            y : "წელი",
	            yy : "%d წელი"
	        },
	        ordinal : function (number) {
	            if (number === 0) {
	                return number;
	            }

	            if (number === 1) {
	                return number + "-ლი";
	            }

	            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	                return "მე-" + number;
	            }

	            return number + "-ე";
	        },
	        week : {
	            dow : 1,
	            doy : 7
	        }
	    });
	}));


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : khmer (km)
	// author : Kruy Vanna : https://github.com/kruyvanna

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('km', {
	        months: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
	        monthsShort: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
	        weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
	        weekdaysShort: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
	        weekdaysMin: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
	        longDateFormat: {
	            LT: "HH:mm",
	            L: "DD/MM/YYYY",
	            LL: "D MMMM YYYY",
	            LLL: "D MMMM YYYY LT",
	            LLLL: "dddd, D MMMM YYYY LT"
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនៈ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: "%sទៀត",
	            past: "%sមុន",
	            s: "ប៉ុន្មានវិនាទី",
	            m: "មួយនាទី",
	            mm: "%d នាទី",
	            h: "មួយម៉ោង",
	            hh: "%d ម៉ោង",
	            d: "មួយថ្ងៃ",
	            dd: "%d ថ្ងៃ",
	            M: "មួយខែ",
	            MM: "%d ខែ",
	            y: "មួយឆ្នាំ",
	            yy: "%d ឆ្នាំ"
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : korean (ko)
	//
	// authors 
	//
	// - Kyungwook, Park : https://github.com/kyungw00k
	// - Jeeeyul Lee <jeeeyul@gmail.com>
	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('ko', {
	        months : "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
	        monthsShort : "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
	        weekdays : "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
	        weekdaysShort : "일_월_화_수_목_금_토".split("_"),
	        weekdaysMin : "일_월_화_수_목_금_토".split("_"),
	        longDateFormat : {
	            LT : "A h시 mm분",
	            L : "YYYY.MM.DD",
	            LL : "YYYY년 MMMM D일",
	            LLL : "YYYY년 MMMM D일 LT",
	            LLLL : "YYYY년 MMMM D일 dddd LT"
	        },
	        meridiem : function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        },
	        calendar : {
	            sameDay : '오늘 LT',
	            nextDay : '내일 LT',
	            nextWeek : 'dddd LT',
	            lastDay : '어제 LT',
	            lastWeek : '지난주 dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s 후",
	            past : "%s 전",
	            s : "몇초",
	            ss : "%d초",
	            m : "일분",
	            mm : "%d분",
	            h : "한시간",
	            hh : "%d시간",
	            d : "하루",
	            dd : "%d일",
	            M : "한달",
	            MM : "%d달",
	            y : "일년",
	            yy : "%d년"
	        },
	        ordinal : '%d일',
	        meridiemParse : /(오전|오후)/,
	        isPM : function (token) {
	            return token === "오후";
	        }
	    });
	}));


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Luxembourgish (lb)
	// author : mweimerskirch : https://github.com/mweimerskirch

	// Note: Luxembourgish has a very particular phonological rule ("Eifeler Regel") that causes the
	// deletion of the final "n" in certain contexts. That's what the "eifelerRegelAppliesToWeekday"
	// and "eifelerRegelAppliesToNumber" methods are meant for

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eng Minutt', 'enger Minutt'],
	            'h': ['eng Stonn', 'enger Stonn'],
	            'd': ['een Dag', 'engem Dag'],
	            'dd': [number + ' Deeg', number + ' Deeg'],
	            'M': ['ee Mount', 'engem Mount'],
	            'MM': [number + ' Méint', number + ' Méint'],
	            'y': ['ee Joer', 'engem Joer'],
	            'yy': [number + ' Joer', number + ' Joer']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return "a " + string;
	        }
	        return "an " + string;
	    }

	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return "viru " + string;
	        }
	        return "virun " + string;
	    }

	    function processLastWeek(string1) {
	        var weekday = this.format('d');
	        if (eifelerRegelAppliesToWeekday(weekday)) {
	            return '[Leschte] dddd [um] LT';
	        }
	        return '[Leschten] dddd [um] LT';
	    }

	    /**
	     * Returns true if the word before the given week day loses the "-n" ending.
	     * e.g. "Leschten Dënschdeg" but "Leschte Méindeg"
	     *
	     * @param weekday {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToWeekday(weekday) {
	        weekday = parseInt(weekday, 10);
	        switch (weekday) {
	        case 0: // Sonndeg
	        case 1: // Méindeg
	        case 3: // Mëttwoch
	        case 5: // Freideg
	        case 6: // Samschdeg
	            return true;
	        default: // 2 Dënschdeg, 4 Donneschdeg
	            return false;
	        }
	    }

	    /**
	     * Returns true if the word before the given number loses the "-n" ending.
	     * e.g. "an 10 Deeg" but "a 5 Deeg"
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10, firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }

	    return moment.lang('lb', {
	        months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
	        monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
	        weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
	        weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
	        weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
	        longDateFormat: {
	            LT: "H:mm [Auer]",
	            L: "DD.MM.YYYY",
	            LL: "D. MMMM YYYY",
	            LLL: "D. MMMM YYYY LT",
	            LLLL: "dddd, D. MMMM YYYY LT"
	        },
	        calendar: {
	            sameDay: "[Haut um] LT",
	            sameElse: "L",
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: processLastWeek
	        },
	        relativeTime: {
	            future: processFutureTime,
	            past: processPastTime,
	            s: "e puer Sekonnen",
	            m: processRelativeTime,
	            mm: "%d Minutten",
	            h: processRelativeTime,
	            hh: "%d Stonnen",
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime
	        },
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Lithuanian (lt)
	// author : Mindaugas Mozūras : https://github.com/mmozuras

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var units = {
	        "m" : "minutė_minutės_minutę",
	        "mm": "minutės_minučių_minutes",
	        "h" : "valanda_valandos_valandą",
	        "hh": "valandos_valandų_valandas",
	        "d" : "diena_dienos_dieną",
	        "dd": "dienos_dienų_dienas",
	        "M" : "mėnuo_mėnesio_mėnesį",
	        "MM": "mėnesiai_mėnesių_mėnesius",
	        "y" : "metai_metų_metus",
	        "yy": "metai_metų_metus"
	    },
	    weekDays = "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_");

	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return "kelios sekundės";
	        } else {
	            return isFuture ? "kelių sekundžių" : "kelias sekundes";
	        }
	    }

	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	    }

	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }

	    function forms(key) {
	        return units[key].split("_");
	    }

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + " ";
	        if (number === 1) {
	            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }

	    function relativeWeekDay(moment, format) {
	        var nominative = format.indexOf('dddd HH:mm') === -1,
	            weekDay = weekDays[moment.day()];

	        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + "į";
	    }

	    return moment.lang("lt", {
	        months : "sausio_vasario_kovo_balandžio_gegužės_biržėlio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
	        monthsShort : "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
	        weekdays : relativeWeekDay,
	        weekdaysShort : "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
	        weekdaysMin : "S_P_A_T_K_Pn_Š".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "YYYY-MM-DD",
	            LL : "YYYY [m.] MMMM D [d.]",
	            LLL : "YYYY [m.] MMMM D [d.], LT [val.]",
	            LLLL : "YYYY [m.] MMMM D [d.], dddd, LT [val.]",
	            l : "YYYY-MM-DD",
	            ll : "YYYY [m.] MMMM D [d.]",
	            lll : "YYYY [m.] MMMM D [d.], LT [val.]",
	            llll : "YYYY [m.] MMMM D [d.], ddd, LT [val.]"
	        },
	        calendar : {
	            sameDay : "[Šiandien] LT",
	            nextDay : "[Rytoj] LT",
	            nextWeek : "dddd LT",
	            lastDay : "[Vakar] LT",
	            lastWeek : "[Praėjusį] dddd LT",
	            sameElse : "L"
	        },
	        relativeTime : {
	            future : "po %s",
	            past : "prieš %s",
	            s : translateSeconds,
	            m : translateSingular,
	            mm : translate,
	            h : translateSingular,
	            hh : translate,
	            d : translateSingular,
	            dd : translate,
	            M : translateSingular,
	            MM : translate,
	            y : translateSingular,
	            yy : translate
	        },
	        ordinal : function (number) {
	            return number + '-oji';
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : latvian (lv)
	// author : Kristaps Karlsons : https://github.com/skakri

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var units = {
	        'mm': 'minūti_minūtes_minūte_minūtes',
	        'hh': 'stundu_stundas_stunda_stundas',
	        'dd': 'dienu_dienas_diena_dienas',
	        'MM': 'mēnesi_mēnešus_mēnesis_mēneši',
	        'yy': 'gadu_gadus_gads_gadi'
	    };

	    function format(word, number, withoutSuffix) {
	        var forms = word.split('_');
	        if (withoutSuffix) {
	            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
	        } else {
	            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
	        }
	    }

	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }

	    return moment.lang('lv', {
	        months : "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
	        monthsShort : "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
	        weekdays : "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
	        weekdaysShort : "Sv_P_O_T_C_Pk_S".split("_"),
	        weekdaysMin : "Sv_P_O_T_C_Pk_S".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD.MM.YYYY",
	            LL : "YYYY. [gada] D. MMMM",
	            LLL : "YYYY. [gada] D. MMMM, LT",
	            LLLL : "YYYY. [gada] D. MMMM, dddd, LT"
	        },
	        calendar : {
	            sameDay : '[Šodien pulksten] LT',
	            nextDay : '[Rīt pulksten] LT',
	            nextWeek : 'dddd [pulksten] LT',
	            lastDay : '[Vakar pulksten] LT',
	            lastWeek : '[Pagājušā] dddd [pulksten] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s vēlāk",
	            past : "%s agrāk",
	            s : "dažas sekundes",
	            m : "minūti",
	            mm : relativeTimeWithPlural,
	            h : "stundu",
	            hh : relativeTimeWithPlural,
	            d : "dienu",
	            dd : relativeTimeWithPlural,
	            M : "mēnesi",
	            MM : relativeTimeWithPlural,
	            y : "gadu",
	            yy : relativeTimeWithPlural
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : macedonian (mk)
	// author : Borislav Mickov : https://github.com/B0k0

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('mk', {
	        months : "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),
	        monthsShort : "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),
	        weekdays : "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),
	        weekdaysShort : "нед_пон_вто_сре_чет_пет_саб".split("_"),
	        weekdaysMin : "нe_пo_вт_ср_че_пе_сa".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "D.MM.YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[Денес во] LT',
	            nextDay : '[Утре во] LT',
	            nextWeek : 'dddd [во] LT',
	            lastDay : '[Вчера во] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Во изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Во изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "после %s",
	            past : "пред %s",
	            s : "неколку секунди",
	            m : "минута",
	            mm : "%d минути",
	            h : "час",
	            hh : "%d часа",
	            d : "ден",
	            dd : "%d дена",
	            M : "месец",
	            MM : "%d месеци",
	            y : "година",
	            yy : "%d години"
	        },
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : malayalam (ml)
	// author : Floyd Pink : https://github.com/floydpink

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('ml', {
	        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split("_"),
	        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split("_"),
	        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split("_"),
	        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split("_"),
	        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split("_"),
	        longDateFormat : {
	            LT : "A h:mm -നു",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY, LT",
	            LLLL : "dddd, D MMMM YYYY, LT"
	        },
	        calendar : {
	            sameDay : '[ഇന്ന്] LT',
	            nextDay : '[നാളെ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ഇന്നലെ] LT',
	            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s കഴിഞ്ഞ്",
	            past : "%s മുൻപ്",
	            s : "അൽപ നിമിഷങ്ങൾ",
	            m : "ഒരു മിനിറ്റ്",
	            mm : "%d മിനിറ്റ്",
	            h : "ഒരു മണിക്കൂർ",
	            hh : "%d മണിക്കൂർ",
	            d : "ഒരു ദിവസം",
	            dd : "%d ദിവസം",
	            M : "ഒരു മാസം",
	            MM : "%d മാസം",
	            y : "ഒരു വർഷം",
	            yy : "%d വർഷം"
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return "രാത്രി";
	            } else if (hour < 12) {
	                return "രാവിലെ";
	            } else if (hour < 17) {
	                return "ഉച്ച കഴിഞ്ഞ്";
	            } else if (hour < 20) {
	                return "വൈകുന്നേരം";
	            } else {
	                return "രാത്രി";
	            }
	        }
	    });
	}));


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Marathi (mr)
	// author : Harshad Kale : https://github.com/kalehv

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    return moment.lang('mr', {
	        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split("_"),
	        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split("_"),
	        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split("_"),
	        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split("_"),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split("_"),
	        longDateFormat : {
	            LT : "A h:mm वाजता",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY, LT",
	            LLLL : "dddd, D MMMM YYYY, LT"
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[उद्या] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s नंतर",
	            past : "%s पूर्वी",
	            s : "सेकंद",
	            m: "एक मिनिट",
	            mm: "%d मिनिटे",
	            h : "एक तास",
	            hh : "%d तास",
	            d : "एक दिवस",
	            dd : "%d दिवस",
	            M : "एक महिना",
	            MM : "%d महिने",
	            y : "एक वर्ष",
	            yy : "%d वर्षे"
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiem: function (hour, minute, isLower)
	        {
	            if (hour < 4) {
	                return "रात्री";
	            } else if (hour < 10) {
	                return "सकाळी";
	            } else if (hour < 17) {
	                return "दुपारी";
	            } else if (hour < 20) {
	                return "सायंकाळी";
	            } else {
	                return "रात्री";
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Bahasa Malaysia (ms-MY)
	// author : Weldan Jamili : https://github.com/weldan

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('ms-my', {
	        months : "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
	        monthsShort : "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
	        weekdays : "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
	        weekdaysShort : "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
	        weekdaysMin : "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
	        longDateFormat : {
	            LT : "HH.mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY [pukul] LT",
	            LLLL : "dddd, D MMMM YYYY [pukul] LT"
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "dalam %s",
	            past : "%s yang lepas",
	            s : "beberapa saat",
	            m : "seminit",
	            mm : "%d minit",
	            h : "sejam",
	            hh : "%d jam",
	            d : "sehari",
	            dd : "%d hari",
	            M : "sebulan",
	            MM : "%d bulan",
	            y : "setahun",
	            yy : "%d tahun"
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : norwegian bokmål (nb)
	// authors : Espen Hovlandsdal : https://github.com/rexxars
	//           Sigurd Gartmann : https://github.com/sigurdga

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('nb', {
	        months : "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
	        monthsShort : "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
	        weekdays : "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
	        weekdaysShort : "sø._ma._ti._on._to._fr._lø.".split("_"),
	        weekdaysMin : "sø_ma_ti_on_to_fr_lø".split("_"),
	        longDateFormat : {
	            LT : "H.mm",
	            L : "DD.MM.YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY [kl.] LT",
	            LLLL : "dddd D. MMMM YYYY [kl.] LT"
	        },
	        calendar : {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "om %s",
	            past : "for %s siden",
	            s : "noen sekunder",
	            m : "ett minutt",
	            mm : "%d minutter",
	            h : "en time",
	            hh : "%d timer",
	            d : "en dag",
	            dd : "%d dager",
	            M : "en måned",
	            MM : "%d måneder",
	            y : "ett år",
	            yy : "%d år"
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : nepali/nepalese
	// author : suvash : https://github.com/suvash

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    return moment.lang('ne', {
	        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split("_"),
	        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split("_"),
	        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split("_"),
	        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split("_"),
	        weekdaysMin : 'आइ._सो._मङ्_बु._बि._शु._श.'.split("_"),
	        longDateFormat : {
	            LT : "Aको h:mm बजे",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY, LT",
	            LLLL : "dddd, D MMMM YYYY, LT"
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 3) {
	                return "राती";
	            } else if (hour < 10) {
	                return "बिहान";
	            } else if (hour < 15) {
	                return "दिउँसो";
	            } else if (hour < 18) {
	                return "बेलुका";
	            } else if (hour < 20) {
	                return "साँझ";
	            } else {
	                return "राती";
	            }
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[भोली] LT',
	            nextWeek : '[आउँदो] dddd[,] LT',
	            lastDay : '[हिजो] LT',
	            lastWeek : '[गएको] dddd[,] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%sमा",
	            past : "%s अगाडी",
	            s : "केही समय",
	            m : "एक मिनेट",
	            mm : "%d मिनेट",
	            h : "एक घण्टा",
	            hh : "%d घण्टा",
	            d : "एक दिन",
	            dd : "%d दिन",
	            M : "एक महिना",
	            MM : "%d महिना",
	            y : "एक बर्ष",
	            yy : "%d बर्ष"
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : dutch (nl)
	// author : Joris Röling : https://github.com/jjupiter

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var monthsShortWithDots = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
	        monthsShortWithoutDots = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");

	    return moment.lang('nl', {
	        months : "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        weekdays : "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
	        weekdaysShort : "zo._ma._di._wo._do._vr._za.".split("_"),
	        weekdaysMin : "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD-MM-YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "over %s",
	            past : "%s geleden",
	            s : "een paar seconden",
	            m : "één minuut",
	            mm : "%d minuten",
	            h : "één uur",
	            hh : "%d uur",
	            d : "één dag",
	            dd : "%d dagen",
	            M : "één maand",
	            MM : "%d maanden",
	            y : "één jaar",
	            yy : "%d jaar"
	        },
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : norwegian nynorsk (nn)
	// author : https://github.com/mechuwind

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('nn', {
	        months : "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
	        monthsShort : "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
	        weekdays : "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
	        weekdaysShort : "sun_mån_tys_ons_tor_fre_lau".split("_"),
	        weekdaysMin : "su_må_ty_on_to_fr_lø".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD.MM.YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "om %s",
	            past : "for %s sidan",
	            s : "nokre sekund",
	            m : "eit minutt",
	            mm : "%d minutt",
	            h : "ein time",
	            hh : "%d timar",
	            d : "ein dag",
	            dd : "%d dagar",
	            M : "ein månad",
	            MM : "%d månader",
	            y : "eit år",
	            yy : "%d år"
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : polish (pl)
	// author : Rafal Hirsz : https://github.com/evoL

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var monthsNominative = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),
	        monthsSubjective = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");

	    function plural(n) {
	        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	    }

	    function translate(number, withoutSuffix, key) {
	        var result = number + " ";
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }

	    return moment.lang('pl', {
	        months : function (momentToFormat, format) {
	            if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort : "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
	        weekdays : "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
	        weekdaysShort : "nie_pon_wt_śr_czw_pt_sb".split("_"),
	        weekdaysMin : "N_Pn_Wt_Śr_Cz_Pt_So".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD.MM.YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: '[W] dddd [o] LT',
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "za %s",
	            past : "%s temu",
	            s : "kilka sekund",
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : "1 dzień",
	            dd : '%d dni',
	            M : "miesiąc",
	            MM : translate,
	            y : "rok",
	            yy : translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : portuguese (pt)
	// author : Jefferson : https://github.com/jalex79

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('pt', {
	        months : "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
	        monthsShort : "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
	        weekdays : "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),
	        weekdaysShort : "dom_seg_ter_qua_qui_sex_sáb".split("_"),
	        weekdaysMin : "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D [de] MMMM [de] YYYY",
	            LLL : "D [de] MMMM [de] YYYY LT",
	            LLLL : "dddd, D [de] MMMM [de] YYYY LT"
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "em %s",
	            past : "há %s",
	            s : "segundos",
	            m : "um minuto",
	            mm : "%d minutos",
	            h : "uma hora",
	            hh : "%d horas",
	            d : "um dia",
	            dd : "%d dias",
	            M : "um mês",
	            MM : "%d meses",
	            y : "um ano",
	            yy : "%d anos"
	        },
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : brazilian portuguese (pt-br)
	// author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('pt-br', {
	        months : "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
	        monthsShort : "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
	        weekdays : "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),
	        weekdaysShort : "dom_seg_ter_qua_qui_sex_sáb".split("_"),
	        weekdaysMin : "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D [de] MMMM [de] YYYY",
	            LLL : "D [de] MMMM [de] YYYY [às] LT",
	            LLLL : "dddd, D [de] MMMM [de] YYYY [às] LT"
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "em %s",
	            past : "%s atrás",
	            s : "segundos",
	            m : "um minuto",
	            mm : "%d minutos",
	            h : "uma hora",
	            hh : "%d horas",
	            d : "um dia",
	            dd : "%d dias",
	            M : "um mês",
	            MM : "%d meses",
	            y : "um ano",
	            yy : "%d anos"
	        },
	        ordinal : '%dº'
	    });
	}));


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : romanian (ro)
	// author : Vlad Gurdiga : https://github.com/gurdiga
	// author : Valentin Agachi : https://github.com/avaly

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'minute',
	            'hh': 'ore',
	            'dd': 'zile',
	            'MM': 'luni',
	            'yy': 'ani'
	        },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }

	        return number + separator + format[key];
	    }

	    return moment.lang('ro', {
	        months : "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
	        monthsShort : "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
	        weekdays : "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),
	        weekdaysShort : "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
	        weekdaysMin : "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "DD.MM.YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY H:mm",
	            LLLL : "dddd, D MMMM YYYY H:mm"
	        },
	        calendar : {
	            sameDay: "[azi la] LT",
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "peste %s",
	            past : "%s în urmă",
	            s : "câteva secunde",
	            m : "un minut",
	            mm : relativeTimeWithPlural,
	            h : "o oră",
	            hh : relativeTimeWithPlural,
	            d : "o zi",
	            dd : relativeTimeWithPlural,
	            M : "o lună",
	            MM : relativeTimeWithPlural,
	            y : "un an",
	            yy : relativeTimeWithPlural
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : russian (ru)
	// author : Viktorminator : https://github.com/Viktorminator
	// Author : Menelion Elensúle : https://github.com/Oire

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }

	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            'hh': 'час_часа_часов',
	            'dd': 'день_дня_дней',
	            'MM': 'месяц_месяца_месяцев',
	            'yy': 'год_года_лет'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }

	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	            'accusative': 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
	        },

	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return months[nounCase][m.month()];
	    }

	    function monthsShortCaseReplace(m, format) {
	        var monthsShort = {
	            'nominative': 'янв_фев_мар_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	            'accusative': 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
	        },

	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return monthsShort[nounCase][m.month()];
	    }

	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	            'accusative': 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
	        },

	        nounCase = (/\[ ?[Вв] ?(?:прошлую|следующую)? ?\] ?dddd/).test(format) ?
	            'accusative' :
	            'nominative';

	        return weekdays[nounCase][m.day()];
	    }

	    return moment.lang('ru', {
	        months : monthsCaseReplace,
	        monthsShort : monthsShortCaseReplace,
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : "вс_пн_вт_ср_чт_пт_сб".split("_"),
	        weekdaysMin : "вс_пн_вт_ср_чт_пт_сб".split("_"),
	        monthsParse : [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD.MM.YYYY",
	            LL : "D MMMM YYYY г.",
	            LLL : "D MMMM YYYY г., LT",
	            LLLL : "dddd, D MMMM YYYY г., LT"
	        },
	        calendar : {
	            sameDay: '[Сегодня в] LT',
	            nextDay: '[Завтра в] LT',
	            lastDay: '[Вчера в] LT',
	            nextWeek: function () {
	                return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[В прошлое] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[В прошлый] dddd [в] LT';
	                case 3:
	                case 5:
	                case 6:
	                    return '[В прошлую] dddd [в] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "через %s",
	            past : "%s назад",
	            s : "несколько секунд",
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : "час",
	            hh : relativeTimeWithPlural,
	            d : "день",
	            dd : relativeTimeWithPlural,
	            M : "месяц",
	            MM : relativeTimeWithPlural,
	            y : "год",
	            yy : relativeTimeWithPlural
	        },

	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM : function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },

	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return "ночи";
	            } else if (hour < 12) {
	                return "утра";
	            } else if (hour < 17) {
	                return "дня";
	            } else {
	                return "вечера";
	            }
	        },

	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	            }
	        },

	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : slovak (sk)
	// author : Martin Minka : https://github.com/k2s
	// based on work of petrbela : https://github.com/petrbela

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    var months = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),
	        monthsShort = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");

	    function plural(n) {
	        return (n > 1) && (n < 5);
	    }

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + " ";
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	        }
	    }

	    return moment.lang('sk', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        weekdays : "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
	        weekdaysShort : "ne_po_ut_st_št_pi_so".split("_"),
	        weekdaysMin : "ne_po_ut_st_št_pi_so".split("_"),
	        longDateFormat : {
	            LT: "H:mm",
	            L : "DD.MM.YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY LT",
	            LLLL : "dddd D. MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[dnes o] LT",
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: "L"
	        },
	        relativeTime : {
	            future : "za %s",
	            past : "pred %s",
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : slovenian (sl)
	// author : Robert Sedovšek : https://github.com/sedovsek

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function translate(number, withoutSuffix, key) {
	        var result = number + " ";
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2) {
	                result += 'minuti';
	            } else if (number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minut';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += 'ura';
	            } else if (number === 2) {
	                result += 'uri';
	            } else if (number === 3 || number === 4) {
	                result += 'ure';
	            } else {
	                result += 'ur';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dni';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mesec';
	            } else if (number === 2) {
	                result += 'meseca';
	            } else if (number === 3 || number === 4) {
	                result += 'mesece';
	            } else {
	                result += 'mesecev';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'leto';
	            } else if (number === 2) {
	                result += 'leti';
	            } else if (number === 3 || number === 4) {
	                result += 'leta';
	            } else {
	                result += 'let';
	            }
	            return result;
	        }
	    }

	    return moment.lang('sl', {
	        months : "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
	        monthsShort : "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
	        weekdays : "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
	        weekdaysShort : "ned._pon._tor._sre._čet._pet._sob.".split("_"),
	        weekdaysMin : "ne_po_to_sr_če_pe_so".split("_"),
	        longDateFormat : {
	            LT : "H:mm",
	            L : "DD. MM. YYYY",
	            LL : "D. MMMM YYYY",
	            LLL : "D. MMMM YYYY LT",
	            LLLL : "dddd, D. MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay  : '[danes ob] LT',
	            nextDay  : '[jutri ob] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay  : '[včeraj ob] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[prejšnja] dddd [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "čez %s",
	            past   : "%s nazaj",
	            s      : "nekaj sekund",
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : "en dan",
	            dd     : translate,
	            M      : "en mesec",
	            MM     : translate,
	            y      : "eno leto",
	            yy     : translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Albanian (sq)
	// author : Flakërim Ismani : https://github.com/flakerimi
	// author: Menelion Elensúle: https://github.com/Oire (tests)
	// author : Oerd Cukalla : https://github.com/oerd (fixes)

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('sq', {
	        months : "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
	        monthsShort : "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
	        weekdays : "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),
	        weekdaysShort : "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
	        weekdaysMin : "D_H_Ma_Më_E_P_Sh".split("_"),
	        meridiem : function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[Sot në] LT',
	            nextDay : '[Nesër në] LT',
	            nextWeek : 'dddd [në] LT',
	            lastDay : '[Dje në] LT',
	            lastWeek : 'dddd [e kaluar në] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "në %s",
	            past : "%s më parë",
	            s : "disa sekonda",
	            m : "një minutë",
	            mm : "%d minuta",
	            h : "një orë",
	            hh : "%d orë",
	            d : "një ditë",
	            dd : "%d ditë",
	            M : "një muaj",
	            MM : "%d muaj",
	            y : "një vit",
	            yy : "%d vite"
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Serbian-latin (sr)
	// author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {

	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jedne minute'],
	            mm: ['minut', 'minute', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    return moment.lang('sr', {
	        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
	        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
	        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],
	        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],
	        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
	        longDateFormat: {
	            LT: "H:mm",
	            L: "DD. MM. YYYY",
	            LL: "D. MMMM YYYY",
	            LLL: "D. MMMM YYYY LT",
	            LLLL: "dddd, D. MMMM YYYY LT"
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',

	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "za %s",
	            past   : "pre %s",
	            s      : "nekoliko sekundi",
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : "dan",
	            dd     : translator.translate,
	            M      : "mesec",
	            MM     : translator.translate,
	            y      : "godinu",
	            yy     : translator.translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Serbian-cyrillic (sr-cyrl)
	// author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {

	    var translator = {
	        words: { //Different grammatical cases
	            m: ['један минут', 'једне минуте'],
	            mm: ['минут', 'минуте', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            dd: ['дан', 'дана', 'дана'],
	            MM: ['месец', 'месеца', 'месеци'],
	            yy: ['година', 'године', 'година']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    return moment.lang('sr-cyrl', {
	        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
	        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],
	        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],
	        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],
	        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],
	        longDateFormat: {
	            LT: "H:mm",
	            L: "DD. MM. YYYY",
	            LL: "D. MMMM YYYY",
	            LLL: "D. MMMM YYYY LT",
	            LLLL: "dddd, D. MMMM YYYY LT"
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',

	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	                }
	            },
	            lastDay  : '[јуче у] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "за %s",
	            past   : "пре %s",
	            s      : "неколико секунди",
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : "дан",
	            dd     : translator.translate,
	            M      : "месец",
	            MM     : translator.translate,
	            y      : "годину",
	            yy     : translator.translate
	        },
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : swedish (sv)
	// author : Jens Alm : https://github.com/ulmus

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('sv', {
	        months : "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
	        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
	        weekdays : "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
	        weekdaysShort : "sön_mån_tis_ons_tor_fre_lör".split("_"),
	        weekdaysMin : "sö_må_ti_on_to_fr_lö".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "YYYY-MM-DD",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: 'dddd LT',
	            lastWeek: '[Förra] dddd[en] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "om %s",
	            past : "för %s sedan",
	            s : "några sekunder",
	            m : "en minut",
	            mm : "%d minuter",
	            h : "en timme",
	            hh : "%d timmar",
	            d : "en dag",
	            dd : "%d dagar",
	            M : "en månad",
	            MM : "%d månader",
	            y : "ett år",
	            yy : "%d år"
	        },
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~ (number % 100 / 10) === 1) ? 'e' :
	                (b === 1) ? 'a' :
	                (b === 2) ? 'a' :
	                (b === 3) ? 'e' : 'e';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : tamil (ta)
	// author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    /*var symbolMap = {
	            '1': '௧',
	            '2': '௨',
	            '3': '௩',
	            '4': '௪',
	            '5': '௫',
	            '6': '௬',
	            '7': '௭',
	            '8': '௮',
	            '9': '௯',
	            '0': '௦'
	        },
	        numberMap = {
	            '௧': '1',
	            '௨': '2',
	            '௩': '3',
	            '௪': '4',
	            '௫': '5',
	            '௬': '6',
	            '௭': '7',
	            '௮': '8',
	            '௯': '9',
	            '௦': '0'
	        }; */

	    return moment.lang('ta', {
	        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split("_"),
	        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split("_"),
	        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split("_"),
	        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split("_"),
	        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY, LT",
	            LLLL : "dddd, D MMMM YYYY, LT"
	        },
	        calendar : {
	            sameDay : '[இன்று] LT',
	            nextDay : '[நாளை] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[நேற்று] LT',
	            lastWeek : '[கடந்த வாரம்] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s இல்",
	            past : "%s முன்",
	            s : "ஒரு சில விநாடிகள்",
	            m : "ஒரு நிமிடம்",
	            mm : "%d நிமிடங்கள்",
	            h : "ஒரு மணி நேரம்",
	            hh : "%d மணி நேரம்",
	            d : "ஒரு நாள்",
	            dd : "%d நாட்கள்",
	            M : "ஒரு மாதம்",
	            MM : "%d மாதங்கள்",
	            y : "ஒரு வருடம்",
	            yy : "%d ஆண்டுகள்"
	        },
	/*        preparse: function (string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },*/
	        ordinal : function (number) {
	            return number + 'வது';
	        },


	// refer http://ta.wikipedia.org/s/1er1      

	        meridiem : function (hour, minute, isLower) {
	            if (hour >= 6 && hour <= 10) {
	                return " காலை";
	            } else   if (hour >= 10 && hour <= 14) {
	                return " நண்பகல்";
	            } else    if (hour >= 14 && hour <= 18) {
	                return " எற்பாடு";
	            } else   if (hour >= 18 && hour <= 20) {
	                return " மாலை";
	            } else  if (hour >= 20 && hour <= 24) {
	                return " இரவு";
	            } else  if (hour >= 0 && hour <= 6) {
	                return " வைகறை";
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : thai (th)
	// author : Kridsada Thanabulpong : https://github.com/sirn

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('th', {
	        months : "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
	        monthsShort : "มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),
	        weekdays : "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
	        weekdaysShort : "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"), // yes, three characters difference
	        weekdaysMin : "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
	        longDateFormat : {
	            LT : "H นาฬิกา m นาที",
	            L : "YYYY/MM/DD",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY เวลา LT",
	            LLLL : "วันddddที่ D MMMM YYYY เวลา LT"
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return "ก่อนเที่ยง";
	            } else {
	                return "หลังเที่ยง";
	            }
	        },
	        calendar : {
	            sameDay : '[วันนี้ เวลา] LT',
	            nextDay : '[พรุ่งนี้ เวลา] LT',
	            nextWeek : 'dddd[หน้า เวลา] LT',
	            lastDay : '[เมื่อวานนี้ เวลา] LT',
	            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "อีก %s",
	            past : "%sที่แล้ว",
	            s : "ไม่กี่วินาที",
	            m : "1 นาที",
	            mm : "%d นาที",
	            h : "1 ชั่วโมง",
	            hh : "%d ชั่วโมง",
	            d : "1 วัน",
	            dd : "%d วัน",
	            M : "1 เดือน",
	            MM : "%d เดือน",
	            y : "1 ปี",
	            yy : "%d ปี"
	        }
	    });
	}));


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Tagalog/Filipino (tl-ph)
	// author : Dan Hagman

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('tl-ph', {
	        months : "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
	        monthsShort : "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
	        weekdays : "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
	        weekdaysShort : "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
	        weekdaysMin : "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "MM/D/YYYY",
	            LL : "MMMM D, YYYY",
	            LLL : "MMMM D, YYYY LT",
	            LLLL : "dddd, MMMM DD, YYYY LT"
	        },
	        calendar : {
	            sameDay: "[Ngayon sa] LT",
	            nextDay: '[Bukas sa] LT',
	            nextWeek: 'dddd [sa] LT',
	            lastDay: '[Kahapon sa] LT',
	            lastWeek: 'dddd [huling linggo] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "sa loob ng %s",
	            past : "%s ang nakalipas",
	            s : "ilang segundo",
	            m : "isang minuto",
	            mm : "%d minuto",
	            h : "isang oras",
	            hh : "%d oras",
	            d : "isang araw",
	            dd : "%d araw",
	            M : "isang buwan",
	            MM : "%d buwan",
	            y : "isang taon",
	            yy : "%d taon"
	        },
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : turkish (tr)
	// authors : Erhan Gundogan : https://github.com/erhangundogan,
	//           Burak Yiğit Kaya: https://github.com/BYK

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {

	    var suffixes = {
	        1: "'inci",
	        5: "'inci",
	        8: "'inci",
	        70: "'inci",
	        80: "'inci",

	        2: "'nci",
	        7: "'nci",
	        20: "'nci",
	        50: "'nci",

	        3: "'üncü",
	        4: "'üncü",
	        100: "'üncü",

	        6: "'ncı",

	        9: "'uncu",
	        10: "'uncu",
	        30: "'uncu",

	        60: "'ıncı",
	        90: "'ıncı"
	    };

	    return moment.lang('tr', {
	        months : "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
	        monthsShort : "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
	        weekdays : "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
	        weekdaysShort : "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
	        weekdaysMin : "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD.MM.YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd, D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[yarın saat] LT',
	            nextWeek : '[haftaya] dddd [saat] LT',
	            lastDay : '[dün] LT',
	            lastWeek : '[geçen hafta] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "%s sonra",
	            past : "%s önce",
	            s : "birkaç saniye",
	            m : "bir dakika",
	            mm : "%d dakika",
	            h : "bir saat",
	            hh : "%d saat",
	            d : "bir gün",
	            dd : "%d gün",
	            M : "bir ay",
	            MM : "%d ay",
	            y : "bir yıl",
	            yy : "%d yıl"
	        },
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + "'ıncı";
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;

	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Morocco Central Atlas Tamaziɣt (tzm)
	// author : Abdel Said : https://github.com/abdelsaid

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('tzm', {
	        months : "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
	        monthsShort : "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
	        weekdays : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
	        weekdaysShort : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
	        weekdaysMin : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
	            past : "ⵢⴰⵏ %s",
	            s : "ⵉⵎⵉⴽ",
	            m : "ⵎⵉⵏⵓⴺ",
	            mm : "%d ⵎⵉⵏⵓⴺ",
	            h : "ⵙⴰⵄⴰ",
	            hh : "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
	            d : "ⴰⵙⵙ",
	            dd : "%d oⵙⵙⴰⵏ",
	            M : "ⴰⵢoⵓⵔ",
	            MM : "%d ⵉⵢⵢⵉⵔⵏ",
	            y : "ⴰⵙⴳⴰⵙ",
	            yy : "%d ⵉⵙⴳⴰⵙⵏ"
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
	// author : Abdel Said : https://github.com/abdelsaid

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('tzm-latn', {
	        months : "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
	        monthsShort : "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
	        weekdays : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
	        weekdaysShort : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
	        weekdaysMin : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "dddd D MMMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[asdkh g] LT",
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "dadkh s yan %s",
	            past : "yan %s",
	            s : "imik",
	            m : "minuḍ",
	            mm : "%d minuḍ",
	            h : "saɛa",
	            hh : "%d tassaɛin",
	            d : "ass",
	            dd : "%d ossan",
	            M : "ayowr",
	            MM : "%d iyyirn",
	            y : "asgas",
	            yy : "%d isgasn"
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : ukrainian (uk)
	// author : zemlanin : https://github.com/zemlanin
	// Author : Menelion Elensúle : https://github.com/Oire

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }

	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'хвилина_хвилини_хвилин',
	            'hh': 'година_години_годин',
	            'dd': 'день_дні_днів',
	            'MM': 'місяць_місяці_місяців',
	            'yy': 'рік_роки_років'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }

	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_'),
	            'accusative': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_')
	        },

	        nounCase = (/D[oD]? *MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return months[nounCase][m.month()];
	    }

	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	        },

	        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	            'accusative' :
	            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	                'genitive' :
	                'nominative');

	        return weekdays[nounCase][m.day()];
	    }

	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }

	    return moment.lang('uk', {
	        months : monthsCaseReplace,
	        monthsShort : "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : "нд_пн_вт_ср_чт_пт_сб".split("_"),
	        weekdaysMin : "нд_пн_вт_ср_чт_пт_сб".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD.MM.YYYY",
	            LL : "D MMMM YYYY р.",
	            LLL : "D MMMM YYYY р., LT",
	            LLLL : "dddd, D MMMM YYYY р., LT"
	        },
	        calendar : {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "за %s",
	            past : "%s тому",
	            s : "декілька секунд",
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : "годину",
	            hh : relativeTimeWithPlural,
	            d : "день",
	            dd : relativeTimeWithPlural,
	            M : "місяць",
	            MM : relativeTimeWithPlural,
	            y : "рік",
	            yy : relativeTimeWithPlural
	        },

	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason

	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return "ночі";
	            } else if (hour < 12) {
	                return "ранку";
	            } else if (hour < 17) {
	                return "дня";
	            } else {
	                return "вечора";
	            }
	        },

	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	            }
	        },

	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : uzbek
	// author : Sardor Muminov : https://github.com/muminoff

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('uz', {
	        months : "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
	        monthsShort : "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
	        weekdays : "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
	        weekdaysShort : "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
	        weekdaysMin : "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM YYYY",
	            LLL : "D MMMM YYYY LT",
	            LLLL : "D MMMM YYYY, dddd LT"
	        },
	        calendar : {
	            sameDay : '[Бугун соат] LT [да]',
	            nextDay : '[Эртага] LT [да]',
	            nextWeek : 'dddd [куни соат] LT [да]',
	            lastDay : '[Кеча соат] LT [да]',
	            lastWeek : '[Утган] dddd [куни соат] LT [да]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : "Якин %s ичида",
	            past : "Бир неча %s олдин",
	            s : "фурсат",
	            m : "бир дакика",
	            mm : "%d дакика",
	            h : "бир соат",
	            hh : "%d соат",
	            d : "бир кун",
	            dd : "%d кун",
	            M : "бир ой",
	            MM : "%d ой",
	            y : "бир йил",
	            yy : "%d йил"
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : vietnamese (vi)
	// author : Bang Nguyen : https://github.com/bangnk

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('vi', {
	        months : "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
	        monthsShort : "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
	        weekdays : "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
	        weekdaysShort : "CN_T2_T3_T4_T5_T6_T7".split("_"),
	        weekdaysMin : "CN_T2_T3_T4_T5_T6_T7".split("_"),
	        longDateFormat : {
	            LT : "HH:mm",
	            L : "DD/MM/YYYY",
	            LL : "D MMMM [năm] YYYY",
	            LLL : "D MMMM [năm] YYYY LT",
	            LLLL : "dddd, D MMMM [năm] YYYY LT",
	            l : "DD/M/YYYY",
	            ll : "D MMM YYYY",
	            lll : "D MMM YYYY LT",
	            llll : "ddd, D MMM YYYY LT"
	        },
	        calendar : {
	            sameDay: "[Hôm nay lúc] LT",
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần rồi lúc] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : "%s tới",
	            past : "%s trước",
	            s : "vài giây",
	            m : "một phút",
	            mm : "%d phút",
	            h : "một giờ",
	            hh : "%d giờ",
	            d : "một ngày",
	            dd : "%d ngày",
	            M : "một tháng",
	            MM : "%d tháng",
	            y : "một năm",
	            yy : "%d năm"
	        },
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : chinese
	// author : suupic : https://github.com/suupic
	// author : Zeno Zeng : https://github.com/zenozeng

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('zh-cn', {
	        months : "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
	        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
	        weekdays : "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
	        weekdaysShort : "周日_周一_周二_周三_周四_周五_周六".split("_"),
	        weekdaysMin : "日_一_二_三_四_五_六".split("_"),
	        longDateFormat : {
	            LT : "Ah点mm",
	            L : "YYYY-MM-DD",
	            LL : "YYYY年MMMD日",
	            LLL : "YYYY年MMMD日LT",
	            LLLL : "YYYY年MMMD日ddddLT",
	            l : "YYYY-MM-DD",
	            ll : "YYYY年MMMD日",
	            lll : "YYYY年MMMD日LT",
	            llll : "YYYY年MMMD日ddddLT"
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return "凌晨";
	            } else if (hm < 900) {
	                return "早上";
	            } else if (hm < 1130) {
	                return "上午";
	            } else if (hm < 1230) {
	                return "中午";
	            } else if (hm < 1800) {
	                return "下午";
	            } else {
	                return "晚上";
	            }
	        },
	        calendar : {
	            sameDay : function () {
	                return this.minutes() === 0 ? "[今天]Ah[点整]" : "[今天]LT";
	            },
	            nextDay : function () {
	                return this.minutes() === 0 ? "[明天]Ah[点整]" : "[明天]LT";
	            },
	            lastDay : function () {
	                return this.minutes() === 0 ? "[昨天]Ah[点整]" : "[昨天]LT";
	            },
	            nextWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
	                return this.minutes() === 0 ? prefix + "dddAh点整" : prefix + "dddAh点mm";
	            },
	            lastWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
	                return this.minutes() === 0 ? prefix + "dddAh点整" : prefix + "dddAh点mm";
	            },
	            sameElse : 'LL'
	        },
	        ordinal : function (number, period) {
	            switch (period) {
	            case "d":
	            case "D":
	            case "DDD":
	                return number + "日";
	            case "M":
	                return number + "月";
	            case "w":
	            case "W":
	                return number + "周";
	            default:
	                return number;
	            }
	        },
	        relativeTime : {
	            future : "%s内",
	            past : "%s前",
	            s : "几秒",
	            m : "1分钟",
	            mm : "%d分钟",
	            h : "1小时",
	            hh : "%d小时",
	            d : "1天",
	            dd : "%d天",
	            M : "1个月",
	            MM : "%d个月",
	            y : "1年",
	            yy : "%d年"
	        },
	        week : {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js language configuration
	// language : traditional chinese (zh-tw)
	// author : Ben : https://github.com/ben-lin

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(329)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory(window.moment); // Browser global
	    }
	}(function (moment) {
	    return moment.lang('zh-tw', {
	        months : "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
	        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
	        weekdays : "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
	        weekdaysShort : "週日_週一_週二_週三_週四_週五_週六".split("_"),
	        weekdaysMin : "日_一_二_三_四_五_六".split("_"),
	        longDateFormat : {
	            LT : "Ah點mm",
	            L : "YYYY年MMMD日",
	            LL : "YYYY年MMMD日",
	            LLL : "YYYY年MMMD日LT",
	            LLLL : "YYYY年MMMD日ddddLT",
	            l : "YYYY年MMMD日",
	            ll : "YYYY年MMMD日",
	            lll : "YYYY年MMMD日LT",
	            llll : "YYYY年MMMD日ddddLT"
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 900) {
	                return "早上";
	            } else if (hm < 1130) {
	                return "上午";
	            } else if (hm < 1230) {
	                return "中午";
	            } else if (hm < 1800) {
	                return "下午";
	            } else {
	                return "晚上";
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        ordinal : function (number, period) {
	            switch (period) {
	            case "d" :
	            case "D" :
	            case "DDD" :
	                return number + "日";
	            case "M" :
	                return number + "月";
	            case "w" :
	            case "W" :
	                return number + "週";
	            default :
	                return number;
	            }
	        },
	        relativeTime : {
	            future : "%s內",
	            past : "%s前",
	            s : "幾秒",
	            m : "一分鐘",
	            mm : "%d分鐘",
	            h : "一小時",
	            hh : "%d小時",
	            d : "一天",
	            dd : "%d天",
	            M : "一個月",
	            MM : "%d個月",
	            y : "一年",
	            yy : "%d年"
	        }
	    });
	}));


/***/ },
/* 406 */,
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Emitter = __webpack_require__(41);

	module.exports = Title;

	function Title() {
		this.org = {rooms: new Emitter([]), pms: new Emitter([])};
		this.room = new Emitter({name: '', users: []});

		this.refresh = this.refresh.bind(this);
		this.addRoom = this.addRoom.bind(this);
		this.removeRoom = this.removeRoom.bind(this);
	}

	Title.prototype.refresh = function Title_refresh() {
		var title = '';

		var unread = this.org.rooms.reduce(sum, 0) +
		             this.org.pms.reduce(sum, 0);

		if (typeof MacGap !== "undefined") {
			if (unread) {
				MacGap.Dock.addBadge(unread);
			} else {
				MacGap.Dock.removeBadge();
			}
		}

		if (unread)
			title += '(' + unread + ') ';

		var name = this.room.name;
		if (!name) {
			var user = this.room.users[0];
			if (user)
				name = '@' + user.username;
		}
		if (name)
			title += name + ' – ';

		document.title = title + 'ChatGrape';
	};

	function sum(s, el) {
		if (!el.joined) return s;
		return s + el.unread;
	}

	Title.prototype.setRoom = function Title_setRoom(room) {
		this.room = room;
		this.refresh();
	};

	Title.prototype.addRoom = function Title_addRoom(room) {
		room.on('change', this.refresh);
		this.refresh();
	};
	Title.prototype.removeRoom = function Title_removeRoom(room) {
		room.off('change', this.refresh);
		this.refresh();
	};

	Title.prototype.setOrganization = function Title_setOrganization(org) {
		this.org.rooms.off('add', this.addRoom);
		this.org.rooms.off('remove', this.removeRoom);
		this.org.pms.off('add', this.addRoom);
		this.org.pms.off('remove', this.removeRoom);
		this.org = org;
		this.org.rooms.on('add', this.addRoom);
		this.org.rooms.on('remove', this.removeRoom);
		this.org.pms.on('add', this.addRoom);
		this.org.pms.on('remove', this.removeRoom);
	};


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Emitter = __webpack_require__(41);
	var Upload = __webpack_require__(409);
	var Progress = __webpack_require__(410);
	var file = __webpack_require__(106);
	var template = __webpack_require__(29);
	var qs = __webpack_require__(43);
	var render = __webpack_require__(133);
	var classes = __webpack_require__(99);

	module.exports = Uploader;

	function Uploader(uploadPath) {
		Emitter.call(this);
		this.uploadPath = uploadPath;
		this.org = {id: 0};
		this.init();
		this.bind();
	}

	Uploader.prototype = Object.create(Emitter.prototype);

	Uploader.prototype.init = function Uploader_init() {
		var vdom = template('fileuploader.jade', {});
		render(this, vdom);
		this.classes = classes(this.el);

		this.input = qs('input', this.el);
		this.trigger = qs('.trigger', this.el);
		// append progress widget
		this.progress = new Progress();
		this.progress.size(24);
		qs('.progress', this.el).appendChild(this.progress.el);
		// get the preview container
		this.preview = qs('.preview', this.el);
	};

	Uploader.prototype.bind = function Uploader_bind() {
		var self = this;
		this.trigger.addEventListener('click', function () { self.input.click(); });
		this.input.addEventListener('change', function () {
			for (var i = 0; i < this.files.length; i++){
				self.doUpload(this.files[i]);
			}
			// the uploader input takes action only when the form changes,
			// so after each upload, clear the form value so that any file can be uploaded twice
			self.input.value = '';
		});
	};

	Uploader.prototype.doUpload = function Uploader_doUpload(file) {
		var self = this;
		self.progress.update(0);
		self.showPreview(file);
		var upload = new Upload(file);
		this.emit('uploading');
		upload.on('progress', function (progress) {
			self.progress.update(progress.percent);
		});
		upload.to({
			path: self.uploadPath,
			data: {organization: self.org.id}
		}, function (err, res) {
			if (err) return self.emit('error', err);
			res = JSON.parse(res.responseText);
			self.emit('uploaded', res);
		});
	};


	Uploader.prototype.setOrganization = function Uploader_setOrganization(org) {
		this.org = org;
	};

	Uploader.prototype.showPreview = function Uploader_updatePreview(f) {
		var self = this;
		file(f).toDataURL(function (err, url) {
			self.preview.src = url;
			self.classes.add('open');
		});
	};

	Uploader.prototype.hide = function Uploader_hide() {
		this.classes.remove('open');
	};


/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var Emitter = __webpack_require__(41);

	/**
	 * Expose `Upload`.
	 */

	module.exports = Upload;

	/**
	 * Initialize a new `Upload` file`.
	 * This represents a single file upload.
	 *
	 * Events:
	 *
	 *   - `error` an error occurred
	 *   - `abort` upload was aborted
	 *   - `progress` upload in progress (`e.percent` etc)
	 *   - `end` upload is complete
	 *
	 * @param {File} file
	 * @api private
	 */

	function Upload(file) {
	  if (!(this instanceof Upload)) return new Upload(file);
	  Emitter.call(this);
	  this.file = file;
	  file.slice = file.slice || file.webkitSlice;
	}

	/**
	 * Mixin emitter.
	 */

	Emitter(Upload.prototype);

	/**
	 * Upload to the given `path`.
	 *
	 * @param {String} options
	 * @param {Function} [fn]
	 * @api public
	 */

	Upload.prototype.to = function(options, fn){
	  // TODO: x-browser
	  var path;
	  if (typeof options == 'string') {
	    path = options;
	    options = {};
	  } else {
	    path = options.path;
	  }
	  var self = this;
	  fn = fn || function(){};
	  var req = this.req = new XMLHttpRequest;
	  req.open('POST', path);
	  req.onload = this.onload.bind(this);
	  req.onerror = this.onerror.bind(this);
	  req.upload.onprogress = this.onprogress.bind(this);
	  req.onreadystatechange = function(){
	    if (4 == req.readyState) {
	      var type = req.status / 100 | 0;
	      if (2 == type) return fn(null, req);
	      var err = new Error(req.statusText + ': ' + req.response);
	      err.status = req.status;
	      fn(err);
	    }
	  };
	  var key, headers = options.headers || {};
	  for (key in headers) {
	    req.setRequestHeader(key, headers[key]);
	  }
	  var body = new FormData;
	  body.append(options.name || 'file', this.file);
	  var data = options.data || {};
	  for (key in data) {
	    body.append(key, data[key]);
	  }
	  req.send(body);
	};

	/**
	 * Abort the XHR.
	 *
	 * @api public
	 */

	Upload.prototype.abort = function(){
	  this.emit('abort');
	  this.req.abort();
	};

	/**
	 * Error handler.
	 *
	 * @api private
	 */

	Upload.prototype.onerror = function(e){
	  this.emit('error', e);
	};

	/**
	 * Onload handler.
	 *
	 * @api private
	 */

	Upload.prototype.onload = function(e){
	  this.emit('end', this.req);
	};

	/**
	 * Progress handler.
	 *
	 * @api private
	 */

	Upload.prototype.onprogress = function(e){
	  e.percent = e.loaded / e.total * 100;
	  this.emit('progress', e);
	};


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var autoscale = __webpack_require__(411);

	/**
	 * Expose `Progress`.
	 */

	module.exports = Progress;

	/**
	 * Initialize a new `Progress` indicator.
	 */

	function Progress() {
	  this.percent = 0;
	  this.el = document.createElement('canvas');
	  this.ctx = this.el.getContext('2d');
	  this.size(50);
	  this.fontSize(11);
	  this.font('helvetica, arial, sans-serif');
	}

	/**
	 * Set progress size to `n`.
	 *
	 * @param {Number} n
	 * @return {Progress}
	 * @api public
	 */

	Progress.prototype.size = function(n){
	  this.el.width = n;
	  this.el.height = n;
	  autoscale(this.el);
	  return this;
	};

	/**
	 * Set text to `str`.
	 *
	 * @param {String} str
	 * @return {Progress}
	 * @api public
	 */

	Progress.prototype.text = function(str){
	  this._text = str;
	  return this;
	};

	/**
	 * Set font size to `n`.
	 *
	 * @param {Number} n
	 * @return {Progress}
	 * @api public
	 */

	Progress.prototype.fontSize = function(n){
	  this._fontSize = n;
	  return this;
	};

	/**
	 * Set font `family`.
	 *
	 * @param {String} family
	 * @return {Progress}
	 * @api public
	 */

	Progress.prototype.font = function(family){
	  this._font = family;
	  return this;
	};

	/**
	 * Update percentage to `n`.
	 *
	 * @param {Number} n
	 * @return {Progress}
	 * @api public
	 */

	Progress.prototype.update = function(n){
	  this.percent = n;
	  this.draw(this.ctx);
	  return this;
	};

	/**
	 * Draw on `ctx`.
	 *
	 * @param {CanvasRenderingContext2d} ctx
	 * @return {Progress}
	 * @api private
	 */

	Progress.prototype.draw = function(ctx){
	  var percent = Math.min(this.percent, 100)
	    , ratio = window.devicePixelRatio || 1
	    , size = this.el.width / ratio
	    , half = size / 2
	    , x = half
	    , y = half
	    , rad = half - 1
	    , fontSize = this._fontSize;

	  ctx.font = fontSize + 'px ' + this._font;

	  var angle = Math.PI * 2 * (percent / 100);
	  ctx.clearRect(0, 0, size, size);

	  // outer circle
	  ctx.strokeStyle = '#9f9f9f';
	  ctx.beginPath();
	  ctx.arc(x, y, rad, 0, angle, false);
	  ctx.stroke();

	  // inner circle
	  ctx.strokeStyle = '#eee';
	  ctx.beginPath();
	  ctx.arc(x, y, rad - 1, 0, angle, true);
	  ctx.stroke();

	  // text
	  var text = this._text || (percent | 0) + '%'
	    , w = ctx.measureText(text).width;

	  ctx.fillText(
	      text
	    , x - w / 2 + 1
	    , y + fontSize / 2 - 1);

	  return this;
	};



/***/ },
/* 411 */
/***/ function(module, exports) {

	
	/**
	 * Retina-enable the given `canvas`.
	 *
	 * @param {Canvas} canvas
	 * @return {Canvas}
	 * @api public
	 */

	module.exports = function(canvas){
	  var ctx = canvas.getContext('2d');
	  var ratio = window.devicePixelRatio || 1;
	  if (1 != ratio) {
	    canvas.style.width = canvas.width + 'px';
	    canvas.style.height = canvas.height + 'px';
	    canvas.width *= ratio;
	    canvas.height *= ratio;
	    ctx.scale(ratio, ratio);
	  }
	  return canvas;
	};

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	var Emitter = __webpack_require__(41);
	var render = __webpack_require__(133);
	var template = __webpack_require__(29);

	module.exports = Messages;

	function Message(type, level, options) {
		this.type = type;
		this.level = level;
		this.options = options;
	}

	Message.prototype.add = function (messages) {
		messages.add(this);
		this.messages = messages;
	};

	Message.prototype.remove = function () {
		setTimeout(this.messages.remove(this), 2000);
		delete this.messages;
	};

	function Messages() {
		Emitter.call(this);
		this.redraw = this.redraw.bind(this);
		this.init();
		this.redraw();
	}

	Messages.prototype = Object.create(Emitter.prototype);

	Messages.prototype.init = function() {
		this.messages = [];
	};

	Messages.prototype.redraw = function() {
		var vdom = template('messages.jade', {messages: this.messages});
		render(this, vdom);
	};

	Messages.prototype.add = function(msg) {
		this.messages.push(msg);
		this.redraw();
	};

	Messages.prototype.create = function(type, level, options) {
		var msg = new Message(type, level, options);
		msg.add(this);
		this.redraw();
		return msg;
	};

	Messages.prototype.remove = function(message) {
		var idx = this.messages.indexOf(message);
		if (idx > -1) this.messages.splice(idx, 1);
		this.redraw();
	};

	Messages.prototype.info = function(type, options) {
		return this.create(type, 'info', options);
	};

	Messages.prototype.success = function(type, options) {
		return this.create(type, 'success', options);
	};

	Messages.prototype.warning = function(type, options) {
		return this.create(type, 'warning', options);
	};

	Messages.prototype.danger = function(type, options) {
		return this.create(type, 'danger', options);
	};

	Messages.prototype.clear = function() {
		this.messages = [];
		this.redraw();
	};


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Emitter = __webpack_require__(41);
	var notify = __webpack_require__(102);
	var _ = __webpack_require__(123);
	var markdown = __webpack_require__(125);
	var domify = __webpack_require__(44);
	var staticurl = __webpack_require__(24);
	var emoji = __webpack_require__(130);

	module.exports = Notifications;

	function Notifications() {
		this.show = false;
		this.room = new Emitter({name: '', users: []});
		this.init();
	}

	Notifications.prototype = Object.create(Emitter.prototype);

	Notifications.prototype.init = function Notifications_init() {
		notify.config({
			pageVisibility: true,
			autoClose: 6000
		});
	};

	Notifications.prototype.setRoom = function Notifications_setRoom (room) {
		this.room = room;
	};

	Notifications.prototype.onNewInviteNotification = function Notification_onNewInviteNotification (item) {
		var inviter = item.inviter;
		var room = item.room;
		var content = inviter.displayName + _(' invited you to the room ') + room.name;
		var title = inviter.displayName + _(' (Room Invite)');
		var icon = inviter.avatar;
		this.dispatch(title, content, icon, room);
	}

	Notifications.prototype.onNewMsgNotification = function Notifications_onNewMsgNotification (message) {
		var self = this;
		var i, opts, content_dom, imgs, img, replacement, filename;
		var	author		= message.author,
			channel		= message.channel,
			isService	= author.type === 'service',
			icon		= isService ? staticurl("images/service-icons/" + author.id + "-64.png") : author.avatar,
			authorName	= isService ? author.username : author.displayName,
			content 	= isService ? message.title : message.text,
			type 		= channel.type === 'room' ? channel.name : _('Private message'),
			title		= authorName + ' (' + type + ')',
			hasExpired	= (new Date() - message.time)/1000 > 60;

		// don't notify if:
		// - message is too old - to prevent old msgs avalanche when server reloads or device resumes from standby
		// - chat is focused on the room the notification comes from
		if ((channel.id === this.room.id && document.hasFocus()) || hasExpired) return;

		// parse markdown
		if (typeof content !== "undefined" && content !== "") {
			opts = {
				emoji: function (emo) {
					emoji.init_colons();
					// we can't display custom emojis here because we only have them as images, they will automatically be displayed as :xyz:
					var val = emoji.map.colons[emo];
					return val ? emoji.data[val][0][0] : ':' + emo + ':';
				}
			};
			content_dom = domify(markdown(content, opts));

			// replace images
			imgs = content_dom.getElementsByTagName('img');
			replacement = document.createElement("p");
			replacement.innerHTML = _('[Image]');
			for (i=0; i<imgs.length; i++) {
				img = imgs[i];
				img.parentElement.replaceChild(replacement, img);
			}

			// strip html
			content = content_dom.textContent || content_dom.innerText || "";
		}

		// remove "[Image]" for service connections
		if (author.type === "service") content.replace("[Image]", "");

		// attach files
		var attachments = message.attachments;
		if (typeof attachments !== "undefined" && attachments.length > 0) {
			// currently the client doesn't supprt text content AND attachment
			// but the API supports it
			if (typeof content !== "undefined" && content !== "") content += "\n\n";
			// add the filenames to the notification
			// currently the client only allows to add one attachment
			// but the API supports multiple
			for(i=0; i<attachments.length; i++) {
				filename = attachments[i].name;
				if (typeof filename !== "undefined" && filename !== "") {
					content += filename;
					if (i<attachments.length-1) {
						content + "\n";
					}
				}
			}
		}

		this.dispatch(title, content, icon, channel);
	};

	Notifications.prototype.dispatch = function Notifications_dispatch (title, content, icon, channel) {
		var self = this;
		if (typeof MacGap !== 'undefined') {
			MacGap.notify({
				title: title,
				content: content,
				sound: false
			});
		} else {
			var notification = notify.createNotification(title, {
				body: content,
				icon: icon,
				timeout: 6000,
				onclick: function(ev) {
					self.emit('notificationClicked', channel);
					window.focus();
					notification.close();
				}
			});
		}
	}

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var qs = __webpack_require__(43);
	var template = __webpack_require__(29);
	var render = __webpack_require__(133);
	var Emitter = __webpack_require__(41);

	module.exports = SearchView;

	function SearchView() {
		Emitter.call(this);
		this.redraw.bind(this);
		this.init();
		this.search = {};
	}

	SearchView.prototype = Object.create(Emitter.prototype);

	SearchView.prototype.init = function SearchView_init() {
		this.results = [];
		this.hidden = true;
		document.addEventListener('keyup', function(ev) {
			if (!this.hidden && ev.keyCode === 27) this.hideResults();
		}.bind(this));
		document.addEventListener('click', function (ev) {
			if (!this.hidden) {
				var parent = ev.target;
				do {
					if (parent === this.el ||
						(parent.className === 'search' &&
						 parent.tagName === 'INPUT')) return;
				} while ((parent = parent.parentNode));
				this.hideResults();
			}
		}.bind(this));
	};

	SearchView.prototype.redraw = function SearchView_redraw() {
		render(this.search, template('searchresults.jade', {
			'results': this.results
		}));
	};

	SearchView.prototype.showResults = function SearchView_showResults(results) {
		this.results = results;
		this.redraw();
		this.el = this.search.el;
		qs('div.chat-wrapper').appendChild(this.el);
		var messageLinks = qs.all('a.message-link', this.el);
		for (var i = 0; i < messageLinks.length; i++)
			messageLinks[i].addEventListener('click', this.hideResults.bind(this));
		this.hidden = false;
		this.emit('show');
	};

	SearchView.prototype.hideResults = function SearchView_removeResults() {
		var messageLinks = qs.all('a.message-link', this.el);
		for (var i = 0; i < messageLinks.length; i++)
			messageLinks[i].removeEventListener('click', this.hideResults.bind(this));
		if (!this.hidden) {
			this.results = [];
			this.el.parentNode.removeChild(this.el);
			this.hidden = true;
			this.emit('hide');
		}
	};



/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Emitter = __webpack_require__(41);
	var events = __webpack_require__(101);
	var qs = __webpack_require__(43);
	var render = __webpack_require__(133);
	var template = __webpack_require__(29);
	var textcomplete = __webpack_require__(416);
	var _ = __webpack_require__(123);

	module.exports = Invite;

	function Invite() {
		Emitter.call(this);
		this.room = new Emitter({name: ''});
		this.users = null;
		this.init();
		this.bind();
	}

	Invite.prototype = Object.create(Emitter.prototype);

	Invite.prototype.init = function Invite_init() {
		this.redraw();
	};

	Invite.prototype.bind = function Invite_bind() {
		this.events = events(this.el, this);
		this.events.bind('submit .invite-to-room', 'inviteToRoom');
		this.events.bind('input .input-invite', 'resetvalidity');
	};

	Invite.prototype.redraw = function Invite_redraw() {
		render(this, template('invite.jade', {room: this.room}));
	};

	Invite.prototype._bindAutocomplete = function Invite__bindAutocomplete() {
		this.inviteInput = qs('.input-invite', this.el);
		var el = qs('.autocomplete-wrapper', this.el);
		if (el !== null) {
			var complete = this.complete = textcomplete(this.inviteInput, el);
			var users = this.users;
			complete.re = /([\w.+-]+)$/;
			complete.formatSelection = function (option) {
				return option.insert + ", ";
			};
			complete.query = function (matches) {
				var match = matches[0];
				this.clear();
				users.forEach(function (user) {
					// we check if the user is still active since it 
					// may have been deleted while the visitor is using the app
					if ( user.active && (
						user.firstName.startsWithIgnoreCase(match)
					   || user.lastName.startsWithIgnoreCase(match)
					   || user.username.startsWithIgnoreCase(match))) {
						this.push({
							id: user.username,
							title: '<img src="' + user.avatar + '" width="16" alt="Avatar of ' + user.firstName + ' ' + user.lastName + '" style="border-radius:50%;margin-bottom:-3px;"/>&nbsp;'+ user.firstName + ' ' + user.lastName + ' <em>' + user.username + '</em>',
							insert: user.username,
						});
					}
				}.bind(this));
				this.show();
				this.highlight(0);
			};
		}
		this.inviteButton = qs('.btn-invite', this.el);
	};


	Invite.prototype.inviteToRoom = function Invite_inviteToRoom(ev) {
		ev.preventDefault();
		this.resetvalidity();

		var self = this;
		if (this.inviteInput.value === "") {
			self.inviteInput.setCustomValidity(_("Please enter at least one user to invite"));
			self.inviteButton.click();
			return;
		}

		var users = this.inviteInput.value.split(/[\s,;]+/);
		users.clean("");

		self.inviteButton.disabled = true;

		self.emit('invitetoroom', this.room, users, function inviteToRoom_callback(err, result){
			if(err) {
				self.inviteInput.setCustomValidity(err.details);
				self.inviteButton.click();
			} else {
				self.inviteInput.value = '';
			}
			self.inviteButton.disabled = false;
			delete self.inviteButton.disabled;
		});
	};

	Invite.prototype.resetvalidity = function Invite_resetvalidity() {
		this.inviteInput.setCustomValidity('');
	};

	Invite.prototype.setRoom = function Invite_setRoom(room) {
		this.room = room;
		this.redraw();
	};

	Invite.prototype.onOrgReady = function Invite_onOrgReady(org) {
		this.users = org.users.filter(function(user) {
			return ui.user != user && user.active;
		});
		this._bindAutocomplete();
	};

	// TODO: put this in component
	Array.prototype.clean = function(deleteValue) {
	  for (var i = 0; i < this.length; i++) {
		if (this[i] === deleteValue) {
		  this.splice(i, 1);
		  i--;
		}
	  }
	  return this;
	};

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint browser: true */

	var query = __webpack_require__(43)
	var keyname = __webpack_require__(417)
	var closest = __webpack_require__(65)
	var Classes = __webpack_require__(99)
	var debounce = __webpack_require__(418)
	var next = __webpack_require__(419)
	var prev = __webpack_require__(423)
	var Caret = __webpack_require__(427);

	// ignore these keys from triggering a match
	var ignore = [
	  'down',
	  'up',
	  'esc',
	  'enter',
	  'tab',
	  'capslock',
	  'meta',
	  'shift',
	  'ctrl',
	  'alt',
	  'meta',
	  'pageup',
	  'pagedown',
	  'end',
	  'home',
	  'ins',
	  'del',
	  'left',
	  'right'
	]

	module.exports = Textcomplete

	Textcomplete.prototype = Object.create(__webpack_require__(429))

	function Textcomplete(el, wrapper) {
	  if (!(this instanceof Textcomplete))
	    return new Textcomplete(el, wrapper)

	  this.el = el
	  this.wrapper = wrapper;

	  this.is_textarea = (el.nodeName.toLowerCase() == "textarea")

	  // you can set your own wrapper element
	  if (!wrapper) {
	    wrapper = document.createElement('div')
	    el.parentNode.insertBefore(wrapper, el)
	    this.wrapper = wrapper;
	  }

	  // actual menu
	  // this.menu = query('.autocomplete', wrapper);
	  if (typeof this.menu === 'undefined') {
	    inner = document.createElement('div');
	    Classes(inner).add('Textcomplete-inner');
	    wrapper.appendChild(inner);
	    this.inner = inner;
	    menu = document.createElement('div');
	    Classes(menu).add('autocomplete');
	    inner.appendChild(menu);
	    this.menu = menu;
	  }

	  Classes(this.menu).add('Textcomplete-menu')

	  // hidden on initialization
	  this.classes = Classes(this.wrapper)
	    .add('Textcomplete-wrapper')
	    .add('autocomplete-wrapper')
	    .add('Textcomplete-hidden')

	  // current options
	  this.options = []
	  // currently highlighted option
	  this.highlighted = null

	  // setup stuff
	  var self = this

	  // debounced version of query
	  this._query = function (match) {
	    self.query(match)
	  }

	  // setup complement methods
	  this._onblur()
	  this._setupoptions()

	  // create caret
	  this.caret = new Caret(el)

	  // match on focus
	  el.addEventListener('focus', function () {
	    // the cursor is positioned on the next tick
	    setTimeout(function () {
	      self.match()
	    }, 0)
	  })

	  // handle menu events when the menu is shown
	  // future for performance:
	  // - add and remove this listener on hide and show
	  el.addEventListener('keydown', function (e) {
	    if (!self.shown) return

	    switch (keyname(e.which)) {
	      case 'down':
	        stop(e)
	        self.next()
	        return
	      case 'up':
	        stop(e)
	        self.previous()
	        return
	      case 'esc':
	        stop(e)
	        self.hide()
	        return
	      case 'enter':
	        stop(e)
	        self.select(self.highlighted)
	        return
	      case 'tab':
	        stop(e)
	        self.select(self.highlighted)
	        return
	    }
	  })

	  // textcomplete on certain key strokes
	  // uses `keyup` because the value has to be registered
	  // before we can do anything
	  // to do: throttle `.match()` for performance
	  el.addEventListener('keyup', function (e) {
	    if (!~ignore.indexOf(keyname(e.which))) self.match()
	  })

	  // highlight the currently hovered option
	  this.menu.addEventListener('mousemove', function (e) {
	    self.highlight(self.find(e.target))
	  })
	}

	/**
	 * Checks to see if the current text matches the given regexp.
	 * If it does, it calls a search.
	 */

	Textcomplete.prototype.match = function () {
	  var el = this.el
	  var text = (this.is_textarea) ? el.value : textonly(el)
	  if (!text) return // nothing to match
	  var index = (this.is_textarea) ? el.selectionEnd : document.getSelection().anchorOffset // cursor index
	  var start = (this.is_textarea) ? el.selectionStart : document.getSelection().focusOffset // cursor start
	  // if text is selected, ignore
	  if (start !== index) return this.hide()
	  var head = (this.is_textarea) ? text.slice(0, index) : this.caret.textBefore()
	  var match = this.re.exec(head)
	  // hide the menu if there's no match
	  if (!match) return this.hide()
	  if (!this.is_textarea) {
	    // save the caret node and position, because if user clicks results we lose it
	    selection = document.getSelection()
	    this.focusNode = selection.focusNode
	    this.focusOffset = selection.focusOffset
	  }
	  // call a search on the current match
	  this._query(match)
	  return this
	}

	/**
	 * Position the menu based on the parent.
	 */

	Textcomplete.prototype.position = function (top, left) {
	  var style = this.menu.style
	  style.top = top + 'px'
	  style.left = left + 'px'
	  return this
	}

	/**
	 * Only clears `.Textcomplete-option`s.
	 */

	Textcomplete.prototype.clear = function () {
	  this.options = []
	  this.selected = this.highlighted = null
	  var options = query.all('.Textcomplete-option', this.menu)
	  for (var i = 0; i < options.length; i++) remove(options[i])
	  return this
	}

	Textcomplete.prototype.show = function () {
	  var classes = this.classes
	  if (classes.has('Textcomplete-hidden')) {
	    if (!this.selected) this.highlight(0)
	    classes.remove('Textcomplete-hidden')
	    this.shown = true
	    this.emit('show')
	  }
	  return this
	}

	Textcomplete.prototype.hide = function () {
	  if (!this.classes.has('Textcomplete-hidden')) {
	    this.classes.add('Textcomplete-hidden')
	    this.highlighted = null
	    this.options.forEach(function (option) {
	      Classes(option.el).remove('Textcomplete-highlighted')
	    })
	    this.clear()
	    this.shown = false
	    this.emit('hide')
	  }
	  return this
	}

	/**
	 * Format the element of an option.
	 * If you want to manipulate items yourself,
	 * Use this method.
	 */

	Textcomplete.prototype.formatOption = function (option, el) {
	  Classes(option.el = el).add('Textcomplete-option')
	  el.setAttribute('data-Textcomplete-id', option.id)
	  return option
	}

	Textcomplete.prototype.change_input = function(value){

	    if (this.is_textarea) {
	        var el = this.el;
	        var text = el.value;
	        var index = el.selectionEnd;
	        var start = text.slice(0, index)
	            .replace(this.re, value);
	        var new_text = start + text.slice(index);
	        el.value = new_text;
	        el.setSelectionRange(start.length, start.length);
	    } else {
	        var node = this.focusNode;
	        var index =  this.focusOffset;
	        var text = node.nodeValue;
	        var start = text.slice(0, index)
	            .replace(this.re, value);
	        var new_text =  start + text.slice(index);
	        node.textContent = new_text;

	        var range = document.createRange();
	        range.selectNodeContents(this.el);
	        range.collapse(false);
	        var sel = window.getSelection();
	        sel.removeAllRanges();
	        sel.addRange(range);
	    }
	    this.match();
	}

	/**
	 * When an option is set, i.e. actually emit a `change` event.
	 */

	Textcomplete.prototype.select = function (option) {
	    if (!(option = this.highlight(option))) return
	    var el = this.el
	    this.selected = option

	    if (option.type == 'query') {
	        this.change_input(option.insert)

	        this.emit('change', option)
	        this.hide()
	        return option
	    }


	  if (this.is_textarea) {
	    var text = el.value
	    var index = el.selectionEnd
	    var start = text.slice(0, index)
	      .replace(this.re, this.formatSelection(option))
	    var new_text = start + " " + text.slice(index)

	    el.value = new_text
	    el.setSelectionRange(start.length, start.length)
	  } else {
	    var node = this.focusNode
	    var index = this.focusOffset
	    var text = node.nodeValue
	    var start = text.slice(0, index)
	      .replace(this.re, this.formatSelection(option))

	    var new_text = start + "&nbsp;" + text.slice(index)

	    replaceNodeWithHTML(node, new_text)

	    // since we are dealing with nodes, this should not be needed anymore
	    var new_el = query('.ac:not(.checked)', el) //TODO: REMOVE THIS HACK
	    Classes(new_el).add('checked')
	    this.caret.moveAfter(new_el.nextSibling)

	  }

	  this.emit('change', option)
	  this.hide()
	  return option
	}
	/**
	 * Highlight an option
	 */

	Textcomplete.prototype.highlight = function (option) {
	  if (!(option = this.get(option))) return
	  this.emit('highlight', this.highlighted = option)
	  var options = this.options
	  var o
	  var el = option.el
	  for (var i = 0; i < options.length; i++) {
	    var o = options[i].el
	    var c = Classes(o)
	    if (o==el) {
	      c.add('Textcomplete-highlighted')
	    } else {
	      c.remove('Textcomplete-highlighted')
	    }
	  }

	  return option
	}

	// highlight the next element
	Textcomplete.prototype.next = function () {
	  var highlighted = this.highlighted
	  if (!highlighted) return
	  return this.highlight(next(highlighted.el, '.Textcomplete-option'))
	}

	// highlight the previous element
	Textcomplete.prototype.previous = function () {
	  var highlighted = this.highlighted
	  if (!highlighted) return
	  return this.highlight(prev(highlighted.el, '.Textcomplete-option'))
	}

	Textcomplete.prototype.find = function (el) {
	  return closest(el, '.Textcomplete-option', true)
	}

	function remove(el) {
	  el.parentNode.removeChild(el)
	}

	function stop(e) {
	  e.preventDefault()
	  e.stopPropagation()
	}

	/**
	 * return first level text only
	 * if string parameter replaceElementsWith is set, other DOM nodes get replaced
	 * by this string
	 */
	function textonly(el, replaceElementsWith) {
	  var replaceElementsWith = replaceElementsWith || ''
	  var children = new Array()
	  for(var child in el.childNodes) {
	    if(el.childNodes[child].nodeType == 3) {
	      children.push(el.childNodes[child].nodeValue)
	    }
	  }
	  return children.join(replaceElementsWith)
	}

	// TODO: find/make a component to do this?
	function replaceNodeWithHTML(node, html) {
	  var div = document.createElement('div');
	  div.innerHTML = html
	  var elements = div.childNodes
	  var child

	  if (node.previousSibling) {
	    var previous = node.previousSibling
	    node.parentNode.replaceChild(elements[0],node)
	    child = previous.nextSibling
	  } else {
	    var parent = node.parentNode
	    parent.replaceChild(elements[0],node)
	    child = parent.firstChild
	  }

	  while (elements.length!=0) {
	    child = after(child, elements[0])
	  }
	}

	function after(el, node) {
	  var parentNode = el.parentNode;
	  var nextSibling = el.nextSibling;

	  if (parentNode) {
	    nextSibling
	      ? parentNode.insertBefore(node, nextSibling)
	      : parentNode.appendChild(node);
	  }
	  return el.nextSibling
	}

	var sPE
	function supportsPlaintextEditables() {
	  console.log(sPE);
	  if (typeof sPE == 'undefined') {
	    var div = document.createElement('div');
	    div.setAttribute('contenteditable', 'PLAINTEXT-ONLY');
	    sPE = (div.contentEditable === 'plaintext-only');
	  }
	  return sPE
	}


/***/ },
/* 417 */
/***/ function(module, exports) {

	
	/**
	 * Key name map.
	 */

	var map = {
	  8: 'backspace',
	  9: 'tab',
	  13: 'enter',
	  16: 'shift',
	  17: 'ctrl',
	  18: 'alt',
	  20: 'capslock',
	  27: 'esc',
	  32: 'space',
	  33: 'pageup',
	  34: 'pagedown',
	  35: 'end',
	  36: 'home',
	  37: 'left',
	  38: 'up',
	  39: 'right',
	  40: 'down',
	  45: 'ins',
	  46: 'del',
	  91: 'meta',
	  93: 'meta',
	  224: 'meta'
	};

	/**
	 * Return key name for `n`.
	 *
	 * @param {Number} n
	 * @return {String}
	 * @api public
	 */

	module.exports = function(n){
	  return map[n];
	};

/***/ },
/* 418 */
/***/ function(module, exports) {

	/**
	 * Debounces a function by the given threshold.
	 *
	 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
	 * @param {Function} function to wrap
	 * @param {Number} timeout in ms (`100`)
	 * @param {Boolean} whether to execute at the beginning (`false`)
	 * @api public
	 */

	module.exports = function debounce(func, threshold, execAsap){
	  var timeout;

	  return function debounced(){
	    var obj = this, args = arguments;

	    function delayed () {
	      if (!execAsap) {
	        func.apply(obj, args);
	      }
	      timeout = null;
	    }

	    if (timeout) {
	      clearTimeout(timeout);
	    } else if (execAsap) {
	      func.apply(obj, args);
	    }

	    timeout = setTimeout(delayed, threshold || 100);
	  };
	};


/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	
	var traverse = __webpack_require__(420);


	/**
	 * Expose `nextSibling`.
	 */

	module.exports = nextSibling;


	/**
	 * Get the next sibling for an `el`.
	 *
	 * @param {Element} el
	 * @param {String} selector (optional)
	 */

	function nextSibling (el, selector) {
	  el = traverse('nextSibling', el, selector)[0];
	  return el || null;
	}

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * dependencies
	 */

	var matches = __webpack_require__(421);

	/**
	 * Traverse with the given `el`, `selector` and `len`.
	 *
	 * @param {String} type
	 * @param {Element} el
	 * @param {String} selector
	 * @param {Number} len
	 * @return {Array}
	 * @api public
	 */

	module.exports = function(type, el, selector, len){
	  var el = el[type]
	    , n = len || 1
	    , ret = [];

	  if (!el) return ret;

	  do {
	    if (n == ret.length) break;
	    if (1 != el.nodeType) continue;
	    if (matches(el, selector)) ret.push(el);
	    if (!selector) ret.push(el);
	  } while (el = el[type]);

	  return ret;
	}


/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var query = __webpack_require__(422);

	/**
	 * Element prototype.
	 */

	var proto = Element.prototype;

	/**
	 * Vendor function.
	 */

	var vendor = proto.matches
	  || proto.webkitMatchesSelector
	  || proto.mozMatchesSelector
	  || proto.msMatchesSelector
	  || proto.oMatchesSelector;

	/**
	 * Expose `match()`.
	 */

	module.exports = match;

	/**
	 * Match `el` to `selector`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @return {Boolean}
	 * @api public
	 */

	function match(el, selector) {
	  if (vendor) return vendor.call(el, selector);
	  var nodes = query.all(selector, el.parentNode);
	  for (var i = 0; i < nodes.length; ++i) {
	    if (nodes[i] == el) return true;
	  }
	  return false;
	}


/***/ },
/* 422 */
/***/ function(module, exports) {

	function one(selector, el) {
	  return el.querySelector(selector);
	}

	exports = module.exports = function(selector, el){
	  el = el || document;
	  return one(selector, el);
	};

	exports.all = function(selector, el){
	  el = el || document;
	  return el.querySelectorAll(selector);
	};

	exports.engine = function(obj){
	  if (!obj.one) throw new Error('.one callback required');
	  if (!obj.all) throw new Error('.all callback required');
	  one = obj.one;
	  exports.all = obj.all;
	  return exports;
	};


/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	
	var traverse = __webpack_require__(424);


	/**
	 * Expose `previousSibling`.
	 */

	module.exports = previousSibling;


	/**
	 * Get the previous sibling for an `el`.
	 *
	 * @param {Element} el
	 * @param {String} selector (optional)
	 */

	function previousSibling (el, selector) {
	  el = traverse('previousSibling', el, selector)[0];
	  return el || null;
	}

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * dependencies
	 */

	var matches = __webpack_require__(425);

	/**
	 * Traverse with the given `el`, `selector` and `len`.
	 *
	 * @param {String} type
	 * @param {Element} el
	 * @param {String} selector
	 * @param {Number} len
	 * @return {Array}
	 * @api public
	 */

	module.exports = function(type, el, selector, len){
	  var el = el[type]
	    , n = len || 1
	    , ret = [];

	  if (!el) return ret;

	  do {
	    if (n == ret.length) break;
	    if (1 != el.nodeType) continue;
	    if (matches(el, selector)) ret.push(el);
	    if (!selector) ret.push(el);
	  } while (el = el[type]);

	  return ret;
	}


/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var query = __webpack_require__(426);

	/**
	 * Element prototype.
	 */

	var proto = Element.prototype;

	/**
	 * Vendor function.
	 */

	var vendor = proto.matches
	  || proto.webkitMatchesSelector
	  || proto.mozMatchesSelector
	  || proto.msMatchesSelector
	  || proto.oMatchesSelector;

	/**
	 * Expose `match()`.
	 */

	module.exports = match;

	/**
	 * Match `el` to `selector`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @return {Boolean}
	 * @api public
	 */

	function match(el, selector) {
	  if (vendor) return vendor.call(el, selector);
	  var nodes = query.all(selector, el.parentNode);
	  for (var i = 0; i < nodes.length; ++i) {
	    if (nodes[i] == el) return true;
	  }
	  return false;
	}


/***/ },
/* 426 */
/***/ function(module, exports) {

	function one(selector, el) {
	  return el.querySelector(selector);
	}

	exports = module.exports = function(selector, el){
	  el = el || document;
	  return one(selector, el);
	};

	exports.all = function(selector, el){
	  el = el || document;
	  return el.querySelectorAll(selector);
	};

	exports.engine = function(obj){
	  if (!obj.one) throw new Error('.one callback required');
	  if (!obj.all) throw new Error('.all callback required');
	  one = obj.one;
	  exports.all = obj.all;
	  return exports;
	};


/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	var Emitter = __webpack_require__(41);
	var events = __webpack_require__(428);

	var ELEMENT_NODE = document.ELEMENT_NODE;
	var TEXT_NODE    = document.TEXT_NODE;

	var BEFORE = {};
	var AFTER  = {};

	module.exports = Caret;

	function Caret(el) {
	  if (!(this instanceof Caret)) return new Caret(el);
	  this.el = el || document.body;
	  this.bind(el);
	}

	Emitter(Caret.prototype);

	Caret.prototype.bind = function(el) {
	  var caret = this;
	  events.bind(el, "keyup", checkCaretPosition);
	  events.bind(el, "mouseup", checkCaretPosition);

	  function checkCaretPosition(){
	    caret.moved();
	  }
	};

	Caret.prototype.parentElement = function(){
	  var node;

	  if (document.getSelection){
	    node = document.getSelection().focusNode;
	    return node.nodeType == ELEMENT_NODE ? node : node.parentElement;
	  } else {
	    return document.selection.createRange().parentElement();
	  }
	};

	/**
	  Returns text before the caret within the current element.
	*/
	Caret.prototype.textBefore = function(){
	  if (document.getSelection){
	    return getText(BEFORE);
	  } else {
	    return getIeText(BEFORE);
	  }
	};

	/**
	  Returns text after the caret within the current element.
	*/
	Caret.prototype.textAfter = function(){
	  if (document.getSelection){
	    return getText(AFTER);
	  } else {
	    return getIeText(AFTER);
	  }
	};

	Caret.prototype.moveToStart = function(){
	  if (document.getSelection){
	    this.el.focus();
	    document.getSelection().collapse(this.el,true);
	  } else {
	    var range = document.body.createTextRange();
	    range.moveToElementText(this.el);
	    range.collapse(true); // Collapse to Start
	    range.select();
	  }
	  this.moved();
	};

	Caret.prototype.moveToEnd = function(){
	  if (document.getSelection){
	    this.el.focus();
	    // Firefox will not select the end of the element if the last element is not a text node
	    // http://stackoverflow.com/questions/1125292/how-to-move-cursor-to-end-of-contenteditable-entity
	    if (!this.el.childNodes[this.el.childNodes.length - 1].nodeType !== TEXT_NODE){
	      this.el.appendChild(document.createTextNode(""));
	    }
	    var selection = document.getSelection();
	    selection.selectAllChildren(this.el);
	    selection.collapseToEnd();
	  } else {
	    var range = document.body.createTextRange();
	    range.moveToElementText(this.el);
	    range.collapse(false); // Collapse to End
	    range.select();
	  }
	  this.moved();
	};

	Caret.prototype.moveBefore = function(element){
	  if (document.getSelection){
	    this.el.focus();
	    moveRelative(element, BEFORE);
	  } else {
	    moveIeRelative(element, BEFORE);
	  }
	  this.moved();
	};

	Caret.prototype.moveAfter = function(element){
	  if (document.getSelection){
	    this.el.focus();
	    moveRelative(element, AFTER);
	  } else {
	    moveIeRelative(element, AFTER);
	  }
	  this.moved();
	};

	Caret.prototype.moved = function(){
	  this.emit("change");
	}

	function getText(direction){
	  var selection = document.getSelection();
	  var node      = selection.focusNode;
	  var offset    = selection.focusOffset;


	  if (direction === BEFORE){
	    if (node.nodeType === TEXT_NODE) text = node.substringData(0, offset);
	    // Firefox reports an element node.
	    else text = node.textContent.substr(0, offset);
	  } else {
	    if (node.nodeType === TEXT_NODE) text = node.substringData(offset, node.length - 1);
	    // Firefox reports an element node.
	    else text = node.textContent.substr(offset, node.length - 1);
	  }

	  return text;
	}

	function getIeText(direction){
	  var range = document.selection.createRange();
	  var parent = range.parentElement();
	  var i = 0;

	  if (direction === BEFORE){
	    while (range.move('character',-1) && parent == range.parentElement()){ i++; }
	    range.move('character',1);
	    range.moveEnd('character',i);
	  } else {
	    while (range.move('character', 1) && parent == range.parentElement()){ i--; }
	    range.move('character', -1);
	    range.moveStart('character',i);
	  }

	  return range.text;
	}

	function moveRelative(element, direction){
	  var range = document.createRange();
	  if (direction === BEFORE){
	    range.setStartBefore(element);
	    range.collapse(true); // Collapse to Start
	  } else {
	    range.setEndAfter(element);
	    range.collapse(false); // Collapse to End
	  }
	  var selection = document.getSelection();
	  selection.removeAllRanges();
	  selection.addRange(range);
	}

	function moveIeRelative(element, direction){
	  var range = document.body.createTextRange();
	  var marker = createMarker();
	  var parent = element.parentElement;

	  if (direction === BEFORE) {
	    insertBefore(parent, marker, element);
	    range.moveToElementText(marker);
	    range.collapse(true); // Collapse to Start
	  } else {
	    insertAfter(parent, marker, element);
	    range.moveToElementText(marker);
	    range.collapse(false); // Collapse to End
	  }

	  range.select();
	  parent.removeChild(marker);
	}

	// Create a random string by generating a large random number and then formatting it base 36.
	function randomString(){
	  return Math.floor((Math.random() * 18446744073709552000)).toString(36);
	}

	function createMarker(){
	  var element = document.createElement('span');
	  element.innerText = randomString();
	  return element;
	}

	function insertBefore(el, newChild, refChild) {
	  return el.insertBefore(newChild, refChild);
	}

	function insertAfter(el, newChild, refChild) {
	  return insertBefore(el, newChild, refChild.nextSibling);
	}


/***/ },
/* 428 */
/***/ function(module, exports) {

	var bind = window.addEventListener ? 'addEventListener' : 'attachEvent',
	    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
	    prefix = bind !== 'addEventListener' ? 'on' : '';

	/**
	 * Bind `el` event `type` to `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	exports.bind = function(el, type, fn, capture){
	  el[bind](prefix + type, fn, capture || false);
	  return fn;
	};

	/**
	 * Unbind `el` event `type`'s callback `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	exports.unbind = function(el, type, fn, capture){
	  el[unbind](prefix + type, fn, capture || false);
	  return fn;
	};

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint browser: true */

	var domify = __webpack_require__(430)
	var tap = __webpack_require__(431)
	var clickable = __webpack_require__(432)

	__webpack_require__(41)(exports)

	/**
	 * Hide the menu when losing focus,
	 * specifically outside the input and menu.
	 * Note that we don't actually listen to the blur event
	 * because the blur event sucks.
	 */

	exports._onblur = function () {
	  var self = this
	  var el = this.el
	  var menu = this.menu

	  document.addEventListener('click', hide, false)

	  function hide(e) {
	    // autocleanup if the element is removed from the document
	    // apparently IE11 doesn't like `document.contains()`
	    if (!document.body.contains(el)) {
	      document.removeEventListener('click', hide, false)
	      return
	    }

	    if (!clickable(e)) return

	    // hide if focusing outside this element and menu
	    var target = e.target
	    if (target === el
	      || target === menu
	      || menu.contains(target)) return

	    self.hide()
	  }
	}

	/**
	 * Setup highlighting and clicking options.
	 */

	exports._setupoptions = function () {
	  var self = this
	  var menu = this.menu

	  // set an option when the user clicks it or taps it
	  menu.addEventListener('click', click, false)

	  function click(e) {
	    if (!clickable(e)) return
	    stop(e)
	    self.select(self.find(e.target))
	  }

	  // highlight the currently hovered option
	  menu.addEventListener('mousemove', function (e) {
	    self.highlight(self.find(e.target))
	  })
	}

	/**
	 * You MUST implement this yourself.
	 *
	 * autocomplete.query = function () {
	 *   this.push({
	 *     id: '',
	 *     title: '',
	 *   })
	 * }
	 *
	 * If you don't use `this.push()`, then you should add
	 * the options to the menu yourself.
	 */

	exports.query = function () {
	  throw new Error('.query() not implemented!')
	}

	/**
	 * Push a bunch of options.
	 *
	 * You can push a single item,
	 * push an item each as an argument,
	 * or push an array of items.
	 */

	exports.push = function (option) {
	  // multiple arguments support
	  if (arguments.length > 1) {
	    for (var i = 0; i < arguments.length; i++) this.push(arguments[i])
	    return
	  } else if (Array.isArray(option)) {
	    for (var i = 0; i < option.length; i++) this.push(option[i])
	    return
	  }

	  // convert strings to valid options
	  if (typeof option === 'string') {
	    option = {
	      id: option,
	      title: option
	    }
	  }

	  if (!option.id || !(option.title || option.name))
	    throw new Error('each option needs a .id and .title/.name')

	  var el = this.format(option)
	  if (typeof el === 'string') el = domify(el)
	  this.formatOption(option, el)
	  this.options.push(option)
	  this.menu.appendChild(el)
	  return option
	}

	/**
	 * Format an option either to a DOM element
	 * or to an HTML string.
	 *
	 * You should overwrite this yourself.
	 */

	exports.format = function (option) {
	  return '<div>'
	    + (option.title || option.name || option.id)
	    + '</div>'
	}

	/**
	 * Get an option based on an id, element, option object, or index.
	 */

	exports.get = function (x) {
	  if (x == null) return
	  var options = this.options
	  var option
	  for (var i = 0; i < options.length; i++) {
	    option = options[i]
	    if (option === x
	      || option.id === x
	      || option.el === x
	      || i === x)
	      return option
	  }
	}

	function stop(e) {
	  e.preventDefault()
	  e.stopPropagation()
	}

/***/ },
/* 430 */
/***/ function(module, exports) {

	
	/**
	 * Expose `parse`.
	 */

	module.exports = parse;

	/**
	 * Tests for browser support.
	 */

	var innerHTMLBug = false;
	var bugTestDiv;
	if (typeof document !== 'undefined') {
	  bugTestDiv = document.createElement('div');
	  // Setup
	  bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
	  // Make sure that link elements get serialized correctly by innerHTML
	  // This requires a wrapper element in IE
	  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
	  bugTestDiv = undefined;
	}

	/**
	 * Wrap map from jquery.
	 */

	var map = {
	  legend: [1, '<fieldset>', '</fieldset>'],
	  tr: [2, '<table><tbody>', '</tbody></table>'],
	  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  // for script/link/style tags to work in IE6-8, you have to wrap
	  // in a div with a non-whitespace character in front, ha!
	  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
	};

	map.td =
	map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	map.option =
	map.optgroup = [1, '<select multiple="multiple">', '</select>'];

	map.thead =
	map.tbody =
	map.colgroup =
	map.caption =
	map.tfoot = [1, '<table>', '</table>'];

	map.polyline =
	map.ellipse =
	map.polygon =
	map.circle =
	map.text =
	map.line =
	map.path =
	map.rect =
	map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

	/**
	 * Parse `html` and return a DOM Node instance, which could be a TextNode,
	 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
	 * instance, depending on the contents of the `html` string.
	 *
	 * @param {String} html - HTML string to "domify"
	 * @param {Document} doc - The `document` instance to create the Node for
	 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
	 * @api private
	 */

	function parse(html, doc) {
	  if ('string' != typeof html) throw new TypeError('String expected');

	  // default to the global `document` object
	  if (!doc) doc = document;

	  // tag name
	  var m = /<([\w:]+)/.exec(html);
	  if (!m) return doc.createTextNode(html);

	  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

	  var tag = m[1];

	  // body support
	  if (tag == 'body') {
	    var el = doc.createElement('html');
	    el.innerHTML = html;
	    return el.removeChild(el.lastChild);
	  }

	  // wrap map
	  var wrap = map[tag] || map._default;
	  var depth = wrap[0];
	  var prefix = wrap[1];
	  var suffix = wrap[2];
	  var el = doc.createElement('div');
	  el.innerHTML = prefix + html + suffix;
	  while (depth--) el = el.lastChild;

	  // one element
	  if (el.firstChild == el.lastChild) {
	    return el.removeChild(el.firstChild);
	  }

	  // several elements
	  var fragment = doc.createDocumentFragment();
	  while (el.firstChild) {
	    fragment.appendChild(el.removeChild(el.firstChild));
	  }

	  return fragment;
	}


/***/ },
/* 431 */
/***/ function(module, exports) {

	var cancelEvents = [
	  'touchmove',
	  'touchcancel',
	  'touchstart',
	]

	var endEvents = [
	  'touchend',
	]

	module.exports = Tap

	function Tap(callback) {
	  // to keep track of the original listener
	  listener.handler = callback

	  return listener

	  // el.addEventListener('touchstart', listener)
	  function listener(e1) {
	    // tap should only happen with a single finger
	    if (!e1.touches || e1.touches.length > 1)
	      return

	    var el = this

	    cancelEvents.forEach(function (event) {
	      document.addEventListener(event, cleanup)
	    })

	    endEvents.forEach(function (event) {
	      document.addEventListener(event, done)
	    })

	    function done(e2) {
	      // since touchstart is added on the same tick
	      // and because of bubbling,
	      // it'll execute this on the same touchstart.
	      // this filters out the same touchstart event.
	      if (e1 === e2)
	        return

	      cleanup()

	      // already handled
	      if (e2.defaultPrevented)
	        return

	      var preventDefault = e1.preventDefault
	      var stopPropagation = e1.stopPropagation

	      e2.stopPropagation = function () {
	        stopPropagation.call(e1)
	        stopPropagation.call(e2)
	      }

	      e2.preventDefault = function () {
	        preventDefault.call(e1)
	        preventDefault.call(e2)
	      }

	      // calls the handler with the `end` event,
	      // but i don't think it matters.
	      callback.call(el, e2)
	    }

	    function cleanup(e2) {
	      if (e1 === e2)
	        return

	      cancelEvents.forEach(function (event) {
	        document.removeEventListener(event, cleanup)
	      })

	      endEvents.forEach(function (event) {
	        document.removeEventListener(event, done)
	      })
	    }
	  }
	}

/***/ },
/* 432 */
/***/ function(module, exports) {

	module.exports = function (e) {
	  // primary button only
	  if (e.type === 'click' && e.button !== 0)
	    return false
	  // one touch
	  if (e.touches && e.touches.length > 1)
	    return false

	  return !(e.defaultPrevented
	    || e.ctrlKey
	    || e.altKey
	    || e.shiftKey
	    || e.metaKey
	  )
	}

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var template = __webpack_require__(29);
	var render = __webpack_require__(133);

	module.exports = Dropzone;

	function Dropzone(){
		var vdom = template('draganddrop.jade', {});
		render(this, vdom);
	}


/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Dialog = __webpack_require__(435);

	var events = __webpack_require__(101);
	var qs = __webpack_require__(43);
	var _ = __webpack_require__(123);

	module.exports = DeleteRoomDialog;

	function DeleteRoomDialog(context) {
		this.template_path = 'dialogs/deleteroom.jade';
		Dialog.call(this, context);
		this.button = qs('.delete', this.el);
		this.form = qs('.delete-room-form', this.el);
		if (this.form) this.roomNameInput = this.form.roomname;
	}

	DeleteRoomDialog.prototype = Object.create(Dialog.prototype);

	DeleteRoomDialog.prototype.bind = function DeleteRoomDialog_bind() {
		this.events = events(this.el, this);
		this.events.obj.submit = this.submit.bind(this);
		this.events.obj.resetvalidity = this.resetvalidity.bind(this);
		this.events.bind('submit .delete-room-form', 'submit');
		this.events.bind('input .roomname', 'resetvalidity');
	};

	DeleteRoomDialog.prototype.submit = function DeleteRoomDialog_submit(ev) {
		ev.preventDefault();
		var self = this;

		var roomName = self.roomNameInput.value.trim();
		if (!roomName) {
			self.roomNameInput.setCustomValidity(_("Please enter the name of the room you want to delete."));
			self.button.click();
			return;
		}

		self.emit('deleteroom', self.context.room, roomName, function DeleteRoomDialog_submit_callback(err, result){
			if(err) {
				self.roomNameInput.setCustomValidity(err.details);
				self.button.click();
			} else {
				self.dialog.hide();
			}
		});
	};

	DeleteRoomDialog.prototype.resetvalidity = function DeleteRoomDialog_resetvalidity() {
		this.roomNameInput.setCustomValidity('');
	};



/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Emitter = __webpack_require__(41);
	var events = __webpack_require__(101);
	var dialog = __webpack_require__(436);
	var v = __webpack_require__(34);
	var template = __webpack_require__(29);


	module.exports = Dialog;

	function Dialog(context) {
		Emitter.call(this);
		this.context = context || {};
		var html = v.toDOM(template(this.template_path, context));
		this.dialog = dialog(html);
		this.el = this.dialog.el;
		this.bind();
		return this;
	}

	Dialog.prototype = Object.create(Emitter.prototype);

	Dialog.prototype.bind = function Dialog_bind() {
		this.events = events(this.el, this);
	};

	// proxy for dialog
	Dialog.prototype.closable = function Dialog_closable() {
		this.dialog.closable();
		return this;
	};

	// proxy for dialog
	Dialog.prototype.show = function Dialog_show() {
		this.dialog.show();
		return this;
	};

	// proxy for dialog
	Dialog.prototype.overlay = function Dialog_overlay() {
		this.dialog.overlay();
		return this;
	};



/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var Emitter = __webpack_require__(41)
	  , overlay = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"overlay\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , domify = __webpack_require__(437)
	  , events = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"event\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	  , classes = __webpack_require__(99)
	  , query = __webpack_require__(43);

	/**
	 * Active dialog.
	 */

	var active;

	/**
	 * Expose `dialog()`.
	 */

	exports = module.exports = dialog;

	/**
	 * Expose `Dialog`.
	 */

	exports.Dialog = Dialog;

	/**
	 * Return a new `Dialog` with the given
	 * (optional) `title` and `msg`.
	 *
	 * @param {String} title or msg
	 * @param {String} msg
	 * @return {Dialog}
	 * @api public
	 */

	function dialog(title, msg){
	  switch (arguments.length) {
	    case 2:
	      return new Dialog({ title: title, message: msg });
	    case 1:
	      return new Dialog({ message: title });
	  }
	};

	/**
	 * Initialize a new `Dialog`.
	 *
	 * Options:
	 *
	 *    - `title` dialog title
	 *    - `message` a message to display
	 *
	 * Emits:
	 *
	 *    - `show` when visible
	 *    - `hide` when hidden
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Dialog(options) {
	  Emitter.call(this);
	  options = options || {};
	  this.template = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./template.html\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	  this.el = domify(this.template);
	  this._classes = classes(this.el);
	  this.render(options);
	  if (active && !active.hiding) active.hide();
	  if (exports.effect) this.effect(exports.effect);
	  this.on('escape', this.hide.bind(this));
	  active = this;
	};

	/**
	 * Inherit from `Emitter.prototype`.
	 */

	Dialog.prototype = new Emitter;

	/**
	 * Render with the given `options`.
	 *
	 * @param {Object} options
	 * @api public
	 */

	Dialog.prototype.render = function(options){
	  var self = this
	    , el = self.el
	    , title = options.title
	    , titleEl = query('.title', el)
	    , pEl = query('p', el)
	    , msg = options.message;

	  events.bind(query('.close', el), 'click', function (ev) {
	    ev.preventDefault();
	    self.emit('close');
	    self.hide();
	  });

	  if (titleEl) {
	    if (!title) {
	      titleEl.parentNode.removeChild(titleEl);
	    } else {
	      titleEl.textContent = title;
	    }
	  }

	  // message
	  if ('string' == typeof msg) {
	    pEl.textContent = msg;
	  } else if (msg) {
	    pEl.parentNode.insertBefore(msg.el || msg, pEl);
	    pEl.parentNode.removeChild(pEl);
	  }
	};

	/**
	 * Enable the dialog close link.
	 *
	 * @return {Dialog} for chaining
	 * @api public
	 */

	Dialog.prototype.closable = function(){
	  return this.addClass('closable');
	};

	/**
	 * Add class `name`.
	 *
	 * @param {String} name
	 * @return {Dialog}
	 * @api public
	 */

	Dialog.prototype.addClass = function(name){
	  this._classes.add(name);
	  return this;
	};

	/**
	 * Set the effect to `type`.
	 *
	 * @param {String} type
	 * @return {Dialog} for chaining
	 * @api public
	 */

	Dialog.prototype.effect = function(type){
	  this._effect = type;
	  this.addClass(type);
	  return this;
	};

	/**
	 * Make it modal!
	 *
	 * @return {Dialog} for chaining
	 * @api public
	 */

	Dialog.prototype.modal = function(){
	  this._overlay = overlay();
	  return this;
	};

	/**
	 * Add an overlay.
	 *
	 * @return {Dialog} for chaining
	 * @api public
	 */

	Dialog.prototype.overlay = function(opts){
	  var self = this;
	  opts = opts || { closable: true };
	  var o = overlay(opts);
	  o.on('hide', function(){
	    self._overlay = null;
	    self.hide();
	  });
	  this._overlay = o;
	  return this;
	};

	/**
	 * Close the dialog when the escape key is pressed.
	 *
	 * @api public
	 */

	Dialog.prototype.escapable = function(){
	  var self = this;
	  // Save reference to remove listener later
	  self._escKeyCallback = self._escKeyCallback || function (e) {
	    e.which = e.which || e.keyCode;
	    if (27 !== e.which) return;
	    self.emit('escape');
	  };
	  events.bind(document, 'keydown', self._escKeyCallback);
	  return this;
	};

	/**
	 * Fixed dialogs position can be manipulated through CSS.
	 *
	 * @return {Dialog} for chaining
	 * @api public
	 */

	Dialog.prototype.fixed = function(){
	  this._fixed = true;
	  return this;
	}

	/**
	 * Show the dialog.
	 *
	 * Emits "show" event.
	 *
	 * @return {Dialog} for chaining
	 * @api public
	 */

	Dialog.prototype.show = function(){
	  var overlay = this._overlay;
	  var self = this;

	  // overlay
	  if (overlay) {
	    overlay.show();
	    this._classes.add('modal');
	  }

	  // escape
	  if (!overlay || overlay.closable) this.escapable();

	  // position
	  document.body.appendChild(this.el);
	  if (!this._fixed) {
	    setTimeout(function() {
	      self.el.style.marginLeft = -(self.el.offsetWidth / 2) + 'px'
	    }, 0);
	  }
	  this._classes.remove('hide');
	  this.emit('show');
	  return this;
	};

	/**
	 * Hide the overlay.
	 *
	 * @api private
	 */

	Dialog.prototype.hideOverlay = function(){
	  if (!this._overlay) return;
	  this._overlay.remove();
	  this._overlay = null;
	};

	/**
	 * Hide the dialog with optional delay of `ms`,
	 * otherwise the dialog is removed immediately.
	 *
	 * Emits "hide" event.
	 *
	 * @return {Number} ms
	 * @return {Dialog} for chaining
	 * @api public
	 */

	Dialog.prototype.hide = function(ms){
	  var self = this;

	  if (self._escKeyCallback) {
	    events.unbind(document, 'keydown', self._escKeyCallback);
	  }

	  // prevent thrashing - this isn't used
	  self.hiding = true;

	  // duration
	  if (ms) {
	    setTimeout(function(){
	      self.hide();
	    }, ms);
	    return self;
	  }

	  // hide / remove
	  self._classes.add('hide');
	  if (self._effect) {
	    setTimeout(function(){
	      self.remove();
	    }, 500);
	  } else {
	    self.remove();
	  }

	  // overlay
	  self.hideOverlay();

	  return self;
	};
	/**
	 * Hide the dialog without potential animation.
	 *
	 * @return {Dialog} for chaining
	 * @api public
	 */

	Dialog.prototype.remove = function(){
	  if (this.el.parentNode) {
	    this.emit('hide');
	    this.el.parentNode.removeChild(this.el);
	  }
	  return this;
	};


/***/ },
/* 437 */
/***/ function(module, exports) {

	
	/**
	 * Expose `parse`.
	 */

	module.exports = parse;

	/**
	 * Wrap map from jquery.
	 */

	var map = {
	  option: [1, '<select multiple="multiple">', '</select>'],
	  optgroup: [1, '<select multiple="multiple">', '</select>'],
	  legend: [1, '<fieldset>', '</fieldset>'],
	  thead: [1, '<table>', '</table>'],
	  tbody: [1, '<table>', '</table>'],
	  tfoot: [1, '<table>', '</table>'],
	  colgroup: [1, '<table>', '</table>'],
	  caption: [1, '<table>', '</table>'],
	  tr: [2, '<table><tbody>', '</tbody></table>'],
	  td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  th: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  _default: [0, '', '']
	};

	/**
	 * Parse `html` and return the children.
	 *
	 * @param {String} html
	 * @return {Array}
	 * @api private
	 */

	function parse(html) {
	  if ('string' != typeof html) throw new TypeError('String expected');

	  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

	  // tag name
	  var m = /<([\w:]+)/.exec(html);
	  if (!m) return document.createTextNode(html);
	  var tag = m[1];

	  // body support
	  if (tag == 'body') {
	    var el = document.createElement('html');
	    el.innerHTML = html;
	    return el.removeChild(el.lastChild);
	  }

	  // wrap map
	  var wrap = map[tag] || map._default;
	  var depth = wrap[0];
	  var prefix = wrap[1];
	  var suffix = wrap[2];
	  var el = document.createElement('div');
	  el.innerHTML = prefix + html + suffix;
	  while (depth--) el = el.lastChild;

	  // Note: when moving children, don't rely on el.children
	  // being 'live' to support Polymer's broken behaviour.
	  // See: https://github.com/component/domify/pull/23
	  if (1 == el.children.length) {
	    return el.removeChild(el.children[0]);
	  }

	  var fragment = document.createDocumentFragment();
	  while (el.children.length) {
	    fragment.appendChild(el.removeChild(el.children[0]));
	  }

	  return fragment;
	}


/***/ },
/* 438 */,
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
	"use strict";

	var Dialog = __webpack_require__(435);

	module.exports = MarkdownTipsDialog;

	function MarkdownTipsDialog() {
		this.template_path = 'dialogs/markdowntips.jade';
		Dialog.call(this);
	}

	MarkdownTipsDialog.prototype = Object.create(Dialog.prototype);


/***/ }
/******/ ]);